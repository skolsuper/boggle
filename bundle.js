(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SELECT_CELL = 'SELECT_CELL';
exports.SET_BOARD = 'SET_BOARD';
exports.SOLVE_PUZZLE = 'SOLVE_PUZZLE';
exports.SUBMIT_WORD = 'SUBMIT_WORD';
exports.TICK = 'TICK';
function setBoard(board) {
    return {
        board: board,
        type: exports.SET_BOARD,
    };
}
exports.setBoard = setBoard;
function selectCell(index) {
    return {
        index: index,
        type: exports.SELECT_CELL,
    };
}
exports.selectCell = selectCell;
function solvePuzzle() {
    return {
        type: exports.SOLVE_PUZZLE,
    };
}
exports.solvePuzzle = solvePuzzle;
function submitWord(word) {
    return {
        type: exports.SUBMIT_WORD,
        word: word,
    };
}
exports.submitWord = submitWord;
function tick(amount) {
    return {
        amount: amount,
        type: exports.TICK,
    };
}
exports.tick = tick;

},{}],2:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var actions_1 = require("./actions");
var BoggleApi = /** @class */ (function () {
    function BoggleApi(baseUrl, store) {
        this.baseUrl = baseUrl;
        this.store = store;
        /** A map of known actions to API urls */
        this.links = {};
    }
    BoggleApi.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, links;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch(this.baseUrl, { mode: 'cors' })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        links = (_a.sent()).links;
                        this.links = links;
                        return [2 /*return*/];
                }
            });
        });
    };
    BoggleApi.prototype.startGame = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, board, links;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.links['start-game']) {
                            throw new Error('I don\'t know how to start a game yet');
                        }
                        return [4 /*yield*/, fetch(this.links['start-game'], {
                                method: 'POST',
                                mode: 'cors',
                            })];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        _a = _b.sent(), board = _a.board, links = _a.links;
                        this.links = __assign({}, this.links, links);
                        this.store.dispatch(actions_1.setBoard(board));
                        return [2 /*return*/];
                }
            });
        });
    };
    return BoggleApi;
}());
exports.BoggleApi = BoggleApi;

},{"./actions":1}],3:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_redux_1 = require("react-redux");
var actions_1 = require("../actions");
var constants_1 = require("../../constants");
var Board_1 = __importDefault(require("./Board"));
var Countdown_1 = __importDefault(require("./Countdown"));
var Selection_1 = __importDefault(require("./Selection"));
var WordList_1 = __importDefault(require("./WordList"));
function App(props) {
    return (react_1.default.createElement("div", { className: "container" },
        react_1.default.createElement("h1", { className: "display-1 text-center" }, "Play Chaoggle"),
        react_1.default.createElement("div", { className: "row" },
            react_1.default.createElement("div", { className: "col board-container" },
                react_1.default.createElement(Board_1.default, __assign({}, props, { width: constants_1.BOARD_WIDTH, height: constants_1.BOARD_HEIGHT })),
                react_1.default.createElement(Selection_1.default, __assign({}, props))),
            react_1.default.createElement("div", { className: "col" },
                react_1.default.createElement(Countdown_1.default, { timeRemaining: props.timeRemaining }),
                react_1.default.createElement("button", { className: "btn btn-success btn-lg btn-block", onClick: props.solvePuzzle }, "Solve"),
                react_1.default.createElement(WordList_1.default, { title: "Found", words: props.words }),
                react_1.default.createElement(WordList_1.default, { title: "All words", words: props.solution })))));
}
var mapStateToProps = function (_a) {
    var availableMoves = _a.availableMoves, currentPath = _a.currentPath, board = _a.board, solution = _a.solution, timeRemaining = _a.timeRemaining, words = _a.words;
    return ({ availableMoves: availableMoves, board: board, currentPath: currentPath, solution: solution, timeRemaining: timeRemaining, words: words });
};
exports.default = react_redux_1.connect(mapStateToProps, { selectCell: actions_1.selectCell, solvePuzzle: actions_1.solvePuzzle, submitWord: actions_1.submitWord })(App);

},{"../../constants":11,"../actions":1,"./Board":4,"./Countdown":6,"./Selection":8,"./WordList":9,"react":386,"react-redux":378}],4:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = __importDefault(require("ramda"));
var react_1 = __importDefault(require("react"));
var util_1 = require("../../util");
var Row_1 = __importDefault(require("./Row"));
var Board = /** @class */ (function (_super) {
    __extends(Board, _super);
    function Board() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Board.prototype.render = function () {
        var _this = this;
        var height = this.props.height;
        return (react_1.default.createElement("table", { className: "board" },
            react_1.default.createElement("tbody", null, ramda_1.default.map(function (i) { return react_1.default.createElement(Row_1.default, __assign({}, _this.props, { key: i, row: i })); }, util_1.range(height)))));
    };
    return Board;
}(react_1.default.Component));
exports.default = Board;

},{"../../util":390,"./Row":7,"ramda":131,"react":386}],5:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = __importDefault(require("ramda"));
var react_1 = __importDefault(require("react"));
var util_1 = require("../../util");
function Cell(_a) {
    var availableMoves = _a.availableMoves, board = _a.board, index = _a.index, selectCell = _a.selectCell;
    var available = ramda_1.default.contains(index, availableMoves);
    return (react_1.default.createElement("td", { className: "boggle-cell", "data-available": available, onClick: function () { return selectCell(index); } }, util_1.getLetterFromBoard(board, index)));
}
exports.default = Cell;

},{"../../util":390,"ramda":131,"react":386}],6:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
function Countdown(_a) {
    var timeRemaining = _a.timeRemaining;
    return (react_1.default.createElement("div", { className: "timer" },
        "Time remaining: ",
        timeRemaining / 1000));
}
exports.default = Countdown;

},{"react":386}],7:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = __importDefault(require("ramda"));
var react_1 = __importDefault(require("react"));
var util_1 = require("../../util");
var Cell_1 = __importDefault(require("./Cell"));
function Row(_a) {
    var availableMoves = _a.availableMoves, board = _a.board, row = _a.row, width = _a.width, height = _a.height, selectCell = _a.selectCell;
    var childProps = { availableMoves: availableMoves, board: board, selectCell: selectCell };
    return (react_1.default.createElement("tr", null, ramda_1.default.map(function (col) { return react_1.default.createElement(Cell_1.default, __assign({}, childProps, { key: col, index: row * height + col })); }, util_1.range(width))));
}
exports.default = Row;

},{"../../util":390,"./Cell":5,"ramda":131,"react":386}],8:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var util_1 = require("../../util");
function Selection(props) {
    var board = props.board, currentPath = props.currentPath, submitWord = props.submitWord;
    var stagedWord = util_1.pathToString(board, currentPath);
    return (react_1.default.createElement("form", { onSubmit: function (e) { submitWord(stagedWord); e.preventDefault(); } },
        react_1.default.createElement("input", { type: "text", value: stagedWord }),
        react_1.default.createElement("button", { className: "btn btn-primary", type: "submit" }, "Submit")));
}
exports.default = Selection;

},{"../../util":390,"react":386}],9:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = __importDefault(require("ramda"));
var react_1 = __importDefault(require("react"));
function WordList(_a) {
    var title = _a.title, words = _a.words;
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("h2", null, (words.length) ? title : ''),
        react_1.default.createElement("ul", { className: "list-group" }, ramda_1.default.map(function (word) { return react_1.default.createElement("li", { className: "list-group-item", key: word }, word); }, words)),
        react_1.default.createElement("p", null, (words.length) ? 'Count: ' + words.length : '')));
}
exports.default = WordList;

},{"ramda":131,"react":386}],10:[function(require,module,exports){
"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = __importDefault(require("ramda"));
var react_1 = __importDefault(require("react"));
var react_dom_1 = require("react-dom");
var react_redux_1 = require("react-redux");
var redux_1 = require("redux");
var actions_1 = require("./actions");
var api_1 = require("./api");
var App_1 = __importDefault(require("./components/App"));
var constants_1 = require("../constants");
var util_1 = require("../util");
/* tslint:disable-next-line:no-var-requires */
var dictionary = require('../files/dictionary.json');
/**
 * A map of sets of words, keyed by the length of the words in the set
 * @example {
 *   3: cat,dog,foo
 *   4: bask,card,snap
 *   ...
 * }
 */
var wordsByLength = ramda_1.default.groupBy(function (word) { return word.length.toString(); }, dictionary.words);
var store = redux_1.createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());
var api = new api_1.BoggleApi("http://127.0.0.1:3000/api", store);
react_dom_1.render(react_1.default.createElement(react_redux_1.Provider, { store: store },
    react_1.default.createElement(App_1.default, null)), document.getElementById('root'));
var countdown;
api.init()
    .then(function () { return api.startGame(); })
    .then(function () { return countdown = setInterval(function () { return store.dispatch(actions_1.tick(1000)); }, 1000); });
function reducer(state, action) {
    if (state === void 0) { state = {
        availableMoves: util_1.range(constants_1.BOARD_WIDTH * constants_1.BOARD_HEIGHT),
        board: '****************',
        currentPath: [],
        gameOver: true,
        solution: [],
        timeRemaining: constants_1.GAME_TIME_MS,
        words: [],
    }; }
    switch (action.type) {
        case actions_1.SELECT_CELL:
            if (state.gameOver ||
                ramda_1.default.contains(action.index, state.currentPath) ||
                !ramda_1.default.contains(action.index, state.availableMoves)) {
                return state;
            }
            var currentPath = __spread(state.currentPath, [action.index]);
            var availableMoves = util_1.getAvailableMoves(currentPath);
            return Object.assign({}, state, { availableMoves: availableMoves, currentPath: currentPath });
        case actions_1.SET_BOARD:
            return Object.assign({}, state, {
                board: action.board,
                gameOver: false,
                timeRemaining: constants_1.GAME_TIME_MS,
                words: [],
            });
        case actions_1.SOLVE_PUZZLE:
            clearInterval(countdown);
            return Object.assign({}, state, {
                availableMoves: [],
                gameOver: true,
                solution: util_1.solve(dictionary.words, state.board),
            });
        case actions_1.SUBMIT_WORD:
            var matchingWords = util_1.getWords(wordsByLength[action.word.length], action.word);
            return Object.assign({}, state, {
                availableMoves: util_1.range(constants_1.BOARD_WIDTH * constants_1.BOARD_HEIGHT),
                currentPath: [],
                words: ramda_1.default.uniq(__spread(state.words, matchingWords)),
            });
        case actions_1.TICK:
            var timeRemaining = state.timeRemaining - action.amount;
            if (timeRemaining <= 0) {
                clearInterval(countdown);
                return Object.assign({}, state, {
                    availableMoves: [],
                    gameOver: true,
                    solution: util_1.solve(dictionary.words, state.board),
                    timeRemaining: timeRemaining,
                });
            }
            return Object.assign({}, state, { timeRemaining: timeRemaining });
        default:
            return state;
    }
}

},{"../constants":11,"../files/dictionary.json":12,"../util":390,"./actions":1,"./api":2,"./components/App":3,"ramda":131,"react":386,"react-dom":368,"react-redux":378,"redux":387}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BOARD_HEIGHT = 4;
exports.BOARD_WIDTH = 4;
exports.GAME_TIME_MS = 120 * 1000;
exports.MAX_WORD_LENGTH = 8;

},{}],12:[function(require,module,exports){
module.exports={"words":["aah","aahed","aahing","aahs","aal","aalii","aaliis","aals","aardvark","aardwolf","aargh","aarrgh","aarrghh","aas","aasvogel","aba","abaca","abacas","abaci","aback","abacus","abacuses","abaft","abaka","abakas","abalone","abalones","abamp","abampere","abamps","abandon","abandons","abapical","abas","abase","abased","abasedly","abaser","abasers","abases","abash","abashed","abashes","abashing","abasia","abasias","abasing","abatable","abate","abated","abater","abaters","abates","abating","abatis","abatises","abator","abators","abattis","abattoir","abaxial","abaxile","abba","abbacies","abbacy","abbas","abbatial","abbe","abbes","abbess","abbesses","abbey","abbeys","abbot","abbotcy","abbots","abdicate","abdomen","abdomens","abdomina","abduce","abduced","abducens","abducent","abduces","abducing","abduct","abducted","abductor","abducts","abeam","abed","abele","abeles","abelian","abelmosk","aberrant","abet","abetment","abets","abettal","abettals","abetted","abetter","abetters","abetting","abettor","abettors","abeyance","abeyancy","abeyant","abfarad","abfarads","abhenry","abhenrys","abhor","abhorred","abhorrer","abhors","abidance","abide","abided","abider","abiders","abides","abiding","abigail","abigails","ability","abioses","abiosis","abiotic","abject","abjectly","abjure","abjured","abjurer","abjurers","abjures","abjuring","ablate","ablated","ablates","ablating","ablation","ablative","ablaut","ablauts","ablaze","able","ablegate","abler","ables","ablest","ablings","ablins","abloom","abluent","abluents","ablush","abluted","ablution","ably","abmho","abmhos","abnegate","abnormal","abo","aboard","abode","aboded","abodes","aboding","abohm","abohms","aboideau","aboil","aboiteau","abolish","abolla","abollae","aboma","abomas","abomasa","abomasal","abomasi","abomasum","abomasus","aboon","aboral","aborally","aborning","abort","aborted","aborter","aborters","aborting","abortion","abortive","aborts","abos","abought","aboulia","aboulias","aboulic","abound","abounded","abounds","about","above","aboves","abrachia","abradant","abrade","abraded","abrader","abraders","abrades","abrading","abrasion","abrasive","abreact","abreacts","abreast","abri","abridge","abridged","abridger","abridges","abris","abroach","abroad","abrogate","abrosia","abrosias","abrupt","abrupter","abruptly","abscess","abscise","abscised","abscises","abscisin","abscissa","abscond","absconds","abseil","abseiled","abseils","absence","absences","absent","absented","absentee","absenter","absently","absents","absinth","absinthe","absinths","absolute","absolve","absolved","absolver","absolves","absonant","absorb","absorbed","absorber","absorbs","abstain","abstains","absterge","abstract","abstrict","abstruse","absurd","absurder","absurdly","absurds","abubble","abulia","abulias","abulic","abundant","abusable","abuse","abused","abuser","abusers","abuses","abusing","abusive","abut","abutilon","abutment","abuts","abuttal","abuttals","abutted","abutter","abutters","abutting","abuzz","abvolt","abvolts","abwatt","abwatts","aby","abye","abyes","abying","abys","abysm","abysmal","abysms","abyss","abyssal","abysses","acacia","acacias","academe","academes","academia","academic","academy","acajou","acajous","acaleph","acalephe","acalephs","acanthi","acanthus","acapnia","acapnias","acari","acarid","acaridan","acarids","acarine","acarines","acaroid","acarpous","acarus","acaudal","acaudate","acauline","acaulose","acaulous","accede","acceded","acceder","acceders","accedes","acceding","accent","accented","accentor","accents","accept","accepted","acceptee","accepter","acceptor","accepts","access","accessed","accesses","accident","accidia","accidias","accidie","accidies","acclaim","acclaims","accolade","accord","accorded","accorder","accords","accost","accosted","accosts","account","accounts","accouter","accoutre","accredit","accrete","accreted","accretes","accrual","accruals","accrue","accrued","accrues","accruing","accuracy","accurate","accursed","accurst","accusal","accusals","accusant","accuse","accused","accuser","accusers","accuses","accusing","accustom","ace","aced","acedia","acedias","aceldama","acentric","acequia","acequias","acerate","acerated","acerb","acerbate","acerber","acerbest","acerbic","acerbity","acerola","acerolas","acerose","acerous","acervate","acervuli","aces","acescent","aceta","acetal","acetals","acetamid","acetate","acetated","acetates","acetic","acetify","acetin","acetins","acetone","acetones","acetonic","acetose","acetous","acetoxyl","acetum","acetyl","acetylic","acetyls","ache","ached","achene","achenes","achenial","aches","achier","achiest","achieve","achieved","achiever","achieves","achillea","achiness","aching","achingly","achiote","achiotes","acholia","acholias","achoo","achromat","achromic","achy","acicula","aciculae","acicular","aciculas","aciculum","acid","acidemia","acidhead","acidic","acidify","acidity","acidly","acidness","acidoses","acidosis","acidotic","acids","aciduria","acidy","acierate","aciform","acinar","acing","acini","acinic","acinose","acinous","acinus","ackee","ackees","aclinic","acmatic","acme","acmes","acmic","acne","acned","acnes","acnode","acnodes","acock","acold","acolyte","acolytes","aconite","aconites","aconitic","aconitum","acorn","acorns","acoustic","acquaint","acquest","acquests","acquire","acquired","acquirer","acquires","acquit","acquits","acrasia","acrasias","acrasin","acrasins","acre","acreage","acreages","acred","acres","acrid","acrider","acridest","acridine","acridity","acridly","acrimony","acrobat","acrobats","acrodont","acrogen","acrogens","acrolein","acrolith","acromia","acromial","acromion","acronic","acronym","acronyms","acrosome","across","acrostic","acrotic","acrotism","acrylate","acrylic","acrylics","act","acta","actable","acted","actin","actinal","acting","actings","actinia","actiniae","actinian","actinias","actinic","actinide","actinism","actinium","actinoid","actinon","actinons","actins","action","actions","activate","active","actively","actives","activism","activist","activity","activize","actor","actorish","actors","actress","acts","actual","actually","actuary","actuate","actuated","actuates","actuator","acuate","acuities","acuity","aculeate","aculei","aculeus","acumen","acumens","acutance","acute","acutely","acuter","acutes","acutest","acyclic","acyl","acylate","acylated","acylates","acyloin","acyloins","acyls","adage","adages","adagial","adagio","adagios","adamance","adamancy","adamant","adamants","adamsite","adapt","adapted","adapter","adapters","adapting","adaption","adaptive","adaptor","adaptors","adapts","adaxial","add","addable","addax","addaxes","added","addedly","addend","addenda","addends","addendum","adder","adders","addible","addict","addicted","addicts","adding","addition","additive","additory","addle","addled","addles","addling","address","addrest","adds","adduce","adduced","adducent","adducer","adducers","adduces","adducing","adduct","adducted","adductor","adducts","adeem","adeemed","adeeming","adeems","adenine","adenines","adenitis","adenoid","adenoids","adenoma","adenomas","adenoses","adenosis","adenyl","adenyls","adept","adepter","adeptest","adeptly","adepts","adequacy","adequate","adhere","adhered","adherend","adherent","adherer","adherers","adheres","adhering","adhesion","adhesive","adhibit","adhibits","adieu","adieus","adieux","adios","adipic","adipose","adiposes","adiposis","adipous","adit","adits","adjacent","adjoin","adjoined","adjoins","adjoint","adjoints","adjourn","adjourns","adjudge","adjudged","adjudges","adjunct","adjuncts","adjure","adjured","adjurer","adjurers","adjures","adjuring","adjuror","adjurors","adjust","adjusted","adjuster","adjustor","adjusts","adjutant","adjuvant","adman","admass","admen","admiral","admirals","admire","admired","admirer","admirers","admires","admiring","admit","admits","admitted","admitter","admix","admixed","admixes","admixing","admixt","admonish","adnate","adnation","adnexa","adnexal","adnoun","adnouns","ado","adobe","adobes","adobo","adobos","adonis","adonises","adopt","adopted","adoptee","adoptees","adopter","adopters","adopting","adoption","adoptive","adopts","adorable","adorably","adore","adored","adorer","adorers","adores","adoring","adorn","adorned","adorner","adorners","adorning","adorns","ados","adown","adoze","adrenal","adrenals","adrift","adroit","adroiter","adroitly","ads","adscript","adsorb","adsorbed","adsorbs","adularia","adulate","adulated","adulates","adulator","adult","adultery","adultly","adults","adumbral","adunc","aduncate","aduncous","adust","advance","advanced","advancer","advances","advect","advected","advects","advent","advents","adverb","adverbs","adverse","advert","adverted","adverts","advice","advices","advise","advised","advisee","advisees","adviser","advisers","advises","advising","advisor","advisors","advisory","advocacy","advocate","advowson","adynamia","adynamic","adyta","adytum","adz","adze","adzes","aecia","aecial","aecidia","aecidial","aecidium","aecium","aedes","aedile","aediles","aedine","aegis","aegises","aeneous","aeneus","aeolian","aeon","aeonian","aeonic","aeons","aequorin","aerate","aerated","aerates","aerating","aeration","aerator","aerators","aerial","aerially","aerials","aerie","aeried","aerier","aeries","aeriest","aerified","aerifies","aeriform","aerify","aerily","aero","aerobe","aerobes","aerobia","aerobic","aerobics","aerobium","aeroduct","aerodyne","aerofoil","aerogel","aerogels","aerogram","aerolite","aerolith","aerology","aeronaut","aeronomy","aerosat","aerosats","aerosol","aerosols","aerostat","aerugo","aerugos","aery","aesthete","aestival","aether","aetheric","aethers","afar","afars","afeard","afeared","afebrile","aff","affable","affably","affair","affaire","affaires","affairs","affect","affected","affecter","affects","afferent","affiance","affiant","affiants","affiche","affiches","affinal","affine","affined","affinely","affines","affinity","affirm","affirmed","affirmer","affirms","affix","affixal","affixed","affixer","affixers","affixes","affixial","affixing","afflatus","afflict","afflicts","affluent","afflux","affluxes","afford","afforded","affords","afforest","affray","affrayed","affrayer","affrays","affright","affront","affronts","affusion","afghan","afghani","afghanis","afghans","afield","afire","aflame","afloat","aflutter","afoot","afore","afoul","afraid","afreet","afreets","afresh","afrit","afrits","aft","after","afters","aftertax","aftmost","aftosa","aftosas","aga","again","against","agalloch","agalwood","agama","agamas","agamete","agametes","agamic","agamous","agapae","agapai","agape","agapeic","agar","agaric","agarics","agarose","agaroses","agars","agas","agate","agates","agatize","agatized","agatizes","agatoid","agave","agaves","agaze","age","aged","agedly","agedness","agee","ageing","ageings","ageism","ageisms","ageist","ageists","ageless","agelong","agencies","agency","agenda","agendas","agendum","agendums","agene","agenes","ageneses","agenesia","agenesis","agenetic","agenize","agenized","agenizes","agent","agential","agentive","agentry","agents","ager","ageratum","agers","ages","aggadic","agger","aggers","aggie","aggies","aggrade","aggraded","aggrades","aggress","aggrieve","aggro","aggros","agha","aghas","aghast","agile","agilely","agility","agin","aging","agings","aginner","aginners","agio","agios","agiotage","agism","agisms","agist","agisted","agisting","agists","agitable","agitate","agitated","agitates","agitato","agitator","agitprop","aglare","agleam","aglee","aglet","aglets","agley","aglimmer","aglitter","aglow","agly","aglycon","aglycone","aglycons","agma","agmas","agminate","agnail","agnails","agnate","agnates","agnatic","agnation","agnize","agnized","agnizes","agnizing","agnomen","agnomens","agnomina","agnosia","agnosias","agnostic","ago","agog","agon","agonal","agone","agones","agonic","agonies","agonise","agonised","agonises","agonist","agonists","agonize","agonized","agonizes","agons","agony","agora","agorae","agoras","agorot","agoroth","agouti","agouties","agoutis","agouty","agrafe","agrafes","agraffe","agraffes","agrapha","agraphia","agraphic","agrarian","agravic","agree","agreed","agreeing","agrees","agrestal","agrestic","agria","agrias","agrimony","agrology","agronomy","aground","agrypnia","ague","aguelike","agues","agueweed","aguish","aguishly","aha","ahchoo","ahead","ahem","ahimsa","ahimsas","ahold","aholds","ahorse","ahoy","ahull","aiblins","aid","aide","aided","aider","aiders","aides","aidful","aiding","aidless","aidman","aidmen","aids","aiglet","aiglets","aigret","aigrets","aigrette","aiguille","aikido","aikidos","ail","ailed","aileron","ailerons","ailing","ailment","ailments","ails","aim","aimed","aimer","aimers","aimful","aimfully","aiming","aimless","aims","ain","ains","ainsell","ainsells","aioli","aiolis","air","airboat","airboats","airborne","airbound","airbrush","airburst","airbus","airbuses","aircheck","aircoach","aircraft","aircrew","aircrews","airdate","airdates","airdrome","airdrop","airdrops","aired","airer","airers","airest","airfare","airfares","airfield","airflow","airflows","airfoil","airfoils","airframe","airglow","airglows","airhead","airheads","airier","airiest","airily","airiness","airing","airings","airless","airlift","airlifts","airlike","airline","airliner","airlines","airmail","airmails","airman","airmen","airn","airns","airpark","airparks","airplane","airplay","airplays","airport","airports","airpost","airposts","airproof","airs","airscape","airscrew","airshed","airsheds","airship","airships","airsick","airspace","airspeed","airstrip","airt","airted","airth","airthed","airthing","airths","airtight","airtime","airtimes","airting","airts","airward","airwave","airwaves","airway","airways","airwise","airwoman","airwomen","airy","ais","aisle","aisled","aisles","ait","aitch","aitches","aits","aiver","aivers","ajar","ajee","ajiva","ajivas","ajowan","ajowans","ajuga","ajugas","akee","akees","akela","akelas","akene","akenes","akimbo","akin","akvavit","akvavits","ala","alack","alacrity","alae","alameda","alamedas","alamo","alamode","alamodes","alamos","alan","aland","alands","alane","alang","alanin","alanine","alanines","alanins","alans","alant","alants","alanyl","alanyls","alar","alarm","alarmed","alarming","alarmism","alarmist","alarms","alarum","alarumed","alarums","alary","alas","alaska","alaskas","alastor","alastors","alate","alated","alates","alation","alations","alb","alba","albacore","albas","albata","albatas","albedo","albedoes","albedos","albeit","albicore","albinal","albinic","albinism","albino","albinos","albite","albites","albitic","albizia","albizias","albizzia","albs","album","albumen","albumens","albumin","albumins","albumose","albums","alburnum","alcade","alcades","alcahest","alcaic","alcaics","alcaide","alcaides","alcalde","alcaldes","alcayde","alcaydes","alcazar","alcazars","alchemic","alchemy","alchymy","alcid","alcidine","alcids","alcohol","alcohols","alcove","alcoved","alcoves","aldehyde","alder","alderfly","alderman","aldermen","alders","aldol","aldolase","aldols","aldose","aldoses","aldrin","aldrins","ale","aleatory","alec","alecs","alee","alef","alefs","alegar","alegars","alehouse","alembic","alembics","alencon","alencons","aleph","alephs","alert","alerted","alerter","alertest","alerting","alertly","alerts","ales","aleuron","aleurone","aleurons","alevin","alevins","alewife","alewives","alexia","alexias","alexin","alexine","alexines","alexins","alfa","alfaki","alfakis","alfalfa","alfalfas","alfaqui","alfaquin","alfaquis","alfas","alforja","alforjas","alfresco","alga","algae","algal","algaroba","algas","algebra","algebras","algerine","algicide","algid","algidity","algin","alginate","algins","algoid","algology","algor","algorism","algors","algum","algums","alias","aliases","alibi","alibied","alibies","alibiing","alibis","alible","alidad","alidade","alidades","alidads","alien","alienage","alienate","aliened","alienee","alienees","aliener","alieners","aliening","alienism","alienist","alienly","alienor","alienors","aliens","alif","aliform","alifs","alight","alighted","alights","align","aligned","aligner","aligners","aligning","aligns","alike","aliment","aliments","alimony","aline","alined","aliner","aliners","alines","alining","aliped","alipeds","aliquant","aliquot","aliquots","alist","alit","aliunde","alive","aliya","aliyah","aliyahs","aliyas","aliyos","aliyot","alizarin","alkahest","alkali","alkalic","alkalies","alkalify","alkalin","alkaline","alkalis","alkalise","alkalize","alkaloid","alkane","alkanes","alkanet","alkanets","alkene","alkenes","alkies","alkine","alkines","alkoxy","alky","alkyd","alkyds","alkyl","alkylate","alkylic","alkyls","alkyne","alkynes","all","allanite","allay","allayed","allayer","allayers","allaying","allays","allege","alleged","alleger","allegers","alleges","alleging","allegory","allegro","allegros","allele","alleles","allelic","allelism","alleluia","allergen","allergic","allergin","allergy","alley","alleys","alleyway","allheal","allheals","alliable","alliance","allicin","allicins","allied","allies","allium","alliums","allobar","allobars","allocate","allod","allodia","allodial","allodium","allods","allogamy","allonge","allonges","allonym","allonyms","allopath","allot","allots","allotted","allottee","allotter","allotype","allotypy","allover","allovers","allow","allowed","allowing","allows","alloxan","alloxans","alloy","alloyed","alloying","alloys","alls","allseed","allseeds","allspice","allude","alluded","alludes","alluding","allure","allured","allurer","allurers","allures","alluring","allusion","allusive","alluvia","alluvial","alluvion","alluvium","ally","allying","allyl","allylic","allyls","alma","almagest","almah","almahs","almanac","almanacs","almas","alme","almeh","almehs","almemar","almemars","almes","almighty","almner","almners","almond","almonds","almoner","almoners","almonry","almost","alms","almsman","almsmen","almuce","almuces","almud","almude","almudes","almuds","almug","almugs","alnico","alnicoes","alodia","alodial","alodium","aloe","aloes","aloetic","aloft","alogical","aloha","alohas","aloin","aloins","alone","along","aloof","aloofly","alopecia","alopecic","aloud","alow","alp","alpaca","alpacas","alpha","alphabet","alphas","alphorn","alphorns","alphosis","alphyl","alphyls","alpine","alpinely","alpines","alpinism","alpinist","alps","already","alright","als","alsike","alsikes","also","alt","altar","altars","alter","alterant","altered","alterer","alterers","altering","alters","althaea","althaeas","althea","altheas","altho","althorn","althorns","although","altitude","alto","altoist","altoists","altos","altruism","altruist","alts","aludel","aludels","alula","alulae","alular","alum","alumin","alumina","aluminas","alumine","alumines","aluminic","alumins","aluminum","alumna","alumnae","alumni","alumnus","alumroot","alums","alunite","alunites","alveolar","alveoli","alveolus","alvine","alway","always","alyssum","alyssums","ama","amadavat","amadou","amadous","amah","amahs","amain","amalgam","amalgams","amandine","amanita","amanitas","amanitin","amaranth","amarelle","amaretto","amarna","amas","amass","amassed","amasser","amassers","amasses","amassing","amateur","amateurs","amative","amatol","amatols","amatory","amaze","amazed","amazedly","amazes","amazing","amazon","amazons","ambage","ambages","ambari","ambaries","ambaris","ambary","ambeer","ambeers","amber","amberies","amberoid","ambers","ambery","ambiance","ambience","ambient","ambients","ambit","ambition","ambits","ambivert","amble","ambled","ambler","amblers","ambles","ambling","ambo","amboina","amboinas","ambones","ambos","amboyna","amboynas","ambries","ambroid","ambroids","ambrosia","ambry","ambsace","ambsaces","ambulant","ambulate","ambush","ambushed","ambusher","ambushes","ameba","amebae","ameban","amebas","amebean","amebic","ameboid","ameer","ameerate","ameers","amelcorn","amen","amenable","amenably","amend","amended","amender","amenders","amending","amends","amenity","amens","ament","amentia","amentias","aments","amerce","amerced","amercer","amercers","amerces","amercing","amesace","amesaces","amethyst","ami","amia","amiable","amiably","amiantus","amias","amicable","amicably","amice","amices","amid","amidase","amidases","amide","amides","amidic","amidin","amidine","amidines","amidins","amido","amidogen","amidol","amidols","amidone","amidones","amids","amidship","amidst","amie","amies","amiga","amigas","amigo","amigos","amin","amine","amines","aminic","aminity","amino","amins","amir","amirate","amirates","amirs","amis","amiss","amities","amitoses","amitosis","amitotic","amitrole","amity","ammeter","ammeters","ammine","ammines","ammino","ammo","ammocete","ammonal","ammonals","ammonia","ammoniac","ammonias","ammonic","ammonify","ammonite","ammonium","ammono","ammonoid","ammos","amnesia","amnesiac","amnesias","amnesic","amnesics","amnestic","amnesty","amnia","amnic","amnion","amnionic","amnions","amniote","amniotes","amniotic","amoeba","amoebae","amoeban","amoebas","amoebean","amoebic","amoeboid","amok","amoks","amole","amoles","among","amongst","amoral","amorally","amoretti","amoretto","amorini","amorino","amorist","amorists","amoroso","amorous","amort","amortise","amortize","amotion","amotions","amount","amounted","amounts","amour","amours","amp","amperage","ampere","amperes","amphibia","amphioxi","amphipod","amphora","amphorae","amphoral","amphoras","ample","ampler","amplest","amplexus","amplify","amply","ampoule","ampoules","amps","ampul","ampule","ampules","ampulla","ampullae","ampullar","ampuls","amputate","amputee","amputees","amreeta","amreetas","amrita","amritas","amtrac","amtrack","amtracks","amtracs","amu","amuck","amucks","amulet","amulets","amus","amusable","amuse","amused","amusedly","amuser","amusers","amuses","amusia","amusias","amusing","amusive","amygdala","amygdale","amygdule","amyl","amylase","amylases","amylene","amylenes","amylic","amylogen","amyloid","amyloids","amylose","amyloses","amyls","amylum","amylums","ana","anabaena","anabas","anabases","anabasis","anabatic","anableps","anabolic","anaconda","anadem","anadems","anaemia","anaemias","anaemic","anaerobe","anaglyph","anagoge","anagoges","anagogic","anagogy","anagram","anagrams","anal","analcime","analcite","analecta","analects","analemma","analgia","analgias","anality","anally","analog","analogic","analogs","analogue","analogy","analyse","analysed","analyser","analyses","analysis","analyst","analysts","analytic","analyze","analyzed","analyzer","analyzes","ananke","anankes","anapaest","anapest","anapests","anaphase","anaphora","anarch","anarchic","anarchs","anarchy","anas","anasarca","anatase","anatases","anathema","anatomic","anatomy","anatoxin","anatto","anattos","ancestor","ancestry","anchor","anchored","anchoret","anchors","anchovy","anchusa","anchusas","anchusin","ancient","ancients","ancilla","ancillae","ancillas","ancon","anconal","ancone","anconeal","ancones","anconoid","ancress","and","andante","andantes","andesite","andesyte","andiron","andirons","androgen","android","androids","ands","ane","anear","aneared","anearing","anears","anecdota","anecdote","anechoic","anele","aneled","aneles","aneling","anemia","anemias","anemic","anemone","anemones","anemoses","anemosis","anenst","anent","anergia","anergias","anergic","anergies","anergy","aneroid","aneroids","anes","anestri","anestrus","anethol","anethole","anethols","aneurin","aneurins","aneurism","aneurysm","anew","anga","angakok","angakoks","angaria","angarias","angaries","angary","angas","angel","angeled","angelic","angelica","angeling","angels","angelus","anger","angered","angering","angerly","angers","angina","anginal","anginas","anginose","anginous","angioma","angiomas","angle","angled","anglepod","angler","anglers","angles","anglice","angling","anglings","angora","angoras","angrier","angriest","angrily","angry","angst","angstrom","angsts","anguine","anguish","angular","angulate","angulose","angulous","anhinga","anhingas","ani","anil","anile","anilin","aniline","anilines","anilins","anility","anils","anima","animal","animalic","animally","animals","animas","animate","animated","animater","animates","animato","animator","anime","animes","animi","animis","animism","animisms","animist","animists","animus","animuses","anion","anionic","anions","anis","anise","aniseed","aniseeds","anises","anisette","anisic","anisole","anisoles","ankerite","ankh","ankhs","ankle","ankled","ankles","anklet","anklets","ankling","ankus","ankuses","ankush","ankushes","ankylose","anlace","anlaces","anlage","anlagen","anlages","anlas","anlases","anna","annal","annalist","annals","annas","annates","annatto","annattos","anneal","annealed","annealer","anneals","annelid","annelids","annex","annexe","annexed","annexes","annexing","annotate","announce","annoy","annoyed","annoyer","annoyers","annoying","annoys","annual","annually","annuals","annuity","annul","annular","annulate","annulet","annulets","annuli","annulled","annulose","annuls","annulus","anoa","anoas","anodal","anodally","anode","anodes","anodic","anodize","anodized","anodizes","anodyne","anodynes","anodynic","anoint","anointed","anointer","anoints","anole","anoles","anolyte","anolytes","anomaly","anomic","anomie","anomies","anomy","anon","anonym","anonyms","anoopsia","anopia","anopias","anopsia","anopsias","anorak","anoraks","anoretic","anorexia","anorexic","anorexy","anorthic","anosmia","anosmias","anosmic","another","anovular","anoxemia","anoxemic","anoxia","anoxias","anoxic","ansa","ansae","ansate","ansated","anserine","anserous","answer","answered","answerer","answers","ant","anta","antacid","antacids","antae","antalgic","antas","ante","anteater","antecede","anted","antedate","anteed","antefix","antefixa","anteing","antelope","antenna","antennae","antennal","antennas","antepast","anterior","anteroom","antes","antetype","antevert","anthelia","anthelix","anthem","anthemed","anthemia","anthems","anther","antheral","antherid","anthers","antheses","anthesis","anthill","anthills","anthodia","anthoid","anthrax","anti","antiar","antiarin","antiars","antiatom","antibias","antibody","antiboss","antibug","antic","anticar","anticity","antick","anticked","anticks","anticly","anticold","antics","anticult","antidora","antidote","antifat","antifoam","antigay","antigen","antigene","antigens","antigun","antihero","antijam","antiking","antileak","antileft","antilife","antilog","antilogs","antilogy","antimale","antiman","antimask","antimere","antimony","anting","antings","antinode","antinomy","antinuke","antiphon","antipill","antipode","antipole","antipope","antipot","antipyic","antique","antiqued","antiquer","antiques","antirape","antired","antiriot","antiroll","antirust","antis","antisag","antisera","antisex","antiship","antiskid","antislip","antismog","antismut","antisnob","antistat","antitank","antitax","antitype","antiwar","antiwear","antiweed","antler","antlered","antlers","antlike","antlion","antlions","antonym","antonyms","antonymy","antra","antral","antre","antres","antrorse","antrum","antrums","ants","antsier","antsiest","antsy","anural","anuran","anurans","anureses","anuresis","anuretic","anuria","anurias","anuric","anurous","anus","anuses","anvil","anviled","anviling","anvilled","anvils","anviltop","anxiety","anxious","any","anybody","anyhow","anymore","anyone","anyplace","anything","anytime","anyway","anyways","anywhere","anywise","aorist","aoristic","aorists","aorta","aortae","aortal","aortas","aortic","aoudad","aoudads","apace","apache","apaches","apagoge","apagoges","apagogic","apanage","apanages","aparejo","aparejos","apart","apatetic","apathies","apathy","apatite","apatites","ape","apeak","aped","apeek","apelike","aper","apercu","apercus","aperient","aperies","aperitif","apers","aperture","apery","apes","apetaly","apex","apexes","aphagia","aphagias","aphanite","aphasia","aphasiac","aphasias","aphasic","aphasics","aphelia","aphelian","aphelion","apheses","aphesis","aphetic","aphid","aphides","aphidian","aphids","aphis","apholate","aphonia","aphonias","aphonic","aphonics","aphorise","aphorism","aphorist","aphorize","aphotic","aphtha","aphthae","aphthous","aphylly","apian","apiarian","apiaries","apiarist","apiary","apical","apically","apicals","apices","apiculi","apiculus","apiece","apimania","aping","apiology","apish","apishly","aplasia","aplasias","aplastic","aplenty","aplite","aplites","aplitic","aplomb","aplombs","apnea","apneal","apneas","apneic","apnoea","apnoeal","apnoeas","apnoeic","apoapsis","apocarp","apocarps","apocarpy","apocope","apocopes","apocopic","apocrine","apod","apodal","apodoses","apodosis","apodous","apods","apogamic","apogamy","apogeal","apogean","apogee","apogees","apogeic","apollo","apollos","apolog","apologal","apologia","apologs","apologue","apology","apolune","apolunes","apomict","apomicts","apomixes","apomixis","apophony","apophyge","apoplexy","aport","apospory","apostacy","apostasy","apostate","apostil","apostils","apostle","apostles","apothece","apothegm","apothem","apothems","appal","appall","appalled","appalls","appals","appanage","apparat","apparats","apparel","apparels","apparent","appeal","appealed","appealer","appeals","appear","appeared","appears","appease","appeased","appeaser","appeases","appel","appellee","appellor","appels","append","appended","appendix","appends","appestat","appetent","appetite","applaud","applauds","applause","apple","apples","applied","applier","appliers","applies","applique","apply","applying","appoint","appoints","appose","apposed","apposer","apposers","apposes","apposing","apposite","appraise","apprise","apprised","appriser","apprises","apprize","apprized","apprizer","apprizes","approach","approval","approve","approved","approver","approves","appulse","appulses","apractic","apraxia","apraxias","apraxic","apres","apricot","apricots","apron","aproned","aproning","aprons","apropos","apse","apses","apsidal","apsides","apsis","apt","apter","apteral","apteria","apterium","apterous","apteryx","aptest","aptitude","aptly","aptness","apyrase","apyrases","apyretic","aqua","aquacade","aquae","aquanaut","aquaria","aquarial","aquarian","aquarist","aquarium","aquas","aquatic","aquatics","aquatint","aquatone","aquavit","aquavits","aqueduct","aqueous","aquifer","aquifers","aquiline","aquiver","arabesk","arabesks","arabic","arabize","arabized","arabizes","arable","arables","araceous","arachnid","arak","araks","aramid","aramids","araneid","araneids","arapaima","araroba","ararobas","arb","arbalest","arbalist","arbelest","arbiter","arbiters","arbitral","arbor","arboreal","arbored","arbores","arboreta","arborist","arborize","arborous","arbors","arbour","arboured","arbours","arbs","arbuscle","arbute","arbutean","arbutes","arbutus","arc","arcade","arcaded","arcades","arcadia","arcadian","arcadias","arcading","arcana","arcane","arcanum","arcanums","arcature","arced","arch","archaic","archaise","archaism","archaist","archaize","archduke","arched","archer","archers","archery","arches","archil","archils","archine","archines","arching","archings","archival","archive","archived","archives","archly","archness","archon","archons","archway","archways","arciform","arcing","arcked","arcking","arco","arcs","arcsine","arcsines","arctic","arctics","arcuate","arcuated","arcus","arcuses","ardeb","ardebs","ardency","ardent","ardently","ardor","ardors","ardour","ardours","arduous","are","area","areae","areal","areally","areas","areaway","areaways","areca","arecas","areic","arena","arenas","arenite","arenites","arenose","arenous","areola","areolae","areolar","areolas","areolate","areole","areoles","areology","ares","arete","aretes","arethusa","arf","arfs","argal","argala","argalas","argali","argalis","argals","argent","argental","argentic","argents","argentum","argil","argils","arginase","arginine","argle","argled","argles","argling","argol","argols","argon","argonaut","argons","argosies","argosy","argot","argotic","argots","arguable","arguably","argue","argued","arguer","arguers","argues","argufied","argufier","argufies","argufy","arguing","argument","argus","arguses","argyle","argyles","argyll","argylls","arhat","arhats","aria","arias","arid","arider","aridest","aridity","aridly","aridness","ariel","ariels","arietta","ariettas","ariette","ariettes","aright","aril","ariled","arillate","arillode","arilloid","arils","ariose","ariosi","arioso","ariosos","arise","arisen","arises","arising","arista","aristae","aristas","aristate","aristo","aristos","ark","arkose","arkoses","arks","arles","arm","armada","armadas","armagnac","armament","armature","armband","armbands","armchair","armed","armer","armers","armet","armets","armful","armfuls","armhole","armholes","armies","armiger","armigero","armigers","armilla","armillae","armillas","arming","armings","armless","armlet","armlets","armlike","armload","armloads","armlock","armlocks","armoire","armoires","armonica","armor","armored","armorer","armorers","armorial","armories","armoring","armors","armory","armour","armoured","armourer","armours","armoury","armpit","armpits","armrest","armrests","arms","armsful","armure","armures","army","armyworm","arnatto","arnattos","arnica","arnicas","arnotto","arnottos","aroid","aroids","aroint","arointed","aroints","aroma","aromas","aromatic","arose","around","arousal","arousals","arouse","aroused","arouser","arousers","arouses","arousing","aroynt","aroynted","aroynts","arpeggio","arpen","arpens","arpent","arpents","arquebus","arrack","arracks","arraign","arraigns","arrange","arranged","arranger","arranges","arrant","arrantly","arras","arrased","array","arrayal","arrayals","arrayed","arrayer","arrayers","arraying","arrays","arrear","arrears","arrest","arrested","arrestee","arrester","arrestor","arrests","arrhizal","arris","arrises","arrival","arrivals","arrive","arrived","arriver","arrivers","arrives","arriving","arroba","arrobas","arrogant","arrogate","arrow","arrowed","arrowing","arrows","arrowy","arroyo","arroyos","ars","arse","arsenal","arsenals","arsenate","arsenic","arsenics","arsenide","arsenite","arseno","arsenous","arses","arshin","arshins","arsine","arsines","arsino","arsis","arson","arsonist","arsonous","arsons","art","artal","artefact","artel","artels","arterial","arteries","artery","artful","artfully","article","articled","articles","artier","artiest","artifact","artifice","artily","artiness","artisan","artisans","artist","artiste","artistes","artistic","artistry","artists","artless","arts","artsier","artsiest","artsy","artwork","artworks","arty","arugola","arugolas","arugula","arugulas","arum","arums","aruspex","arval","arvo","arvos","aryl","aryls","arythmia","arythmic","asarum","asarums","asbestic","asbestos","asbestus","ascarid","ascarids","ascaris","ascend","ascended","ascender","ascends","ascent","ascents","asceses","ascesis","ascetic","ascetics","asci","ascidia","ascidian","ascidium","ascites","ascitic","ascocarp","ascorbic","ascot","ascots","ascribe","ascribed","ascribes","ascus","asdic","asdics","asea","asepses","asepsis","aseptic","asexual","ash","ashamed","ashcan","ashcans","ashed","ashen","ashes","ashier","ashiest","ashiness","ashing","ashlar","ashlared","ashlars","ashler","ashlered","ashlers","ashless","ashman","ashmen","ashore","ashplant","ashram","ashrams","ashtray","ashtrays","ashy","aside","asides","asinine","ask","askance","askant","asked","asker","askers","askeses","askesis","askew","asking","askings","askoi","askos","asks","aslant","asleep","aslope","asocial","asp","asparkle","aspect","aspects","aspen","aspens","asper","asperate","asperges","asperity","aspers","asperse","aspersed","asperser","asperses","aspersor","asphalt","asphalts","aspheric","asphodel","asphyxia","asphyxy","aspic","aspics","aspirant","aspirata","aspirate","aspire","aspired","aspirer","aspirers","aspires","aspirin","aspiring","aspirins","aspis","aspises","aspish","asps","asquint","asrama","asramas","ass","assagai","assagais","assai","assail","assailed","assailer","assails","assais","assassin","assault","assaults","assay","assayed","assayer","assayers","assaying","assays","assegai","assegais","assemble","assembly","assent","assented","assenter","assentor","assents","assert","asserted","asserter","assertor","asserts","asses","assess","assessed","assesses","assessor","asset","assets","asshole","assholes","assign","assignat","assigned","assignee","assigner","assignor","assigns","assist","assisted","assister","assistor","assists","assize","assizes","asslike","assoil","assoiled","assoils","assonant","assort","assorted","assorter","assorts","assuage","assuaged","assuages","assume","assumed","assumer","assumers","assumes","assuming","assure","assured","assureds","assurer","assurers","assures","assuring","assuror","assurors","asswage","asswaged","asswages","astasia","astasias","astatic","astatine","aster","asteria","asterias","asterisk","asterism","astern","asternal","asteroid","asters","asthenia","asthenic","astheny","asthma","asthmas","astigmia","astir","astomous","astonied","astonies","astonish","astony","astound","astounds","astragal","astral","astrally","astrals","astray","astrict","astricts","astride","astringe","astute","astutely","astylar","asunder","aswarm","aswirl","aswoon","asyla","asylum","asylums","asyndeta","atabal","atabals","ataghan","ataghans","atalaya","atalayas","ataman","atamans","atamasco","atap","ataps","ataraxia","ataraxic","ataraxy","atavic","atavism","atavisms","atavist","atavists","ataxia","ataxias","ataxic","ataxics","ataxies","ataxy","ate","atechnic","atelic","atelier","ateliers","ates","athanasy","atheism","atheisms","atheist","atheists","atheling","atheneum","atheroma","athetoid","athirst","athlete","athletes","athletic","athodyd","athodyds","athwart","atilt","atingle","atlantes","atlas","atlases","atlatl","atlatls","atma","atman","atmans","atmas","atoll","atolls","atom","atomic","atomical","atomics","atomies","atomise","atomised","atomises","atomism","atomisms","atomist","atomists","atomize","atomized","atomizer","atomizes","atoms","atomy","atonable","atonal","atonally","atone","atoned","atoner","atoners","atones","atonic","atonics","atonies","atoning","atony","atop","atopic","atopies","atopy","atrazine","atremble","atresia","atresias","atria","atrial","atrip","atrium","atriums","atrocity","atrophia","atrophic","atrophy","atropin","atropine","atropins","atropism","attach","attache","attached","attacher","attaches","attack","attacked","attacker","attacks","attain","attained","attainer","attains","attaint","attaints","attar","attars","attemper","attempt","attempts","attend","attended","attendee","attender","attends","attent","attest","attested","attester","attestor","attests","attic","atticism","atticist","attics","attire","attired","attires","attiring","attitude","attorn","attorned","attorney","attorns","attract","attracts","attrite","attrited","attune","attuned","attunes","attuning","atwain","atween","atwitter","atypic","atypical","aubade","aubades","auberge","auberges","aubretia","aubrieta","auburn","auburns","auction","auctions","aucuba","aucubas","audacity","audad","audads","audible","audibles","audibly","audience","audient","audients","audile","audiles","auding","audings","audio","audios","audit","audited","auditing","audition","auditive","auditor","auditors","auditory","audits","augend","augends","auger","augers","aught","aughts","augite","augites","augitic","augment","augments","augur","augural","augured","augurer","augurers","auguries","auguring","augurs","augury","august","auguster","augustly","auk","auklet","auklets","auks","auld","aulder","auldest","aulic","aunt","aunthood","auntie","aunties","auntlier","auntlike","auntly","aunts","aunty","aura","aurae","aural","aurally","aurar","auras","aurate","aurated","aureate","aurei","aureola","aureolae","aureolas","aureole","aureoled","aureoles","aures","aureus","auric","auricle","auricled","auricles","auricula","auriform","auris","aurist","aurists","aurochs","aurora","aurorae","auroral","auroras","aurorean","aurous","aurum","aurums","ausform","ausforms","auspex","auspice","auspices","austere","austerer","austral","australs","ausubo","ausubos","autacoid","autarchy","autarkic","autarky","autecism","auteur","auteurs","author","authored","authors","autism","autisms","autistic","auto","autobahn","autobus","autocade","autocoid","autocrat","autodyne","autoed","autogamy","autogeny","autogiro","autogyro","autoing","autolyze","automan","automata","automate","automen","autonomy","autopsic","autopsy","autos","autosome","autotomy","autotype","autotypy","autumn","autumnal","autumns","autunite","auxeses","auxesis","auxetic","auxetics","auxin","auxinic","auxins","ava","avadavat","avail","availed","availing","avails","avarice","avarices","avast","avatar","avatars","avaunt","ave","avellan","avellane","avenge","avenged","avenger","avengers","avenges","avenging","avens","avenses","aventail","avenue","avenues","aver","average","averaged","averages","averment","averred","averring","avers","averse","aversely","aversion","aversive","avert","averted","averting","averts","aves","avgas","avgases","avgasses","avian","avianize","avians","aviaries","aviarist","aviary","aviate","aviated","aviates","aviating","aviation","aviator","aviators","aviatrix","avicular","avid","avidin","avidins","avidity","avidly","avidness","avifauna","avigator","avion","avionic","avionics","avions","aviso","avisos","avo","avocado","avocados","avocet","avocets","avodire","avodires","avoid","avoided","avoider","avoiders","avoiding","avoids","avos","avoset","avosets","avouch","avouched","avoucher","avouches","avow","avowable","avowably","avowal","avowals","avowed","avowedly","avower","avowers","avowing","avows","avulse","avulsed","avulses","avulsing","avulsion","awa","await","awaited","awaiter","awaiters","awaiting","awaits","awake","awaked","awaken","awakened","awakener","awakens","awakes","awaking","award","awarded","awardee","awardees","awarder","awarders","awarding","awards","aware","awash","away","awayness","awe","aweary","aweather","awed","awee","aweigh","aweing","aweless","awes","awesome","awful","awfuller","awfully","awhile","awhirl","awing","awkward","awl","awless","awls","awlwort","awlworts","awmous","awn","awned","awning","awninged","awnings","awnless","awns","awny","awoke","awoken","awol","awols","awry","axal","axe","axed","axel","axels","axeman","axemen","axenic","axes","axial","axiality","axially","axil","axile","axilla","axillae","axillar","axillars","axillary","axillas","axils","axing","axiology","axiom","axioms","axis","axised","axises","axite","axites","axle","axled","axles","axletree","axlike","axman","axmen","axolotl","axolotls","axon","axonal","axone","axonemal","axoneme","axonemes","axones","axonic","axons","axoplasm","axseed","axseeds","ayah","ayahs","aye","ayes","ayin","ayins","ays","ayurveda","azalea","azaleas","azan","azans","azide","azides","azido","azimuth","azimuths","azine","azines","azlon","azlons","azo","azoic","azole","azoles","azon","azonal","azonic","azons","azote","azoted","azotemia","azotemic","azotes","azoth","azoths","azotic","azotise","azotised","azotises","azotize","azotized","azotizes","azoturia","azure","azures","azurite","azurites","azygos","azygoses","azygous","baa","baaed","baaing","baal","baalim","baalism","baalisms","baals","baas","baases","baaskaap","baba","babas","babassu","babassus","babbitt","babbitts","babble","babbled","babbler","babblers","babbles","babbling","babe","babel","babels","babes","babesia","babesias","babiche","babiches","babied","babies","babirusa","babka","babkas","baboo","babool","babools","baboon","baboons","baboos","babu","babul","babuls","babus","babushka","baby","babyhood","babying","babyish","bacalao","bacalaos","bacca","baccae","baccara","baccaras","baccarat","baccate","baccated","bacchant","bacchic","bacchii","bacchius","bach","bached","bachelor","baches","baching","bacillar","bacilli","bacillus","back","backache","backbeat","backbend","backbit","backbite","backbone","backcast","backchat","backdate","backdoor","backdrop","backed","backer","backers","backfill","backfire","backhand","backhaul","backhoe","backhoes","backing","backings","backlash","backless","backlist","backlit","backlog","backlogs","backmost","backout","backouts","backpack","backrest","backrush","backs","backsaw","backsaws","backseat","backset","backsets","backside","backslap","backslid","backspin","backstay","backstop","backup","backups","backward","backwash","backwood","backwrap","backyard","bacon","bacons","bacteria","bacterin","bacula","baculine","baculum","baculums","bad","badass","badassed","badasses","badder","baddest","baddie","baddies","baddy","bade","badge","badged","badger","badgered","badgerly","badgers","badges","badging","badinage","badland","badlands","badly","badman","badmen","badmouth","badness","bads","baff","baffed","baffies","baffing","baffle","baffled","baffler","bafflers","baffles","baffling","baffs","baffy","bag","bagass","bagasse","bagasses","bagel","bagels","bagful","bagfuls","baggage","baggages","bagged","bagger","baggers","baggie","baggier","baggies","baggiest","baggily","bagging","baggings","baggy","bagman","bagmen","bagnio","bagnios","bagpipe","bagpiper","bagpipes","bags","bagsful","baguet","baguets","baguette","bagwig","bagwigs","bagworm","bagworms","bah","bahadur","bahadurs","baht","bahts","baidarka","bail","bailable","bailed","bailee","bailees","bailer","bailers","bailey","baileys","bailie","bailies","bailiff","bailiffs","bailing","bailment","bailor","bailors","bailout","bailouts","bails","bailsman","bailsmen","bairn","bairnish","bairnly","bairns","bait","baited","baiter","baiters","baith","baiting","baits","baiza","baizas","baize","baizes","bake","baked","bakemeat","baker","bakeries","bakers","bakery","bakes","bakeshop","baking","bakings","baklava","baklavas","baklawa","baklawas","bakshish","bal","balance","balanced","balancer","balances","balas","balases","balata","balatas","balboa","balboas","balcony","bald","balded","balder","baldest","baldhead","baldies","balding","baldish","baldly","baldness","baldpate","baldric","baldrick","baldrics","balds","baldy","bale","baled","baleen","baleens","balefire","baleful","baler","balers","bales","baling","balisaur","balk","balked","balker","balkers","balkier","balkiest","balkily","balking","balkline","balks","balky","ball","ballad","ballade","ballades","balladic","balladry","ballads","ballast","ballasts","balled","baller","ballers","ballet","balletic","ballets","ballgame","ballhawk","ballies","balling","ballista","ballon","ballonet","ballonne","ballons","balloon","balloons","ballot","balloted","balloter","ballots","ballpark","ballroom","balls","ballsier","ballsy","ballute","ballutes","bally","ballyhoo","ballyrag","balm","balmier","balmiest","balmily","balmlike","balmoral","balms","balmy","balneal","baloney","baloneys","bals","balsa","balsam","balsamed","balsamic","balsams","balsas","baluster","bam","bambini","bambino","bambinos","bamboo","bamboos","bammed","bamming","bams","ban","banal","banality","banalize","banally","banana","bananas","banausic","banco","bancos","band","bandage","bandaged","bandager","bandages","bandana","bandanas","bandanna","bandbox","bandeau","bandeaus","bandeaux","banded","bander","banderol","banders","bandied","bandies","banding","bandit","banditry","bandits","banditti","bandog","bandogs","bandora","bandoras","bandore","bandores","bands","bandsman","bandsmen","bandy","bandying","bane","baned","baneful","banes","bang","banged","banger","bangers","banging","bangkok","bangkoks","bangle","bangles","bangs","bangtail","bani","banian","banians","baning","banish","banished","banisher","banishes","banister","banjo","banjoes","banjoist","banjos","bank","bankable","bankbook","bankcard","banked","banker","bankers","banking","bankings","banknote","bankroll","bankrupt","banks","banksia","banksias","bankside","banned","banner","banneret","bannerol","banners","bannet","bannets","banning","bannock","bannocks","banns","banquet","banquets","bans","banshee","banshees","banshie","banshies","bantam","bantams","banter","bantered","banterer","banters","banties","bantling","banty","banyan","banyans","banzai","banzais","baobab","baobabs","baptise","baptised","baptises","baptisia","baptism","baptisms","baptist","baptists","baptize","baptized","baptizer","baptizes","bar","barathea","barb","barbal","barbaric","barbasco","barbate","barbe","barbecue","barbed","barbel","barbell","barbells","barbels","barbeque","barber","barbered","barberry","barbers","barbes","barbet","barbets","barbette","barbican","barbicel","barbing","barbital","barbless","barbs","barbule","barbules","barbut","barbuts","barbwire","barchan","barchans","bard","barde","barded","bardes","bardic","barding","bards","bare","bareback","bareboat","bared","barefit","barefoot","barege","bareges","barehead","barely","bareness","barer","bares","baresark","barest","barf","barfed","barfing","barflies","barfly","barfs","bargain","bargains","barge","barged","bargee","bargees","bargello","bargeman","bargemen","barges","barghest","barging","barguest","barhop","barhops","baric","barilla","barillas","baring","barite","barites","baritone","barium","bariums","bark","barked","barkeep","barkeeps","barker","barkers","barkier","barkiest","barking","barkless","barks","barky","barleduc","barless","barley","barleys","barlow","barlows","barm","barmaid","barmaids","barman","barmen","barmie","barmier","barmiest","barms","barmy","barn","barnacle","barnier","barniest","barnlike","barns","barny","barnyard","barogram","baron","baronage","baroness","baronet","baronets","barong","barongs","baronial","baronies","baronne","baronnes","barons","barony","baroque","baroques","barouche","barque","barques","barrable","barrack","barracks","barrage","barraged","barrages","barranca","barranco","barrater","barrator","barratry","barre","barred","barrel","barreled","barrels","barren","barrener","barrenly","barrens","barres","barret","barretor","barretry","barrets","barrette","barrier","barriers","barring","barrio","barrios","barroom","barrooms","barrow","barrows","bars","barstool","bartend","bartends","barter","bartered","barterer","barters","bartisan","bartizan","barware","barwares","barye","baryes","baryon","baryonic","baryons","baryta","barytas","baryte","barytes","barytic","barytone","bas","basal","basally","basalt","basaltes","basaltic","basalts","bascule","bascules","base","baseball","baseborn","based","baseless","baseline","basely","baseman","basemen","basement","baseness","basenji","basenjis","baser","bases","basest","bash","bashaw","bashaws","bashed","basher","bashers","bashes","bashful","bashing","bashlyk","bashlyks","basic","basicity","basics","basidia","basidial","basidium","basified","basifier","basifies","basify","basil","basilar","basilary","basilic","basilica","basilisk","basils","basin","basinal","basined","basinet","basinets","basing","basins","basion","basions","basis","bask","basked","basket","basketry","baskets","basking","basks","basophil","basque","basques","bass","basses","basset","basseted","bassets","bassi","bassinet","bassist","bassists","bassly","bassness","basso","bassoon","bassoons","bassos","basswood","bassy","bast","bastard","bastards","bastardy","baste","basted","baster","basters","bastes","bastile","bastiles","bastille","basting","bastings","bastion","bastions","basts","bat","batboy","batboys","batch","batched","batcher","batchers","batches","batching","bate","bateau","bateaux","bated","bates","batfish","batfowl","batfowls","bath","bathe","bathed","bather","bathers","bathes","bathetic","bathing","bathless","bathmat","bathmats","bathos","bathoses","bathrobe","bathroom","baths","bathtub","bathtubs","bathyal","batik","batiks","bating","batiste","batistes","batlike","batman","batmen","baton","batons","bats","batsman","batsmen","batt","battalia","batteau","batteaux","batted","batten","battened","battener","battens","batter","battered","batterie","batters","battery","battier","battiest","battik","battiks","batting","battings","battle","battled","battler","battlers","battles","battling","batts","battu","battue","battues","batty","batwing","baubee","baubees","bauble","baubles","baud","baudekin","baudrons","bauds","bauhinia","baulk","baulked","baulkier","baulking","baulks","baulky","bausond","bauxite","bauxites","bauxitic","bawbee","bawbees","bawcock","bawcocks","bawd","bawdier","bawdies","bawdiest","bawdily","bawdric","bawdrics","bawdries","bawdry","bawds","bawdy","bawl","bawled","bawler","bawlers","bawling","bawls","bawsunt","bawtie","bawties","bawty","bay","bayadeer","bayadere","bayamo","bayamos","bayard","bayards","bayberry","bayed","baying","bayonet","bayonets","bayou","bayous","bays","baywood","baywoods","bazaar","bazaars","bazar","bazars","bazoo","bazooka","bazookas","bazooms","bazoos","bdellium","beach","beachboy","beached","beaches","beachier","beaching","beachy","beacon","beaconed","beacons","bead","beaded","beadier","beadiest","beadily","beading","beadings","beadle","beadles","beadlike","beadman","beadmen","beadroll","beads","beadsman","beadsmen","beadwork","beady","beagle","beagles","beak","beaked","beaker","beakers","beakier","beakiest","beakless","beaklike","beaks","beaky","beam","beamed","beamier","beamiest","beamily","beaming","beamish","beamless","beamlike","beams","beamy","bean","beanbag","beanbags","beanball","beaned","beanery","beanie","beanies","beaning","beanlike","beano","beanos","beanpole","beans","bear","bearable","bearably","bearcat","bearcats","beard","bearded","bearding","beards","bearer","bearers","bearhug","bearhugs","bearing","bearings","bearish","bearlike","bears","bearskin","bearwood","beast","beastie","beasties","beastly","beasts","beat","beatable","beaten","beater","beaters","beatific","beatify","beating","beatings","beatless","beatnik","beatniks","beats","beau","beauish","beaus","beaut","beauties","beautify","beauts","beauty","beaux","beaver","beavered","beavers","bebeeru","bebeerus","beblood","bebloods","bebop","bebopper","bebops","becalm","becalmed","becalms","became","becap","becapped","becaps","becarpet","because","bechalk","bechalks","bechamel","bechance","becharm","becharms","beck","becked","becket","beckets","becking","beckon","beckoned","beckoner","beckons","becks","beclamor","beclasp","beclasps","becloak","becloaks","beclog","beclogs","beclothe","becloud","beclouds","beclown","beclowns","become","becomes","becoming","becoward","becrawl","becrawls","becrime","becrimed","becrimes","becrowd","becrowds","becrust","becrusts","becudgel","becurse","becursed","becurses","becurst","bed","bedabble","bedamn","bedamned","bedamns","bedarken","bedaub","bedaubed","bedaubs","bedazzle","bedbug","bedbugs","bedchair","bedcover","beddable","bedded","bedder","bedders","bedding","beddings","bedeafen","bedeck","bedecked","bedecks","bedel","bedell","bedells","bedels","bedeman","bedemen","bedesman","bedesmen","bedevil","bedevils","bedew","bedewed","bedewing","bedews","bedfast","bedframe","bedgown","bedgowns","bediaper","bedight","bedights","bedim","bedimmed","bedimple","bedims","bedirty","bedizen","bedizens","bedlam","bedlamp","bedlamps","bedlams","bedless","bedlike","bedmaker","bedmate","bedmates","bedotted","bedouin","bedouins","bedpan","bedpans","bedplate","bedpost","bedposts","bedquilt","bedrail","bedrails","bedrape","bedraped","bedrapes","bedrench","bedrid","bedrivel","bedrock","bedrocks","bedroll","bedrolls","bedroom","bedrooms","bedrug","bedrugs","beds","bedsheet","bedside","bedsides","bedsonia","bedsore","bedsores","bedstand","bedstead","bedstraw","bedtick","bedticks","bedtime","bedtimes","beduin","beduins","bedumb","bedumbed","bedumbs","bedunce","bedunced","bedunces","bedward","bedwards","bedwarf","bedwarfs","bee","beebee","beebees","beebread","beech","beechen","beeches","beechier","beechnut","beechy","beef","beefalo","beefalos","beefcake","beefed","beefier","beefiest","beefily","beefing","beefless","beefs","beefwood","beefy","beehive","beehives","beelike","beeline","beelines","been","beep","beeped","beeper","beepers","beeping","beeps","beer","beerier","beeriest","beers","beery","bees","beeswax","beeswing","beet","beetle","beetled","beetler","beetlers","beetles","beetling","beetroot","beets","beeves","beezer","beezers","befall","befallen","befalls","befell","befinger","befit","befits","befitted","beflag","beflags","beflea","befleaed","befleas","befleck","beflecks","beflower","befog","befogged","befogs","befool","befooled","befools","before","befoul","befouled","befouler","befouls","befret","befrets","befriend","befringe","befuddle","beg","begall","begalled","begalls","began","begat","begaze","begazed","begazes","begazing","beget","begets","begetter","beggar","beggared","beggarly","beggars","beggary","begged","begging","begin","beginner","begins","begird","begirded","begirdle","begirds","begirt","beglad","beglads","begloom","beglooms","begone","begonia","begonias","begorah","begorra","begorrah","begot","begotten","begrim","begrime","begrimed","begrimes","begrims","begroan","begroans","begrudge","begs","beguile","beguiled","beguiler","beguiles","beguine","beguines","begulf","begulfed","begulfs","begum","begums","begun","behalf","behalves","behave","behaved","behaver","behavers","behaves","behaving","behavior","behead","beheaded","beheads","beheld","behemoth","behest","behests","behind","behinds","behold","beholden","beholder","beholds","behoof","behoove","behooved","behooves","behove","behoved","behoves","behoving","behowl","behowled","behowls","beige","beiges","beignet","beignets","beigy","being","beings","bejabers","bejesus","bejewel","bejewels","bejumble","bekiss","bekissed","bekisses","beknight","beknot","beknots","bel","belabor","belabors","belabour","belaced","beladied","beladies","belady","belated","belaud","belauded","belauds","belay","belayed","belaying","belays","belch","belched","belcher","belchers","belches","belching","beldam","beldame","beldames","beldams","beleap","beleaped","beleaps","beleapt","belfried","belfries","belfry","belga","belgas","belie","belied","belief","beliefs","belier","beliers","belies","believe","believed","believer","believes","belike","beliquor","belittle","belive","bell","bellbird","bellboy","bellboys","belle","belled","belleek","belleeks","belles","bellhop","bellhops","bellied","bellies","belling","bellman","bellmen","bellow","bellowed","bellower","bellows","bellpull","bells","bellwort","belly","bellyful","bellying","belong","belonged","belongs","beloved","beloveds","below","belows","bels","belt","belted","belting","beltings","beltless","beltline","belts","beltway","beltways","beluga","belugas","belying","bema","bemadam","bemadams","bemadden","bemas","bemata","bemean","bemeaned","bemeans","bemingle","bemire","bemired","bemires","bemiring","bemist","bemisted","bemists","bemix","bemixed","bemixes","bemixing","bemixt","bemoan","bemoaned","bemoans","bemock","bemocked","bemocks","bemuddle","bemurmur","bemuse","bemused","bemuses","bemusing","bemuzzle","ben","bename","benamed","benames","benaming","bench","benched","bencher","benchers","benches","benching","bend","bendable","benday","bendayed","bendays","bended","bendee","bendees","bender","benders","bending","bends","bendways","bendwise","bendy","bendys","bene","beneath","benedick","benedict","benefic","benefice","benefit","benefits","benempt","benes","benign","benignly","benison","benisons","benjamin","benne","bennes","bennet","bennets","benni","bennies","bennis","benny","benomyl","benomyls","bens","bent","benthal","benthic","benthos","bents","bentwood","benumb","benumbed","benumbs","benzal","benzene","benzenes","benzidin","benzin","benzine","benzines","benzins","benzoate","benzoic","benzoin","benzoins","benzol","benzole","benzoles","benzols","benzoyl","benzoyls","benzyl","benzylic","benzyls","bepaint","bepaints","bepimple","bequeath","bequest","bequests","berake","beraked","berakes","beraking","berascal","berate","berated","berates","berating","berberin","berceuse","berdache","bereave","bereaved","bereaver","bereaves","bereft","beret","berets","beretta","berettas","berg","bergamot","bergere","bergeres","bergs","berhyme","berhymed","berhymes","beriberi","berime","berimed","berimes","beriming","beringed","berlin","berline","berlines","berlins","berm","berme","bermes","berms","bermudas","bernicle","berobed","berouged","berretta","berried","berries","berry","berrying","berseem","berseems","berserk","berserks","berth","bertha","berthas","berthed","berthing","berths","beryl","beryline","beryls","bescorch","bescour","bescours","bescreen","beseech","beseem","beseemed","beseems","beset","besets","besetter","beshadow","beshame","beshamed","beshames","beshiver","beshout","beshouts","beshrew","beshrews","beshroud","beside","besides","besiege","besieged","besieger","besieges","beslaved","beslime","beslimed","beslimes","besmear","besmears","besmile","besmiled","besmiles","besmirch","besmoke","besmoked","besmokes","besmooth","besmudge","besmut","besmuts","besnow","besnowed","besnows","besom","besoms","besoothe","besot","besots","besotted","besought","bespake","bespeak","bespeaks","bespoke","bespoken","bespouse","bespread","besprent","best","bestead","besteads","bested","bestial","bestiary","besting","bestir","bestirs","bestow","bestowal","bestowed","bestows","bestrew","bestrewn","bestrews","bestrid","bestride","bestrode","bestrow","bestrown","bestrows","bests","bestud","bestuds","beswarm","beswarms","bet","beta","betaine","betaines","betake","betaken","betakes","betaking","betas","betatron","betatter","betaxed","betel","betelnut","betels","beth","bethank","bethanks","bethel","bethels","bethesda","bethink","bethinks","bethorn","bethorns","beths","bethump","bethumps","betide","betided","betides","betiding","betime","betimes","betise","betises","betoken","betokens","beton","betonies","betons","betony","betook","betray","betrayal","betrayed","betrayer","betrays","betroth","betroths","bets","betta","bettas","betted","better","bettered","betters","betting","bettor","bettors","between","betwixt","beuncled","bevatron","bevel","beveled","beveler","bevelers","beveling","bevelled","beveller","bevels","beverage","bevies","bevomit","bevomits","bevor","bevors","bevy","bewail","bewailed","bewailer","bewails","beware","bewared","bewares","bewaring","beweary","beweep","beweeps","bewept","bewig","bewigged","bewigs","bewilder","bewinged","bewitch","beworm","bewormed","beworms","beworry","bewrap","bewraps","bewrapt","bewray","bewrayed","bewrayer","bewrays","bey","beylic","beylics","beylik","beyliks","beyond","beyonds","beys","bezant","bezants","bezazz","bezazzes","bezel","bezels","bezil","bezils","bezique","beziques","bezoar","bezoars","bezzant","bezzants","bhakta","bhaktas","bhakti","bhaktis","bhang","bhangs","bheestie","bheesty","bhistie","bhisties","bhoot","bhoots","bhut","bhuts","biacetyl","biali","bialis","bialy","bialys","biannual","bias","biased","biasedly","biases","biasing","biasness","biassed","biasses","biassing","biathlon","biaxal","biaxial","bib","bibasic","bibb","bibbed","bibber","bibbers","bibbery","bibbing","bibbs","bibcock","bibcocks","bibelot","bibelots","bible","bibles","bibless","biblical","biblike","biblist","biblists","bibs","bibulous","bicarb","bicarbs","bicaudal","bice","biceps","bicepses","bices","bichrome","bicker","bickered","bickerer","bickers","bicolor","bicolors","bicolour","biconvex","bicorn","bicorne","bicornes","bicron","bicrons","bicuspid","bicycle","bicycled","bicycler","bicycles","bicyclic","bid","bidarka","bidarkas","bidarkee","biddable","biddably","bidden","bidder","bidders","biddies","bidding","biddings","biddy","bide","bided","bidental","bider","biders","bides","bidet","bidets","biding","bids","bield","bielded","bielding","bields","biennale","biennia","biennial","biennium","bier","biers","biface","bifaces","bifacial","biff","biffed","biffies","biffin","biffing","biffins","biffs","biffy","bifid","bifidity","bifidly","bifilar","biflex","bifocal","bifocals","bifold","biforate","biforked","biform","biformed","big","bigamies","bigamist","bigamous","bigamy","bigarade","bigaroon","bigeminy","bigeye","bigeyes","bigfeet","bigfoot","bigfoots","bigger","biggest","biggety","biggie","biggies","biggin","bigging","biggings","biggins","biggish","biggity","bighead","bigheads","bighorn","bighorns","bight","bighted","bighting","bights","bigly","bigmouth","bigness","bignonia","bigot","bigoted","bigotry","bigots","bigwig","bigwigs","bihourly","bijou","bijous","bijoux","bijugate","bijugous","bike","biked","biker","bikers","bikes","bikeway","bikeways","bikie","bikies","biking","bikini","bikinied","bikinis","bilabial","bilander","bilayer","bilayers","bilberry","bilbo","bilboa","bilboas","bilboes","bilbos","bile","biles","bilge","bilged","bilges","bilgier","bilgiest","bilging","bilgy","biliary","bilinear","bilious","bilk","bilked","bilker","bilkers","bilking","bilks","bill","billable","billbug","billbugs","billed","biller","billers","billet","billeted","billeter","billets","billfish","billfold","billhead","billhook","billiard","billie","billies","billing","billings","billion","billions","billon","billons","billow","billowed","billows","billowy","bills","billy","billycan","bilobate","bilobed","bilsted","bilsteds","biltong","biltongs","bima","bimah","bimahs","bimanous","bimanual","bimas","bimbo","bimboes","bimbos","bimensal","bimester","bimetal","bimetals","bimethyl","bimodal","bimorph","bimorphs","bin","binal","binaries","binary","binate","binately","binaural","bind","bindable","binder","binders","bindery","bindi","binding","bindings","bindis","bindle","bindles","binds","bindweed","bine","bines","binge","binged","bingeing","binges","binging","bingo","bingos","binit","binits","binnacle","binned","binning","binocle","binocles","binocs","binomial","bins","bint","bints","bio","bioassay","biocidal","biocide","biocides","bioclean","biocycle","bioethic","biogas","biogases","biogen","biogenic","biogens","biogeny","bioherm","bioherms","biologic","biology","biolyses","biolysis","biolytic","biomass","biome","biomes","biometry","bionic","bionics","bionomic","bionomy","biont","biontic","bionts","bioplasm","biopsic","biopsies","biopsy","bioptic","bios","bioscope","bioscopy","biota","biotas","biotech","biotechs","biotic","biotical","biotics","biotin","biotins","biotite","biotites","biotitic","biotope","biotopes","biotoxin","biotron","biotrons","biotype","biotypes","biotypic","biovular","bipack","bipacks","biparous","biparted","biparty","biped","bipedal","bipeds","biphenyl","biplane","biplanes","bipod","bipods","bipolar","biracial","biradial","biramose","biramous","birch","birched","birchen","birches","birching","bird","birdbath","birdcage","birdcall","birded","birder","birders","birdfarm","birdie","birdied","birdies","birding","birdings","birdlike","birdlime","birdman","birdmen","birds","birdseed","birdseye","birdshot","bireme","biremes","biretta","birettas","birk","birkie","birkies","birks","birl","birle","birled","birler","birlers","birles","birling","birlings","birls","birr","birred","birretta","birring","birrotch","birrs","birse","birses","birth","birthday","birthed","birthing","births","bis","biscuit","biscuits","bise","bisect","bisected","bisector","bisects","bises","bisexual","bishop","bishoped","bishops","bisk","bisks","bismuth","bismuths","bisnaga","bisnagas","bison","bisons","bisque","bisques","bistate","bister","bistered","bisters","bistort","bistorts","bistoury","bistre","bistred","bistres","bistro","bistroic","bistros","bit","bitable","bitch","bitched","bitchery","bitches","bitchier","bitchily","bitching","bitchy","bite","biteable","biter","biters","bites","bitewing","biting","bitingly","bits","bitstock","bitsy","bitt","bitted","bitten","bitter","bittered","bitterer","bitterly","bittern","bitterns","bitters","bittier","bittiest","bitting","bittings","bittock","bittocks","bitts","bitty","bitumen","bitumens","biunique","bivalent","bivalve","bivalved","bivalves","bivinyl","bivinyls","bivouac","bivouacs","biweekly","biyearly","biz","bizarre","bizarres","bize","bizes","biznaga","biznagas","bizonal","bizone","bizones","blab","blabbed","blabber","blabbers","blabbing","blabby","blabs","black","blackboy","blackcap","blacked","blacken","blackens","blacker","blackest","blackfin","blackfly","blackgum","blacking","blackish","blackleg","blackly","blackout","blacks","blacktop","bladder","bladders","bladdery","blade","bladed","blades","blae","blah","blahs","blain","blains","blam","blamable","blamably","blame","blamed","blameful","blamer","blamers","blames","blaming","blams","blanch","blanched","blancher","blanches","bland","blander","blandest","blandish","blandly","blank","blanked","blanker","blankest","blanket","blankets","blanking","blankly","blanks","blare","blared","blares","blaring","blarney","blarneys","blase","blast","blasted","blastema","blaster","blasters","blastie","blastier","blasties","blasting","blastoff","blastoma","blasts","blastula","blasty","blat","blatancy","blatant","blate","blather","blathers","blats","blatted","blatter","blatters","blatting","blaubok","blauboks","blaw","blawed","blawing","blawn","blaws","blaze","blazed","blazer","blazers","blazes","blazing","blazon","blazoned","blazoner","blazonry","blazons","bleach","bleached","bleacher","bleaches","bleak","bleaker","bleakest","bleakish","bleakly","bleaks","blear","bleared","blearier","blearily","blearing","blears","bleary","bleat","bleated","bleater","bleaters","bleating","bleats","bleb","blebby","blebs","bled","bleed","bleeder","bleeders","bleeding","bleeds","bleep","bleeped","bleeping","bleeps","blellum","blellums","blemish","blench","blenched","blencher","blenches","blend","blende","blended","blender","blenders","blendes","blending","blends","blennies","blenny","blent","blesbok","blesboks","blesbuck","bless","blessed","blesser","blessers","blesses","blessing","blest","blet","blether","blethers","blets","blew","blight","blighted","blighter","blights","blighty","blimey","blimp","blimpish","blimps","blimy","blin","blind","blindage","blinded","blinder","blinders","blindest","blinding","blindly","blinds","blini","blinis","blink","blinkard","blinked","blinker","blinkers","blinking","blinks","blintz","blintze","blintzes","blip","blipped","blipping","blips","bliss","blissed","blisses","blissful","blissing","blister","blisters","blistery","blite","blites","blithe","blithely","blither","blithers","blithest","blitz","blitzed","blitzes","blitzing","blizzard","bloat","bloated","bloater","bloaters","bloating","bloats","blob","blobbed","blobbing","blobs","bloc","block","blockade","blockage","blocked","blocker","blockers","blockier","blocking","blockish","blocks","blocky","blocs","bloke","blokes","blond","blonde","blonder","blondes","blondest","blondish","blonds","blood","blooded","bloodfin","bloodied","bloodier","bloodies","bloodily","blooding","bloodred","bloods","bloody","blooey","blooie","bloom","bloomed","bloomer","bloomers","bloomery","bloomier","blooming","blooms","bloomy","bloop","blooped","blooper","bloopers","blooping","bloops","blossom","blossoms","blossomy","blot","blotch","blotched","blotches","blotchy","blotless","blots","blotted","blotter","blotters","blottier","blotting","blotto","blotty","blouse","bloused","blouses","blousier","blousily","blousing","blouson","blousons","blousy","bloviate","blow","blowback","blowball","blowby","blowbys","blowed","blower","blowers","blowfish","blowfly","blowgun","blowguns","blowhard","blowhole","blowier","blowiest","blowing","blowjob","blowjobs","blown","blowoff","blowoffs","blowout","blowouts","blowpipe","blows","blowsed","blowsier","blowsily","blowsy","blowtube","blowup","blowups","blowy","blowzed","blowzier","blowzily","blowzy","blubber","blubbers","blubbery","blucher","bluchers","bludgeon","blue","blueball","bluebell","bluebill","bluebird","bluebook","bluecap","bluecaps","bluecoat","blued","bluefin","bluefins","bluefish","bluegill","bluegum","bluegums","bluehead","blueing","blueings","blueish","bluejack","bluejay","bluejays","blueline","bluely","blueness","bluenose","bluer","blues","bluesier","bluesman","bluesmen","bluest","bluestem","bluesy","bluet","bluets","blueweed","bluewood","bluey","blueys","bluff","bluffed","bluffer","bluffers","bluffest","bluffing","bluffly","bluffs","bluing","bluings","bluish","blume","blumed","blumes","bluming","blunder","blunders","blunge","blunged","blunger","blungers","blunges","blunging","blunt","blunted","blunter","bluntest","blunting","bluntly","blunts","blur","blurb","blurbed","blurbing","blurbs","blurred","blurrier","blurrily","blurring","blurry","blurs","blurt","blurted","blurter","blurters","blurting","blurts","blush","blushed","blusher","blushers","blushes","blushful","blushing","bluster","blusters","blustery","blype","blypes","boa","boar","board","boarded","boarder","boarders","boarding","boardman","boardmen","boards","boarfish","boarish","boars","boart","boarts","boas","boast","boasted","boaster","boasters","boastful","boasting","boasts","boat","boatable","boatbill","boated","boatel","boatels","boater","boaters","boathook","boating","boatings","boatload","boatman","boatmen","boats","boatsman","boatsmen","boatyard","bob","bobbed","bobber","bobbers","bobbery","bobbies","bobbin","bobbinet","bobbing","bobbins","bobble","bobbled","bobbles","bobbling","bobby","bobcat","bobcats","bobeche","bobeches","bobolink","bobs","bobsled","bobsleds","bobstay","bobstays","bobtail","bobtails","bobwhite","bocaccio","bocce","bocces","bocci","boccia","boccias","boccie","boccies","boccis","boche","boches","bock","bocks","bod","bode","boded","bodega","bodegas","bodement","bodes","bodice","bodices","bodied","bodies","bodiless","bodily","boding","bodingly","bodings","bodkin","bodkins","bods","body","bodying","bodysuit","bodysurf","bodywork","boehmite","boff","boffin","boffins","boffo","boffola","boffolas","boffos","boffs","bog","bogan","bogans","bogbean","bogbeans","bogey","bogeyed","bogeying","bogeyman","bogeymen","bogeys","bogged","boggier","boggiest","bogging","boggish","boggle","boggled","boggler","bogglers","boggles","boggling","boggy","bogie","bogies","bogle","bogles","bogs","bogus","bogwood","bogwoods","bogy","bogyism","bogyisms","bogyman","bogymen","bohea","boheas","bohemia","bohemian","bohemias","bohunk","bohunks","boil","boilable","boiled","boiler","boilers","boiling","boiloff","boiloffs","boils","boing","boiserie","boite","boites","bola","bolar","bolas","bolases","bold","bolder","boldest","boldface","boldly","boldness","bole","bolero","boleros","boles","bolete","boletes","boleti","boletus","bolide","bolides","bolivar","bolivars","bolivia","bolivias","boll","bollard","bollards","bolled","bolling","bollix","bollixed","bollixes","bollocks","bollox","bolloxed","bolloxes","bolls","bollworm","bolo","bologna","bolognas","boloney","boloneys","bolos","bolshie","bolshies","bolshy","bolson","bolsons","bolster","bolsters","bolt","bolted","bolter","bolters","bolthead","bolthole","bolting","boltonia","boltrope","bolts","bolus","boluses","bomb","bombard","bombards","bombast","bombasts","bombax","bombe","bombed","bomber","bombers","bombes","bombesin","bombing","bombings","bombload","bombs","bombycid","bombyx","bombyxes","bonaci","bonacis","bonanza","bonanzas","bonbon","bonbons","bond","bondable","bondage","bondages","bonded","bonder","bonders","bonding","bondings","bondmaid","bondman","bondmen","bonds","bondsman","bondsmen","bonduc","bonducs","bone","boned","bonefish","bonehead","boneless","bonemeal","boner","boners","bones","boneset","bonesets","boney","boneyard","bonfire","bonfires","bong","bonged","bonging","bongo","bongoes","bongoist","bongos","bongs","bonhomie","bonier","boniest","boniface","boniness","boning","bonita","bonitas","bonito","bonitoes","bonitos","bonk","bonked","bonkers","bonking","bonks","bonne","bonnes","bonnet","bonneted","bonnets","bonnie","bonnier","bonniest","bonnily","bonnock","bonnocks","bonny","bonsai","bonspell","bonspiel","bontebok","bonus","bonuses","bony","bonze","bonzer","bonzes","boo","boob","boobed","boobie","boobies","boobing","boobish","booboo","booboos","boobs","booby","boodle","boodled","boodler","boodlers","boodles","boodling","booed","booger","boogers","boogie","boogied","boogies","boogy","boogying","boogyman","boogymen","boohoo","boohooed","boohoos","booing","book","bookcase","booked","bookend","bookends","booker","bookers","bookful","bookfuls","bookie","bookies","booking","bookings","bookish","booklet","booklets","booklice","booklore","bookman","bookmark","bookmen","bookrack","bookrest","books","bookshop","bookworm","boom","boombox","boomed","boomer","boomers","boomier","boomiest","booming","boomkin","boomkins","boomlet","boomlets","booms","boomtown","boomy","boon","boondock","boonies","boons","boor","boorish","boors","boos","boost","boosted","booster","boosters","boosting","boosts","boot","booted","bootee","bootees","bootery","booth","booths","bootie","booties","booting","bootjack","bootlace","bootleg","bootlegs","bootless","bootlick","boots","booty","booze","boozed","boozer","boozers","boozes","boozier","booziest","boozily","boozing","boozy","bop","bopped","bopper","boppers","bopping","bops","bora","boraces","boracic","boracite","borage","borages","boral","borals","borane","boranes","boras","borate","borated","borates","borating","borax","boraxes","bordeaux","bordel","bordello","bordels","border","bordered","borderer","borders","bordure","bordures","bore","boreal","borecole","bored","boredom","boredoms","boreen","boreens","borehole","borer","borers","bores","boresome","boric","boride","borides","boring","boringly","borings","born","borne","borneol","borneols","bornite","bornites","boron","boronic","borons","borough","boroughs","borrow","borrowed","borrower","borrows","borsch","borsches","borscht","borschts","borsht","borshts","borstal","borstals","bort","borts","borty","bortz","bortzes","borzoi","borzois","bos","boscage","boscages","boschbok","bosh","boshbok","boshboks","boshes","boshvark","bosk","boskage","boskages","bosker","bosket","boskets","boskier","boskiest","bosks","bosky","bosom","bosomed","bosoming","bosoms","bosomy","boson","bosons","bosque","bosques","bosquet","bosquets","boss","bossdom","bossdoms","bossed","bosses","bossier","bossies","bossiest","bossily","bossing","bossism","bossisms","bossy","boston","bostons","bosun","bosuns","bot","bota","botanic","botanica","botanies","botanise","botanist","botanize","botany","botas","botch","botched","botcher","botchers","botchery","botches","botchier","botchily","botching","botchy","botel","botels","botflies","botfly","both","bother","bothered","bothers","bothies","bothria","bothrium","bothy","botonee","botonnee","botryoid","botryose","botrytis","bots","bott","bottle","bottled","bottler","bottlers","bottles","bottling","bottom","bottomed","bottomer","bottomry","bottoms","botts","botulin","botulins","botulism","boubou","boubous","bouchee","bouchees","boucle","boucles","boudoir","boudoirs","bouffant","bouffe","bouffes","bough","boughed","boughpot","boughs","bought","boughten","bougie","bougies","bouillon","boulder","boulders","bouldery","boule","boules","boulle","boulles","bounce","bounced","bouncer","bouncers","bounces","bouncier","bouncily","bouncing","bouncy","bound","boundary","bounded","bounden","bounder","bounders","bounding","bounds","bountied","bounties","bounty","bouquet","bouquets","bourbon","bourbons","bourdon","bourdons","bourg","bourgeon","bourgs","bourn","bourne","bournes","bourns","bourree","bourrees","bourride","bourse","bourses","bourtree","bouse","boused","bouses","bousing","bousouki","bousy","bout","boutique","bouton","boutons","bouts","bouvier","bouviers","bouzouki","bovid","bovids","bovine","bovinely","bovines","bovinity","bow","bowed","bowel","boweled","boweling","bowelled","bowels","bower","bowered","boweries","bowering","bowers","bowery","bowfin","bowfins","bowfront","bowhead","bowheads","bowing","bowingly","bowings","bowknot","bowknots","bowl","bowlder","bowlders","bowled","bowleg","bowlegs","bowler","bowlers","bowless","bowlful","bowlfuls","bowlike","bowline","bowlines","bowling","bowlings","bowllike","bowls","bowman","bowmen","bowpot","bowpots","bows","bowse","bowsed","bowses","bowshot","bowshots","bowsing","bowsprit","bowwow","bowwowed","bowwows","bowyer","bowyers","box","boxberry","boxboard","boxcar","boxcars","boxed","boxer","boxers","boxes","boxfish","boxful","boxfuls","boxhaul","boxhauls","boxier","boxiest","boxiness","boxing","boxings","boxlike","boxthorn","boxwood","boxwoods","boxy","boy","boyar","boyard","boyards","boyarism","boyars","boychick","boychik","boychiks","boycott","boycotts","boyhood","boyhoods","boyish","boyishly","boyla","boylas","boyo","boyos","boys","bozo","bozos","bra","brabble","brabbled","brabbler","brabbles","brace","braced","bracelet","bracer","bracero","braceros","bracers","braces","brach","braches","brachet","brachets","brachia","brachial","brachium","brachs","bracing","bracings","braciola","braciole","bracken","brackens","bracket","brackets","brackish","braconid","bract","bracteal","bracted","bractlet","bracts","brad","bradawl","bradawls","bradded","bradding","bradoon","bradoons","brads","brae","braes","brag","braggart","bragged","bragger","braggers","braggest","braggier","bragging","braggy","brags","brahma","brahmas","braid","braided","braider","braiders","braiding","braids","brail","brailed","brailing","braille","brailled","brailles","brails","brain","brained","brainier","brainily","braining","brainish","brainpan","brains","brainy","braise","braised","braises","braising","braize","braizes","brake","brakeage","braked","brakeman","brakemen","brakes","brakier","brakiest","braking","braky","braless","bramble","brambled","brambles","brambly","bran","branch","branched","branches","branchia","branchy","brand","branded","brander","branders","brandied","brandies","branding","brandish","brands","brandy","brank","branks","branned","branner","branners","brannier","branning","branny","brans","brant","brantail","brants","bras","brash","brasher","brashes","brashest","brashier","brashly","brashy","brasier","brasiers","brasil","brasilin","brasils","brass","brassage","brassard","brassart","brassed","brasses","brassica","brassie","brassier","brassies","brassily","brassing","brassish","brassy","brat","brats","brattice","brattier","brattish","brattle","brattled","brattles","bratty","braunite","brava","bravado","bravados","bravas","brave","braved","bravely","braver","bravers","bravery","braves","bravest","bravi","braving","bravo","bravoed","bravoes","bravoing","bravos","bravura","bravuras","bravure","braw","brawer","brawest","brawl","brawled","brawler","brawlers","brawlie","brawlier","brawling","brawls","brawly","brawn","brawnier","brawnily","brawns","brawny","braws","braxies","braxy","bray","brayed","brayer","brayers","braying","brays","braza","brazas","braze","brazed","brazen","brazened","brazenly","brazens","brazer","brazers","brazes","brazier","braziers","brazil","brazilin","brazils","brazing","breach","breached","breacher","breaches","bread","breadbox","breaded","breading","breadnut","breads","breadth","breadths","break","breakage","breaker","breakers","breaking","breakout","breaks","breakup","breakups","bream","breamed","breaming","breams","breast","breasted","breasts","breath","breathe","breathed","breather","breathes","breaths","breathy","breccia","breccial","breccias","brecham","brechams","brechan","brechans","bred","brede","bredes","bree","breech","breeched","breeches","breed","breeder","breeders","breeding","breeds","breeks","brees","breeze","breezed","breezes","breezier","breezily","breezing","breezy","bregma","bregmata","bregmate","bren","brens","brent","brents","brethren","breve","breves","brevet","brevetcy","breveted","brevets","breviary","brevier","breviers","brevity","brew","brewage","brewages","brewed","brewer","brewers","brewery","brewing","brewings","brewis","brewises","brews","briar","briard","briards","briars","briary","bribable","bribe","bribed","bribee","bribees","briber","bribers","bribery","bribes","bribing","brick","brickbat","bricked","brickier","bricking","brickle","brickles","bricks","bricky","bricole","bricoles","bridal","bridally","bridals","bride","brides","bridge","bridged","bridges","bridging","bridle","bridled","bridler","bridlers","bridles","bridling","bridoon","bridoons","brie","brief","briefed","briefer","briefers","briefest","briefing","briefly","briefs","brier","briers","briery","bries","brig","brigade","brigaded","brigades","brigand","brigands","bright","brighten","brighter","brightly","brights","brigs","brill","brills","brim","brimful","brimfull","brimless","brimmed","brimmer","brimmers","brimming","brims","brin","brinded","brindle","brindled","brindles","brine","brined","briner","briners","brines","bring","bringer","bringers","bringing","brings","brinier","brinies","briniest","brining","brinish","brink","brinks","brins","briny","brio","brioche","brioches","brionies","briony","brios","briquet","briquets","bris","brisance","brisant","brisk","brisked","brisker","briskest","brisket","briskets","brisking","briskly","brisks","brisling","brisses","bristle","bristled","bristles","bristly","bristol","bristols","brit","britches","brits","britska","britskas","britt","brittle","brittled","brittler","brittles","brittly","britts","britzka","britzkas","britzska","broach","broached","broacher","broaches","broad","broadax","broadaxe","broaden","broadens","broader","broadest","broadish","broadly","broads","brocade","brocaded","brocades","brocatel","broccoli","broche","brochure","brock","brockage","brocket","brockets","brocks","brocoli","brocolis","brogan","brogans","brogue","broguery","brogues","broguish","broider","broiders","broidery","broil","broiled","broiler","broilers","broiling","broils","brokage","brokages","broke","broken","brokenly","broker","brokered","brokers","brollies","brolly","bromal","bromals","bromate","bromated","bromates","brome","bromelin","bromes","bromic","bromid","bromide","bromides","bromidic","bromids","bromin","bromine","bromines","bromins","bromism","bromisms","bromize","bromized","bromizes","bromo","bromos","bronc","bronchi","bronchia","broncho","bronchos","bronchus","bronco","broncos","broncs","bronze","bronzed","bronzer","bronzers","bronzes","bronzier","bronzing","bronzy","broo","brooch","brooches","brood","brooded","brooder","brooders","broodier","broodily","brooding","broods","broody","brook","brooked","brooking","brookite","brooklet","brooks","broom","broomed","broomier","brooming","brooms","broomy","broos","brose","broses","brosy","broth","brothel","brothels","brother","brothers","broths","brothy","brougham","brought","brouhaha","brow","browband","browbeat","browless","brown","browned","browner","brownest","brownie","brownier","brownies","browning","brownish","brownout","browns","browny","brows","browse","browsed","browser","browsers","browses","browsing","brr","brrr","brucella","brucin","brucine","brucines","brucins","brugh","brughs","bruin","bruins","bruise","bruised","bruiser","bruisers","bruises","bruising","bruit","bruited","bruiter","bruiters","bruiting","bruits","brulot","brulots","brulyie","brulyies","brulzie","brulzies","brumal","brumbies","brumby","brume","brumes","brumous","brunch","brunched","brunches","brunet","brunets","brunette","brunizem","brunt","brunts","brush","brushed","brusher","brushers","brushes","brushier","brushing","brushoff","brushup","brushups","brushy","brusk","brusker","bruskest","brusque","brusquer","brut","brutal","brutally","brute","bruted","brutely","brutes","brutify","bruting","brutish","brutism","brutisms","bruxism","bruxisms","bryology","bryonies","bryony","bryozoan","bub","bubal","bubale","bubales","bubaline","bubalis","bubals","bubbies","bubble","bubbled","bubbler","bubblers","bubbles","bubblier","bubblies","bubbling","bubbly","bubby","bubinga","bubingas","bubo","buboed","buboes","bubonic","bubs","buccal","buccally","buck","buckaroo","buckayro","buckbean","bucked","buckeen","buckeens","bucker","buckeroo","buckers","bucket","bucketed","buckets","buckeye","buckeyes","bucking","buckish","buckle","buckled","buckler","bucklers","buckles","buckling","bucko","buckoes","buckra","buckram","buckrams","buckras","bucks","bucksaw","bucksaws","buckshee","buckshot","buckskin","bucktail","bucolic","bucolics","bud","budded","budder","budders","buddied","buddies","budding","buddings","buddle","buddleia","buddles","buddy","buddying","budge","budged","budger","budgers","budges","budget","budgeted","budgeter","budgets","budgie","budgies","budging","budless","budlike","buds","budworm","budworms","buff","buffable","buffalo","buffalos","buffed","buffer","buffered","buffers","buffet","buffeted","buffeter","buffets","buffi","buffier","buffiest","buffing","buffo","buffoon","buffoons","buffos","buffs","buffy","bug","bugaboo","bugaboos","bugbane","bugbanes","bugbear","bugbears","bugeye","bugeyes","bugged","bugger","buggered","buggers","buggery","buggier","buggies","buggiest","bugging","buggy","bughouse","bugle","bugled","bugler","buglers","bugles","bugling","bugloss","bugs","bugseed","bugseeds","bugsha","bugshas","buhl","buhls","buhlwork","buhr","buhrs","build","builded","builder","builders","building","builds","buildup","buildups","built","buirdly","bulb","bulbar","bulbed","bulbel","bulbels","bulbil","bulbils","bulblet","bulblets","bulbous","bulbs","bulbul","bulbuls","bulge","bulged","bulger","bulgers","bulges","bulgier","bulgiest","bulging","bulgur","bulgurs","bulgy","bulimia","bulimiac","bulimias","bulimic","bulk","bulkage","bulkages","bulked","bulkhead","bulkier","bulkiest","bulkily","bulking","bulks","bulky","bull","bulla","bullace","bullaces","bullae","bullate","bullbat","bullbats","bulldog","bulldogs","bulldoze","bulled","bullet","bulleted","bulletin","bullets","bullfrog","bullhead","bullhorn","bullied","bullier","bullies","bulliest","bulling","bullion","bullions","bullish","bullneck","bullnose","bullock","bullocks","bullocky","bullous","bullpen","bullpens","bullpout","bullring","bullrush","bulls","bullshit","bullshot","bullweed","bullwhip","bully","bullyboy","bullying","bullyrag","bulrush","bulwark","bulwarks","bum","bumble","bumbled","bumbler","bumblers","bumbles","bumbling","bumboat","bumboats","bumf","bumfs","bumkin","bumkins","bummed","bummer","bummers","bummest","bumming","bump","bumped","bumper","bumpered","bumpers","bumph","bumphs","bumpier","bumpiest","bumpily","bumping","bumpkin","bumpkins","bumps","bumpy","bums","bun","bunch","bunched","bunches","bunchier","bunchily","bunching","bunchy","bunco","buncoed","buncoing","buncombe","buncos","bund","bundist","bundists","bundle","bundled","bundler","bundlers","bundles","bundling","bunds","bundt","bundts","bung","bungalow","bunged","bunghole","bunging","bungle","bungled","bungler","bunglers","bungles","bungling","bungs","bunion","bunions","bunk","bunked","bunker","bunkered","bunkers","bunking","bunkmate","bunko","bunkoed","bunkoing","bunkos","bunks","bunkum","bunkums","bunn","bunnies","bunns","bunny","bunraku","bunrakus","buns","bunt","bunted","bunter","bunters","bunting","buntings","buntline","bunts","bunya","bunyas","buoy","buoyage","buoyages","buoyance","buoyancy","buoyant","buoyed","buoying","buoys","buqsha","buqshas","bur","bura","buran","burans","buras","burble","burbled","burbler","burblers","burbles","burblier","burbling","burbly","burbot","burbots","burbs","burd","burden","burdened","burdener","burdens","burdie","burdies","burdock","burdocks","burds","bureau","bureaus","bureaux","buret","burets","burette","burettes","burg","burgage","burgages","burgee","burgees","burgeon","burgeons","burger","burgers","burgess","burgh","burghal","burgher","burghers","burghs","burglar","burglars","burglary","burgle","burgled","burgles","burgling","burgonet","burgoo","burgoos","burgout","burgouts","burgrave","burgs","burgundy","burial","burials","buried","burier","buriers","buries","burin","burins","burke","burked","burker","burkers","burkes","burking","burkite","burkites","burl","burlap","burlaps","burled","burler","burlers","burlesk","burlesks","burley","burleys","burlier","burliest","burlily","burling","burls","burly","burn","burnable","burned","burner","burners","burnet","burnets","burnie","burnies","burning","burnings","burnish","burnoose","burnous","burnout","burnouts","burns","burnt","burp","burped","burping","burps","burr","burred","burrer","burrers","burrier","burriest","burring","burrito","burritos","burro","burros","burrow","burrowed","burrower","burrows","burrs","burry","burs","bursa","bursae","bursal","bursar","bursars","bursary","bursas","bursate","burse","burseed","burseeds","bursera","burses","bursitis","burst","bursted","burster","bursters","bursting","burstone","bursts","burthen","burthens","burton","burtons","burweed","burweeds","bury","burying","bus","busbar","busbars","busbies","busboy","busboys","busby","bused","buses","bush","bushbuck","bushed","bushel","busheled","busheler","bushels","busher","bushers","bushes","bushfire","bushgoat","bushido","bushidos","bushier","bushiest","bushily","bushing","bushings","bushland","bushless","bushlike","bushman","bushmen","bushtit","bushtits","bushwa","bushwah","bushwahs","bushwas","bushy","busied","busier","busies","busiest","busily","business","busing","busings","busk","busked","busker","buskers","buskin","buskined","busking","buskins","busks","busman","busmen","buss","bussed","busses","bussing","bussings","bust","bustard","bustards","busted","buster","busters","bustic","bustics","bustier","bustiers","bustiest","busting","bustle","bustled","bustles","bustling","busts","busty","busulfan","busy","busybody","busying","busyness","busywork","but","butane","butanes","butanol","butanols","butanone","butch","butcher","butchers","butchery","butches","butene","butenes","buteo","buteos","butle","butled","butler","butlers","butlery","butles","butling","buts","butt","buttals","butte","butted","butter","buttered","butters","buttery","buttes","butties","butting","buttock","buttocks","button","buttoned","buttoner","buttons","buttony","buttress","butts","butty","butut","bututs","butyl","butylate","butylene","butyls","butyral","butyrals","butyrate","butyric","butyrin","butyrins","butyrous","butyryl","butyryls","buxom","buxomer","buxomest","buxomly","buy","buyable","buyback","buybacks","buyer","buyers","buying","buyout","buyouts","buys","buzuki","buzukia","buzukis","buzz","buzzard","buzzards","buzzed","buzzer","buzzers","buzzes","buzzing","buzzwig","buzzwigs","buzzword","bwana","bwanas","bye","byelaw","byelaws","byes","bygone","bygones","bylaw","bylaws","byline","bylined","byliner","byliners","bylines","bylining","byname","bynames","bypass","bypassed","bypasses","bypast","bypath","bypaths","byplay","byplays","byre","byres","byrl","byrled","byrling","byrls","byrnie","byrnies","byroad","byroads","bys","byssi","byssus","byssuses","bystreet","bytalk","bytalks","byte","bytes","byway","byways","byword","bywords","bywork","byworks","byzant","byzants","cab","cabal","cabala","cabalas","cabalism","cabalist","caballed","cabals","cabana","cabanas","cabaret","cabarets","cabbage","cabbaged","cabbages","cabbala","cabbalah","cabbalas","cabbed","cabbie","cabbies","cabbing","cabby","caber","cabernet","cabers","cabestro","cabezon","cabezone","cabezons","cabildo","cabildos","cabin","cabined","cabinet","cabinets","cabining","cabins","cable","cabled","cables","cablet","cablets","cableway","cabling","cabman","cabmen","cabob","cabobs","caboched","cabochon","cabomba","cabombas","caboodle","caboose","cabooses","caboshed","cabotage","cabresta","cabresto","cabretta","cabrilla","cabriole","cabs","cabstand","caca","cacao","cacaos","cacas","cachalot","cache","cached","cachepot","caches","cachet","cacheted","cachets","cachexia","cachexic","cachexy","caching","cachou","cachous","cachucha","cacique","caciques","cackle","cackled","cackler","cacklers","cackles","cackling","cacodyl","cacodyls","cacomixl","cacti","cactoid","cactus","cactuses","cad","cadaster","cadastre","cadaver","cadavers","caddice","caddices","caddie","caddied","caddies","caddis","caddises","caddish","caddy","caddying","cade","cadelle","cadelles","cadence","cadenced","cadences","cadency","cadent","cadenza","cadenzas","cades","cadet","cadets","cadge","cadged","cadger","cadgers","cadges","cadging","cadgy","cadi","cadis","cadmic","cadmium","cadmiums","cadre","cadres","cads","caducean","caducei","caduceus","caducity","caducous","caeca","caecal","caecally","caecum","caeoma","caeomas","caesar","caesars","caesium","caesiums","caestus","caesura","caesurae","caesural","caesuras","caesuric","cafe","cafes","caffein","caffeine","caffeins","caftan","caftans","cage","caged","cageful","cagefuls","cageling","cager","cagers","cages","cagey","cagier","cagiest","cagily","caginess","caging","cagy","cahier","cahiers","cahoot","cahoots","cahow","cahows","caid","caids","caiman","caimans","cain","cains","caique","caiques","caird","cairds","cairn","cairned","cairns","cairny","caisson","caissons","caitiff","caitiffs","cajaput","cajaputs","cajeput","cajeputs","cajole","cajoled","cajoler","cajolers","cajolery","cajoles","cajoling","cajon","cajones","cajuput","cajuputs","cake","caked","cakes","cakewalk","cakey","cakier","cakiest","caking","caky","calabash","caladium","calamar","calamari","calamars","calamary","calami","calamine","calamint","calamite","calamity","calamus","calando","calash","calashes","calathi","calathos","calathus","calcanea","calcanei","calcar","calcaria","calcars","calceate","calces","calcic","calcific","calcify","calcine","calcined","calcines","calcite","calcites","calcitic","calcium","calciums","calcspar","calctufa","calctuff","calculi","calculus","caldaria","caldera","calderas","caldron","caldrons","caleche","caleches","calendal","calendar","calender","calends","calesa","calesas","calf","calflike","calfs","calfskin","caliber","calibers","calibre","calibred","calibres","calices","caliche","caliches","calicle","calicles","calico","calicoes","calicos","calif","califate","califs","calipash","calipee","calipees","caliper","calipers","caliph","caliphal","caliphs","calisaya","calix","calk","calked","calker","calkers","calkin","calking","calkins","calks","call","calla","callable","callaloo","callan","callans","callant","callants","callas","callback","callboy","callboys","called","caller","callers","callet","callets","calling","callings","calliope","callipee","calliper","callose","calloses","callous","callow","callower","calls","callus","callused","calluses","calm","calmed","calmer","calmest","calming","calmly","calmness","calms","calomel","calomels","caloric","calorics","calorie","calories","calorize","calory","calotte","calottes","caloyer","caloyers","calpac","calpack","calpacks","calpacs","calque","calqued","calques","calquing","calthrop","caltrap","caltraps","caltrop","caltrops","calumet","calumets","calumny","calutron","calvados","calvaria","calvary","calve","calved","calves","calving","calx","calxes","calycate","calyceal","calyces","calycine","calycle","calycles","calyculi","calypso","calypsos","calypter","calyptra","calyx","calyxes","calzone","calzones","cam","camail","camailed","camails","camas","camases","camass","camasses","camber","cambered","cambers","cambia","cambial","cambism","cambisms","cambist","cambists","cambium","cambiums","cambogia","cambric","cambrics","came","camel","cameleer","camelia","camelias","camellia","camels","cameo","cameoed","cameoing","cameos","camera","camerae","cameral","cameras","cames","camion","camions","camisa","camisade","camisado","camisas","camise","camises","camisia","camisias","camisole","camlet","camlets","camomile","camorra","camorras","camp","campagna","campagne","campaign","camped","camper","campers","campfire","camphene","camphine","camphire","camphol","camphols","camphor","camphors","campi","campier","campiest","campily","camping","campings","campion","campions","campo","campong","campongs","camporee","campos","camps","campsite","campus","campused","campuses","campy","cams","camshaft","can","canaille","canakin","canakins","canal","canaled","canaling","canalise","canalize","canalled","canaller","canals","canape","canapes","canard","canards","canaries","canary","canasta","canastas","cancan","cancans","cancel","canceled","canceler","cancels","cancer","cancers","cancha","canchas","cancroid","candela","candelas","candent","candid","candida","candidas","candider","candidly","candids","candied","candies","candle","candled","candler","candlers","candles","candling","candor","candors","candour","candours","candy","candying","cane","caned","canella","canellas","canephor","caner","caners","canes","caneware","canfield","canful","canfuls","cangue","cangues","canid","canids","canikin","canikins","canine","canines","caning","caninity","canister","canities","canker","cankered","cankers","canna","cannabic","cannabin","cannabis","cannas","canned","cannel","cannelon","cannels","canner","canners","cannery","cannibal","cannie","cannier","canniest","cannikin","cannily","canning","cannings","cannoli","cannon","cannoned","cannonry","cannons","cannot","cannula","cannulae","cannular","cannulas","canny","canoe","canoed","canoeing","canoeist","canoes","canon","canoness","canonic","canonise","canonist","canonize","canonry","canons","canoodle","canopied","canopies","canopy","canorous","cans","cansful","canso","cansos","canst","cant","cantala","cantalas","cantata","cantatas","cantdog","cantdogs","canted","canteen","canteens","canter","cantered","canters","canthal","canthi","canthus","cantic","canticle","cantina","cantinas","canting","cantle","cantles","canto","canton","cantonal","cantoned","cantons","cantor","cantors","cantos","cantraip","cantrap","cantraps","cantrip","cantrips","cants","cantus","canty","canula","canulae","canulas","canulate","canvas","canvased","canvaser","canvases","canvass","canyon","canyons","canzona","canzonas","canzone","canzones","canzonet","canzoni","cap","capable","capabler","capably","capacity","cape","caped","capelan","capelans","capelet","capelets","capelin","capelins","caper","capered","caperer","caperers","capering","capers","capes","capeskin","capework","capful","capfuls","caph","caphs","capias","capiases","capita","capital","capitals","capitate","capitol","capitols","capitula","capless","caplet","caplets","caplin","caplins","capmaker","capo","capon","caponata","caponier","caponize","capons","caporal","caporals","capos","capote","capotes","capouch","capped","capper","cappers","capping","cappings","capric","capricci","caprice","caprices","caprifig","caprine","capriole","capris","caprock","caprocks","caps","capsicin","capsicum","capsid","capsidal","capsids","capsize","capsized","capsizes","capsomer","capstan","capstans","capstone","capsular","capsule","capsuled","capsules","captain","captains","captan","captans","caption","captions","captious","captive","captives","captor","captors","capture","captured","capturer","captures","capuche","capuched","capuches","capuchin","caput","capybara","car","carabao","carabaos","carabid","carabids","carabin","carabine","carabins","caracal","caracals","caracara","carack","caracks","caracol","caracole","caracols","caracul","caraculs","carafe","carafes","caragana","carageen","caramba","caramel","caramels","carangid","carapace","carapax","carassow","carat","carate","carates","carats","caravan","caravans","caravel","caravels","caraway","caraways","carb","carbamic","carbamyl","carbarn","carbarns","carbaryl","carbide","carbides","carbine","carbines","carbinol","carbolic","carbon","carbonic","carbons","carbonyl","carbora","carboras","carboxyl","carboy","carboyed","carboys","carbs","carburet","carcajou","carcanet","carcase","carcases","carcass","carcel","carcels","card","cardamom","cardamon","cardamum","cardcase","carded","carder","carders","cardia","cardiac","cardiacs","cardiae","cardias","cardigan","cardinal","carding","cardings","cardioid","carditic","carditis","cardoon","cardoons","cards","care","cared","careen","careened","careener","careens","career","careered","careerer","careers","carefree","careful","careless","carer","carers","cares","caress","caressed","caresser","caresses","caret","caretake","caretook","carets","careworn","carex","carfare","carfares","carful","carfuls","cargo","cargoes","cargos","carhop","carhops","caribe","caribes","caribou","caribous","carices","caried","caries","carillon","carina","carinae","carinal","carinas","carinate","caring","carioca","cariocas","cariole","carioles","carious","caritas","cark","carked","carking","carks","carl","carle","carles","carless","carlin","carline","carlines","carling","carlings","carlins","carlish","carload","carloads","carls","carmaker","carman","carmen","carmine","carmines","carn","carnage","carnages","carnal","carnally","carnauba","carnet","carnets","carney","carneys","carnie","carnies","carnify","carnival","carns","carny","caroach","carob","carobs","caroch","caroche","caroches","carol","caroled","caroler","carolers","caroli","caroling","carolled","caroller","carols","carolus","carom","caromed","caroming","caroms","carotene","carotid","carotids","carotin","carotins","carousal","carouse","caroused","carousel","carouser","carouses","carp","carpal","carpale","carpalia","carpals","carped","carpel","carpels","carper","carpers","carpet","carpeted","carpets","carpi","carping","carpings","carpool","carpools","carport","carports","carps","carpus","carrack","carracks","carrel","carrell","carrells","carrels","carriage","carried","carrier","carriers","carries","carriole","carrion","carrions","carritch","carroch","carrom","carromed","carroms","carrot","carrotin","carrots","carroty","carry","carryall","carrying","carryon","carryons","carryout","cars","carse","carses","carsick","cart","cartable","cartage","cartages","carte","carted","cartel","cartels","carter","carters","cartes","carting","cartload","carton","cartoned","cartons","cartoon","cartoons","cartop","cartouch","carts","caruncle","carve","carved","carvel","carvels","carven","carver","carvers","carves","carving","carvings","carwash","caryatic","caryatid","caryotin","casa","casaba","casabas","casas","casava","casavas","casbah","casbahs","cascabel","cascable","cascade","cascaded","cascades","cascara","cascaras","case","casease","caseases","caseate","caseated","caseates","casebook","cased","casefied","casefies","casefy","caseic","casein","caseins","caseload","casemate","casement","caseose","caseoses","caseous","casern","caserne","casernes","caserns","cases","casette","casettes","casework","caseworm","cash","cashable","cashaw","cashaws","cashbook","cashbox","cashed","cashes","cashew","cashews","cashier","cashiers","cashing","cashless","cashmere","cashoo","cashoos","casimere","casimire","casing","casings","casini","casino","casinos","casita","casitas","cask","casked","casket","casketed","caskets","casking","casks","casky","casque","casqued","casques","cassaba","cassabas","cassata","cassatas","cassava","cassavas","cassette","cassia","cassias","cassino","cassinos","cassis","cassises","cassock","cassocks","cast","castanet","castaway","caste","casteism","caster","casters","castes","casting","castings","castle","castled","castles","castling","castoff","castoffs","castor","castors","castrate","castrati","castrato","casts","casual","casually","casuals","casualty","casuist","casuists","casus","cat","catacomb","catalase","catalo","cataloes","catalog","catalogs","catalos","catalpa","catalpas","catalyst","catalyze","catamite","catapult","cataract","catarrh","catarrhs","catawba","catawbas","catbird","catbirds","catboat","catboats","catbrier","catcall","catcalls","catch","catchall","catcher","catchers","catches","catchfly","catchier","catching","catchup","catchups","catchy","cate","catechin","catechol","catechu","catechus","category","catena","catenae","catenary","catenas","catenate","catenoid","cater","cateran","caterans","catered","caterer","caterers","cateress","catering","caters","cates","catface","catfaces","catfall","catfalls","catfish","catgut","catguts","cathead","catheads","cathect","cathects","cathedra","catheter","cathexes","cathexis","cathodal","cathode","cathodes","cathodic","catholic","cathouse","cation","cationic","cations","catkin","catkins","catlike","catlin","catling","catlings","catlins","catmint","catmints","catnap","catnaper","catnaps","catnip","catnips","cats","catspaw","catspaws","catsup","catsups","cattail","cattails","cattalo","cattalos","catted","cattery","cattie","cattier","catties","cattiest","cattily","catting","cattish","cattle","cattleya","catty","catwalk","catwalks","caucus","caucused","caucuses","caudad","caudal","caudally","caudate","caudated","caudates","caudex","caudexes","caudices","caudillo","caudle","caudles","caught","caul","cauld","cauldron","caulds","caules","caulicle","cauline","caulis","caulk","caulked","caulker","caulkers","caulking","caulks","cauls","causable","causal","causally","causals","cause","caused","causer","causerie","causers","causes","causeway","causey","causeys","causing","caustic","caustics","cautery","caution","cautions","cautious","cavalero","cavalier","cavalla","cavallas","cavally","cavalry","cavatina","cavatine","cave","caveat","caveated","caveator","caveats","caved","cavefish","cavelike","caveman","cavemen","caver","cavern","caverned","caverns","cavers","caves","cavetti","cavetto","cavettos","caviar","caviare","caviares","caviars","cavicorn","cavie","cavies","cavil","caviled","caviler","cavilers","caviling","cavilled","caviller","cavils","caving","cavings","cavitary","cavitate","cavitied","cavities","cavity","cavort","cavorted","cavorter","cavorts","cavy","caw","cawed","cawing","caws","cay","cayenne","cayenned","cayennes","cayman","caymans","cays","cayuse","cayuses","cazique","caziques","cease","ceased","ceases","ceasing","cebid","cebids","ceboid","ceboids","ceca","cecal","cecally","cecum","cedar","cedarn","cedars","cede","ceded","ceder","ceders","cedes","cedi","cedilla","cedillas","ceding","cedis","cedula","cedulas","cee","cees","ceiba","ceibas","ceil","ceiled","ceiler","ceilers","ceiling","ceilings","ceils","ceinture","celadon","celadons","celeb","celebs","celeriac","celeries","celerity","celery","celesta","celestas","celeste","celestes","celiac","celiacs","celibacy","celibate","cell","cella","cellae","cellar","cellared","cellarer","cellaret","cellars","celled","celli","celling","cellist","cellists","cellmate","cello","cellos","cells","cellular","cellule","cellules","celom","celomata","celoms","celosia","celosias","celt","celts","cembali","cembalo","cembalos","cement","cementa","cemented","cementer","cements","cementum","cemetery","cenacle","cenacles","cenobite","cenotaph","cenote","cenotes","cense","censed","censer","censers","censes","censing","censor","censored","censors","censual","censure","censured","censurer","censures","census","censused","censuses","cent","cental","centals","centare","centares","centaur","centaurs","centaury","centavo","centavos","center","centered","centers","centeses","centesis","centiare","centile","centiles","centime","centimes","centimo","centimos","centner","centners","cento","centones","centos","centra","central","centrals","centre","centred","centres","centric","centring","centrism","centrist","centroid","centrum","centrums","cents","centum","centums","centuple","century","ceorl","ceorlish","ceorls","cep","cepe","cepes","cephalad","cephalic","cephalin","cepheid","cepheids","ceps","ceramal","ceramals","ceramic","ceramics","ceramist","cerastes","cerate","cerated","cerates","ceratin","ceratins","ceratoid","cercaria","cerci","cercis","cercises","cercus","cere","cereal","cereals","cerebra","cerebral","cerebric","cerebrum","cered","cerement","ceremony","ceres","cereus","cereuses","ceria","cerias","ceric","cering","ceriph","ceriphs","cerise","cerises","cerite","cerites","cerium","ceriums","cermet","cermets","cernuous","cero","ceros","cerotic","cerotype","cerous","certain","certes","certify","cerulean","cerumen","cerumens","ceruse","ceruses","cerusite","cervelas","cervelat","cervical","cervices","cervid","cervine","cervix","cervixes","cesarean","cesarian","cesium","cesiums","cess","cessed","cesses","cessing","cession","cessions","cesspit","cesspits","cesspool","cesta","cestas","cesti","cestode","cestodes","cestoi","cestoid","cestoids","cestos","cestus","cestuses","cesura","cesurae","cesuras","cetacean","cetane","cetanes","cete","cetes","cetology","ceviche","ceviches","chablis","chabouk","chabouks","chabuk","chabuks","chacma","chacmas","chaconne","chad","chadar","chadarim","chadars","chadless","chador","chadors","chadri","chads","chaeta","chaetae","chaetal","chafe","chafed","chafer","chafers","chafes","chaff","chaffed","chaffer","chaffers","chaffier","chaffing","chaffs","chaffy","chafing","chagrin","chagrins","chain","chaine","chained","chaines","chaining","chainman","chainmen","chains","chair","chaired","chairing","chairman","chairmen","chairs","chaise","chaises","chakra","chakras","chalah","chalahs","chalaza","chalazae","chalazal","chalazas","chalazia","chalcid","chalcids","chaldron","chaleh","chalehs","chalet","chalets","chalice","chaliced","chalices","chalk","chalked","chalkier","chalking","chalks","chalky","challa","challah","challahs","challas","challie","challies","challis","challot","challoth","chally","chalone","chalones","chalot","chaloth","chalutz","cham","chamade","chamades","chamber","chambers","chambray","chamfer","chamfers","chamfron","chamise","chamises","chamiso","chamisos","chammied","chammies","chammy","chamois","chamoix","champ","champac","champacs","champak","champaks","champed","champer","champers","champing","champion","champs","champy","chams","chance","chanced","chancel","chancels","chancery","chances","chancier","chancily","chancing","chancre","chancres","chancy","chandler","chanfron","chang","change","changed","changer","changers","changes","changing","changs","channel","channels","chanson","chansons","chant","chantage","chanted","chanter","chanters","chantey","chanteys","chanties","chanting","chantor","chantors","chantry","chants","chanty","chao","chaos","chaoses","chaotic","chap","chapati","chapatis","chapatti","chapbook","chape","chapeau","chapeaus","chapeaux","chapel","chapels","chaperon","chapes","chapiter","chaplain","chaplet","chaplets","chapman","chapmen","chapped","chapping","chaps","chapt","chapter","chapters","chaqueta","char","characid","characin","charade","charades","charas","charases","charcoal","chard","chards","chare","chared","chares","charge","charged","charger","chargers","charges","charging","charier","chariest","charily","charing","chariot","chariots","charism","charisma","charisms","charity","chark","charka","charkas","charked","charkha","charkhas","charking","charks","charlady","charley","charleys","charlie","charlies","charlock","charm","charmed","charmer","charmers","charming","charms","charnel","charnels","charpai","charpais","charpoy","charpoys","charqui","charquid","charquis","charr","charred","charrier","charring","charro","charros","charrs","charry","chars","chart","charted","charter","charters","charting","chartist","charts","chary","chase","chased","chaser","chasers","chases","chasing","chasings","chasm","chasmal","chasmed","chasmic","chasms","chasmy","chasse","chassed","chasses","chasseur","chassis","chaste","chastely","chasten","chastens","chaster","chastest","chastise","chastity","chasuble","chat","chatchka","chatchke","chateau","chateaus","chateaux","chats","chatted","chattel","chattels","chatter","chatters","chattery","chattier","chattily","chatting","chatty","chaufer","chaufers","chauffer","chaunt","chaunted","chaunter","chaunts","chausses","chaw","chawed","chawer","chawers","chawing","chaws","chay","chayote","chayotes","chays","chazan","chazanim","chazans","chazzan","chazzans","chazzen","chazzens","cheap","cheapen","cheapens","cheaper","cheapest","cheapie","cheapies","cheapish","cheaply","cheapo","cheapos","cheaps","cheat","cheated","cheater","cheaters","cheating","cheats","chebec","chebecs","chechako","check","checked","checker","checkers","checking","checkoff","checkout","checkrow","checks","checkup","checkups","cheddar","cheddars","cheddite","cheder","cheders","chedite","chedites","cheek","cheeked","cheekful","cheekier","cheekily","cheeking","cheeks","cheeky","cheep","cheeped","cheeper","cheepers","cheeping","cheeps","cheer","cheered","cheerer","cheerers","cheerful","cheerier","cheerily","cheering","cheerio","cheerios","cheerled","cheerly","cheero","cheeros","cheers","cheery","cheese","cheesed","cheeses","cheesier","cheesily","cheesing","cheesy","cheetah","cheetahs","chef","chefdom","chefdoms","cheffed","cheffing","chefs","chegoe","chegoes","chela","chelae","chelas","chelate","chelated","chelates","chelator","cheloid","cheloids","chemic","chemical","chemics","chemise","chemises","chemism","chemisms","chemist","chemists","chemurgy","chenille","chenopod","cheque","chequer","chequers","cheques","cherish","cheroot","cheroots","cherries","cherry","chert","chertier","cherts","cherty","cherub","cherubic","cherubim","cherubs","chervil","chervils","chess","chesses","chessman","chessmen","chest","chested","chestful","chestier","chestnut","chests","chesty","chetah","chetahs","cheth","cheths","chetrum","chetrums","chevalet","cheveron","chevied","chevies","cheviot","cheviots","chevre","chevres","chevron","chevrons","chevy","chevying","chew","chewable","chewed","chewer","chewers","chewier","chewiest","chewing","chewink","chewinks","chews","chewy","chez","chi","chia","chiao","chias","chiasm","chiasma","chiasmal","chiasmas","chiasmi","chiasmic","chiasms","chiasmus","chiastic","chiaus","chiauses","chibouk","chibouks","chic","chicane","chicaned","chicaner","chicanes","chicano","chicanos","chiccory","chicer","chicest","chichi","chichis","chick","chickee","chickees","chicken","chickens","chickory","chickpea","chicks","chicle","chicles","chicly","chicness","chico","chicory","chicos","chics","chid","chidden","chide","chided","chider","chiders","chides","chiding","chief","chiefdom","chiefer","chiefest","chiefly","chiefs","chiel","chield","chields","chiels","chiffon","chiffons","chigetai","chigger","chiggers","chignon","chignons","chigoe","chigoes","child","childbed","childe","childes","childing","childish","childly","children","chile","chiles","chili","chiliad","chiliads","chiliasm","chiliast","chilidog","chilies","chill","chilled","chiller","chillers","chillest","chilli","chillier","chillies","chillily","chilling","chills","chillum","chillums","chilly","chilopod","chimaera","chimar","chimars","chimb","chimbley","chimbly","chimbs","chime","chimed","chimer","chimera","chimeras","chimere","chimeres","chimeric","chimers","chimes","chiming","chimla","chimlas","chimley","chimleys","chimney","chimneys","chimp","chimps","chin","china","chinas","chinbone","chinch","chinches","chinchy","chine","chined","chines","chining","chink","chinked","chinkier","chinking","chinks","chinky","chinless","chinned","chinning","chino","chinone","chinones","chinook","chinooks","chinos","chins","chints","chintses","chintz","chintzes","chintzy","chip","chipmuck","chipmunk","chipped","chipper","chippers","chippie","chippies","chipping","chippy","chips","chiral","chirk","chirked","chirker","chirkest","chirking","chirks","chirm","chirmed","chirming","chirms","chiro","chiros","chirp","chirped","chirper","chirpers","chirpier","chirpily","chirping","chirps","chirpy","chirr","chirre","chirred","chirres","chirring","chirrs","chirrup","chirrups","chirrupy","chis","chisel","chiseled","chiseler","chisels","chit","chital","chitchat","chitin","chitins","chitlin","chitling","chitlins","chiton","chitons","chitosan","chits","chitter","chitters","chitties","chitty","chivalry","chivaree","chivari","chive","chives","chivied","chivies","chivvied","chivvies","chivvy","chivy","chivying","chlamys","chloasma","chloral","chlorals","chlorate","chlordan","chloric","chlorid","chloride","chlorids","chlorin","chlorine","chlorins","chlorite","chlorous","choana","choanae","chock","chocked","chockful","chocking","chocks","choice","choicely","choicer","choices","choicest","choir","choirboy","choired","choiring","choirs","choke","choked","choker","chokers","chokes","chokey","chokier","chokiest","choking","choky","cholate","cholates","cholent","cholents","choler","cholera","choleras","choleric","cholers","choline","cholines","cholla","chollas","cholo","cholos","chomp","chomped","chomper","chompers","chomping","chomps","chon","choose","chooser","choosers","chooses","choosey","choosier","choosing","choosy","chop","chopin","chopine","chopines","chopins","chopped","chopper","choppers","choppier","choppily","chopping","choppy","chops","choragi","choragic","choragus","choral","chorale","chorales","chorally","chorals","chord","chordal","chordate","chorded","chording","chords","chore","chorea","choreal","choreas","chored","choregi","choregus","choreic","choreman","choremen","choreoid","chores","chorial","choriamb","choric","chorine","chorines","choring","chorioid","chorion","chorions","chorizo","chorizos","choroid","choroids","chortle","chortled","chortler","chortles","chorus","chorused","choruses","chose","chosen","choses","chott","chotts","chough","choughs","chouse","choused","chouser","chousers","chouses","choush","choushes","chousing","chow","chowchow","chowder","chowders","chowed","chowing","chows","chowse","chowsed","chowses","chowsing","chowtime","chresard","chrism","chrisma","chrismal","chrismon","chrisms","chrisom","chrisoms","christen","christie","christy","chroma","chromas","chromate","chrome","chromed","chromes","chromic","chromide","chroming","chromite","chromium","chromize","chromo","chromos","chromous","chromyl","chromyls","chronaxy","chronic","chronics","chronon","chronons","chthonic","chub","chubasco","chubbier","chubbily","chubby","chubs","chuck","chucked","chuckies","chucking","chuckle","chuckled","chuckler","chuckles","chucks","chucky","chuddah","chuddahs","chuddar","chuddars","chudder","chudders","chufa","chufas","chuff","chuffed","chuffer","chuffest","chuffier","chuffing","chuffs","chuffy","chug","chugalug","chugged","chugger","chuggers","chugging","chugs","chukar","chukars","chukka","chukkar","chukkars","chukkas","chukker","chukkers","chum","chummed","chummier","chummily","chumming","chummy","chump","chumped","chumping","chumps","chums","chumship","chunk","chunked","chunkier","chunkily","chunking","chunks","chunky","chunter","chunters","church","churched","churches","churchly","churchy","churl","churlish","churls","churn","churned","churner","churners","churning","churns","churr","churred","churring","churrs","chute","chuted","chutes","chuting","chutist","chutists","chutnee","chutnees","chutney","chutneys","chutzpa","chutzpah","chutzpas","chyle","chyles","chylous","chyme","chymes","chymic","chymics","chymist","chymists","chymosin","chymous","ciao","cibol","cibols","ciboria","ciborium","ciboule","ciboules","cicada","cicadae","cicadas","cicala","cicalas","cicale","cicatrix","cicelies","cicely","cicero","cicerone","ciceroni","ciceros","cichlid","cichlids","cicisbei","cicisbeo","cicoree","cicorees","cider","ciders","cigar","cigaret","cigarets","cigars","cilantro","cilia","ciliary","ciliate","ciliated","ciliates","cilice","cilices","cilium","cimbalom","cimex","cimices","cinch","cinched","cinches","cinching","cinchona","cincture","cinder","cindered","cinders","cindery","cine","cineast","cineaste","cineasts","cinema","cinemas","cineol","cineole","cineoles","cineols","cinerary","cinerin","cinerins","cines","cingula","cingulum","cinnabar","cinnamic","cinnamon","cinnamyl","cinquain","cinque","cinques","cion","cions","cioppino","cipher","ciphered","ciphers","ciphony","cipolin","cipolins","circa","circle","circled","circler","circlers","circles","circlet","circlets","circling","circuit","circuits","circuity","circular","circus","circuses","circusy","cire","cires","cirque","cirques","cirrate","cirri","cirriped","cirrose","cirrous","cirrus","cirsoid","cis","cisco","ciscoes","ciscos","cislunar","cissies","cissoid","cissoids","cissy","cist","cistern","cisterna","cisterns","cistron","cistrons","cists","cistus","cistuses","citable","citadel","citadels","citation","citator","citators","citatory","cite","citeable","cited","citer","citers","cites","cithara","citharas","cither","cithern","citherns","cithers","cithren","cithrens","citied","cities","citified","citifies","citify","citing","citizen","citizens","citola","citolas","citole","citoles","citral","citrals","citrate","citrated","citrates","citreous","citric","citrin","citrine","citrines","citrinin","citrins","citron","citrons","citrous","citrus","citruses","cittern","citterns","city","cityfied","cityward","citywide","civet","civets","civic","civicism","civics","civie","civies","civil","civilian","civilise","civility","civilize","civilly","civism","civisms","civvies","civvy","clabber","clabbers","clach","clachan","clachans","clachs","clack","clacked","clacker","clackers","clacking","clacks","clad","cladding","cladode","cladodes","clads","clag","clagged","clagging","clags","claim","claimant","claimed","claimer","claimers","claiming","claims","clam","clamant","clambake","clamber","clambers","clammed","clammer","clammers","clammier","clammily","clamming","clammy","clamor","clamored","clamorer","clamors","clamour","clamours","clamp","clamped","clamper","clampers","clamping","clamps","clams","clamworm","clan","clang","clanged","clanger","clangers","clanging","clangor","clangors","clangour","clangs","clank","clanked","clanking","clanks","clannish","clans","clansman","clansmen","clap","clapped","clapper","clappers","clapping","claps","clapt","claptrap","claque","claquer","claquers","claques","claqueur","clarence","claret","clarets","claries","clarify","clarinet","clarion","clarions","clarity","clarkia","clarkias","claro","claroes","claros","clary","clash","clashed","clasher","clashers","clashes","clashing","clasp","clasped","clasper","claspers","clasping","clasps","claspt","class","classed","classer","classers","classes","classic","classico","classics","classier","classify","classily","classing","classis","classism","classist","classy","clast","clastic","clastics","clasts","clatter","clatters","clattery","claucht","claught","claughts","clausal","clause","clauses","claustra","clavate","clave","claver","clavered","clavers","claves","clavi","clavicle","clavier","claviers","clavus","claw","clawed","clawer","clawers","clawing","clawless","claws","claxon","claxons","clay","claybank","clayed","clayey","clayier","clayiest","claying","clayish","claylike","claymore","claypan","claypans","clays","clayware","clean","cleaned","cleaner","cleaners","cleanest","cleaning","cleanly","cleans","cleanse","cleansed","cleanser","cleanses","cleanup","cleanups","clear","cleared","clearer","clearers","clearest","clearing","clearly","clears","cleat","cleated","cleating","cleats","cleavage","cleave","cleaved","cleaver","cleavers","cleaves","cleaving","cleek","cleeked","cleeking","cleeks","clef","clefs","cleft","clefted","clefting","clefts","cleidoic","clematis","clemency","clement","clench","clenched","clencher","clenches","cleome","cleomes","clepe","cleped","clepes","cleping","clept","clergies","clergy","cleric","clerical","clerics","clerid","clerids","clerihew","clerisy","clerk","clerkdom","clerked","clerking","clerkish","clerkly","clerks","cleveite","clever","cleverer","cleverly","clevis","clevises","clew","clewed","clewing","clews","cliche","cliched","cliches","click","clicked","clicker","clickers","clicking","clicks","client","cliental","clients","cliff","cliffier","cliffs","cliffy","clift","clifts","climatal","climate","climates","climatic","climax","climaxed","climaxes","climb","climbed","climber","climbers","climbing","climbs","clime","climes","clinal","clinally","clinch","clinched","clincher","clinches","cline","clines","cling","clinged","clinger","clingers","clingier","clinging","clings","clingy","clinic","clinical","clinics","clink","clinked","clinker","clinkers","clinking","clinks","clip","clipped","clipper","clippers","clipping","clips","clipt","clique","cliqued","cliques","cliquey","cliquier","cliquing","cliquish","cliquy","clitella","clitoral","clitoric","clitoris","clivers","clivia","clivias","cloaca","cloacae","cloacal","cloacas","cloak","cloaked","cloaking","cloaks","clobber","clobbers","clochard","cloche","cloches","clock","clocked","clocker","clockers","clocking","clocks","clod","cloddier","cloddish","cloddy","clodpate","clodpole","clodpoll","clods","clog","clogged","cloggier","clogging","cloggy","clogs","cloister","clomb","clomp","clomped","clomping","clomps","clon","clonal","clonally","clone","cloned","cloner","cloners","clones","clonic","cloning","clonings","clonism","clonisms","clonk","clonked","clonking","clonks","clons","clonus","clonuses","cloot","cloots","clop","clopped","clopping","clops","cloque","cloques","closable","close","closed","closely","closeout","closer","closers","closes","closest","closet","closeted","closets","closing","closings","closure","closured","closures","clot","cloth","clothe","clothed","clothes","clothier","clothing","cloths","clots","clotted","clotting","clotty","cloture","clotured","clotures","cloud","clouded","cloudier","cloudily","clouding","cloudlet","clouds","cloudy","clough","cloughs","clour","cloured","clouring","clours","clout","clouted","clouter","clouters","clouting","clouts","clove","cloven","clover","clovers","cloves","clowder","clowders","clown","clowned","clownery","clowning","clownish","clowns","cloy","cloyed","cloying","cloys","cloze","clozes","club","clubable","clubbed","clubber","clubbers","clubbier","clubbing","clubby","clubfeet","clubfoot","clubhand","clubhaul","clubman","clubmen","clubroom","clubroot","clubs","cluck","clucked","clucking","clucks","clue","clued","clueing","clues","cluing","clumber","clumbers","clump","clumped","clumpier","clumping","clumpish","clumps","clumpy","clumsier","clumsily","clumsy","clung","clunk","clunked","clunker","clunkers","clunkier","clunking","clunks","clunky","clupeid","clupeids","clupeoid","cluster","clusters","clustery","clutch","clutched","clutches","clutchy","clutter","clutters","cluttery","clypeal","clypeate","clypei","clypeus","clyster","clysters","coach","coached","coacher","coachers","coaches","coaching","coachman","coachmen","coact","coacted","coacting","coaction","coactive","coactor","coactors","coacts","coadmire","coadmit","coadmits","coaeval","coaevals","coagency","coagent","coagents","coagula","coagulum","coal","coala","coalas","coalbin","coalbins","coalbox","coaled","coaler","coalers","coalesce","coalfish","coalhole","coalier","coaliest","coalify","coaling","coalless","coalpit","coalpits","coals","coalsack","coalshed","coaly","coalyard","coaming","coamings","coannex","coappear","coapt","coapted","coapting","coapts","coarse","coarsely","coarsen","coarsens","coarser","coarsest","coassist","coassume","coast","coastal","coasted","coaster","coasters","coasting","coasts","coat","coated","coatee","coatees","coater","coaters","coati","coating","coatings","coatis","coatless","coatrack","coatroom","coats","coattail","coattend","coattest","coauthor","coax","coaxal","coaxed","coaxer","coaxers","coaxes","coaxial","coaxing","cob","cobalt","cobaltic","cobalts","cobb","cobber","cobbers","cobbier","cobbiest","cobble","cobbled","cobbler","cobblers","cobbles","cobbling","cobbs","cobby","cobia","cobias","coble","cobles","cobnut","cobnuts","cobra","cobras","cobs","cobweb","cobwebby","cobwebs","coca","cocain","cocaine","cocaines","cocains","cocas","coccal","cocci","coccic","coccid","coccidia","coccids","coccoid","coccoids","coccous","coccus","coccyges","coccyx","coccyxes","cochair","cochairs","cochin","cochins","cochlea","cochleae","cochlear","cochleas","cocinera","cock","cockade","cockaded","cockades","cockapoo","cockatoo","cockbill","cockboat","cockcrow","cocked","cocker","cockered","cockerel","cockers","cockeye","cockeyed","cockeyes","cockier","cockiest","cockily","cocking","cockish","cockle","cockled","cockles","cocklike","cockling","cockloft","cockney","cockneys","cockpit","cockpits","cocks","cockshut","cockshy","cockspur","cocksure","cocktail","cockup","cockups","cocky","coco","cocoa","cocoanut","cocoas","cocobola","cocobolo","cocomat","cocomats","coconut","coconuts","cocoon","cocooned","cocoons","cocos","cocotte","cocottes","cocreate","cod","coda","codable","codas","codded","codder","codders","codding","coddle","coddled","coddler","coddlers","coddles","coddling","code","codebook","codebtor","codec","codecs","coded","codeia","codeias","codein","codeina","codeinas","codeine","codeines","codeins","codeless","coden","codens","coder","coderive","coders","codes","codesign","codex","codfish","codger","codgers","codices","codicil","codicils","codified","codifier","codifies","codify","coding","codirect","codlin","codling","codlings","codlins","codon","codons","codpiece","codrive","codriven","codriver","codrives","codrove","cods","coed","coedit","coedited","coeditor","coedits","coeds","coeffect","coeliac","coelom","coelome","coelomes","coelomic","coeloms","coembody","coemploy","coempt","coempted","coempts","coenact","coenacts","coenamor","coendure","coenure","coenures","coenuri","coenurus","coenzyme","coequal","coequals","coequate","coerce","coerced","coercer","coercers","coerces","coercing","coercion","coercive","coerect","coerects","coesite","coesites","coeval","coevally","coevals","coevolve","coexert","coexerts","coexist","coexists","coextend","cofactor","coff","coffee","coffees","coffer","coffered","coffers","coffin","coffined","coffing","coffins","coffle","coffled","coffles","coffling","coffret","coffrets","coffs","cofound","cofounds","coft","cog","cogency","cogent","cogently","cogged","cogging","cogitate","cogito","cogitos","cognac","cognacs","cognate","cognates","cognise","cognised","cognises","cognize","cognized","cognizer","cognizes","cognomen","cognovit","cogon","cogons","cogs","cogway","cogways","cogwheel","cohabit","cohabits","cohead","coheaded","coheads","coheir","coheirs","cohere","cohered","coherent","coherer","coherers","coheres","cohering","cohesion","cohesive","coho","cohobate","cohog","cohogs","coholder","cohort","cohorts","cohos","cohosh","cohoshes","cohost","cohosted","cohosts","cohune","cohunes","coif","coifed","coiffe","coiffed","coiffes","coiffeur","coiffing","coiffure","coifing","coifs","coign","coigne","coigned","coignes","coigning","coigns","coil","coiled","coiler","coilers","coiling","coils","coin","coinable","coinage","coinages","coincide","coined","coiner","coiners","coinfer","coinfers","coinhere","coining","coinmate","coins","coinsure","cointer","cointers","coinvent","coir","coirs","coistrel","coistril","coital","coitally","coition","coitions","coitus","coituses","cojoin","cojoined","cojoins","coke","coked","cokes","coking","col","cola","colander","colas","cold","coldcock","colder","coldest","coldish","coldly","coldness","colds","cole","colead","coleader","coleads","coled","coles","coleseed","coleslaw","colessee","colessor","coleus","coleuses","colewort","colic","colicin","colicine","colicins","colicky","colics","colies","coliform","colin","colinear","colins","coliseum","colistin","colitic","colitis","collage","collaged","collagen","collages","collapse","collar","collard","collards","collared","collaret","collars","collate","collated","collates","collator","collect","collects","colleen","colleens","college","colleger","colleges","collegia","collet","colleted","collets","collide","collided","collides","collie","collied","collier","colliers","colliery","collies","collins","collogue","colloid","colloids","collop","collops","colloquy","collude","colluded","colluder","colludes","colluvia","colly","collying","collyria","colobi","coloboma","colobus","colocate","colog","cologne","cologned","colognes","cologs","colon","colone","colonel","colonels","colones","coloni","colonial","colonic","colonics","colonies","colonise","colonist","colonize","colons","colonus","colony","colophon","color","colorado","colorant","colored","coloreds","colorer","colorers","colorful","coloring","colorism","colorist","colors","colossal","colossi","colossus","colotomy","colour","coloured","colourer","colours","colpitis","cols","colt","colter","colters","coltish","colts","colubrid","colugo","colugos","columbic","columel","columels","column","columnal","columnar","columned","columns","colure","colures","coly","colza","colzas","coma","comade","comae","comake","comaker","comakers","comakes","comaking","comal","comanage","comas","comate","comates","comatic","comatik","comatiks","comatose","comatula","comb","combat","combated","combater","combats","combe","combed","comber","combers","combes","combine","combined","combiner","combines","combing","combings","comblike","combo","combos","combs","combust","combusts","come","comeback","comedian","comedic","comedies","comedo","comedos","comedown","comedy","comelier","comelily","comely","comer","comers","comes","comet","cometary","cometh","comether","cometic","comets","comfier","comfiest","comfit","comfits","comfort","comforts","comfrey","comfreys","comfy","comic","comical","comics","coming","comingle","comings","comitia","comitial","comities","comity","comix","comma","command","commando","commands","commas","commata","commence","commend","commends","comment","comments","commerce","commie","commies","commit","commits","commix","commixed","commixes","commixt","commode","commodes","common","commoner","commonly","commons","commove","commoved","commoves","communal","commune","communed","communes","commute","commuted","commuter","commutes","commy","comose","comous","comp","compact","compacts","compadre","company","compare","compared","comparer","compares","compart","comparts","compass","comped","compeer","compeers","compel","compels","compend","compends","compere","compered","comperes","compete","competed","competes","compile","compiled","compiler","compiles","comping","complain","compleat","complect","complete","complex","complice","complied","complier","complies","complin","compline","complins","complot","complots","comply","compo","compone","compony","comport","comports","compos","compose","composed","composer","composes","compost","composts","compote","compotes","compound","compress","comprise","comprize","comps","compt","compted","compting","compts","compute","computed","computer","computes","comrade","comrades","comsymp","comsymps","comte","comtes","con","conation","conative","conatus","concave","concaved","concaves","conceal","conceals","concede","conceded","conceder","concedes","conceit","conceits","conceive","concent","concents","concept","concepts","concern","concerns","concert","concerti","concerto","concerts","conch","concha","conchae","conchal","conches","conchie","conchies","conchoid","conchs","conchy","concise","conciser","conclave","conclude","concoct","concocts","concord","concords","concrete","concur","concurs","concuss","condemn","condemns","condense","condign","condo","condoes","condole","condoled","condoler","condoles","condom","condoms","condone","condoned","condoner","condones","condor","condores","condors","condos","conduce","conduced","conducer","conduces","conduct","conducts","conduit","conduits","condylar","condyle","condyles","cone","coned","conelrad","conenose","conepate","conepatl","cones","coney","coneys","confab","confabs","confect","confects","confer","conferee","confers","conferva","confess","confetti","confetto","confide","confided","confider","confides","confine","confined","confiner","confines","confirm","confirms","conflate","conflict","conflux","confocal","conform","conforms","confound","confrere","confront","confuse","confused","confuses","confute","confuted","confuter","confutes","conga","congaed","congaing","congas","conge","congeal","congeals","congee","congeed","congees","congener","conger","congers","conges","congest","congests","congii","congius","conglobe","congo","congoes","congos","congou","congous","congrats","congress","coni","conic","conical","conicity","conics","conidia","conidial","conidian","conidium","conies","conifer","conifers","coniine","coniines","conin","conine","conines","coning","conins","conioses","coniosis","conium","coniums","conjoin","conjoins","conjoint","conjugal","conjunct","conjure","conjured","conjurer","conjures","conjuror","conk","conked","conker","conkers","conking","conks","conky","conn","connate","connect","connects","conned","conner","conners","conning","connive","connived","conniver","connives","connote","connoted","connotes","conns","conodont","conoid","conoidal","conoids","conquer","conquers","conquest","conquian","cons","consent","consents","conserve","consider","consign","consigns","consist","consists","consol","console","consoled","consoler","consoles","consols","consomme","consort","consorts","conspire","constant","construe","consul","consular","consuls","consult","consults","consume","consumed","consumer","consumes","contact","contacts","contagia","contain","contains","conte","contemn","contemns","contempt","contend","contends","content","contents","contes","contest","contests","context","contexts","continua","continue","continuo","conto","contort","contorts","contos","contour","contours","contra","contract","contrail","contrary","contras","contrast","contrite","contrive","control","controls","contuse","contused","contuses","conus","convect","convects","convene","convened","convener","convenes","convenor","convent","convents","converge","converse","convert","converts","convex","convexes","convexly","convey","conveyed","conveyer","conveyor","conveys","convict","convicts","convince","convoke","convoked","convoker","convokes","convolve","convoy","convoyed","convoys","convulse","cony","coo","cooch","cooches","coocoo","cooed","cooee","cooeed","cooeeing","cooees","cooer","cooers","cooey","cooeyed","cooeying","cooeys","coof","coofs","cooing","cooingly","cook","cookable","cookbook","cooked","cooker","cookers","cookery","cookey","cookeys","cookie","cookies","cooking","cookings","cookless","cookout","cookouts","cooks","cookshop","cookware","cooky","cool","coolant","coolants","cooled","cooler","coolers","coolest","coolie","coolies","cooling","coolish","coolly","coolness","cools","coolth","coolths","cooly","coomb","coombe","coombes","coombs","coon","cooncan","cooncans","coons","coonskin","coontie","coonties","coop","cooped","cooper","coopered","coopers","coopery","cooping","coops","coopt","coopted","coopting","cooption","coopts","coos","coot","cootie","cooties","coots","cop","copaiba","copaibas","copal","copalm","copalms","copals","coparent","copastor","copatron","cope","copeck","copecks","coped","copemate","copen","copens","copepod","copepods","coper","copers","copes","copied","copier","copiers","copies","copihue","copihues","copilot","copilots","coping","copings","copious","coplanar","coplot","coplots","copped","copper","copperah","copperas","coppered","coppers","coppery","coppice","coppiced","coppices","copping","coppra","coppras","copra","coprah","coprahs","copras","copremia","copremic","coprince","cops","copse","copses","copter","copters","copula","copulae","copular","copulas","copulate","copurify","copy","copybook","copyboy","copyboys","copycat","copycats","copydesk","copyedit","copyhold","copying","copyist","copyists","copyread","coquet","coquetry","coquets","coquette","coquille","coquina","coquinas","coquito","coquitos","cor","coracle","coracles","coracoid","coral","corals","coranto","corantos","corban","corbans","corbeil","corbeils","corbel","corbeled","corbels","corbie","corbies","corbina","corbinas","corby","cord","cordage","cordages","cordate","corded","cordelle","corder","corders","cordial","cordials","cording","cordings","cordite","cordites","cordless","cordlike","cordoba","cordobas","cordon","cordoned","cordons","cordovan","cords","corduroy","cordwain","cordwood","core","cored","coredeem","coreign","coreigns","corelate","coreless","coremia","coremium","corer","corers","cores","corf","corgi","corgis","coria","coring","corium","cork","corkage","corkages","corked","corker","corkers","corkier","corkiest","corking","corklike","corks","corkwood","corky","corm","cormel","cormels","cormlike","cormoid","cormous","corms","corn","cornball","corncake","corncob","corncobs","corncrib","cornea","corneal","corneas","corned","cornel","cornels","corneous","corner","cornered","corners","cornet","cornetcy","cornets","cornfed","cornhusk","cornice","corniced","cornices","corniche","cornicle","cornier","corniest","cornily","corning","cornmeal","cornrow","cornrows","corns","cornu","cornua","cornual","cornus","cornuses","cornute","cornuted","cornuto","cornutos","corny","corodies","corody","corolla","corollas","corona","coronach","coronae","coronal","coronals","coronary","coronas","coronel","coronels","coroner","coroners","coronet","coronets","coronoid","corotate","corpora","corporal","corps","corpse","corpses","corpsman","corpsmen","corpus","corrade","corraded","corrades","corral","corrals","correct","corrects","corrida","corridas","corridor","corrie","corries","corrival","corrode","corroded","corrodes","corrody","corrupt","corrupts","corsac","corsacs","corsage","corsages","corsair","corsairs","corse","corselet","corses","corset","corseted","corsetry","corsets","corslet","corslets","cortege","corteges","cortex","cortexes","cortical","cortices","cortin","cortins","cortisol","corundum","corvee","corvees","corves","corvet","corvets","corvette","corvina","corvinas","corvine","cory","corybant","corymb","corymbed","corymbs","coryphee","coryza","coryzal","coryzas","cos","coscript","cosec","cosecant","cosecs","coses","coset","cosets","cosey","coseys","cosh","coshed","cosher","coshered","coshers","coshes","coshing","cosie","cosied","cosier","cosies","cosiest","cosign","cosigned","cosigner","cosigns","cosily","cosine","cosines","cosiness","cosmetic","cosmic","cosmical","cosmism","cosmisms","cosmist","cosmists","cosmos","cosmoses","coss","cossack","cossacks","cosset","cosseted","cossets","cost","costa","costae","costal","costar","costard","costards","costars","costate","costed","coster","costers","costing","costive","costless","costlier","costly","costmary","costrel","costrels","costs","costume","costumed","costumer","costumes","costumey","cosy","cosying","cot","cotan","cotans","cote","coteau","coteaux","coted","cotenant","coterie","coteries","cotes","cothurn","cothurni","cothurns","cotidal","cotillon","coting","cotquean","cots","cotta","cottae","cottage","cottager","cottages","cottagey","cottar","cottars","cottas","cotter","cotters","cottier","cottiers","cotton","cottoned","cottons","cottony","cotyloid","cotype","cotypes","couch","couchant","couched","coucher","couchers","couches","couching","coude","cougar","cougars","cough","coughed","cougher","coughers","coughing","coughs","could","couldest","couldst","coulee","coulees","coulisse","couloir","couloirs","coulomb","coulombs","coulter","coulters","coumaric","coumarin","coumarou","council","councils","counsel","counsels","count","counted","counter","counters","countess","countian","counties","counting","country","counts","county","coup","coupe","couped","coupes","couping","couple","coupled","coupler","couplers","couples","couplet","couplets","coupling","coupon","coupons","coups","courage","courages","courant","courante","couranto","courants","courier","couriers","courlan","courlans","course","coursed","courser","coursers","courses","coursing","court","courted","courter","courters","courtesy","courtier","courting","courtly","courts","couscous","cousin","cousinly","cousinry","cousins","couteau","couteaux","couter","couters","couth","couther","couthest","couthie","couthier","couths","couture","coutures","couvade","couvades","covalent","cove","coved","coven","covenant","covens","cover","coverage","coverall","covered","coverer","coverers","covering","coverlet","coverlid","covers","covert","covertly","coverts","coverup","coverups","coves","covet","coveted","coveter","coveters","coveting","covetous","covets","covey","coveys","covin","coving","covings","covins","cow","cowage","cowages","coward","cowardly","cowards","cowbane","cowbanes","cowbell","cowbells","cowberry","cowbind","cowbinds","cowbird","cowbirds","cowboy","cowboys","cowed","cowedly","cower","cowered","cowering","cowers","cowfish","cowflap","cowflaps","cowflop","cowflops","cowgirl","cowgirls","cowhage","cowhages","cowhand","cowhands","cowherb","cowherbs","cowherd","cowherds","cowhide","cowhided","cowhides","cowier","cowiest","cowing","cowinner","cowl","cowled","cowlick","cowlicks","cowling","cowlings","cowls","cowman","cowmen","coworker","cowpat","cowpats","cowpea","cowpeas","cowpie","cowpies","cowplop","cowplops","cowpoke","cowpokes","cowpox","cowpoxes","cowrie","cowries","cowrite","cowrites","cowrote","cowry","cows","cowshed","cowsheds","cowskin","cowskins","cowslip","cowslips","cowy","cox","coxa","coxae","coxal","coxalgia","coxalgic","coxalgy","coxcomb","coxcombs","coxed","coxes","coxing","coxitis","coxswain","coy","coydog","coydogs","coyed","coyer","coyest","coying","coyish","coyly","coyness","coyote","coyotes","coypou","coypous","coypu","coypus","coys","coz","cozen","cozenage","cozened","cozener","cozeners","cozening","cozens","cozes","cozey","cozeys","cozie","cozied","cozier","cozies","coziest","cozily","coziness","cozy","cozying","cozzes","craal","craaled","craaling","craals","crab","crabbed","crabber","crabbers","crabbier","crabbily","crabbing","crabby","crabmeat","crabs","crabwise","crack","cracked","cracker","crackers","cracking","crackle","crackled","crackles","crackly","cracknel","crackpot","cracks","crackup","crackups","cracky","cradle","cradled","cradler","cradlers","cradles","cradling","craft","crafted","craftier","craftily","crafting","crafts","crafty","crag","cragged","craggier","craggily","craggy","crags","cragsman","cragsmen","crake","crakes","cram","crambe","crambes","crambo","cramboes","crambos","crammed","crammer","crammers","cramming","cramoisy","cramp","cramped","cramping","crampit","crampits","crampon","crampons","crampoon","cramps","crams","cranch","cranched","cranches","crane","craned","cranes","crania","cranial","craniate","craning","cranium","craniums","crank","cranked","cranker","crankest","crankier","crankily","cranking","crankle","crankled","crankles","crankly","crankous","crankpin","cranks","cranky","crannied","crannies","crannog","crannoge","crannogs","cranny","crap","crape","craped","crapes","craping","crapped","crapper","crappers","crappie","crappier","crappies","crapping","crappy","craps","crases","crash","crashed","crasher","crashers","crashes","crashing","crasis","crass","crasser","crassest","crassly","cratch","cratches","crate","crated","crater","cratered","craters","crates","crating","craton","cratonic","cratons","craunch","cravat","cravats","crave","craved","craven","cravened","cravenly","cravens","craver","cravers","craves","craving","cravings","craw","crawdad","crawdads","crawfish","crawl","crawled","crawler","crawlers","crawlier","crawling","crawls","crawlway","crawly","craws","crayfish","crayon","crayoned","crayons","craze","crazed","crazes","crazier","crazies","craziest","crazily","crazing","crazy","creak","creaked","creakier","creakily","creaking","creaks","creaky","cream","creamed","creamer","creamers","creamery","creamier","creamily","creaming","creams","creamy","crease","creased","creaser","creasers","creases","creasier","creasing","creasy","create","created","creates","creatin","creatine","creating","creatins","creation","creative","creator","creators","creature","creche","creches","credal","credence","credenda","credent","credenza","credible","credibly","credit","credited","creditor","credits","credo","credos","creed","creedal","creeds","creek","creeks","creel","creeled","creeling","creels","creep","creepage","creeper","creepers","creepie","creepier","creepies","creepily","creeping","creeps","creepy","creese","creeses","creesh","creeshed","creeshes","cremains","cremate","cremated","cremates","cremator","creme","cremes","crenate","crenated","crenel","creneled","crenelle","crenels","creodont","creole","creoles","creosol","creosols","creosote","crepe","creped","crepes","crepey","crepier","crepiest","creping","crepon","crepons","crept","crepy","crescent","crescive","cresol","cresols","cress","cresses","cresset","cressets","crest","crestal","crested","cresting","crests","cresyl","cresylic","cresyls","cretic","cretics","cretin","cretins","cretonne","crevalle","crevasse","crevice","creviced","crevices","crew","crewed","crewel","crewels","crewing","crewless","crewman","crewmen","crewneck","crews","crib","cribbage","cribbed","cribber","cribbers","cribbing","cribbled","cribrous","cribs","cribwork","cricetid","crick","cricked","cricket","crickets","crickey","cricking","cricks","cricoid","cricoids","cried","crier","criers","cries","crikey","crime","crimes","criminal","crimmer","crimmers","crimp","crimped","crimper","crimpers","crimpier","crimping","crimple","crimpled","crimples","crimps","crimpy","crimson","crimsons","cringe","cringed","cringer","cringers","cringes","cringing","cringle","cringles","crinite","crinites","crinkle","crinkled","crinkles","crinkly","crinoid","crinoids","crinum","crinums","criollo","criollos","cripe","cripes","cripple","crippled","crippler","cripples","cris","crises","crisic","crisis","crisp","crispate","crisped","crispen","crispens","crisper","crispers","crispest","crispier","crispily","crisping","crisply","crisps","crispy","crissa","crissal","crissum","crista","cristae","cristate","criteria","critic","critical","critics","critique","critter","critters","crittur","critturs","croak","croaked","croaker","croakers","croakier","croakily","croaking","croaks","croaky","croc","crocein","croceine","croceins","crochet","crochets","croci","crocine","crock","crocked","crockery","crocket","crockets","crocking","crocks","crocoite","crocs","crocus","crocuses","croft","crofter","crofters","crofts","crojik","crojiks","cromlech","crone","crones","cronies","crony","cronyism","crook","crooked","crookery","crooking","crooks","croon","crooned","crooner","crooners","crooning","croons","crop","cropland","cropless","cropped","cropper","croppers","croppie","croppies","cropping","crops","croquet","croquets","croquis","crore","crores","crosier","crosiers","cross","crossarm","crossbar","crossbow","crosscut","crosse","crossed","crosser","crossers","crosses","crossest","crossing","crosslet","crossly","crosstie","crossway","crotch","crotched","crotches","crotchet","croton","crotons","crouch","crouched","crouches","croup","croupe","croupes","croupier","croupily","croupous","croups","croupy","crouse","crousely","crouton","croutons","crow","crowbar","crowbars","crowd","crowded","crowder","crowders","crowdie","crowdies","crowding","crowds","crowdy","crowed","crower","crowers","crowfeet","crowfoot","crowing","crown","crowned","crowner","crowners","crownet","crownets","crowning","crowns","crows","crowstep","croze","crozer","crozers","crozes","crozier","croziers","cruces","crucial","crucian","crucians","cruciate","crucible","crucifer","crucifix","crucify","cruck","crucks","crud","crudded","cruddier","crudding","cruddy","crude","crudely","cruder","crudes","crudest","crudites","crudity","cruds","cruel","crueler","cruelest","crueller","cruelly","cruelty","cruet","cruets","cruise","cruised","cruiser","cruisers","cruises","cruising","cruller","crullers","crumb","crumbed","crumber","crumbers","crumbier","crumbing","crumble","crumbled","crumbles","crumbly","crumbs","crumbum","crumbums","crumby","crumhorn","crummie","crummier","crummies","crummy","crump","crumped","crumpet","crumpets","crumping","crumple","crumpled","crumples","crumply","crumps","crunch","crunched","cruncher","crunches","crunchy","crunodal","crunode","crunodes","cruor","cruors","crupper","cruppers","crura","crural","crus","crusade","crusaded","crusader","crusades","crusado","crusados","cruse","cruses","cruset","crusets","crush","crushed","crusher","crushers","crushes","crushing","crusily","crust","crustal","crusted","crustier","crustily","crusting","crustose","crusts","crusty","crutch","crutched","crutches","crux","cruxes","cruzado","cruzados","cruzeiro","crwth","crwths","cry","crybaby","crying","cryingly","cryogen","cryogens","cryogeny","cryolite","cryonic","cryonics","cryostat","cryotron","crypt","cryptal","cryptic","crypto","cryptos","crypts","crystal","crystals","ctenidia","ctenoid","cub","cubage","cubages","cubature","cubbies","cubbish","cubby","cube","cubeb","cubebs","cubed","cuber","cubers","cubes","cubic","cubical","cubicity","cubicle","cubicles","cubicly","cubics","cubicula","cubiform","cubing","cubism","cubisms","cubist","cubistic","cubists","cubit","cubital","cubits","cuboid","cuboidal","cuboids","cubs","cuckold","cuckolds","cuckoo","cuckooed","cuckoos","cucumber","cucurbit","cud","cudbear","cudbears","cuddie","cuddies","cuddle","cuddled","cuddles","cuddlier","cuddling","cuddly","cuddy","cudgel","cudgeled","cudgeler","cudgels","cuds","cudweed","cudweeds","cue","cued","cueing","cues","cuesta","cuestas","cuff","cuffed","cuffing","cuffless","cuffs","cuif","cuifs","cuing","cuirass","cuish","cuishes","cuisine","cuisines","cuisse","cuisses","cuittle","cuittled","cuittles","cuke","cukes","culch","culches","culet","culets","culex","culices","culicid","culicids","culicine","culinary","cull","cullay","cullays","culled","culler","cullers","cullet","cullets","cullied","cullies","culling","cullion","cullions","cullis","cullises","culls","cully","cullying","culm","culmed","culming","culms","culotte","culottes","culpa","culpable","culpably","culpae","culprit","culprits","cult","cultch","cultches","culti","cultic","cultigen","cultish","cultism","cultisms","cultist","cultists","cultivar","cultrate","cults","cultural","culture","cultured","cultures","cultus","cultuses","culver","culverin","culvers","culvert","culverts","cum","cumarin","cumarins","cumber","cumbered","cumberer","cumbers","cumbrous","cumin","cumins","cummer","cummers","cummin","cummins","cumquat","cumquats","cumshaw","cumshaws","cumulate","cumuli","cumulous","cumulus","cundum","cundums","cuneal","cuneate","cuneated","cuneatic","cuniform","cunner","cunners","cunning","cunnings","cunt","cunts","cup","cupboard","cupcake","cupcakes","cupel","cupeled","cupeler","cupelers","cupeling","cupelled","cupeller","cupels","cupful","cupfuls","cupid","cupidity","cupids","cuplike","cupola","cupolaed","cupolas","cuppa","cuppas","cupped","cupper","cuppers","cuppier","cuppiest","cupping","cuppings","cuppy","cupreous","cupric","cuprite","cuprites","cuprous","cuprum","cuprums","cups","cupsful","cupula","cupulae","cupular","cupulate","cupule","cupules","cur","curable","curably","curacao","curacaos","curacies","curacoa","curacoas","curacy","curagh","curaghs","curara","curaras","curare","curares","curari","curarine","curaris","curarize","curassow","curate","curates","curative","curator","curators","curb","curbable","curbed","curber","curbers","curbing","curbings","curbs","curbside","curch","curches","curculio","curcuma","curcumas","curd","curded","curdier","curdiest","curding","curdle","curdled","curdler","curdlers","curdles","curdling","curds","curdy","cure","cured","cureless","curer","curers","cures","curet","curets","curette","curetted","curettes","curf","curfew","curfews","curfs","curia","curiae","curial","curie","curies","curing","curio","curios","curiosa","curious","curite","curites","curium","curiums","curl","curled","curler","curlers","curlew","curlews","curlicue","curlier","curliest","curlily","curling","curlings","curls","curly","curlycue","curn","curns","curr","currach","currachs","curragh","curraghs","curran","currans","currant","currants","curred","currency","current","currents","curricle","currie","curried","currier","curriers","curriery","curries","curring","currish","currs","curry","currying","curs","curse","cursed","curseder","cursedly","curser","cursers","curses","cursing","cursive","cursives","cursor","cursors","cursory","curst","curt","curtail","curtails","curtain","curtains","curtal","curtalax","curtals","curtate","curter","curtest","curtesy","curtly","curtness","curtsey","curtseys","curtsied","curtsies","curtsy","curule","curve","curved","curvedly","curves","curvet","curveted","curvets","curvey","curvier","curviest","curving","curvy","cuscus","cuscuses","cusec","cusecs","cushat","cushats","cushaw","cushaws","cushier","cushiest","cushily","cushion","cushions","cushiony","cushy","cusk","cusks","cusp","cuspate","cuspated","cusped","cuspid","cuspidal","cuspides","cuspidor","cuspids","cuspis","cusps","cuss","cussed","cussedly","cusser","cussers","cusses","cussing","cusso","cussos","cussword","custard","custards","custodes","custody","custom","customer","customs","custos","custumal","cut","cutaway","cutaways","cutback","cutbacks","cutbank","cutbanks","cutch","cutchery","cutches","cutdown","cutdowns","cute","cutely","cuteness","cuter","cutes","cutesie","cutesier","cutest","cutesy","cutey","cuteys","cutgrass","cuticle","cuticles","cuticula","cutie","cuties","cutin","cutinise","cutinize","cutins","cutis","cutises","cutlas","cutlases","cutlass","cutler","cutlers","cutlery","cutlet","cutlets","cutline","cutlines","cutoff","cutoffs","cutout","cutouts","cutover","cutovers","cutpurse","cuts","cuttable","cuttage","cuttages","cutter","cutters","cutties","cutting","cuttings","cuttle","cuttled","cuttles","cuttling","cutty","cutup","cutups","cutwater","cutwork","cutworks","cutworm","cutworms","cuvette","cuvettes","cwm","cwms","cyan","cyanamid","cyanate","cyanates","cyanic","cyanid","cyanide","cyanided","cyanides","cyanids","cyanin","cyanine","cyanines","cyanins","cyanite","cyanites","cyanitic","cyano","cyanogen","cyanosed","cyanoses","cyanosis","cyanotic","cyans","cyborg","cyborgs","cycad","cycads","cycas","cycases","cycasin","cycasins","cyclamen","cyclase","cyclases","cycle","cyclecar","cycled","cycler","cyclers","cyclery","cycles","cyclic","cyclical","cyclicly","cycling","cyclings","cyclist","cyclists","cyclitol","cyclize","cyclized","cyclizes","cyclo","cycloid","cycloids","cyclonal","cyclone","cyclones","cyclonic","cyclops","cyclos","cycloses","cyclosis","cyder","cyders","cyeses","cyesis","cygnet","cygnets","cylices","cylinder","cylix","cyma","cymae","cymar","cymars","cymas","cymatia","cymatium","cymbal","cymbaler","cymbalom","cymbals","cymbidia","cymbling","cyme","cymene","cymenes","cymes","cymlin","cymling","cymlings","cymlins","cymogene","cymoid","cymol","cymols","cymose","cymosely","cymous","cynic","cynical","cynicism","cynics","cynosure","cypher","cyphered","cyphers","cypres","cypreses","cypress","cyprian","cyprians","cyprinid","cyprus","cypruses","cypsela","cypselae","cyst","cystein","cysteine","cysteins","cystic","cystine","cystines","cystitis","cystoid","cystoids","cysts","cytaster","cytidine","cytogeny","cytology","cyton","cytons","cytosine","cytosol","cytosols","czar","czardas","czardom","czardoms","czarevna","czarina","czarinas","czarism","czarisms","czarist","czarists","czaritza","czars","dab","dabbed","dabber","dabbers","dabbing","dabble","dabbled","dabbler","dabblers","dabbles","dabbling","dabchick","dabs","dabster","dabsters","dace","daces","dacha","dachas","dacker","dackered","dackers","dacoit","dacoits","dacoity","dactyl","dactyli","dactylic","dactyls","dactylus","dad","dada","dadaism","dadaisms","dadaist","dadaists","dadas","daddies","daddle","daddled","daddles","daddling","daddy","dado","dadoed","dadoes","dadoing","dados","dads","daedal","daemon","daemonic","daemons","daff","daffed","daffier","daffiest","daffily","daffing","daffodil","daffs","daffy","daft","dafter","daftest","daftly","daftness","dag","dagga","daggas","dagger","daggered","daggers","daggle","daggled","daggles","daggling","daglock","daglocks","dago","dagoba","dagobas","dagoes","dagos","dags","dagwood","dagwoods","dah","dahabeah","dahabiah","dahabieh","dahabiya","dahl","dahlia","dahlias","dahls","dahoon","dahoons","dahs","daiker","daikered","daikers","daikon","daikons","dailies","daily","daimen","daimio","daimios","daimon","daimones","daimonic","daimons","daimyo","daimyos","daintier","dainties","daintily","dainty","daiquiri","dairies","dairy","dairying","dairyman","dairymen","dais","daises","daishiki","daisied","daisies","daisy","dak","dakerhen","dakoit","dakoits","dakoity","daks","dal","dalapon","dalapons","dalasi","dalasis","dale","daledh","daledhs","dales","dalesman","dalesmen","daleth","daleths","dalles","dallied","dallier","dalliers","dallies","dally","dallying","dalmatic","dals","dalton","daltonic","daltons","dam","damage","damaged","damager","damagers","damages","damaging","daman","damans","damar","damars","damask","damasked","damasks","dame","dames","damewort","dammar","dammars","dammed","dammer","dammers","damming","damn","damnable","damnably","damndest","damned","damneder","damner","damners","damnify","damning","damns","damosel","damosels","damozel","damozels","damp","damped","dampen","dampened","dampener","dampens","damper","dampers","dampest","damping","dampings","dampish","damply","dampness","damps","dams","damsel","damsels","damson","damsons","dance","danced","dancer","dancers","dances","dancing","dander","dandered","danders","dandier","dandies","dandiest","dandify","dandily","dandle","dandled","dandler","dandlers","dandles","dandling","dandriff","dandruff","dandy","dandyish","dandyism","danegeld","daneweed","danewort","dang","danged","danger","dangered","dangers","danging","dangle","dangled","dangler","danglers","dangles","dangling","dangs","danio","danios","danish","dank","danker","dankest","dankly","dankness","danseur","danseurs","danseuse","dap","daphne","daphnes","daphnia","daphnias","dapped","dapper","dapperer","dapperly","dapping","dapple","dappled","dapples","dappling","daps","dapsone","dapsones","darb","darbies","darbs","dare","dared","dareful","darer","darers","dares","daresay","daric","darics","daring","daringly","darings","dariole","darioles","dark","darked","darken","darkened","darkener","darkens","darker","darkest","darkey","darkeys","darkie","darkies","darking","darkish","darkle","darkled","darkles","darklier","darkling","darkly","darkness","darkroom","darks","darksome","darky","darling","darlings","darn","darndest","darned","darneder","darnel","darnels","darner","darners","darning","darnings","darns","darshan","darshans","dart","darted","darter","darters","darting","dartle","dartled","dartles","dartling","darts","dash","dashed","dasheen","dasheens","dasher","dashers","dashes","dashi","dashier","dashiest","dashiki","dashikis","dashing","dashis","dashpot","dashpots","dashy","dassie","dassies","dastard","dastards","dasyure","dasyures","data","databank","database","datable","dataries","datary","datcha","datchas","date","dateable","dated","datedly","dateless","dateline","dater","daters","dates","dating","datival","dative","datively","datives","dato","datos","datto","dattos","datum","datums","datura","daturas","daturic","daub","daube","daubed","dauber","daubers","daubery","daubes","daubier","daubiest","daubing","daubries","daubry","daubs","dauby","daughter","daunder","daunders","daunt","daunted","daunter","daunters","daunting","daunts","dauphin","dauphine","dauphins","daut","dauted","dautie","dauties","dauting","dauts","daven","davened","davening","davens","davies","davit","davits","davy","daw","dawdle","dawdled","dawdler","dawdlers","dawdles","dawdling","dawed","dawen","dawing","dawk","dawks","dawn","dawned","dawning","dawnlike","dawns","daws","dawt","dawted","dawtie","dawties","dawting","dawts","day","daybed","daybeds","daybook","daybooks","daybreak","daydream","dayflies","dayfly","dayglow","dayglows","daylight","daylily","daylit","daylong","daymare","daymares","dayroom","dayrooms","days","dayside","daysides","daysman","daysmen","daystar","daystars","daytime","daytimes","daywork","dayworks","daze","dazed","dazedly","dazes","dazing","dazzle","dazzled","dazzler","dazzlers","dazzles","dazzling","deacon","deaconed","deaconry","deacons","dead","deadbeat","deadbolt","deaden","deadened","deadener","deadens","deader","deadest","deadeye","deadeyes","deadfall","deadhead","deadlier","deadline","deadlock","deadly","deadness","deadpan","deadpans","deads","deadwood","deaerate","deaf","deafen","deafened","deafens","deafer","deafest","deafish","deafly","deafness","deair","deaired","deairing","deairs","deal","dealate","dealated","dealates","dealer","dealers","dealfish","dealing","dealings","deals","dealt","dean","deaned","deanery","deaning","deans","deanship","dear","dearer","dearest","dearie","dearies","dearly","dearness","dears","dearth","dearths","deary","deash","deashed","deashes","deashing","deasil","death","deathbed","deathcup","deathful","deathly","deaths","deathy","deave","deaved","deaves","deaving","deb","debacle","debacles","debar","debark","debarked","debarks","debarred","debars","debase","debased","debaser","debasers","debases","debasing","debate","debated","debater","debaters","debates","debating","debauch","debility","debit","debited","debiting","debits","debonair","debone","deboned","deboner","deboners","debones","deboning","debouch","debouche","debride","debrided","debrides","debrief","debriefs","debris","debruise","debs","debt","debtless","debtor","debtors","debts","debug","debugged","debugs","debunk","debunked","debunker","debunks","debut","debutant","debuted","debuting","debuts","debye","debyes","decadal","decade","decadent","decades","decaf","decafs","decagon","decagons","decagram","decal","decalog","decalogs","decals","decamp","decamped","decamps","decanal","decane","decanes","decant","decanted","decanter","decants","decapod","decapods","decare","decares","decay","decayed","decayer","decayers","decaying","decays","decease","deceased","deceases","decedent","deceit","deceits","deceive","deceived","deceiver","deceives","decemvir","decenary","decency","decennia","decent","decenter","decently","decentre","decern","decerned","decerns","deciare","deciares","decibel","decibels","decide","decided","decider","deciders","decides","deciding","decidua","deciduae","decidual","deciduas","decigram","decile","deciles","decimal","decimals","decimate","decipher","decision","decisive","deck","decked","deckel","deckels","decker","deckers","deckhand","decking","deckings","deckle","deckles","decks","declaim","declaims","declare","declared","declarer","declares","declass","declasse","decline","declined","decliner","declines","deco","decoct","decocted","decocts","decode","decoded","decoder","decoders","decodes","decoding","decolor","decolors","decolour","decor","decorate","decorous","decors","decorum","decorums","decos","decouple","decoy","decoyed","decoyer","decoyers","decoying","decoys","decrease","decree","decreed","decreer","decreers","decrees","decrepit","decretal","decrial","decrials","decried","decrier","decriers","decries","decrown","decrowns","decry","decrying","decrypt","decrypts","decuman","decuple","decupled","decuples","decuries","decurion","decurve","decurved","decurves","decury","dedal","dedans","dedicate","deduce","deduced","deduces","deducing","deduct","deducted","deducts","dee","deed","deeded","deedier","deediest","deeding","deedless","deeds","deedy","deejay","deejays","deem","deemed","deeming","deems","deemster","deep","deepen","deepened","deepener","deepens","deeper","deepest","deeply","deepness","deeps","deer","deerfly","deers","deerskin","deerweed","deeryard","dees","deet","deets","deewan","deewans","deface","defaced","defacer","defacers","defaces","defacing","defame","defamed","defamer","defamers","defames","defaming","defang","defanged","defangs","defat","defats","defatted","default","defaults","defeat","defeated","defeater","defeats","defecate","defect","defected","defector","defects","defence","defences","defend","defended","defender","defends","defense","defensed","defenses","defer","deferent","deferral","deferred","deferrer","defers","defi","defiance","defiant","deficit","deficits","defied","defier","defiers","defies","defilade","defile","defiled","defiler","defilers","defiles","defiling","define","defined","definer","definers","defines","defining","definite","defis","deflate","deflated","deflates","deflator","deflea","defleaed","defleas","deflect","deflects","deflexed","deflower","defoam","defoamed","defoamer","defoams","defocus","defog","defogged","defogger","defogs","deforce","deforced","deforces","deforest","deform","deformed","deformer","deforms","defraud","defrauds","defray","defrayal","defrayed","defrayer","defrays","defrock","defrocks","defrost","defrosts","deft","defter","deftest","deftly","deftness","defunct","defuse","defused","defuses","defusing","defuze","defuzed","defuzes","defuzing","defy","defying","degage","degame","degames","degami","degamis","degas","degases","degassed","degasser","degasses","degauss","degerm","degermed","degerms","deglaze","deglazed","deglazes","degrade","degraded","degrader","degrades","degrease","degree","degreed","degrees","degum","degummed","degums","degust","degusted","degusts","dehisce","dehisced","dehisces","dehorn","dehorned","dehorner","dehorns","dehort","dehorted","dehorts","dei","deice","deiced","deicer","deicers","deices","deicidal","deicide","deicides","deicing","deictic","deific","deifical","deified","deifier","deifiers","deifies","deiform","deify","deifying","deign","deigned","deigning","deigns","deil","deils","deionize","deism","deisms","deist","deistic","deists","deities","deity","deject","dejecta","dejected","dejects","dejeuner","dekagram","dekare","dekares","deke","deked","dekes","deking","dekko","dekkos","del","delaine","delaines","delate","delated","delates","delating","delation","delator","delators","delay","delayed","delayer","delayers","delaying","delays","dele","delead","deleaded","deleads","deleave","deleaved","deleaves","deled","delegacy","delegate","deleing","deles","delete","deleted","deletes","deleting","deletion","delf","delfs","delft","delfts","deli","delicacy","delicate","delict","delicts","delight","delights","delime","delimed","delimes","deliming","delimit","delimits","deliria","delirium","delis","delist","delisted","delists","deliver","delivers","delivery","dell","dellies","dells","delly","delouse","deloused","delouser","delouses","dels","delta","deltaic","deltas","deltic","deltoid","deltoids","delude","deluded","deluder","deluders","deludes","deluding","deluge","deluged","deluges","deluging","delusion","delusive","delusory","deluster","deluxe","delve","delved","delver","delvers","delves","delving","demagog","demagogs","demagogy","demand","demanded","demander","demands","demarche","demark","demarked","demarks","demast","demasted","demasts","deme","demean","demeaned","demeanor","demeans","dement","demented","dementia","dements","demerara","demerge","demerged","demerger","demerges","demerit","demerits","demersal","demes","demesne","demesnes","demeton","demetons","demies","demigod","demigods","demijohn","demilune","demirep","demireps","demise","demised","demises","demising","demit","demits","demitted","demiurge","demivolt","demo","demob","demobbed","demobs","democrat","demode","demoded","demolish","demon","demoness","demoniac","demonian","demonic","demonise","demonism","demonist","demonize","demons","demos","demoses","demote","demoted","demotes","demotic","demotics","demoting","demotion","demotist","demount","demounts","dempster","demur","demure","demurely","demurer","demurest","demurral","demurred","demurrer","demurs","demy","den","denarii","denarius","denary","denature","denazify","dendrite","dendroid","dendron","dendrons","dene","denes","dengue","dengues","deniable","deniably","denial","denials","denied","denier","deniers","denies","denim","denims","denizen","denizens","denned","denning","denote","denoted","denotes","denoting","denotive","denounce","dens","dense","densely","denser","densest","densify","density","dent","dental","dentalia","dentally","dentals","dentate","dentated","dented","denticle","dentil","dentils","dentin","dentinal","dentine","dentines","denting","dentins","dentist","dentists","dentoid","dents","dentural","denture","dentures","denudate","denude","denuded","denuder","denuders","denudes","denuding","deny","denying","deodand","deodands","deodar","deodara","deodaras","deodars","deorbit","deorbits","depaint","depaints","depart","departed","departee","departs","depend","depended","depends","deperm","depermed","deperms","depict","depicted","depicter","depictor","depicts","depilate","deplane","deplaned","deplanes","deplete","depleted","depletes","deplore","deplored","deplorer","deplores","deploy","deployed","deploys","deplume","deplumed","deplumes","depolish","depone","deponed","deponent","depones","deponing","deport","deported","deportee","deports","deposal","deposals","depose","deposed","deposer","deposers","deposes","deposing","deposit","deposits","depot","depots","deprave","depraved","depraver","depraves","depress","deprival","deprive","deprived","depriver","deprives","depside","depsides","depth","depths","depurate","depute","deputed","deputes","deputies","deputing","deputize","deputy","deraign","deraigns","derail","derailed","derails","derange","deranged","deranges","derat","derats","deratted","deray","derays","derbies","derby","dere","derelict","deride","derided","derider","deriders","derides","deriding","deringer","derision","derisive","derisory","derivate","derive","derived","deriver","derivers","derives","deriving","derm","derma","dermal","dermas","dermic","dermis","dermises","dermoid","dermoids","derms","dernier","derogate","derrick","derricks","derriere","derries","derris","derrises","derry","dervish","des","desalt","desalted","desalter","desalts","desand","desanded","desands","descant","descants","descend","descends","descent","descents","describe","descried","descrier","descries","descry","deselect","desert","deserted","deserter","desertic","deserts","deserve","deserved","deserver","deserves","desex","desexed","desexes","desexing","design","designed","designee","designer","designs","desilver","desinent","desire","desired","desirer","desirers","desires","desiring","desirous","desist","desisted","desists","desk","deskman","deskmen","desks","desktop","desktops","desman","desmans","desmid","desmids","desmoid","desmoids","desolate","desorb","desorbed","desorbs","despair","despairs","despatch","despise","despised","despiser","despises","despite","despited","despites","despoil","despoils","despond","desponds","despot","despotic","despots","dessert","desserts","destain","destains","destine","destined","destines","destiny","destrier","destroy","destroys","destruct","desugar","desugars","desulfur","detach","detached","detacher","detaches","detail","detailed","detailer","details","detain","detained","detainee","detainer","detains","detassel","detect","detected","detecter","detector","detects","detent","detente","detentes","detents","deter","deterge","deterged","deterger","deterges","deterred","deterrer","deters","detest","detested","detester","detests","dethrone","detick","deticked","deticker","deticks","detinue","detinues","detonate","detour","detoured","detours","detox","detoxed","detoxes","detoxify","detoxing","detract","detracts","detrain","detrains","detrital","detritus","detrude","detruded","detrudes","deuce","deuced","deucedly","deuces","deucing","deuteric","deuteron","deutzia","deutzias","dev","deva","devalue","devalued","devalues","devas","devein","deveined","deveins","devel","develed","develing","develop","develope","develops","devels","deverbal","devest","devested","devests","deviance","deviancy","deviant","deviants","deviate","deviated","deviates","deviator","device","devices","devil","deviled","deviling","devilish","devilkin","devilled","devilry","devils","deviltry","devious","devisal","devisals","devise","devised","devisee","devisees","deviser","devisers","devises","devising","devisor","devisors","devoice","devoiced","devoices","devoid","devoir","devoirs","devolve","devolved","devolves","devon","devons","devote","devoted","devotee","devotees","devotes","devoting","devotion","devour","devoured","devourer","devours","devout","devouter","devoutly","devs","dew","dewan","dewans","dewar","dewars","dewater","dewaters","dewax","dewaxed","dewaxes","dewaxing","dewberry","dewclaw","dewclaws","dewdrop","dewdrops","dewed","dewfall","dewfalls","dewier","dewiest","dewily","dewiness","dewing","dewlap","dewlaps","dewless","dewool","dewooled","dewools","deworm","dewormed","deworms","dews","dewy","dex","dexes","dexie","dexies","dexter","dextral","dextran","dextrans","dextrin","dextrine","dextrins","dextro","dextrose","dextrous","dexy","dey","deys","dezinc","dezinced","dezincs","dhak","dhaks","dhal","dhals","dharma","dharmas","dharmic","dharna","dharnas","dhobi","dhobis","dhole","dholes","dhoolies","dhooly","dhoora","dhooras","dhooti","dhootie","dhooties","dhootis","dhoti","dhotis","dhourra","dhourras","dhow","dhows","dhurna","dhurnas","dhurrie","dhurries","dhuti","dhutis","diabase","diabases","diabasic","diabetes","diabetic","diablery","diabolic","diabolo","diabolos","diacetyl","diacid","diacidic","diacids","diaconal","diadem","diademed","diadems","diagnose","diagonal","diagram","diagrams","diagraph","dial","dialect","dialects","dialed","dialer","dialers","dialing","dialings","dialist","dialists","diallage","dialled","diallel","dialler","diallers","dialling","diallist","dialog","dialoged","dialoger","dialogic","dialogs","dialogue","dials","dialyse","dialysed","dialyser","dialyses","dialysis","dialytic","dialyze","dialyzed","dialyzer","dialyzes","diamante","diameter","diamide","diamides","diamin","diamine","diamines","diamins","diamond","diamonds","dianthus","diapason","diapause","diaper","diapered","diapers","diaphone","diaphony","diapir","diapiric","diapirs","diapsid","diarchic","diarchy","diaries","diarist","diarists","diarrhea","diary","diaspora","diaspore","diastase","diastem","diastema","diastems","diaster","diasters","diastole","diastral","diatom","diatomic","diatoms","diatonic","diatribe","diatron","diatrons","diazepam","diazin","diazine","diazines","diazinon","diazins","diazo","diazole","diazoles","dib","dibasic","dibbed","dibber","dibbers","dibbing","dibble","dibbled","dibbler","dibblers","dibbles","dibbling","dibbuk","dibbukim","dibbuks","dibs","dicast","dicastic","dicasts","dice","diced","dicentra","dicer","dicers","dices","dicey","dichasia","dichotic","dichroic","dicier","diciest","dicing","dick","dicked","dickens","dicker","dickered","dickers","dickey","dickeys","dickie","dickier","dickies","dickiest","dicking","dicks","dicky","dicliny","dicot","dicots","dicotyl","dicotyls","dicrotal","dicrotic","dicta","dictate","dictated","dictates","dictator","dictier","dictiest","diction","dictions","dictum","dictums","dicty","dicyclic","dicycly","did","didact","didactic","didacts","didactyl","didapper","diddle","diddled","diddler","diddlers","diddles","diddley","diddlies","diddling","diddly","didie","didies","dido","didoes","didos","didst","didy","didymium","didymous","didynamy","die","dieback","diebacks","diecious","died","diehard","diehards","dieing","diel","dieldrin","diemaker","diene","dienes","diereses","dieresis","dieretic","dies","diesel","dieseled","diesels","dieses","diesis","diester","diesters","diestock","diestrum","diestrus","diet","dietary","dieted","dieter","dieters","dietetic","diether","diethers","dieting","diets","differ","differed","differs","diffract","diffuse","diffused","diffuser","diffuses","diffusor","dig","digamies","digamist","digamma","digammas","digamous","digamy","digest","digested","digester","digestor","digests","digged","digger","diggers","digging","diggings","dight","dighted","dighting","dights","digit","digital","digitals","digitate","digitize","digits","diglot","diglots","dignify","dignity","digoxin","digoxins","digraph","digraphs","digress","digs","dihedral","dihedron","dihybrid","dihydric","dikdik","dikdiks","dike","diked","diker","dikers","dikes","dikey","diking","diktat","diktats","dilatant","dilatate","dilate","dilated","dilater","dilaters","dilates","dilating","dilation","dilative","dilator","dilators","dilatory","dildo","dildoe","dildoes","dildos","dilemma","dilemmas","dilemmic","diligent","dill","dilled","dillies","dills","dilly","diluent","diluents","dilute","diluted","diluter","diluters","dilutes","diluting","dilution","dilutive","dilutor","dilutors","diluvia","diluvial","diluvian","diluvion","diluvium","dim","dime","dimer","dimeric","dimerism","dimerize","dimerous","dimers","dimes","dimeter","dimeters","dimethyl","dimetric","diminish","dimities","dimity","dimly","dimmable","dimmed","dimmer","dimmers","dimmest","dimming","dimness","dimorph","dimorphs","dimout","dimouts","dimple","dimpled","dimples","dimplier","dimpling","dimply","dims","dimwit","dimwits","din","dinar","dinars","dindle","dindled","dindles","dindling","dine","dined","diner","dineric","dinero","dineros","diners","dines","dinette","dinettes","ding","dingbat","dingbats","dingdong","dinge","dinged","dinges","dingey","dingeys","dinghies","dinghy","dingier","dingies","dingiest","dingily","dinging","dingle","dingles","dingo","dingoes","dings","dingus","dinguses","dingy","dining","dink","dinked","dinkey","dinkeys","dinkier","dinkies","dinkiest","dinking","dinkly","dinks","dinkum","dinkums","dinky","dinned","dinner","dinners","dinning","dinosaur","dins","dint","dinted","dinting","dints","diobol","diobolon","diobols","diocesan","diocese","dioceses","diode","diodes","dioecism","dioicous","diol","diolefin","diols","diopside","dioptase","diopter","diopters","dioptral","dioptre","dioptres","dioptric","diorama","dioramas","dioramic","diorite","diorites","dioritic","dioxane","dioxanes","dioxid","dioxide","dioxides","dioxids","dioxin","dioxins","dip","diphase","diphasic","diphenyl","diplegia","diplex","diplexer","diploe","diploes","diploic","diploid","diploids","diploidy","diploma","diplomas","diplomat","diplont","diplonts","diplopia","diplopic","diplopod","diploses","diplosis","dipnoan","dipnoans","dipodic","dipodies","dipody","dipolar","dipole","dipoles","dippable","dipped","dipper","dippers","dippier","dippiest","dipping","dippy","dips","dipsades","dipsas","dipso","dipsos","dipstick","dipt","diptera","dipteral","dipteran","dipteron","diptyca","diptycas","diptych","diptychs","diquat","diquats","dirdum","dirdums","dire","direct","directed","directer","directly","director","directs","direful","direly","direness","direr","direst","dirge","dirgeful","dirges","dirham","dirhams","diriment","dirk","dirked","dirking","dirks","dirl","dirled","dirling","dirls","dirndl","dirndls","dirt","dirtied","dirtier","dirties","dirtiest","dirtily","dirts","dirty","dirtying","disable","disabled","disables","disabuse","disagree","disallow","disannul","disarm","disarmed","disarmer","disarms","disarray","disaster","disavow","disavows","disband","disbands","disbar","disbars","disbosom","disbound","disbowel","disbud","disbuds","disburse","disc","discant","discants","discard","discards","discase","discased","discases","disced","discept","discepts","discern","discerns","disci","discing","disciple","disclaim","disclike","disclose","disco","discoed","discoid","discoids","discoing","discolor","discord","discords","discos","discount","discover","discreet","discrete","discrown","discs","discus","discuses","discuss","disdain","disdains","disease","diseased","diseases","disendow","diseuse","diseuses","disfavor","disfrock","disgorge","disgrace","disguise","disgust","disgusts","dish","dished","dishelm","dishelms","disherit","dishes","dishevel","dishful","dishfuls","dishier","dishiest","dishing","dishlike","dishonor","dishpan","dishpans","dishrag","dishrags","dishware","dishy","disinter","disject","disjects","disjoin","disjoins","disjoint","disjunct","disk","disked","diskette","disking","disklike","disks","dislike","disliked","disliker","dislikes","dislimn","dislimns","dislodge","disloyal","dismal","dismaler","dismally","dismals","dismast","dismasts","dismay","dismayed","dismays","disme","dismes","dismiss","dismount","disobey","disobeys","disomic","disorder","disown","disowned","disowns","dispart","disparts","dispatch","dispel","dispels","dispend","dispends","dispense","disperse","dispirit","displace","displant","display","displays","displode","displume","disport","disports","disposal","dispose","disposed","disposer","disposes","dispread","disprize","disproof","disprove","dispute","disputed","disputer","disputes","disquiet","disrate","disrated","disrates","disrobe","disrobed","disrober","disrobes","disroot","disroots","disrupt","disrupts","dissave","dissaved","dissaves","disseat","disseats","dissect","dissects","disseise","disseize","dissent","dissents","dissert","disserts","disserve","dissever","dissolve","dissuade","distaff","distaffs","distain","distains","distal","distally","distance","distant","distaste","distaves","distend","distends","distent","distich","distichs","distil","distill","distills","distils","distinct","distome","distomes","distort","distorts","distract","distrain","distrait","distress","district","distrust","disturb","disturbs","disulfid","disunion","disunite","disunity","disuse","disused","disuses","disusing","disvalue","disyoke","disyoked","disyokes","dit","dita","ditas","ditch","ditched","ditcher","ditchers","ditches","ditching","dite","dites","ditheism","ditheist","dither","dithered","ditherer","dithers","dithery","dithiol","dits","ditsier","ditsiest","ditsy","dittany","ditties","ditto","dittoed","dittoing","dittos","ditty","ditzier","ditziest","ditzy","diureses","diuresis","diuretic","diurnal","diurnals","diuron","diurons","diva","divagate","divalent","divan","divans","divas","dive","divebomb","dived","diver","diverge","diverged","diverges","divers","diverse","divert","diverted","diverter","diverts","dives","divest","divested","divests","divide","divided","dividend","divider","dividers","divides","dividing","dividual","divine","divined","divinely","diviner","diviners","divines","divinest","diving","divining","divinise","divinity","divinize","division","divisive","divisor","divisors","divorce","divorced","divorcee","divorcer","divorces","divot","divots","divulge","divulged","divulger","divulges","divvied","divvies","divvy","divvying","diwan","diwans","dixit","dixits","dizen","dizened","dizening","dizens","dizygous","dizzied","dizzier","dizzies","dizziest","dizzily","dizzy","dizzying","djebel","djebels","djellaba","djin","djinn","djinni","djinns","djinny","djins","doable","doat","doated","doating","doats","dobber","dobbers","dobbies","dobbin","dobbins","dobby","dobie","dobies","dobla","doblas","doblon","doblones","doblons","dobra","dobras","dobson","dobsons","doby","doc","docent","docents","docetic","docile","docilely","docility","dock","dockage","dockages","docked","docker","dockers","docket","docketed","dockets","dockhand","docking","dockland","docks","dockside","dockyard","docs","doctor","doctoral","doctored","doctors","doctrine","document","dodder","doddered","dodderer","dodders","doddery","dodge","dodged","dodgem","dodgems","dodger","dodgers","dodgery","dodges","dodgier","dodgiest","dodging","dodgy","dodo","dodoes","dodoism","dodoisms","dodos","doe","doer","doers","does","doeskin","doeskins","doest","doeth","doff","doffed","doffer","doffers","doffing","doffs","dog","dogbane","dogbanes","dogberry","dogcart","dogcarts","dogdom","dogdoms","doge","dogear","dogeared","dogears","dogedom","dogedoms","doges","dogeship","dogey","dogeys","dogface","dogfaces","dogfight","dogfish","dogged","doggedly","dogger","doggerel","doggers","doggery","doggie","doggier","doggies","doggiest","dogging","doggish","doggo","doggone","doggoned","doggoner","doggones","doggrel","doggrels","doggy","doghouse","dogie","dogies","dogleg","doglegs","doglike","dogma","dogmas","dogmata","dogmatic","dognap","dognaped","dognaper","dognaps","dogs","dogsbody","dogsled","dogsleds","dogteeth","dogtooth","dogtrot","dogtrots","dogvane","dogvanes","dogwatch","dogwood","dogwoods","dogy","doiled","doilies","doily","doing","doings","doit","doited","doits","dojo","dojos","dol","dolce","dolci","doldrums","dole","doled","doleful","dolerite","doles","dolesome","doling","doll","dollar","dollars","dolled","dollied","dollies","dolling","dollish","dollop","dolloped","dollops","dolls","dolly","dollying","dolma","dolmades","dolman","dolmans","dolmas","dolmen","dolmens","dolomite","dolor","doloroso","dolorous","dolors","dolour","dolours","dolphin","dolphins","dols","dolt","doltish","dolts","dom","domain","domains","domal","dome","domed","domelike","domes","domesday","domestic","domic","domical","domicil","domicile","domicils","dominant","dominate","domine","domineer","domines","doming","dominick","dominie","dominies","dominion","dominium","domino","dominoes","dominos","doms","don","dona","donas","donate","donated","donates","donating","donation","donative","donator","donators","done","donee","donees","doneness","dong","donga","dongas","dongola","dongolas","dongs","donjon","donjons","donkey","donkeys","donna","donnas","donne","donned","donnee","donnees","donnerd","donnered","donnert","donning","donnish","donor","donors","dons","donsie","donsy","donut","donuts","donzel","donzels","doodad","doodads","doodle","doodled","doodler","doodlers","doodles","doodling","doolee","doolees","doolie","doolies","dooly","doom","doomed","doomful","dooming","dooms","doomsday","doomster","door","doorbell","doorjamb","doorknob","doorless","doorman","doormat","doormats","doormen","doornail","doorpost","doors","doorsill","doorstep","doorstop","doorway","doorways","dooryard","doozer","doozers","doozie","doozies","doozy","dopa","dopamine","dopant","dopants","dopas","dope","doped","doper","dopers","dopes","dopester","dopey","dopier","dopiest","dopiness","doping","dopy","dor","dorado","dorados","dorbug","dorbugs","dore","dorhawk","dorhawks","dories","dork","dorkier","dorkiest","dorks","dorky","dorm","dormancy","dormant","dormer","dormers","dormice","dormie","dormient","dormin","dormins","dormouse","dorms","dormy","dorneck","dornecks","dornick","dornicks","dornock","dornocks","dorp","dorper","dorpers","dorps","dorr","dorrs","dors","dorsa","dorsad","dorsal","dorsally","dorsals","dorsel","dorsels","dorser","dorsers","dorsum","dorty","dory","dos","dosage","dosages","dose","dosed","doser","dosers","doses","dosing","doss","dossal","dossals","dossed","dossel","dossels","dosser","dosseret","dossers","dosses","dossier","dossiers","dossil","dossils","dossing","dost","dot","dotage","dotages","dotal","dotard","dotardly","dotards","dotation","dote","doted","doter","doters","dotes","doth","dotier","dotiest","doting","dotingly","dots","dotted","dottel","dottels","dotter","dotterel","dotters","dottier","dottiest","dottily","dotting","dottle","dottles","dottrel","dottrels","dotty","doty","double","doubled","doubler","doublers","doubles","doublet","doublets","doubling","doubloon","doublure","doubly","doubt","doubted","doubter","doubters","doubtful","doubting","doubts","douce","doucely","douceur","douceurs","douche","douched","douches","douching","dough","doughboy","doughier","doughnut","doughs","dought","doughty","doughy","doum","douma","doumas","doums","doupioni","dour","doura","dourah","dourahs","douras","dourer","dourest","dourine","dourines","dourly","dourness","douse","doused","douser","dousers","douses","dousing","doux","douzeper","dove","dovecot","dovecote","dovecots","dovekey","dovekeys","dovekie","dovekies","dovelike","doven","dovened","dovening","dovens","doves","dovetail","dovish","dow","dowable","dowager","dowagers","dowdier","dowdies","dowdiest","dowdily","dowdy","dowdyish","dowed","dowel","doweled","doweling","dowelled","dowels","dower","dowered","doweries","dowering","dowers","dowery","dowie","dowing","down","downbeat","downcast","downcome","downed","downer","downers","downfall","downhaul","downhill","downier","downiest","downing","download","downplay","downpour","downs","downside","downsize","downtick","downtime","downtown","downtrod","downturn","downward","downwash","downwind","downy","dowries","dowry","dows","dowsabel","dowse","dowsed","dowser","dowsers","dowses","dowsing","doxie","doxies","doxology","doxy","doyen","doyenne","doyennes","doyens","doyley","doyleys","doylies","doyly","doze","dozed","dozen","dozened","dozening","dozens","dozenth","dozenths","dozer","dozers","dozes","dozier","doziest","dozily","doziness","dozing","dozy","drab","drabbed","drabber","drabbest","drabbet","drabbets","drabbing","drabble","drabbled","drabbles","drably","drabness","drabs","dracaena","drachm","drachma","drachmae","drachmai","drachmas","drachms","draconic","draff","draffier","draffish","draffs","draffy","draft","drafted","draftee","draftees","drafter","drafters","draftier","draftily","drafting","drafts","drafty","drag","dragee","dragees","dragged","dragger","draggers","draggier","dragging","draggle","draggled","draggles","draggy","dragline","dragnet","dragnets","dragoman","dragomen","dragon","dragonet","dragons","dragoon","dragoons","dragrope","drags","dragster","drail","drails","drain","drainage","drained","drainer","drainers","draining","drains","drake","drakes","dram","drama","dramas","dramatic","drammed","dramming","drammock","drams","dramshop","drank","drapable","drape","draped","draper","drapers","drapery","drapes","drapey","draping","drastic","drat","drats","dratted","dratting","draught","draughts","draughty","drave","draw","drawable","drawback","drawbar","drawbars","drawbore","drawdown","drawee","drawees","drawer","drawers","drawing","drawings","drawl","drawled","drawler","drawlers","drawlier","drawling","drawls","drawly","drawn","draws","drawtube","dray","drayage","drayages","drayed","draying","drayman","draymen","drays","dread","dreaded","dreadful","dreading","dreads","dream","dreamed","dreamer","dreamers","dreamful","dreamier","dreamily","dreaming","dreams","dreamt","dreamy","drear","drearier","drearies","drearily","drears","dreary","dreck","drecks","drecky","dredge","dredged","dredger","dredgers","dredges","dredging","dree","dreed","dreeing","drees","dreg","dreggier","dreggish","dreggy","dregs","dreich","dreidel","dreidels","dreidl","dreidls","dreigh","drek","dreks","drench","drenched","drencher","drenches","dress","dressage","dressed","dresser","dressers","dresses","dressier","dressily","dressing","dressy","drest","drew","drib","dribbed","dribbing","dribble","dribbled","dribbler","dribbles","dribblet","dribbly","driblet","driblets","dribs","dried","driegh","drier","driers","dries","driest","drift","driftage","drifted","drifter","drifters","driftier","drifting","driftpin","drifts","drifty","drill","drilled","driller","drillers","drilling","drills","drily","drink","drinker","drinkers","drinking","drinks","drip","dripless","dripped","dripper","drippers","drippier","dripping","drippy","drips","dript","drivable","drive","drivel","driveled","driveler","drivels","driven","driver","drivers","drives","driveway","driving","drivings","drizzle","drizzled","drizzles","drizzly","drogue","drogues","droit","droits","droll","drolled","droller","drollery","drollest","drolling","drolls","drolly","dromon","dromond","dromonds","dromons","drone","droned","droner","droners","drones","drongo","drongos","droning","dronish","drool","drooled","drooling","drools","droop","drooped","droopier","droopily","drooping","droops","droopy","drop","drophead","dropkick","droplet","droplets","dropout","dropouts","dropped","dropper","droppers","dropping","drops","dropshot","dropsied","dropsies","dropsy","dropt","dropwort","drosera","droseras","droshky","droskies","drosky","dross","drosses","drossier","drossy","drought","droughts","droughty","drouk","drouked","drouking","drouks","drouth","drouths","drouthy","drove","droved","drover","drovers","droves","droving","drown","drownd","drownded","drownds","drowned","drowner","drowners","drowning","drowns","drowse","drowsed","drowses","drowsier","drowsily","drowsing","drowsy","drub","drubbed","drubber","drubbers","drubbing","drubs","drudge","drudged","drudger","drudgers","drudgery","drudges","drudging","drug","drugged","drugget","druggets","druggie","druggier","druggies","drugging","druggist","druggy","drugs","druid","druidess","druidic","druidism","druids","drum","drumbeat","drumble","drumbled","drumbles","drumfire","drumfish","drumhead","drumlier","drumlike","drumlin","drumlins","drumly","drummed","drummer","drummers","drumming","drumroll","drums","drunk","drunkard","drunken","drunker","drunkest","drunks","drupe","drupelet","drupes","druse","druses","druthers","dry","dryable","dryad","dryades","dryadic","dryads","dryer","dryers","dryest","drying","dryish","dryland","drylot","drylots","dryly","dryness","drypoint","drys","drywall","drywalls","duad","duads","dual","dualism","dualisms","dualist","dualists","duality","dualize","dualized","dualizes","dually","duals","dub","dubbed","dubber","dubbers","dubbin","dubbing","dubbings","dubbins","dubiety","dubious","dubonnet","dubs","ducal","ducally","ducat","ducats","duce","duces","duchess","duchies","duchy","duci","duck","duckbill","ducked","ducker","duckers","duckie","duckier","duckies","duckiest","ducking","duckling","duckpin","duckpins","ducks","ducktail","duckwalk","duckweed","ducky","duct","ductal","ducted","ductile","ducting","ductings","ductless","ducts","ductule","ductules","dud","duddie","duddy","dude","duded","dudeen","dudeens","dudes","dudgeon","dudgeons","duding","dudish","dudishly","duds","due","duecento","duel","dueled","dueler","duelers","dueling","duelist","duelists","duelled","dueller","duellers","duelli","duelling","duellist","duello","duellos","duels","duende","duendes","dueness","duenna","duennas","dues","duet","duets","duetted","duetting","duettist","duff","duffel","duffels","duffer","duffers","duffle","duffles","duffs","dug","dugong","dugongs","dugout","dugouts","dugs","dui","duiker","duikers","duit","duits","duke","dukedom","dukedoms","dukes","dulcet","dulcetly","dulcets","dulciana","dulcify","dulcimer","dulcinea","dulia","dulias","dull","dullard","dullards","dulled","duller","dullest","dulling","dullish","dullness","dulls","dully","dulness","dulse","dulses","duly","duma","dumas","dumb","dumbbell","dumbed","dumber","dumbest","dumbhead","dumbing","dumbly","dumbness","dumbs","dumdum","dumdums","dumfound","dumka","dumky","dummied","dummies","dummkopf","dummy","dummying","dump","dumpcart","dumped","dumper","dumpers","dumpier","dumpiest","dumpily","dumping","dumpings","dumpish","dumpling","dumps","dumpy","dun","dunam","dunams","dunce","dunces","dunch","dunches","duncical","duncish","dune","duneland","dunelike","dunes","dung","dungaree","dunged","dungeon","dungeons","dunghill","dungier","dungiest","dunging","dungs","dungy","dunite","dunites","dunitic","dunk","dunked","dunker","dunkers","dunking","dunks","dunlin","dunlins","dunnage","dunnages","dunned","dunner","dunness","dunnest","dunning","dunnite","dunnites","duns","dunt","dunted","dunting","dunts","duo","duodena","duodenal","duodenum","duolog","duologs","duologue","duomi","duomo","duomos","duopoly","duopsony","duos","duotone","duotones","dup","dupable","dupe","duped","duper","duperies","dupers","dupery","dupes","duping","duple","duplex","duplexed","duplexer","duplexes","dupped","dupping","dups","dura","durable","durables","durably","dural","duramen","duramens","durance","durances","duras","duration","durative","durbar","durbars","dure","dured","dures","duress","duresses","durian","durians","during","durion","durions","durmast","durmasts","durn","durndest","durned","durneder","durning","durns","duro","duroc","durocs","duros","durr","durra","durras","durrie","durries","durrs","durst","durum","durums","dusk","dusked","duskier","duskiest","duskily","dusking","duskish","dusks","dusky","dust","dustbin","dustbins","dusted","duster","dusters","dustheap","dustier","dustiest","dustily","dusting","dustless","dustlike","dustman","dustmen","dustoff","dustoffs","dustpan","dustpans","dustrag","dustrags","dusts","dustup","dustups","dusty","dutch","dutchman","dutchmen","duteous","dutiable","duties","dutiful","duty","duumvir","duumviri","duumvirs","duvet","duvetine","duvets","duvetyn","duvetyne","duvetyns","duxelles","dwarf","dwarfed","dwarfer","dwarfest","dwarfing","dwarfish","dwarfism","dwarfs","dwarves","dwell","dwelled","dweller","dwellers","dwelling","dwells","dwelt","dwindle","dwindled","dwindles","dwine","dwined","dwines","dwining","dyable","dyad","dyadic","dyadics","dyads","dyarchic","dyarchy","dybbuk","dybbukim","dybbuks","dye","dyeable","dyed","dyeing","dyeings","dyer","dyers","dyes","dyestuff","dyeweed","dyeweeds","dyewood","dyewoods","dying","dyings","dyke","dyked","dykes","dykey","dyking","dynamic","dynamics","dynamism","dynamist","dynamite","dynamo","dynamos","dynast","dynastic","dynasts","dynasty","dynatron","dyne","dynel","dynels","dynes","dynode","dynodes","dysgenic","dyslexia","dyslexic","dyspepsy","dyspnea","dyspneal","dyspneas","dyspneic","dyspnoea","dyspnoic","dystaxia","dystocia","dystonia","dystonic","dystopia","dysuria","dysurias","dysuric","dyvour","dyvours","each","eager","eagerer","eagerest","eagerly","eagers","eagle","eagles","eaglet","eaglets","eagre","eagres","eanling","eanlings","ear","earache","earaches","eardrop","eardrops","eardrum","eardrums","eared","earflap","earflaps","earful","earfuls","earing","earings","earl","earlap","earlaps","earldom","earldoms","earless","earlier","earliest","earlobe","earlobes","earlock","earlocks","earls","earlship","early","earmark","earmarks","earmuff","earmuffs","earn","earned","earner","earners","earnest","earnests","earning","earnings","earns","earphone","earpiece","earplug","earplugs","earring","earrings","ears","earshot","earshots","earstone","earth","earthed","earthen","earthier","earthily","earthing","earthly","earthman","earthmen","earthnut","earthpea","earths","earthset","earthy","earwax","earwaxes","earwig","earwigs","earworm","earworms","ease","eased","easeful","easel","easels","easement","eases","easier","easies","easiest","easily","easiness","easing","east","easter","easterly","eastern","easters","easting","eastings","easts","eastward","easy","eat","eatable","eatables","eaten","eater","eateries","eaters","eatery","eath","eating","eatings","eats","eau","eaux","eave","eaved","eaves","ebb","ebbed","ebbet","ebbets","ebbing","ebbs","ebon","ebonies","ebonise","ebonised","ebonises","ebonite","ebonites","ebonize","ebonized","ebonizes","ebons","ebony","ecarte","ecartes","ecaudate","ecbolic","ecbolics","ecclesia","eccrine","ecdyses","ecdysial","ecdysis","ecdyson","ecdysone","ecdysons","ecesis","ecesises","echard","echards","eche","eched","echelon","echelons","eches","echidna","echidnae","echidnas","echinate","eching","echini","echinoid","echinus","echo","echoed","echoer","echoers","echoes","echoey","echogram","echoic","echoing","echoism","echoisms","echoless","eclair","eclairs","eclat","eclats","eclectic","eclipse","eclipsed","eclipses","eclipsis","ecliptic","eclogite","eclogue","eclogues","eclosion","ecocidal","ecocide","ecocides","ecofreak","ecologic","ecology","economic","economy","ecotonal","ecotone","ecotones","ecotype","ecotypes","ecotypic","ecraseur","ecru","ecrus","ecstasy","ecstatic","ectases","ectasis","ectatic","ecthyma","ectoderm","ectomere","ectopia","ectopias","ectopic","ectosarc","ectozoa","ectozoan","ectozoon","ectypal","ectype","ectypes","ecu","ecumenic","ecus","eczema","eczemas","edacious","edacity","edaphic","eddied","eddies","eddo","eddoes","eddy","eddying","edema","edemas","edemata","edenic","edentate","edge","edged","edgeless","edger","edgers","edges","edgeways","edgewise","edgier","edgiest","edgily","edginess","edging","edgings","edgy","edh","edhs","edible","edibles","edict","edictal","edicts","edifice","edifices","edified","edifier","edifiers","edifies","edify","edifying","edile","ediles","edit","editable","edited","editing","edition","editions","editor","editors","editress","edits","educable","educate","educated","educates","educator","educe","educed","educes","educible","educing","educt","eduction","eductive","eductor","eductors","educts","eel","eelgrass","eelier","eeliest","eellike","eelpout","eelpouts","eels","eelworm","eelworms","eely","eerie","eerier","eeriest","eerily","eeriness","eery","eff","effable","efface","effaced","effacer","effacers","effaces","effacing","effect","effected","effecter","effector","effects","effendi","effendis","efferent","effete","effetely","efficacy","effigial","effigies","effigy","effluent","effluvia","efflux","effluxes","effort","efforts","effs","effulge","effulged","effulges","effuse","effused","effuses","effusing","effusion","effusive","efs","eft","efts","eftsoon","eftsoons","egad","egads","egal","egalite","egalites","eger","egers","egest","egesta","egested","egesting","egestion","egestive","egests","egg","eggar","eggars","eggcup","eggcups","egged","egger","eggers","egghead","eggheads","egging","eggless","eggnog","eggnogs","eggplant","eggs","eggshell","eggy","egis","egises","eglatere","ego","egoism","egoisms","egoist","egoistic","egoists","egoless","egomania","egos","egotism","egotisms","egotist","egotists","egress","egressed","egresses","egret","egrets","egyptian","eide","eider","eiders","eidetic","eidola","eidolic","eidolon","eidolons","eidos","eight","eighteen","eighth","eighthly","eighths","eighties","eights","eightvo","eightvos","eighty","eikon","eikones","eikons","einkorn","einkorns","einstein","eirenic","either","eject","ejecta","ejected","ejecting","ejection","ejective","ejector","ejectors","ejects","eke","eked","ekes","eking","ekistic","ekistics","ekpwele","ekpweles","ektexine","ekuele","elain","elains","elan","eland","elands","elans","elaphine","elapid","elapids","elapine","elapse","elapsed","elapses","elapsing","elastase","elastic","elastics","elastin","elastins","elate","elated","elatedly","elater","elaterid","elaterin","elaters","elates","elating","elation","elations","elative","elatives","elbow","elbowed","elbowing","elbows","eld","elder","elderly","elders","eldest","eldrich","eldritch","elds","elect","elected","electee","electees","electing","election","elective","elector","electors","electret","electric","electro","electron","electros","electrum","elects","elegance","elegancy","elegant","elegiac","elegiacs","elegies","elegise","elegised","elegises","elegist","elegists","elegit","elegits","elegize","elegized","elegizes","elegy","element","elements","elemi","elemis","elenchi","elenchic","elenchus","elenctic","elephant","elevate","elevated","elevates","elevator","eleven","elevens","eleventh","elevon","elevons","elf","elfin","elfins","elfish","elfishly","elflike","elflock","elflocks","elhi","elicit","elicited","elicitor","elicits","elide","elided","elides","elidible","eliding","eligible","eligibly","elint","elints","elision","elisions","elite","elites","elitism","elitisms","elitist","elitists","elixir","elixirs","elk","elkhound","elks","ell","ellipse","ellipses","ellipsis","elliptic","ells","elm","elmier","elmiest","elms","elmy","elodea","elodeas","eloign","eloigned","eloigner","eloigns","eloin","eloined","eloiner","eloiners","eloining","eloins","elongate","elope","eloped","eloper","elopers","elopes","eloping","eloquent","els","else","eluant","eluants","eluate","eluates","elude","eluded","eluder","eluders","eludes","eluding","eluent","eluents","elusion","elusions","elusive","elusory","elute","eluted","elutes","eluting","elution","elutions","eluvia","eluvial","eluviate","eluvium","eluviums","elver","elvers","elves","elvish","elvishly","elysian","elytra","elytroid","elytron","elytrous","elytrum","emaciate","emanate","emanated","emanates","emanator","embalm","embalmed","embalmer","embalms","embank","embanked","embanks","embar","embargo","embark","embarked","embarks","embarred","embars","embassy","embattle","embay","embayed","embaying","embays","embed","embedded","embeds","ember","embers","embezzle","embitter","emblaze","emblazed","emblazer","emblazes","emblazon","emblem","emblemed","emblems","embodied","embodier","embodies","embody","embolden","emboli","embolic","embolies","embolism","embolus","emboly","emborder","embosk","embosked","embosks","embosom","embosoms","emboss","embossed","embosser","embosses","embow","embowed","embowel","embowels","embower","embowers","embowing","embows","embrace","embraced","embracer","embraces","embroil","embroils","embrown","embrowns","embrue","embrued","embrues","embruing","embrute","embruted","embrutes","embryo","embryoid","embryon","embryons","embryos","emcee","emceed","emceeing","emcees","eme","emeer","emeerate","emeers","emend","emendate","emended","emender","emenders","emending","emends","emerald","emeralds","emerge","emerged","emergent","emerges","emerging","emeries","emerita","emeritae","emeriti","emeritus","emerod","emerods","emeroid","emeroids","emersed","emersion","emery","emes","emeses","emesis","emetic","emetics","emetin","emetine","emetines","emetins","emeu","emeus","emeute","emeutes","emic","emigrant","emigrate","emigre","emigres","eminence","eminency","eminent","emir","emirate","emirates","emirs","emissary","emission","emissive","emit","emits","emitted","emitter","emitters","emitting","emmer","emmers","emmet","emmets","emodin","emodins","emote","emoted","emoter","emoters","emotes","emoting","emotion","emotions","emotive","empale","empaled","empaler","empalers","empales","empaling","empanada","empanel","empanels","empathic","empathy","emperies","emperor","emperors","empery","emphases","emphasis","emphatic","empire","empires","empiric","empirics","emplace","emplaced","emplaces","emplane","emplaned","emplanes","employ","employe","employed","employee","employer","employes","employs","empoison","emporia","emporium","empower","empowers","empress","emprise","emprises","emprize","emprizes","emptied","emptier","emptiers","empties","emptiest","emptily","emptings","emptins","empty","emptying","empurple","empyema","empyemas","empyemic","empyreal","empyrean","ems","emu","emulate","emulated","emulates","emulator","emulous","emulsify","emulsion","emulsive","emulsoid","emus","emyd","emyde","emydes","emyds","enable","enabled","enabler","enablers","enables","enabling","enact","enacted","enacting","enactive","enactor","enactors","enactory","enacts","enamel","enameled","enameler","enamels","enamine","enamines","enamor","enamored","enamors","enamour","enamours","enate","enates","enatic","enation","enations","encaenia","encage","encaged","encages","encaging","encamp","encamped","encamps","encase","encased","encases","encash","encashed","encashes","encasing","enceinte","enchain","enchains","enchant","enchants","enchase","enchased","enchaser","enchases","enchoric","encina","encinal","encinas","encipher","encircle","enclasp","enclasps","enclave","enclaves","enclitic","enclose","enclosed","encloser","encloses","encode","encoded","encoder","encoders","encodes","encoding","encomia","encomium","encore","encored","encores","encoring","encroach","encrust","encrusts","encrypt","encrypts","encumber","encyclic","encyst","encysted","encysts","end","endamage","endameba","endanger","endarch","endarchy","endbrain","endear","endeared","endears","endeavor","ended","endemial","endemic","endemics","endemism","ender","endermic","enders","endexine","endgame","endgames","ending","endings","endite","endited","endites","enditing","endive","endives","endleaf","endless","endlong","endmost","endnote","endnotes","endocarp","endocast","endoderm","endogamy","endogen","endogens","endogeny","endopod","endopods","endorse","endorsed","endorsee","endorser","endorses","endorsor","endosarc","endosmos","endosome","endostea","endow","endowed","endower","endowers","endowing","endows","endozoic","endpaper","endplate","endpoint","endrin","endrins","ends","endue","endued","endues","enduing","endure","endured","endures","enduring","enduro","enduros","endways","endwise","enema","enemas","enemata","enemies","enemy","energid","energids","energies","energise","energize","energy","enervate","enface","enfaced","enfaces","enfacing","enfeeble","enfeoff","enfeoffs","enfetter","enfever","enfevers","enfilade","enflame","enflamed","enflames","enfold","enfolded","enfolder","enfolds","enforce","enforced","enforcer","enforces","enframe","enframed","enframes","eng","engage","engaged","engager","engagers","engages","engaging","engender","engild","engilded","engilds","engine","engined","engineer","enginery","engines","engining","enginous","engird","engirded","engirdle","engirds","engirt","english","englut","engluts","engorge","engorged","engorges","engraft","engrafts","engrail","engrails","engrain","engrains","engram","engramme","engrams","engrave","engraved","engraver","engraves","engross","engs","engulf","engulfed","engulfs","enhalo","enhaloed","enhaloes","enhalos","enhance","enhanced","enhancer","enhances","enigma","enigmas","enigmata","enisle","enisled","enisles","enisling","enjambed","enjoin","enjoined","enjoiner","enjoins","enjoy","enjoyed","enjoyer","enjoyers","enjoying","enjoys","enkindle","enlace","enlaced","enlaces","enlacing","enlarge","enlarged","enlarger","enlarges","enlist","enlisted","enlistee","enlister","enlists","enliven","enlivens","enmesh","enmeshed","enmeshes","enmities","enmity","ennead","enneadic","enneads","enneagon","ennoble","ennobled","ennobler","ennobles","ennui","ennuis","ennuye","ennuyee","enol","enolase","enolases","enolic","enology","enols","enorm","enormity","enormous","enosis","enosises","enough","enoughs","enounce","enounced","enounces","enow","enows","enplane","enplaned","enplanes","enquire","enquired","enquires","enquiry","enrage","enraged","enrages","enraging","enrapt","enravish","enrich","enriched","enricher","enriches","enrobe","enrobed","enrober","enrobers","enrobes","enrobing","enrol","enroll","enrolled","enrollee","enroller","enrolls","enrols","enroot","enrooted","enroots","ens","ensample","ensconce","enscroll","ensemble","enserf","enserfed","enserfs","ensheath","enshrine","enshroud","ensiform","ensign","ensigncy","ensigns","ensilage","ensile","ensiled","ensiles","ensiling","enskied","enskies","ensky","enskyed","enskying","enslave","enslaved","enslaver","enslaves","ensnare","ensnared","ensnarer","ensnares","ensnarl","ensnarls","ensorcel","ensoul","ensouled","ensouls","ensphere","ensue","ensued","ensues","ensuing","ensure","ensured","ensurer","ensurers","ensures","ensuring","enswathe","entail","entailed","entailer","entails","entameba","entangle","entases","entasia","entasias","entasis","entastic","entellus","entente","ententes","enter","entera","enteral","entered","enterer","enterers","enteric","entering","enteron","enterons","enters","enthalpy","enthetic","enthral","enthrall","enthrals","enthrone","enthuse","enthused","enthuses","entia","entice","enticed","enticer","enticers","entices","enticing","entire","entirely","entires","entirety","entities","entitle","entitled","entitles","entity","entoderm","entoil","entoiled","entoils","entomb","entombed","entombs","entopic","entozoa","entozoal","entozoan","entozoic","entozoon","entrails","entrain","entrains","entrance","entrant","entrants","entrap","entraps","entreat","entreats","entreaty","entree","entrees","entrench","entrepot","entresol","entries","entropic","entropy","entrust","entrusts","entry","entryway","entwine","entwined","entwines","entwist","entwists","enure","enured","enures","enuresis","enuretic","enuring","envelop","envelope","envelops","envenom","envenoms","enviable","enviably","envied","envier","enviers","envies","envious","environ","environs","envisage","envision","envoi","envois","envoy","envoys","envy","envying","enwheel","enwheels","enwind","enwinds","enwomb","enwombed","enwombs","enwound","enwrap","enwraps","enzootic","enzym","enzyme","enzymes","enzymic","enzyms","eobiont","eobionts","eohippus","eolian","eolipile","eolith","eolithic","eoliths","eolopile","eon","eonian","eonism","eonisms","eons","eosin","eosine","eosines","eosinic","eosins","epact","epacts","eparch","eparchs","eparchy","epaulet","epaulets","epazote","epazotes","epee","epeeist","epeeists","epees","epeiric","ependyma","epergne","epergnes","epha","ephah","ephahs","ephas","ephebe","ephebes","ephebi","ephebic","epheboi","ephebos","ephebus","ephedra","ephedras","ephedrin","ephemera","ephod","ephods","ephor","ephoral","ephorate","ephori","ephors","epiblast","epibolic","epiboly","epic","epical","epically","epicalyx","epicarp","epicarps","epicedia","epicene","epicenes","epiclike","epicotyl","epics","epicure","epicures","epicycle","epidemic","epiderm","epiderms","epidote","epidotes","epidotic","epidural","epifauna","epifocal","epigeal","epigean","epigeic","epigene","epigenic","epigeous","epigon","epigone","epigones","epigoni","epigonic","epigons","epigonus","epigram","epigrams","epigraph","epigyny","epilepsy","epilog","epilogs","epilogue","epimer","epimere","epimeres","epimeric","epimers","epimysia","epinaoi","epinaos","epinasty","epiphany","epiphyte","episcia","episcias","episcope","episode","episodes","episodic","episomal","episome","episomes","epistasy","epistle","epistler","epistles","epistome","epistyle","epitaph","epitaphs","epitases","epitasis","epitaxic","epitaxy","epithet","epithets","epitome","epitomes","epitomic","epizoa","epizoic","epizoism","epizoite","epizoon","epizooty","epoch","epochal","epochs","epode","epodes","eponym","eponymic","eponyms","eponymy","epopee","epopees","epopoeia","epos","eposes","epoxide","epoxides","epoxied","epoxies","epoxy","epoxyed","epoxying","epsilon","epsilons","equable","equably","equal","equaled","equaling","equalise","equality","equalize","equalled","equally","equals","equate","equated","equates","equating","equation","equator","equators","equerry","equine","equinely","equines","equinity","equinox","equip","equipage","equipped","equipper","equips","equiseta","equitant","equites","equities","equity","equivoke","era","eradiate","eras","erasable","erase","erased","eraser","erasers","erases","erasing","erasion","erasions","erasure","erasures","erbium","erbiums","ere","erect","erected","erecter","erecters","erectile","erecting","erection","erective","erectly","erector","erectors","erects","erelong","eremite","eremites","eremitic","eremuri","eremurus","erenow","erepsin","erepsins","erethic","erethism","erewhile","erg","ergastic","ergate","ergates","ergo","ergodic","ergot","ergotic","ergotism","ergots","ergs","erica","ericas","ericoid","erigeron","eringo","eringoes","eringos","eristic","eristics","erlking","erlkings","ermine","ermined","ermines","ern","erne","ernes","erns","erode","eroded","erodent","erodes","erodible","eroding","erogenic","eros","erose","erosely","eroses","erosible","erosion","erosions","erosive","erotic","erotica","erotical","erotics","erotism","erotisms","erotize","erotized","erotizes","err","errancy","errand","errands","errant","errantly","errantry","errants","errata","erratas","erratic","erratics","erratum","erred","errhine","errhines","erring","erringly","error","errors","errs","ers","ersatz","ersatzes","erses","erst","eruct","eructate","eructed","eructing","eructs","erudite","erugo","erugos","erumpent","erupt","erupted","erupting","eruption","eruptive","erupts","ervil","ervils","eryngo","eryngoes","eryngos","erythema","erythron","escalade","escalate","escallop","escalop","escalops","escapade","escape","escaped","escapee","escapees","escaper","escapers","escapes","escaping","escapism","escapist","escar","escargot","escarole","escarp","escarped","escarps","escars","eschalot","eschar","eschars","escheat","escheats","eschew","eschewal","eschewed","eschews","escolar","escolars","escort","escorted","escorts","escot","escoted","escoting","escots","escrow","escrowed","escrows","escuage","escuages","escudo","escudos","esculent","eserine","eserines","eses","eskar","eskars","esker","eskers","esophagi","esoteric","espalier","espanol","esparto","espartos","especial","espial","espials","espied","espiegle","espies","espousal","espouse","espoused","espouser","espouses","espresso","esprit","esprits","espy","espying","esquire","esquired","esquires","ess","essay","essayed","essayer","essayers","essaying","essayist","essays","essence","essences","esses","essoin","essoins","essonite","estancia","estate","estated","estates","estating","esteem","esteemed","esteems","ester","esterase","esterify","esters","estheses","esthesia","esthesis","esthete","esthetes","esthetic","estimate","estival","estivate","estop","estopped","estoppel","estops","estovers","estragon","estral","estrange","estray","estrayed","estrays","estreat","estreats","estrin","estrins","estriol","estriols","estrogen","estrone","estrones","estrous","estrual","estrum","estrums","estrus","estruses","estuary","esurient","eta","etagere","etageres","etalon","etalons","etamin","etamine","etamines","etamins","etape","etapes","etas","etatism","etatisms","etatist","etcetera","etch","etchant","etchants","etched","etcher","etchers","etches","etching","etchings","eternal","eternals","eterne","eternise","eternity","eternize","etesian","etesians","eth","ethane","ethanes","ethanol","ethanols","ethene","ethenes","ethephon","ether","ethereal","etheric","etherify","etherish","etherize","ethers","ethic","ethical","ethicals","ethician","ethicist","ethicize","ethics","ethinyl","ethinyls","ethion","ethions","ethmoid","ethmoids","ethnarch","ethnic","ethnical","ethnics","ethnos","ethnoses","ethology","ethos","ethoses","ethoxies","ethoxy","ethoxyl","ethoxyls","eths","ethyl","ethylate","ethylene","ethylic","ethyls","ethyne","ethynes","ethynyl","ethynyls","etic","etiolate","etiology","etna","etnas","etoile","etoiles","etude","etudes","etui","etuis","etwee","etwees","etyma","etymon","etymons","eucaine","eucaines","eucalypt","eucharis","euchre","euchred","euchres","euchring","euclase","euclases","eucrite","eucrites","eucritic","eudaemon","eudemon","eudemons","eugenia","eugenias","eugenic","eugenics","eugenist","eugenol","eugenols","euglena","euglenas","eulachan","eulachon","eulogia","eulogiae","eulogias","eulogies","eulogise","eulogist","eulogium","eulogize","eulogy","eunuch","eunuchs","euonymus","eupatrid","eupepsia","eupepsy","eupeptic","euphenic","euphonic","euphony","euphoria","euphoric","euphotic","euphrasy","euphroe","euphroes","euphuism","euphuist","euploid","euploids","euploidy","eupnea","eupneas","eupneic","eupnoea","eupnoeas","eupnoeic","eureka","euripi","euripus","euro","eurokies","eurokous","euroky","europium","euros","eurybath","euryoky","eurythmy","eustacy","eustatic","eustele","eusteles","eutaxies","eutaxy","eutectic","eutrophy","euxenite","evacuant","evacuate","evacuee","evacuees","evadable","evade","evaded","evader","evaders","evades","evadible","evading","evaluate","evanesce","evangel","evangels","evanish","evasion","evasions","evasive","eve","evection","even","evened","evener","eveners","evenest","evenfall","evening","evenings","evenly","evenness","evens","evensong","event","eventful","eventide","events","eventual","ever","evermore","eversion","evert","everted","everting","evertor","evertors","everts","every","everyday","everyman","everymen","everyone","everyway","eves","evict","evicted","evictee","evictees","evicting","eviction","evictor","evictors","evicts","evidence","evident","evil","evildoer","eviler","evilest","eviller","evillest","evilly","evilness","evils","evince","evinced","evinces","evincing","evincive","evitable","evite","evited","evites","eviting","evocable","evocator","evoke","evoked","evoker","evokers","evokes","evoking","evolute","evolutes","evolve","evolved","evolver","evolvers","evolves","evolving","evonymus","evulsion","evzone","evzones","ewe","ewer","ewers","ewes","exact","exacta","exactas","exacted","exacter","exacters","exactest","exacting","exaction","exactly","exactor","exactors","exacts","exalt","exalted","exalter","exalters","exalting","exalts","exam","examen","examens","examine","examined","examinee","examiner","examines","example","exampled","examples","exams","exanthem","exarch","exarchal","exarchs","exarchy","excavate","exceed","exceeded","exceeder","exceeds","excel","excelled","excels","except","excepted","excepts","excerpt","excerpts","excess","excessed","excesses","exchange","excide","excided","excides","exciding","excimer","excimers","exciple","exciples","excise","excised","excises","excising","excision","excitant","excite","excited","exciter","exciters","excites","exciting","exciton","excitons","excitor","excitors","exclaim","exclaims","exclave","exclaves","exclude","excluded","excluder","excludes","excreta","excretal","excrete","excreted","excreter","excretes","excursus","excuse","excused","excuser","excusers","excuses","excusing","exec","execrate","execs","execute","executed","executer","executes","executor","exedra","exedrae","exegeses","exegesis","exegete","exegetes","exegetic","exempla","exemplar","exemplum","exempt","exempted","exempts","exequial","exequies","exequy","exercise","exergual","exergue","exergues","exert","exerted","exerting","exertion","exertive","exerts","exes","exeunt","exhalant","exhale","exhaled","exhalent","exhales","exhaling","exhaust","exhausts","exhibit","exhibits","exhort","exhorted","exhorter","exhorts","exhume","exhumed","exhumer","exhumers","exhumes","exhuming","exigence","exigency","exigent","exigible","exiguity","exiguous","exile","exiled","exiles","exilian","exilic","exiling","eximious","exine","exines","exist","existed","existent","existing","exists","exit","exited","exiting","exitless","exits","exocarp","exocarps","exocrine","exoderm","exoderms","exodoi","exodos","exodus","exoduses","exoergic","exogamic","exogamy","exogen","exogens","exon","exonic","exons","exonumia","exorable","exorcise","exorcism","exorcist","exorcize","exordia","exordial","exordium","exosmic","exosmose","exospore","exoteric","exotic","exotica","exotics","exotism","exotisms","exotoxic","exotoxin","expand","expanded","expander","expandor","expands","expanse","expanses","expect","expected","expects","expedite","expel","expelled","expellee","expeller","expels","expend","expended","expender","expends","expense","expensed","expenses","expert","experted","expertly","experts","expiable","expiate","expiated","expiates","expiator","expire","expired","expirer","expirers","expires","expiries","expiring","expiry","explain","explains","explant","explants","explicit","explode","exploded","exploder","explodes","exploit","exploits","explore","explored","explorer","explores","expo","exponent","export","exported","exporter","exports","expos","exposal","exposals","expose","exposed","exposer","exposers","exposes","exposing","exposit","exposits","exposure","expound","expounds","express","expresso","expulse","expulsed","expulses","expunge","expunged","expunger","expunges","exscind","exscinds","exsecant","exsect","exsected","exsects","exsert","exserted","exserts","extant","extend","extended","extender","extends","extensor","extent","extents","exterior","extern","external","externe","externes","externs","extinct","extincts","extol","extoll","extolled","extoller","extolls","extols","extort","extorted","extorter","extorts","extra","extract","extracts","extrados","extras","extrema","extreme","extremer","extremes","extremum","extrorse","extrude","extruded","extruder","extrudes","extubate","exudate","exudates","exude","exuded","exudes","exuding","exult","exultant","exulted","exulting","exults","exurb","exurban","exurbia","exurbias","exurbs","exuvia","exuviae","exuvial","exuviate","exuvium","eyas","eyases","eye","eyeable","eyeball","eyeballs","eyebeam","eyebeams","eyebolt","eyebolts","eyebrow","eyebrows","eyecup","eyecups","eyed","eyedness","eyeful","eyefuls","eyeglass","eyehole","eyeholes","eyehook","eyehooks","eyeing","eyelash","eyeless","eyelet","eyelets","eyelid","eyelids","eyelike","eyeliner","eyen","eyepiece","eyepoint","eyer","eyers","eyes","eyeshade","eyeshot","eyeshots","eyesight","eyesome","eyesore","eyesores","eyespot","eyespots","eyestalk","eyestone","eyeteeth","eyetooth","eyewash","eyewater","eyewink","eyewinks","eying","eyne","eyra","eyras","eyre","eyres","eyrie","eyries","eyrir","eyry","fable","fabled","fabler","fablers","fables","fabliau","fabliaux","fabling","fabric","fabrics","fabular","fabulist","fabulous","facade","facades","face","faceable","faced","facedown","faceless","facer","facers","faces","facet","facete","faceted","facetely","facetiae","faceting","facets","facetted","faceup","facia","facial","facially","facials","facias","faciend","faciends","facies","facile","facilely","facility","facing","facings","fact","factful","faction","factions","factious","factor","factored","factors","factory","factotum","facts","factual","facture","factures","facula","faculae","facular","faculty","fad","fadable","faddier","faddiest","faddish","faddism","faddisms","faddist","faddists","faddy","fade","fadeaway","faded","fadedly","fadeless","fader","faders","fades","fadge","fadged","fadges","fadging","fading","fadings","fado","fados","fads","faecal","faeces","faena","faenas","faerie","faeries","faery","fag","fagged","fagging","faggot","faggoted","faggotry","faggots","faggoty","faggy","fagin","fagins","fagot","fagoted","fagoter","fagoters","fagoting","fagots","fags","fahlband","faience","faiences","fail","failed","failing","failings","faille","failles","fails","failure","failures","fain","faineant","fainer","fainest","faint","fainted","fainter","fainters","faintest","fainting","faintish","faintly","faints","fair","faired","fairer","fairest","fairies","fairing","fairings","fairish","fairlead","fairly","fairness","fairs","fairway","fairways","fairy","fairyism","faith","faithed","faithful","faithing","faiths","faitour","faitours","fajita","fajitas","fake","faked","fakeer","fakeers","faker","fakeries","fakers","fakery","fakes","fakey","faking","fakir","fakirs","falafel","falbala","falbalas","falcate","falcated","falces","falchion","falcon","falconer","falconet","falconry","falcons","falderal","falderol","fall","fallacy","fallal","fallals","fallback","fallen","faller","fallers","fallfish","fallible","fallibly","falling","falloff","falloffs","fallout","fallouts","fallow","fallowed","fallows","falls","false","falsely","falser","falsest","falsetto","falsie","falsies","falsify","falsity","faltboat","falter","faltered","falterer","falters","falx","fame","famed","fameless","fames","familial","familiar","families","familism","family","famine","famines","faming","famish","famished","famishes","famous","famously","famuli","famulus","fan","fanatic","fanatics","fancied","fancier","fanciers","fancies","fanciest","fanciful","fancily","fancy","fancying","fandango","fandom","fandoms","fane","fanega","fanegada","fanegas","fanes","fanfare","fanfares","fanfaron","fanfold","fanfolds","fang","fanga","fangas","fanged","fangless","fanglike","fangs","fanion","fanions","fanjet","fanjets","fanlight","fanlike","fanned","fanner","fanners","fannies","fanning","fanny","fano","fanon","fanons","fanos","fans","fantail","fantails","fantasia","fantasie","fantasm","fantasms","fantast","fantasts","fantasy","fantod","fantods","fantom","fantoms","fanum","fanums","fanwise","fanwort","fanworts","fanzine","fanzines","faqir","faqirs","faquir","faquirs","far","farad","faradaic","faraday","faradays","faradic","faradise","faradism","faradize","farads","faraway","farce","farced","farcer","farcers","farces","farceur","farceurs","farci","farcical","farcie","farcies","farcing","farcy","fard","farded","fardel","fardels","farding","fards","fare","fared","farer","farers","fares","farewell","farfal","farfals","farfel","farfels","farina","farinas","faring","farinha","farinhas","farinose","farl","farle","farles","farls","farm","farmable","farmed","farmer","farmers","farmhand","farming","farmings","farmland","farms","farmyard","farnesol","farness","faro","faros","farouche","farrago","farrier","farriers","farriery","farrow","farrowed","farrows","fart","farted","farther","farthest","farthing","farting","farts","fas","fasces","fascia","fasciae","fascial","fascias","fasciate","fascicle","fascine","fascines","fascism","fascisms","fascist","fascists","fash","fashed","fashes","fashing","fashion","fashions","fashious","fast","fastback","fastball","fasted","fasten","fastened","fastener","fastens","faster","fastest","fasting","fastings","fastness","fasts","fastuous","fat","fatal","fatalism","fatalist","fatality","fatally","fatback","fatbacks","fatbird","fatbirds","fate","fated","fateful","fates","fathead","fatheads","father","fathered","fatherly","fathers","fathom","fathomed","fathoms","fatidic","fatigue","fatigued","fatigues","fating","fatless","fatlike","fatling","fatlings","fatly","fatness","fats","fatso","fatsoes","fatsos","fatstock","fatted","fatten","fattened","fattener","fattens","fatter","fattest","fattier","fatties","fattiest","fattily","fatting","fattish","fatty","fatuity","fatuous","faubourg","faucal","faucals","fauces","faucet","faucets","faucial","faugh","fauld","faulds","fault","faulted","faultier","faultily","faulting","faults","faulty","faun","fauna","faunae","faunal","faunally","faunas","faunlike","fauns","fauteuil","fauve","fauves","fauvism","fauvisms","fauvist","fauvists","faux","favela","favelas","favism","favisms","favonian","favor","favored","favorer","favorers","favoring","favorite","favors","favour","favoured","favourer","favours","favus","favuses","fawn","fawned","fawner","fawners","fawnier","fawniest","fawning","fawnlike","fawns","fawny","fax","faxed","faxes","faxing","fay","fayalite","fayed","faying","fays","faze","fazed","fazenda","fazendas","fazes","fazing","feal","fealties","fealty","fear","feared","fearer","fearers","fearful","fearing","fearless","fears","fearsome","feasance","fease","feased","feases","feasible","feasibly","feasing","feast","feasted","feaster","feasters","feastful","feasting","feasts","feat","feater","featest","feather","feathers","feathery","featlier","featly","feats","feature","featured","features","feaze","feazed","feazes","feazing","febrific","febrile","fecal","feces","fecial","fecials","feck","feckless","feckly","fecks","fecula","feculae","feculent","fecund","fed","fedayee","fedayeen","federacy","federal","federals","federate","fedora","fedoras","feds","fee","feeble","feebler","feeblest","feeblish","feebly","feed","feedable","feedback","feedbag","feedbags","feedbox","feeder","feeders","feedhole","feeding","feedlot","feedlots","feeds","feeing","feel","feeler","feelers","feeless","feeling","feelings","feels","fees","feet","feetless","feeze","feezed","feezes","feezing","feh","fehs","feign","feigned","feigner","feigners","feigning","feigns","feint","feinted","feinting","feints","feirie","feist","feistier","feists","feisty","felafel","feldsher","feldspar","felicity","felid","felids","feline","felinely","felines","felinity","fell","fella","fellable","fellah","fellahin","fellahs","fellas","fellate","fellated","fellates","fellatio","fellator","felled","feller","fellers","fellest","fellies","felling","fellness","felloe","felloes","fellow","fellowed","fellowly","fellows","fells","felly","felon","felonies","felonry","felons","felony","felsite","felsites","felsitic","felspar","felspars","felstone","felt","felted","felting","feltings","felts","felucca","feluccas","felwort","felworts","fem","female","females","feme","femes","feminacy","feminie","feminine","feminise","feminism","feminist","feminity","feminize","femme","femmes","femora","femoral","fems","femur","femurs","fen","fenagle","fenagled","fenagles","fence","fenced","fencer","fencerow","fencers","fences","fencible","fencing","fencings","fend","fended","fender","fendered","fenders","fending","fends","fenestra","fennec","fennecs","fennel","fennels","fenny","fens","fenthion","fenuron","fenurons","feod","feodary","feods","feoff","feoffed","feoffee","feoffees","feoffer","feoffers","feoffing","feoffor","feoffors","feoffs","fer","feracity","feral","ferbam","ferbams","fere","feres","feretory","feria","feriae","ferial","ferias","ferine","ferities","ferity","ferlie","ferlies","ferly","fermata","fermatas","fermate","ferment","ferments","fermi","fermion","fermions","fermis","fermium","fermiums","fern","fernery","fernier","ferniest","fernless","fernlike","ferns","ferny","ferocity","ferrate","ferrates","ferrel","ferreled","ferrels","ferreous","ferret","ferreted","ferreter","ferrets","ferrety","ferriage","ferric","ferried","ferries","ferrite","ferrites","ferritic","ferritin","ferrous","ferrule","ferruled","ferrules","ferrum","ferrums","ferry","ferrying","ferryman","ferrymen","fertile","ferula","ferulae","ferulas","ferule","feruled","ferules","feruling","fervency","fervent","fervid","fervidly","fervor","fervors","fervour","fervours","fescue","fescues","fess","fesse","fessed","fesses","fessing","fesswise","festal","festally","fester","festered","festers","festival","festive","festoon","festoons","fet","feta","fetal","fetas","fetation","fetch","fetched","fetcher","fetchers","fetches","fetching","fete","feted","feterita","fetes","fetial","fetiales","fetialis","fetials","fetich","fetiches","feticide","fetid","fetidly","feting","fetish","fetishes","fetlock","fetlocks","fetology","fetor","fetors","fets","fetted","fetter","fettered","fetterer","fetters","fetting","fettle","fettled","fettles","fettling","fetus","fetuses","feu","feuar","feuars","feud","feudal","feudally","feudary","feuded","feuding","feudist","feudists","feuds","feued","feuing","feus","fever","fevered","feverfew","fevering","feverish","feverous","fevers","few","fewer","fewest","fewness","fewtrils","fey","feyer","feyest","feyly","feyness","fez","fezes","fezzed","fezzes","fiacre","fiacres","fiance","fiancee","fiancees","fiances","fiar","fiars","fiaschi","fiasco","fiascoes","fiascos","fiat","fiats","fib","fibbed","fibber","fibbers","fibbing","fiber","fibered","fiberize","fibers","fibranne","fibre","fibres","fibril","fibrilla","fibrils","fibrin","fibrins","fibroid","fibroids","fibroin","fibroins","fibroma","fibromas","fibroses","fibrosis","fibrotic","fibrous","fibs","fibula","fibulae","fibular","fibulas","fice","fices","fiche","fiches","fichu","fichus","ficin","ficins","fickle","fickler","ficklest","fickly","fico","ficoes","fictile","fiction","fictions","fictive","ficus","ficuses","fid","fiddle","fiddled","fiddler","fiddlers","fiddles","fiddling","fideism","fideisms","fideist","fideists","fidelity","fidge","fidged","fidges","fidget","fidgeted","fidgeter","fidgets","fidgety","fidging","fido","fidos","fids","fiducial","fie","fief","fiefdom","fiefdoms","fiefs","field","fielded","fielder","fielders","fielding","fields","fiend","fiendish","fiends","fierce","fiercely","fiercer","fiercest","fierier","fieriest","fierily","fiery","fiesta","fiestas","fife","fifed","fifer","fifers","fifes","fifing","fifteen","fifteens","fifth","fifthly","fifths","fifties","fiftieth","fifty","fig","figeater","figged","figging","fight","fighter","fighters","fighting","fights","figment","figments","figs","figuline","figural","figurant","figurate","figure","figured","figurer","figurers","figures","figurine","figuring","figwort","figworts","fil","fila","filagree","filament","filar","filaree","filarees","filaria","filariae","filarial","filarian","filariid","filature","filbert","filberts","filch","filched","filcher","filchers","filches","filching","file","fileable","filed","filefish","filemot","filer","filers","files","filet","fileted","fileting","filets","filial","filially","filiate","filiated","filiates","filibeg","filibegs","filicide","filiform","filigree","filing","filings","filister","fill","fille","filled","filler","fillers","filles","fillet","filleted","fillets","fillies","filling","fillings","fillip","filliped","fillips","fillo","fillos","fills","filly","film","filmcard","filmdom","filmdoms","filmed","filmer","filmers","filmgoer","filmic","filmier","filmiest","filmily","filming","filmland","films","filmset","filmsets","filmy","filo","filos","filose","fils","filter","filtered","filterer","filters","filth","filthier","filthily","filths","filthy","filtrate","filum","fimble","fimbles","fimbria","fimbriae","fimbrial","fin","finable","finagle","finagled","finagler","finagles","final","finale","finales","finalis","finalism","finalist","finality","finalize","finally","finals","finance","financed","finances","finback","finbacks","finch","finches","find","findable","finder","finders","finding","findings","finds","fine","fineable","fined","finely","fineness","finer","fineries","finery","fines","finespun","finesse","finessed","finesses","finest","finfish","finfoot","finfoots","finger","fingered","fingerer","fingers","finial","finialed","finials","finical","finickin","finicky","finikin","finiking","fining","finings","finis","finises","finish","finished","finisher","finishes","finite","finitely","finites","finitude","fink","finked","finking","finks","finless","finlike","finmark","finmarks","finned","finnicky","finnier","finniest","finning","finnmark","finny","fino","finochio","finos","fins","fiord","fiords","fipple","fipples","fique","fiques","fir","fire","firearm","firearms","fireball","firebase","firebird","fireboat","firebomb","firebox","firebrat","firebug","firebugs","fireclay","fired","firedamp","firedog","firedogs","firefang","firefly","firehall","fireless","firelock","fireman","firemen","firepan","firepans","firepink","fireplug","firer","fireroom","firers","fires","fireside","firetrap","fireweed","firewood","firework","fireworm","firing","firings","firkin","firkins","firm","firman","firmans","firmed","firmer","firmers","firmest","firming","firmly","firmness","firms","firmware","firn","firns","firry","firs","first","firstly","firsts","firth","firths","fisc","fiscal","fiscally","fiscals","fiscs","fish","fishable","fishbolt","fishbone","fishbowl","fished","fisher","fishers","fishery","fishes","fisheye","fisheyes","fishgig","fishgigs","fishhook","fishier","fishiest","fishily","fishing","fishings","fishless","fishlike","fishline","fishmeal","fishnet","fishnets","fishpole","fishpond","fishtail","fishway","fishways","fishwife","fishworm","fishy","fissate","fissile","fission","fissions","fissiped","fissure","fissured","fissures","fist","fisted","fistful","fistfuls","fistic","fisting","fistnote","fists","fistula","fistulae","fistular","fistulas","fit","fitch","fitchee","fitches","fitchet","fitchets","fitchew","fitchews","fitchy","fitful","fitfully","fitly","fitment","fitments","fitness","fits","fittable","fitted","fitter","fitters","fittest","fitting","fittings","five","fivefold","fivepins","fiver","fivers","fives","fix","fixable","fixate","fixated","fixates","fixatif","fixatifs","fixating","fixation","fixative","fixed","fixedly","fixer","fixers","fixes","fixing","fixings","fixit","fixities","fixity","fixt","fixture","fixtures","fixure","fixures","fiz","fizgig","fizgigs","fizz","fizzed","fizzer","fizzers","fizzes","fizzier","fizziest","fizzing","fizzle","fizzled","fizzles","fizzling","fizzy","fjeld","fjelds","fjord","fjords","flab","flabbier","flabbily","flabby","flabella","flabs","flaccid","flack","flacked","flackery","flacking","flacks","flacon","flacons","flag","flagella","flagged","flagger","flaggers","flaggier","flagging","flaggy","flagless","flagman","flagmen","flagon","flagons","flagpole","flagrant","flags","flagship","flail","flailed","flailing","flails","flair","flairs","flak","flake","flaked","flaker","flakers","flakes","flakier","flakiest","flakily","flaking","flaky","flam","flambe","flambeau","flambee","flambeed","flambes","flame","flamed","flamen","flamenco","flamens","flameout","flamer","flamers","flames","flamier","flamiest","flamines","flaming","flamingo","flammed","flamming","flams","flamy","flan","flancard","flanerie","flanes","flaneur","flaneurs","flange","flanged","flanger","flangers","flanges","flanging","flank","flanked","flanken","flanker","flankers","flanking","flanks","flannel","flannels","flans","flap","flapjack","flapless","flapped","flapper","flappers","flappier","flapping","flappy","flaps","flare","flared","flares","flaring","flash","flashed","flasher","flashers","flashes","flashgun","flashier","flashily","flashing","flashy","flask","flasket","flaskets","flasks","flat","flatbed","flatbeds","flatboat","flatcap","flatcaps","flatcar","flatcars","flatfeet","flatfish","flatfoot","flathead","flatiron","flatland","flatlet","flatlets","flatling","flatlong","flatly","flatness","flats","flatted","flatten","flattens","flatter","flatters","flattery","flattest","flatting","flattish","flattop","flattops","flatus","flatuses","flatware","flatwash","flatways","flatwise","flatwork","flatworm","flaunt","flaunted","flaunter","flaunts","flaunty","flautist","flavanol","flavin","flavine","flavines","flavins","flavone","flavones","flavonol","flavor","flavored","flavorer","flavors","flavory","flavour","flavours","flavoury","flaw","flawed","flawier","flawiest","flawing","flawless","flaws","flawy","flax","flaxen","flaxes","flaxier","flaxiest","flaxseed","flaxy","flay","flayed","flayer","flayers","flaying","flays","flea","fleabag","fleabags","fleabane","fleabite","fleam","fleams","fleapit","fleapits","fleas","fleawort","fleche","fleches","fleck","flecked","flecking","flecks","flecky","flection","fled","fledge","fledged","fledges","fledgier","fledging","fledgy","flee","fleece","fleeced","fleecer","fleecers","fleeces","fleech","fleeched","fleeches","fleecier","fleecily","fleecing","fleecy","fleeing","fleer","fleered","fleering","fleers","flees","fleet","fleeted","fleeter","fleetest","fleeting","fleetly","fleets","fleishig","flemish","flench","flenched","flenches","flense","flensed","flenser","flensers","flenses","flensing","flesh","fleshed","flesher","fleshers","fleshes","fleshier","fleshing","fleshly","fleshpot","fleshy","fletch","fletched","fletcher","fletches","fleury","flew","flews","flex","flexagon","flexed","flexes","flexible","flexibly","flexile","flexing","flexion","flexions","flexor","flexors","flextime","flexuose","flexuous","flexural","flexure","flexures","fley","fleyed","fleying","fleys","flic","flichter","flick","flicked","flicker","flickers","flickery","flicking","flicks","flics","flied","flier","fliers","flies","fliest","flight","flighted","flights","flighty","flimflam","flimsier","flimsies","flimsily","flimsy","flinch","flinched","flincher","flinches","flinder","flinders","fling","flinger","flingers","flinging","flings","flinkite","flint","flinted","flintier","flintily","flinting","flints","flinty","flip","flippant","flipped","flipper","flippers","flippest","flipping","flips","flirt","flirted","flirter","flirters","flirtier","flirting","flirts","flirty","flit","flitch","flitched","flitches","flite","flited","flites","fliting","flits","flitted","flitter","flitters","flitting","flivver","flivvers","float","floatage","floated","floatel","floatels","floater","floaters","floatier","floating","floats","floaty","floc","flocced","flocci","floccing","floccose","floccule","flocculi","floccus","flock","flocked","flockier","flocking","flocks","flocky","flocs","floe","floes","flog","flogged","flogger","floggers","flogging","flogs","flokati","flokatis","flong","flongs","flood","flooded","flooder","flooders","flooding","floodlit","floods","floodway","flooey","flooie","floor","floorage","floored","floorer","floorers","flooring","floors","floosie","floosies","floosy","floozie","floozies","floozy","flop","flopover","flopped","flopper","floppers","floppier","floppies","floppily","flopping","floppy","flops","flora","florae","floral","florally","floras","florence","floret","florets","florid","floridly","florigen","florin","florins","florist","florists","floruit","floruits","floss","flossed","flosses","flossie","flossier","flossies","flossily","flossing","flossy","flota","flotage","flotages","flotas","flotilla","flotsam","flotsams","flounce","flounced","flounces","flouncy","flounder","flour","floured","flouring","flourish","flours","floury","flout","flouted","flouter","flouters","flouting","flouts","flow","flowage","flowages","flowed","flower","flowered","flowerer","floweret","flowers","flowery","flowing","flown","flows","flu","flub","flubbed","flubber","flubbers","flubbing","flubdub","flubdubs","flubs","flue","flued","fluency","fluent","fluently","flueric","fluerics","flues","fluff","fluffed","fluffier","fluffily","fluffing","fluffs","fluffy","fluid","fluidal","fluidic","fluidics","fluidise","fluidity","fluidize","fluidly","fluidram","fluids","fluke","fluked","flukes","flukey","flukier","flukiest","fluking","fluky","flume","flumed","flumes","fluming","flummery","flummox","flump","flumped","flumping","flumps","flung","flunk","flunked","flunker","flunkers","flunkey","flunkeys","flunkies","flunking","flunks","flunky","fluor","fluorene","fluoric","fluorid","fluoride","fluorids","fluorin","fluorine","fluorins","fluorite","fluors","flurried","flurries","flurry","flus","flush","flushed","flusher","flushers","flushes","flushest","flushing","fluster","flusters","flute","fluted","fluter","fluters","flutes","flutey","flutier","flutiest","fluting","flutings","flutist","flutists","flutter","flutters","fluttery","fluty","fluvial","flux","fluxed","fluxes","fluxing","fluxion","fluxions","fluyt","fluyts","fly","flyable","flyaway","flyaways","flybelt","flybelts","flyblew","flyblow","flyblown","flyblows","flyboat","flyboats","flyboy","flyboys","flyby","flybys","flyer","flyers","flying","flyings","flyleaf","flyless","flyman","flymen","flyoff","flyoffs","flyover","flyovers","flypaper","flypast","flypasts","flysch","flysches","flyspeck","flyte","flyted","flytes","flytier","flytiers","flyting","flytings","flytrap","flytraps","flyway","flyways","flywheel","foal","foaled","foaling","foals","foam","foamable","foamed","foamer","foamers","foamier","foamiest","foamily","foaming","foamless","foamlike","foams","foamy","fob","fobbed","fobbing","fobs","focal","focalise","focalize","focally","foci","focus","focused","focuser","focusers","focuses","focusing","focussed","focusses","fodder","foddered","fodders","fodgel","foe","foehn","foehns","foeman","foemen","foes","foetal","foetid","foetor","foetors","foetus","foetuses","fog","fogbound","fogbow","fogbows","fogdog","fogdogs","fogey","fogeys","fogfruit","foggage","foggages","fogged","fogger","foggers","foggier","foggiest","foggily","fogging","foggy","foghorn","foghorns","fogie","fogies","fogless","fogs","fogy","fogyish","fogyism","fogyisms","foh","fohn","fohns","foible","foibles","foil","foilable","foiled","foiling","foils","foilsman","foilsmen","foin","foined","foining","foins","foison","foisons","foist","foisted","foisting","foists","folacin","folacins","folate","folates","fold","foldable","foldaway","foldboat","folded","folder","folderol","folders","folding","foldout","foldouts","folds","folia","foliage","foliaged","foliages","foliar","foliate","foliated","foliates","folio","folioed","folioing","folios","foliose","folious","folium","foliums","folk","folkie","folkies","folkish","folklike","folklore","folkmoot","folkmot","folkmote","folkmots","folks","folksier","folksily","folksy","folktale","folkway","folkways","folky","folles","follicle","follies","follis","follow","followed","follower","follows","folly","foment","fomented","fomenter","foments","fomite","fomites","fon","fond","fondant","fondants","fonded","fonder","fondest","fonding","fondle","fondled","fondler","fondlers","fondles","fondling","fondly","fondness","fonds","fondu","fondue","fondues","fondus","fons","font","fontal","fontanel","fontina","fontinas","fonts","food","foodie","foodies","foodless","foods","foofaraw","fool","fooled","foolery","foolfish","fooling","foolish","fools","foolscap","foot","footage","footages","football","footbath","footboy","footboys","footed","footer","footers","footfall","footgear","foothill","foothold","footie","footier","footies","footiest","footing","footings","footle","footled","footler","footlers","footles","footless","footlike","footling","footman","footmark","footmen","footnote","footpace","footpad","footpads","footpath","footrace","footrest","footrope","foots","footsie","footsies","footslog","footsore","footstep","footsy","footwall","footway","footways","footwear","footwork","footworn","footy","foozle","foozled","foozler","foozlers","foozles","foozling","fop","fopped","foppery","fopping","foppish","fops","for","fora","forage","foraged","forager","foragers","forages","foraging","foram","foramen","foramens","foramina","forams","foray","forayed","forayer","forayers","foraying","forays","forb","forbad","forbade","forbear","forbears","forbid","forbidal","forbids","forbode","forboded","forbodes","forbore","forborne","forbs","forby","forbye","force","forced","forcedly","forceful","forceps","forcer","forcers","forces","forcible","forcibly","forcing","forcipes","ford","fordable","forded","fordid","fording","fordless","fordo","fordoes","fordoing","fordone","fords","fore","forearm","forearms","forebay","forebays","forebear","forebode","forebody","foreboom","foreby","forebye","forecast","foredate","foredeck","foredid","foredo","foredoes","foredone","foredoom","foreface","forefeel","forefeet","forefelt","forefend","forefoot","forego","foregoer","foregoes","foregone","foregut","foreguts","forehand","forehead","forehoof","foreign","foreknew","foreknow","forelady","foreland","foreleg","forelegs","forelimb","forelock","foreman","foremast","foremen","foremilk","foremost","forename","forenoon","forensic","forepart","forepast","forepaw","forepaws","forepeak","foreplay","foreran","forerank","forerun","foreruns","fores","foresaid","foresail","foresaw","foresee","foreseen","foreseer","foresees","foreshow","foreside","foreskin","forest","forestal","forestay","forested","forester","forestry","forests","foretell","foretime","foretold","foretop","foretops","forever","forevers","forewarn","forewent","forewing","foreword","foreworn","foreyard","forfeit","forfeits","forfend","forfends","forgat","forgave","forge","forged","forger","forgers","forgery","forges","forget","forgets","forging","forgings","forgive","forgiven","forgiver","forgives","forgo","forgoer","forgoers","forgoes","forgoing","forgone","forgot","forint","forints","forjudge","fork","forkball","forked","forkedly","forker","forkers","forkful","forkfuls","forkier","forkiest","forking","forkless","forklift","forklike","forks","forksful","forky","forlorn","form","formable","formal","formalin","formally","formals","formant","formants","format","formate","formates","formats","forme","formed","formee","former","formerly","formers","formes","formful","formic","forming","formless","formol","formols","forms","formula","formulae","formulas","formyl","formyls","fornical","fornices","fornix","forrader","forrit","forsake","forsaken","forsaker","forsakes","forsook","forsooth","forspent","forswear","forswore","forsworn","fort","forte","fortes","forth","forties","fortieth","fortify","fortis","fortress","forts","fortuity","fortune","fortuned","fortunes","forty","forum","forums","forward","forwards","forwent","forwhy","forworn","forzando","foss","fossa","fossae","fossate","fosse","fosses","fossette","fossick","fossicks","fossil","fossils","foster","fostered","fosterer","fosters","fou","fought","foughten","foul","foulard","foulards","fouled","fouler","foulest","fouling","foulings","foully","foulness","fouls","found","founded","founder","founders","founding","foundry","founds","fount","fountain","founts","four","fourchee","fourfold","fourgon","fourgons","fourplex","fours","foursome","fourteen","fourth","fourthly","fourths","fovea","foveae","foveal","foveas","foveate","foveated","foveola","foveolae","foveolar","foveolas","foveole","foveoles","foveolet","fowl","fowled","fowler","fowlers","fowling","fowlings","fowlpox","fowls","fox","foxed","foxes","foxfire","foxfires","foxfish","foxglove","foxhole","foxholes","foxhound","foxier","foxiest","foxily","foxiness","foxing","foxings","foxlike","foxskin","foxskins","foxtail","foxtails","foxtrot","foxtrots","foxy","foy","foyer","foyers","foys","fozier","foziest","foziness","fozy","frabjous","fracas","fracases","fractal","fractals","fracted","fracti","fraction","fractur","fracture","fracturs","fractus","frae","fraena","fraenum","fraenums","frag","fragged","fragging","fragile","fragment","fragrant","frags","frail","frailer","frailest","frailly","frails","frailty","fraise","fraises","fraktur","frakturs","framable","frame","framed","framer","framers","frames","framing","framings","franc","francium","francs","frank","franked","franker","frankers","frankest","franking","franklin","frankly","franks","frantic","frap","frappe","frapped","frappes","frapping","fraps","frat","frater","fraters","frats","fraud","frauds","fraught","fraughts","fraulein","fray","frayed","fraying","frayings","frays","frazil","frazils","frazzle","frazzled","frazzles","freak","freaked","freakier","freakily","freaking","freakish","freakout","freaks","freaky","freckle","freckled","freckles","freckly","free","freebase","freebee","freebees","freebie","freebies","freeboot","freeborn","freed","freedman","freedmen","freedom","freedoms","freeform","freehand","freehold","freeing","freeload","freely","freeman","freemen","freeness","freer","freers","frees","freesia","freesias","freest","freeway","freeways","freewill","freeze","freezer","freezers","freezes","freezing","freight","freights","fremd","fremitus","frena","french","frenched","frenches","frenetic","frenula","frenulum","frenum","frenums","frenzied","frenzies","frenzily","frenzy","frequent","frere","freres","fresco","frescoed","frescoer","frescoes","frescos","fresh","freshed","freshen","freshens","fresher","freshes","freshest","freshet","freshets","freshing","freshly","freshman","freshmen","fresnel","fresnels","fret","fretful","fretless","frets","fretsaw","fretsaws","fretsome","fretted","fretter","fretters","frettier","fretting","fretty","fretwork","friable","friar","friaries","friarly","friars","friary","fribble","fribbled","fribbler","fribbles","fricando","friction","fridge","fridges","fried","friend","friended","friendly","friends","frier","friers","fries","frieze","friezes","frig","frigate","frigates","frigged","frigging","fright","frighted","frighten","frights","frigid","frigidly","frigs","frijol","frijole","frijoles","frill","frilled","friller","frillers","frillier","frilling","frills","frilly","fringe","fringed","fringes","fringier","fringing","fringy","frippery","frise","frises","frisette","friseur","friseurs","frisk","frisked","frisker","friskers","frisket","friskets","friskier","friskily","frisking","frisks","frisky","frisson","frissons","frit","frith","friths","frits","fritt","frittata","fritted","fritter","fritters","fritting","fritts","fritz","fritzes","frivol","frivoled","frivoler","frivols","friz","frized","frizer","frizers","frizes","frizette","frizing","frizz","frizzed","frizzer","frizzers","frizzes","frizzier","frizzily","frizzing","frizzle","frizzled","frizzler","frizzles","frizzly","frizzy","fro","frock","frocked","frocking","frocks","froe","froes","frog","frogeye","frogeyed","frogeyes","frogfish","frogged","froggier","frogging","froggy","froglike","frogman","frogmen","frogs","frolic","frolicky","frolics","from","fromage","fromages","fromenty","frond","fronded","frondeur","frondose","fronds","frons","front","frontage","frontal","frontals","fronted","fronter","frontes","frontier","fronting","frontlet","fronton","frontons","fronts","frore","frosh","frost","frostbit","frosted","frosteds","frostier","frostily","frosting","frosts","frosty","froth","frothed","frothier","frothily","frothing","froths","frothy","frottage","frotteur","froufrou","frounce","frounced","frounces","frouzier","frouzy","frow","froward","frown","frowned","frowner","frowners","frowning","frowns","frows","frowsier","frowst","frowsted","frowsts","frowsty","frowsy","frowzier","frowzily","frowzy","froze","frozen","frozenly","fructify","fructose","frug","frugal","frugally","frugged","frugging","frugs","fruit","fruitage","fruited","fruiter","fruiters","fruitful","fruitier","fruitily","fruiting","fruition","fruitlet","fruits","fruity","frumenty","frump","frumpier","frumpily","frumpish","frumps","frumpy","frusta","frustule","frustum","frustums","fry","fryer","fryers","frying","frypan","frypans","fub","fubbed","fubbing","fubs","fubsier","fubsiest","fubsy","fuchsia","fuchsias","fuchsin","fuchsine","fuchsins","fuci","fuck","fucked","fucker","fuckers","fucking","fucks","fuckup","fuckups","fucoid","fucoidal","fucoids","fucose","fucoses","fucous","fucus","fucuses","fud","fuddle","fuddled","fuddles","fuddling","fudge","fudged","fudges","fudging","fuds","fuehrer","fuehrers","fuel","fueled","fueler","fuelers","fueling","fuelled","fueller","fuellers","fuelling","fuels","fuelwood","fug","fugacity","fugal","fugally","fugato","fugatos","fugged","fuggier","fuggiest","fuggily","fugging","fuggy","fugio","fugios","fugitive","fugle","fugled","fugleman","fuglemen","fugles","fugling","fugs","fugu","fugue","fugued","fugues","fuguing","fuguist","fuguists","fugus","fuhrer","fuhrers","fuji","fujis","fulcra","fulcrum","fulcrums","fulfil","fulfill","fulfills","fulfils","fulgent","fulgid","fulham","fulhams","full","fullam","fullams","fullback","fulled","fuller","fullered","fullers","fullery","fullest","fullface","fulling","fullness","fulls","fully","fulmar","fulmars","fulmine","fulmined","fulmines","fulminic","fulness","fulsome","fulvous","fumarase","fumarate","fumaric","fumarole","fumatory","fumble","fumbled","fumbler","fumblers","fumbles","fumbling","fume","fumed","fumeless","fumelike","fumer","fumers","fumes","fumet","fumets","fumette","fumettes","fumier","fumiest","fumigant","fumigate","fuming","fumingly","fumitory","fumuli","fumulus","fumy","fun","function","functor","functors","fund","funded","fundi","fundic","funding","funds","fundus","funeral","funerals","funerary","funereal","funest","funfair","funfairs","fungal","fungals","fungi","fungible","fungic","fungo","fungoes","fungoid","fungoids","fungous","fungus","funguses","funicle","funicles","funiculi","funk","funked","funker","funkers","funkia","funkias","funkier","funkiest","funking","funks","funky","funned","funnel","funneled","funnels","funnier","funnies","funniest","funnily","funning","funny","funnyman","funnymen","funs","fur","furan","furane","furanes","furanose","furans","furbelow","furbish","furcate","furcated","furcates","furcraea","furcula","furculae","furcular","furculum","furfur","furfural","furfuran","furfures","furibund","furies","furioso","furious","furl","furlable","furled","furler","furlers","furless","furling","furlong","furlongs","furlough","furls","furmenty","furmety","furmity","furnace","furnaced","furnaces","furnish","furor","furore","furores","furors","furred","furrier","furriers","furriery","furriest","furrily","furriner","furring","furrings","furrow","furrowed","furrower","furrows","furrowy","furry","furs","further","furthers","furthest","furtive","furuncle","fury","furze","furzes","furzier","furziest","furzy","fusain","fusains","fuscous","fuse","fused","fusee","fusees","fusel","fuselage","fuseless","fusels","fuses","fusible","fusibly","fusiform","fusil","fusile","fusileer","fusilier","fusils","fusing","fusion","fusions","fuss","fussed","fusser","fussers","fusses","fussier","fussiest","fussily","fussing","fusspot","fusspots","fussy","fustian","fustians","fustic","fustics","fustier","fustiest","fustily","fusty","futharc","futharcs","futhark","futharks","futhorc","futhorcs","futhork","futhorks","futile","futilely","futility","futon","futons","futtock","futtocks","futural","future","futures","futurism","futurist","futurity","futz","futzed","futzes","futzing","fuze","fuzed","fuzee","fuzees","fuzes","fuzil","fuzils","fuzing","fuzz","fuzzed","fuzzes","fuzzier","fuzziest","fuzzily","fuzzing","fuzzy","fyce","fyces","fyke","fykes","fylfot","fylfots","fytte","fyttes","gab","gabbard","gabbards","gabbart","gabbarts","gabbed","gabber","gabbers","gabbier","gabbiest","gabbing","gabble","gabbled","gabbler","gabblers","gabbles","gabbling","gabbro","gabbroic","gabbroid","gabbros","gabby","gabelle","gabelled","gabelles","gabfest","gabfests","gabies","gabion","gabions","gable","gabled","gables","gabling","gaboon","gaboons","gabs","gaby","gad","gadabout","gadarene","gadded","gadder","gadders","gaddi","gadding","gaddis","gadflies","gadfly","gadget","gadgetry","gadgets","gadgety","gadi","gadid","gadids","gadis","gadoid","gadoids","gadroon","gadroons","gads","gadwall","gadwalls","gadzooks","gae","gaed","gaeing","gaen","gaes","gaff","gaffe","gaffed","gaffer","gaffers","gaffes","gaffing","gaffs","gag","gaga","gage","gaged","gager","gagers","gages","gagged","gagger","gaggers","gagging","gaggle","gaggled","gaggles","gaggling","gaging","gagman","gagmen","gags","gagster","gagsters","gahnite","gahnites","gaieties","gaiety","gaily","gain","gainable","gained","gainer","gainers","gainful","gaining","gainless","gainlier","gainly","gains","gainsaid","gainsay","gainsays","gainst","gait","gaited","gaiter","gaiters","gaiting","gaits","gal","gala","galabia","galabias","galabieh","galabiya","galactic","galago","galagos","galah","galahs","galangal","galas","galatea","galateas","galavant","galax","galaxes","galaxies","galaxy","galbanum","gale","galea","galeae","galeas","galeate","galeated","galena","galenas","galenic","galenite","galere","galeres","gales","galilee","galilees","galiot","galiots","galipot","galipots","galivant","gall","gallant","gallants","gallate","gallates","galleass","galled","gallein","galleins","galleon","galleons","galleria","gallery","gallet","galleta","galletas","galleted","gallets","galley","galleys","gallfly","galliard","galliass","gallic","gallican","gallied","gallies","galling","galliot","galliots","gallipot","gallium","galliums","gallnut","gallnuts","gallon","gallons","galloon","galloons","galloot","galloots","gallop","galloped","galloper","gallops","gallous","gallows","galls","gallus","gallused","galluses","gally","gallying","galoot","galoots","galop","galopade","galoped","galoping","galops","galore","galores","galosh","galoshe","galoshed","galoshes","gals","galumph","galumphs","galvanic","galyac","galyacs","galyak","galyaks","gam","gama","gamas","gamashes","gamay","gamays","gamb","gamba","gambade","gambades","gambado","gambados","gambas","gambe","gambes","gambeson","gambia","gambias","gambier","gambiers","gambir","gambirs","gambit","gambits","gamble","gambled","gambler","gamblers","gambles","gambling","gamboge","gamboges","gambol","gamboled","gambols","gambrel","gambrels","gambs","gambusia","game","gamecock","gamed","gamelan","gamelans","gamelike","gamely","gameness","gamer","games","gamesome","gamest","gamester","gamete","gametes","gametic","gamey","gamic","gamier","gamiest","gamily","gamin","gamine","gamines","gaminess","gaming","gamings","gamins","gamma","gammadia","gammas","gammed","gammer","gammers","gammier","gammiest","gamming","gammon","gammoned","gammoner","gammons","gammy","gamodeme","gamp","gamps","gams","gamut","gamuts","gamy","gan","gander","gandered","ganders","gane","ganef","ganefs","ganev","ganevs","gang","gangbang","ganged","ganger","gangers","ganging","gangland","ganglia","ganglial","gangliar","ganglier","gangling","ganglion","gangly","gangplow","gangrel","gangrels","gangrene","gangs","gangster","gangue","gangues","gangway","gangways","ganister","ganja","ganjah","ganjahs","ganjas","gannet","gannets","ganof","ganofs","ganoid","ganoids","gantlet","gantlets","gantline","gantlope","gantries","gantry","ganymede","gaol","gaoled","gaoler","gaolers","gaoling","gaols","gap","gape","gaped","gaper","gapers","gapes","gapeseed","gapeworm","gaping","gapingly","gaposis","gapped","gappier","gappiest","gapping","gappy","gaps","gapy","gar","garage","garaged","garages","garaging","garb","garbage","garbages","garbanzo","garbed","garbing","garble","garbled","garbler","garblers","garbles","garbless","garbling","garboard","garboil","garboils","garbs","garcon","garcons","gardant","garden","gardened","gardener","gardenia","gardens","gardyloo","garfish","garganey","garget","gargets","gargety","gargle","gargled","gargler","garglers","gargles","gargling","gargoyle","garigue","garigues","garish","garishly","garland","garlands","garlic","garlicky","garlics","garment","garments","garner","garnered","garners","garnet","garnets","garni","garnish","garote","garoted","garotes","garoting","garotte","garotted","garotter","garottes","garpike","garpikes","garred","garret","garrets","garring","garrison","garron","garrons","garrote","garroted","garroter","garrotes","garrotte","gars","garter","gartered","garters","garth","garths","garvey","garveys","gas","gasalier","gasbag","gasbags","gascon","gascons","gaselier","gaseous","gases","gash","gashed","gasher","gashes","gashest","gashing","gashouse","gasified","gasifier","gasifies","gasiform","gasify","gasket","gaskets","gaskin","gasking","gaskings","gaskins","gasless","gaslight","gaslit","gasman","gasmen","gasogene","gasohol","gasohols","gasolene","gasolier","gasoline","gasp","gasped","gasper","gaspers","gasping","gasps","gassed","gasser","gassers","gasses","gassier","gassiest","gassing","gassings","gassy","gast","gasted","gaster","gasters","gastight","gasting","gastness","gastraea","gastral","gastrea","gastreas","gastric","gastrin","gastrins","gastrula","gasts","gasworks","gat","gate","gateau","gateaux","gated","gatefold","gateless","gatelike","gateman","gatemen","gatepost","gates","gateway","gateways","gather","gathered","gatherer","gathers","gating","gator","gators","gats","gauche","gauchely","gaucher","gauchest","gaucho","gauchos","gaud","gaudery","gaudier","gaudies","gaudiest","gaudily","gauds","gaudy","gauffer","gauffers","gauge","gauged","gauger","gaugers","gauges","gauging","gault","gaults","gaum","gaumed","gauming","gaums","gaun","gaunt","gaunter","gauntest","gauntlet","gauntly","gauntry","gaur","gaurs","gauss","gausses","gauze","gauzes","gauzier","gauziest","gauzily","gauzy","gavage","gavages","gave","gavel","gaveled","gaveling","gavelled","gavelock","gavels","gavial","gavials","gavot","gavots","gavotte","gavotted","gavottes","gawk","gawked","gawker","gawkers","gawkier","gawkies","gawkiest","gawkily","gawking","gawkish","gawks","gawky","gawp","gawped","gawping","gawps","gawsie","gawsy","gay","gayal","gayals","gayer","gayest","gayeties","gayety","gayly","gayness","gays","gaywings","gazabo","gazaboes","gazabos","gaze","gazebo","gazeboes","gazebos","gazed","gazelle","gazelles","gazer","gazers","gazes","gazette","gazetted","gazettes","gazing","gazogene","gazpacho","gazump","gazumped","gazumper","gazumps","gear","gearbox","gearcase","geared","gearing","gearings","gearless","gears","geck","gecked","gecking","gecko","geckoes","geckos","gecks","ged","geds","gee","geed","geegaw","geegaws","geeing","geek","geekier","geekiest","geeks","geeky","geepound","gees","geese","geest","geests","geezer","geezers","geisha","geishas","gel","gelable","gelada","geladas","gelant","gelants","gelate","gelated","gelates","gelati","gelatin","gelatine","gelating","gelatins","gelation","gelato","gelatos","geld","gelded","gelder","gelders","gelding","geldings","gelds","gelee","gelees","gelid","gelidity","gelidly","gellant","gellants","gelled","gelling","gels","gelsemia","gelt","gelts","gem","geminal","geminate","gemlike","gemma","gemmae","gemmate","gemmated","gemmates","gemmed","gemmier","gemmiest","gemmily","gemming","gemmule","gemmules","gemmy","gemology","gemot","gemote","gemotes","gemots","gems","gemsbok","gemsboks","gemsbuck","gemstone","gendarme","gender","gendered","genders","gene","genera","general","generals","generate","generic","generics","generous","genes","geneses","genesis","genet","genetic","genetics","genets","genette","genettes","geneva","genevas","genial","genially","genic","genie","genies","genii","genip","genipap","genipaps","genips","genital","genitals","genitive","genitor","genitors","geniture","genius","geniuses","genoa","genoas","genocide","genoise","genoises","genom","genome","genomes","genomic","genoms","genotype","genre","genres","genro","genros","gens","genseng","gensengs","gent","genteel","gentes","gentian","gentians","gentil","gentile","gentiles","gentle","gentled","gentler","gentles","gentlest","gentling","gently","gentrice","gentries","gentrify","gentry","gents","genu","genua","genuine","genus","genuses","geode","geodes","geodesic","geodesy","geodetic","geodic","geoduck","geoducks","geognosy","geoid","geoidal","geoids","geologer","geologic","geology","geomancy","geometer","geometry","geophagy","geophone","geophyte","geoponic","geoprobe","georgic","georgics","geotaxes","geotaxis","gerah","gerahs","geranial","geraniol","geranium","gerardia","gerbera","gerberas","gerbil","gerbille","gerbils","gerent","gerents","gerenuk","gerenuks","germ","german","germane","germanic","germans","germen","germens","germfree","germier","germiest","germina","germinal","germs","germy","gerontic","gerund","gerunds","gesneria","gesso","gessoed","gessoes","gest","gestalt","gestalts","gestapo","gestapos","gestate","gestated","gestates","geste","gestes","gestic","gestical","gests","gestural","gesture","gestured","gesturer","gestures","get","geta","getable","getas","getaway","getaways","gets","gettable","getter","gettered","getters","getting","getup","getups","geum","geums","gewgaw","gewgaws","gey","geyser","geysers","gharri","gharries","gharris","gharry","ghast","ghastful","ghastly","ghat","ghats","ghaut","ghauts","ghazi","ghazies","ghazis","ghee","ghees","gherao","gheraoed","gheraoes","gherkin","gherkins","ghetto","ghettoed","ghettoes","ghettos","ghi","ghibli","ghiblis","ghillie","ghillies","ghis","ghost","ghosted","ghostier","ghosting","ghostly","ghosts","ghosty","ghoul","ghoulish","ghouls","ghyll","ghylls","giant","giantess","giantism","giants","giaour","giaours","gib","gibbed","gibber","gibbered","gibbers","gibbet","gibbeted","gibbets","gibbing","gibbon","gibbons","gibbose","gibbous","gibbsite","gibe","gibed","giber","gibers","gibes","gibing","gibingly","giblet","giblets","gibs","gibson","gibsons","gid","giddap","giddied","giddier","giddies","giddiest","giddily","giddy","giddyap","giddying","giddyup","gids","gie","gied","gieing","gien","gies","gift","gifted","giftedly","gifting","giftless","gifts","giftware","gig","giga","gigabit","gigabits","gigantic","gigas","gigaton","gigatons","gigawatt","gigged","gigging","giggle","giggled","giggler","gigglers","giggles","gigglier","giggling","giggly","gighe","giglet","giglets","giglot","giglots","gigolo","gigolos","gigot","gigots","gigs","gigue","gigues","gilbert","gilberts","gild","gilded","gilder","gilders","gildhall","gilding","gildings","gilds","gill","gilled","giller","gillers","gillie","gillied","gillies","gilling","gillnet","gillnets","gills","gilly","gillying","gilt","gilthead","gilts","gimbal","gimbaled","gimbals","gimcrack","gimel","gimels","gimlet","gimleted","gimlets","gimmal","gimmals","gimme","gimmick","gimmicks","gimmicky","gimmie","gimmies","gimp","gimped","gimpier","gimpiest","gimping","gimps","gimpy","gin","gingal","gingall","gingalls","gingals","gingeley","gingeli","gingelis","gingelli","gingelly","gingely","ginger","gingered","gingerly","gingers","gingery","gingham","ginghams","gingili","gingilis","gingilli","gingiva","gingivae","gingival","gingko","gingkoes","gink","ginkgo","ginkgoes","ginkgos","ginks","ginned","ginner","ginners","ginnier","ginniest","ginning","ginnings","ginny","gins","ginseng","ginsengs","gip","gipon","gipons","gipped","gipper","gippers","gipping","gips","gipsied","gipsies","gipsy","gipsying","giraffe","giraffes","girasol","girasole","girasols","gird","girded","girder","girders","girding","girdle","girdled","girdler","girdlers","girdles","girdling","girds","girl","girlhood","girlie","girlies","girlish","girls","girly","girn","girned","girning","girns","giro","giron","girons","giros","girosol","girosols","girsh","girshes","girt","girted","girth","girthed","girthing","girths","girting","girts","gisarme","gisarmes","gismo","gismos","gist","gists","git","gitano","gitanos","gittern","gitterns","give","giveable","giveaway","giveback","given","givens","giver","givers","gives","giving","gizmo","gizmos","gizzard","gizzards","gjetost","gjetosts","glabella","glabrate","glabrous","glace","glaceed","glaceing","glaces","glacial","glaciate","glacier","glaciers","glacis","glacises","glad","gladded","gladden","gladdens","gladder","gladdest","gladding","glade","glades","gladiate","gladier","gladiest","gladiola","gladioli","gladlier","gladly","gladness","glads","gladsome","glady","glaiket","glaikit","glair","glaire","glaired","glaires","glairier","glairing","glairs","glairy","glaive","glaived","glaives","glamor","glamors","glamour","glamours","glance","glanced","glancer","glancers","glances","glancing","gland","glanders","glandes","glands","glandule","glans","glare","glared","glares","glarier","glariest","glaring","glary","glass","glassed","glasses","glassful","glassie","glassier","glassies","glassily","glassine","glassing","glassman","glassmen","glassy","glaucoma","glaucous","glaze","glazed","glazer","glazers","glazes","glazier","glaziers","glaziery","glaziest","glazing","glazings","glazy","gleam","gleamed","gleamer","gleamers","gleamier","gleaming","gleams","gleamy","glean","gleaned","gleaner","gleaners","gleaning","gleans","gleba","glebae","glebe","glebes","gled","glede","gledes","gleds","glee","gleed","gleeds","gleeful","gleek","gleeked","gleeking","gleeks","gleeman","gleemen","glees","gleesome","gleet","gleeted","gleetier","gleeting","gleets","gleety","gleg","glegly","glegness","glen","glenlike","glenoid","glens","gley","gleys","glia","gliadin","gliadine","gliadins","glial","glias","glib","glibber","glibbest","glibly","glibness","glide","glided","glider","gliders","glides","gliding","gliff","gliffs","glim","glime","glimed","glimes","gliming","glimmer","glimmers","glimpse","glimpsed","glimpser","glimpses","glims","glint","glinted","glinting","glints","glioma","gliomas","gliomata","glissade","glisten","glistens","glister","glisters","glitch","glitches","glitchy","glitter","glitters","glittery","glitz","glitzes","glitzier","glitzy","gloam","gloaming","gloams","gloat","gloated","gloater","gloaters","gloating","gloats","glob","global","globally","globate","globated","globbier","globby","globe","globed","globes","globin","globing","globins","globoid","globoids","globose","globous","globs","globular","globule","globules","globulin","glochid","glochids","glogg","gloggs","glom","glomera","glommed","glomming","gloms","glomus","glonoin","glonoins","gloom","gloomed","gloomful","gloomier","gloomily","glooming","glooms","gloomy","glop","glopped","glopping","gloppy","glops","gloria","glorias","gloried","glories","glorify","gloriole","glorious","glory","glorying","gloss","glossa","glossae","glossal","glossary","glossas","glossed","glosseme","glosser","glossers","glosses","glossier","glossies","glossily","glossina","glossing","glossy","glost","glosts","glottal","glottic","glottis","glout","glouted","glouting","glouts","glove","gloved","glover","glovers","gloves","gloving","glow","glowed","glower","glowered","glowers","glowfly","glowing","glows","glowworm","gloxinia","gloze","glozed","glozes","glozing","glucagon","glucinic","glucinum","glucose","glucoses","glucosic","glue","glued","glueing","gluelike","gluepot","gluepots","gluer","gluers","glues","gluey","glug","glugged","glugging","glugs","gluier","gluiest","gluily","gluing","glum","glume","glumes","glumly","glummer","glummest","glumness","glumpier","glumpily","glumpy","glunch","glunched","glunches","gluon","gluons","glut","gluteal","glutei","glutelin","gluten","glutens","gluteus","gluts","glutted","glutting","glutton","gluttons","gluttony","glycan","glycans","glyceric","glycerin","glycerol","glyceryl","glycin","glycine","glycines","glycins","glycogen","glycol","glycolic","glycols","glyconic","glycosyl","glycyl","glycyls","glyph","glyphic","glyphs","glyptic","glyptics","gnar","gnarl","gnarled","gnarlier","gnarling","gnarls","gnarly","gnarr","gnarred","gnarring","gnarrs","gnars","gnash","gnashed","gnashes","gnashing","gnat","gnathal","gnathic","gnathion","gnathite","gnatlike","gnats","gnattier","gnatty","gnaw","gnawable","gnawed","gnawer","gnawers","gnawing","gnawings","gnawn","gnaws","gneiss","gneisses","gneissic","gnocchi","gnome","gnomes","gnomic","gnomical","gnomish","gnomist","gnomists","gnomon","gnomonic","gnomons","gnoses","gnosis","gnostic","gnu","gnus","goa","goad","goaded","goading","goadlike","goads","goal","goaled","goalie","goalies","goaling","goalless","goalpost","goals","goanna","goannas","goas","goat","goatee","goateed","goatees","goatfish","goatherd","goatish","goatlike","goats","goatskin","gob","goban","gobang","gobangs","gobans","gobbed","gobbet","gobbets","gobbing","gobble","gobbled","gobbler","gobblers","gobbles","gobbling","gobies","gobioid","gobioids","goblet","goblets","goblin","goblins","gobo","goboes","gobonee","gobony","gobos","gobs","goby","god","godchild","goddam","goddamn","goddamns","goddams","godded","goddess","godding","godhead","godheads","godhood","godhoods","godless","godlier","godliest","godlike","godlily","godling","godlings","godly","godown","godowns","godroon","godroons","gods","godsend","godsends","godship","godships","godson","godsons","godwit","godwits","goer","goers","goes","goethite","gofer","gofers","goffer","goffered","goffers","goggle","goggled","goggler","gogglers","goggles","gogglier","goggling","goggly","goglet","goglets","gogo","gogos","going","goings","goiter","goiters","goitre","goitres","goitrous","golconda","gold","goldarn","goldarns","goldbug","goldbugs","golden","goldener","goldenly","golder","goldest","goldeye","goldeyes","goldfish","golds","goldurn","goldurns","golem","golems","golf","golfed","golfer","golfers","golfing","golfings","golfs","golgotha","goliard","goliards","golliwog","golly","golosh","goloshe","goloshes","gombo","gombos","gombroon","gomeral","gomerals","gomerel","gomerels","gomeril","gomerils","gomuti","gomutis","gonad","gonadal","gonadial","gonadic","gonads","gondola","gondolas","gone","gonef","gonefs","goneness","goner","goners","gonfalon","gonfanon","gong","gonged","gonging","gonglike","gongs","gonia","gonidia","gonidial","gonidic","gonidium","gonif","goniff","goniffs","gonifs","gonion","gonium","gonocyte","gonof","gonofs","gonoph","gonophs","gonopore","gonzo","goo","goober","goobers","good","goodby","goodbye","goodbyes","goodbys","goodie","goodies","goodish","goodlier","goodly","goodman","goodmen","goodness","goods","goodwife","goodwill","goody","gooey","goof","goofball","goofed","goofier","goofiest","goofily","goofing","goofs","goofy","googlies","googly","googol","googols","gooier","gooiest","gook","gooks","gooky","goombah","goombahs","goombay","goombays","goon","gooney","gooneys","goonie","goonies","goons","goony","goop","goopier","goopiest","goops","goopy","gooral","goorals","goos","goose","goosed","gooses","goosey","goosier","goosiest","goosing","goosy","gopher","gophers","gor","goral","gorals","gorbelly","gorblimy","gorcock","gorcocks","gore","gored","gores","gorge","gorged","gorgedly","gorgeous","gorger","gorgerin","gorgers","gorges","gorget","gorgeted","gorgets","gorging","gorgon","gorgons","gorhen","gorhens","gorier","goriest","gorilla","gorillas","gorily","goriness","goring","gormand","gormands","gormless","gorp","gorps","gorse","gorses","gorsier","gorsiest","gorsy","gory","gosh","goshawk","goshawks","gosling","goslings","gospel","gospeler","gospels","gosport","gosports","gossamer","gossan","gossans","gossip","gossiped","gossiper","gossipry","gossips","gossipy","gossoon","gossoons","gossypol","got","gothic","gothics","gothite","gothites","gotten","gouache","gouaches","gouge","gouged","gouger","gougers","gouges","gouging","goulash","gourami","gouramis","gourd","gourde","gourdes","gourds","gourmand","gourmet","gourmets","gout","goutier","goutiest","goutily","gouts","gouty","govern","governed","governor","governs","gowan","gowaned","gowans","gowany","gowd","gowds","gowk","gowks","gown","gowned","gowning","gowns","gownsman","gownsmen","gox","goxes","goy","goyim","goyish","goys","graal","graals","grab","grabbed","grabber","grabbers","grabbier","grabbing","grabble","grabbled","grabbler","grabbles","grabby","graben","grabens","grabs","grace","graced","graceful","graces","gracile","graciles","gracilis","gracing","gracioso","gracious","grackle","grackles","grad","gradable","gradate","gradated","gradates","grade","graded","grader","graders","grades","gradient","gradin","gradine","gradines","grading","gradins","grads","gradual","graduals","graduand","graduate","gradus","graduses","graecize","graffiti","graffito","graft","graftage","grafted","grafter","grafters","grafting","grafts","graham","grahams","grail","grails","grain","grained","grainer","grainers","grainier","graining","grains","grainy","gram","grama","gramary","gramarye","gramas","gramercy","grammar","grammars","gramme","grammes","gramp","gramps","grampus","grams","gran","grana","granary","grand","grandad","grandads","grandam","grandame","grandams","granddad","grandee","grandees","grander","grandest","grandeur","grandly","grandma","grandmas","grandpa","grandpas","grands","grandsir","grandson","grange","granger","grangers","granges","granite","granites","granitic","grannie","grannies","granny","granola","granolas","grans","grant","granted","grantee","grantees","granter","granters","granting","grantor","grantors","grants","granular","granule","granules","granum","grape","grapery","grapes","grapey","graph","graphed","grapheme","graphic","graphics","graphing","graphite","graphs","grapier","grapiest","graplin","grapline","graplins","grapnel","grapnels","grappa","grappas","grapple","grappled","grappler","grapples","grapy","grasp","grasped","grasper","graspers","grasping","grasps","grass","grassed","grasses","grassier","grassily","grassing","grassy","grat","grate","grated","grateful","grater","graters","grates","gratify","gratin","gratine","gratinee","grating","gratings","gratins","gratis","gratuity","graupel","graupels","gravamen","grave","graved","gravel","graveled","gravelly","gravels","gravely","graven","graver","gravers","graves","gravest","gravid","gravida","gravidae","gravidas","gravidly","gravies","graving","gravitas","graviton","gravity","gravure","gravures","gravy","gray","grayback","grayed","grayer","grayest","grayfish","graying","grayish","graylag","graylags","grayling","grayly","graymail","grayness","grayout","grayouts","grays","grazable","graze","grazed","grazer","grazers","grazes","grazier","graziers","grazing","grazings","grazioso","grease","greased","greaser","greasers","greases","greasier","greasily","greasing","greasy","great","greaten","greatens","greater","greatest","greatly","greats","greave","greaved","greaves","grebe","grebes","grecize","grecized","grecizes","gree","greed","greedier","greedily","greeds","greedy","greegree","greeing","greek","green","greenbug","greened","greener","greenery","greenest","greenfly","greenie","greenier","greenies","greening","greenish","greenlet","greenly","greens","greenth","greenths","greeny","grees","greet","greeted","greeter","greeters","greeting","greets","grego","gregos","greige","greiges","greisen","greisens","gremial","gremials","gremlin","gremlins","gremmie","gremmies","gremmy","grenade","grenades","grew","grewsome","grey","greyed","greyer","greyest","greyhen","greyhens","greying","greyish","greylag","greylags","greyly","greyness","greys","gribble","gribbles","grid","gridder","gridders","griddle","griddled","griddles","gride","grided","grides","griding","gridiron","gridlock","grids","grief","griefs","grievant","grieve","grieved","griever","grievers","grieves","grieving","grievous","griff","griffe","griffes","griffin","griffins","griffon","griffons","griffs","grift","grifted","grifter","grifters","grifting","grifts","grig","grigri","grigris","grigs","grill","grillade","grillage","grille","grilled","griller","grillers","grilles","grilling","grills","grilse","grilses","grim","grimace","grimaced","grimacer","grimaces","grime","grimed","grimes","grimier","grimiest","grimily","griming","grimly","grimmer","grimmest","grimness","grimy","grin","grind","grinded","grinder","grinders","grindery","grinding","grinds","gringo","gringos","grinned","grinner","grinners","grinning","grins","griot","griots","grip","gripe","griped","griper","gripers","gripes","gripey","gripier","gripiest","griping","grippe","gripped","gripper","grippers","grippes","grippier","gripping","gripple","grippy","grips","gripsack","gript","gripy","griseous","grisette","griskin","griskins","grislier","grisly","grison","grisons","grist","gristle","gristles","gristly","grists","grit","grith","griths","grits","gritted","grittier","grittily","gritting","gritty","grivet","grivets","grizzle","grizzled","grizzler","grizzles","grizzly","groan","groaned","groaner","groaners","groaning","groans","groat","groats","grocer","grocers","grocery","grog","groggery","groggier","groggily","groggy","grogram","grograms","grogs","grogshop","groin","groined","groining","groins","grommet","grommets","gromwell","groom","groomed","groomer","groomers","grooming","grooms","groove","grooved","groover","groovers","grooves","groovier","grooving","groovy","grope","groped","groper","gropers","gropes","groping","grosbeak","groschen","gross","grossed","grosser","grossers","grosses","grossest","grossing","grossly","grosz","grosze","groszy","grot","grots","grottier","grotto","grottoes","grottos","grotty","grouch","grouched","grouches","grouchy","ground","grounded","grounder","grounds","group","grouped","grouper","groupers","groupie","groupies","grouping","groupoid","groups","grouse","groused","grouser","grousers","grouses","grousing","grout","grouted","grouter","grouters","groutier","grouting","grouts","grouty","grove","groved","grovel","groveled","groveler","grovels","groves","grow","growable","grower","growers","growing","growl","growled","growler","growlers","growlier","growling","growls","growly","grown","grownup","grownups","grows","growth","growths","groyne","groynes","grub","grubbed","grubber","grubbers","grubbier","grubbily","grubbing","grubby","grubs","grubworm","grudge","grudged","grudger","grudgers","grudges","grudging","grue","gruel","grueled","grueler","gruelers","grueling","gruelled","grueller","gruels","grues","gruesome","gruff","gruffed","gruffer","gruffest","gruffier","gruffily","gruffing","gruffish","gruffly","gruffs","gruffy","grugru","grugrus","gruiform","grum","grumble","grumbled","grumbler","grumbles","grumbly","grume","grumes","grummer","grummest","grummet","grummets","grumose","grumous","grump","grumped","grumphie","grumphy","grumpier","grumpily","grumping","grumpish","grumps","grumpy","grunge","grunges","grungier","grungy","grunion","grunions","grunt","grunted","grunter","grunters","grunting","gruntle","gruntled","gruntles","grunts","grushie","grutch","grutched","grutches","grutten","gruyere","gruyeres","gryphon","gryphons","guacharo","guaco","guacos","guaiac","guaiacol","guaiacs","guaiacum","guaiocum","guan","guanaco","guanacos","guanase","guanases","guanay","guanays","guanidin","guanin","guanine","guanines","guanins","guano","guanos","guans","guar","guarani","guaranis","guaranty","guard","guardant","guarded","guarder","guarders","guardian","guarding","guards","guars","guava","guavas","guayule","guayules","guck","gucks","gude","gudes","gudgeon","gudgeons","guenon","guenons","guerdon","guerdons","guerilla","guernsey","guess","guessed","guesser","guessers","guesses","guessing","guest","guested","guesting","guests","guff","guffaw","guffawed","guffaws","guffs","guggle","guggled","guggles","guggling","guglet","guglets","guid","guidable","guidance","guide","guided","guider","guiders","guides","guideway","guiding","guidon","guidons","guids","guild","guilder","guilders","guilds","guile","guiled","guileful","guiles","guiling","guilt","guiltier","guiltily","guilts","guilty","guimpe","guimpes","guinea","guineas","guipure","guipures","guiro","guiros","guisard","guisards","guise","guised","guises","guising","guitar","guitars","guitguit","gul","gulag","gulags","gular","gulch","gulches","gulden","guldens","gules","gulf","gulfed","gulfier","gulfiest","gulfing","gulflike","gulfs","gulfweed","gulfy","gull","gullable","gullably","gulled","gullet","gullets","gulley","gulleys","gullible","gullibly","gullied","gullies","gulling","gulls","gully","gullying","gulosity","gulp","gulped","gulper","gulpers","gulpier","gulpiest","gulping","gulps","gulpy","guls","gum","gumbo","gumboil","gumboils","gumboot","gumboots","gumbos","gumbotil","gumdrop","gumdrops","gumless","gumlike","gumma","gummas","gummata","gummed","gummer","gummers","gummier","gummiest","gumming","gummite","gummites","gummose","gummoses","gummosis","gummous","gummy","gumption","gums","gumshoe","gumshoed","gumshoes","gumtree","gumtrees","gumweed","gumweeds","gumwood","gumwoods","gun","gunboat","gunboats","gundog","gundogs","gunfight","gunfire","gunfires","gunflint","gunk","gunkhole","gunks","gunky","gunless","gunlock","gunlocks","gunman","gunmen","gunmetal","gunned","gunnel","gunnels","gunnen","gunner","gunners","gunnery","gunnies","gunning","gunnings","gunny","gunnybag","gunpaper","gunplay","gunplays","gunpoint","gunroom","gunrooms","guns","gunsel","gunsels","gunship","gunships","gunshot","gunshots","gunsmith","gunstock","gunwale","gunwales","guppies","guppy","gurge","gurged","gurges","gurging","gurgle","gurgled","gurgles","gurglet","gurglets","gurgling","gurnard","gurnards","gurnet","gurnets","gurney","gurneys","gurries","gurry","gursh","gurshes","guru","gurus","guruship","gush","gushed","gusher","gushers","gushes","gushier","gushiest","gushily","gushing","gushy","gusset","gusseted","gussets","gussie","gussied","gussies","gussy","gussying","gust","gustable","gusted","gustier","gustiest","gustily","gusting","gustless","gusto","gustoes","gusts","gusty","gut","gutless","gutlike","guts","gutsier","gutsiest","gutsily","gutsy","gutta","guttae","guttate","guttated","gutted","gutter","guttered","gutters","guttery","guttier","guttiest","gutting","guttle","guttled","guttler","guttlers","guttles","guttling","guttural","gutty","guv","guvs","guy","guyed","guying","guyot","guyots","guys","guzzle","guzzled","guzzler","guzzlers","guzzles","guzzling","gweduc","gweduck","gweducks","gweducs","gybe","gybed","gybes","gybing","gym","gymkhana","gymnasia","gymnast","gymnasts","gyms","gynaecea","gynaecia","gynandry","gynarchy","gynecia","gynecic","gynecium","gynecoid","gyniatry","gynoecia","gyp","gyplure","gyplures","gypped","gypper","gyppers","gypping","gyps","gypseian","gypseous","gypsied","gypsies","gypster","gypsters","gypsum","gypsums","gypsy","gypsydom","gypsying","gypsyish","gypsyism","gyral","gyrally","gyrate","gyrated","gyrates","gyrating","gyration","gyrator","gyrators","gyratory","gyre","gyred","gyrene","gyrenes","gyres","gyri","gyring","gyro","gyroidal","gyron","gyrons","gyros","gyrose","gyrostat","gyrus","gyve","gyved","gyves","gyving","haaf","haafs","haar","haars","habanera","habdalah","habile","habit","habitan","habitans","habitant","habitat","habitats","habited","habiting","habits","habitual","habitude","habitue","habitues","habitus","haboob","haboobs","habu","habus","hacek","haceks","hachure","hachured","hachures","hacienda","hack","hackbut","hackbuts","hacked","hackee","hackees","hacker","hackers","hackie","hackies","hacking","hackle","hackled","hackler","hacklers","hackles","hacklier","hackling","hackly","hackman","hackmen","hackney","hackneys","hacks","hacksaw","hacksaws","hackwork","had","hadal","hadarim","haddest","haddock","haddocks","hade","haded","hades","hading","hadj","hadjee","hadjees","hadjes","hadji","hadjis","hadron","hadronic","hadrons","hadst","hae","haed","haeing","haem","haemal","haematal","haematic","haematin","haemic","haemin","haemins","haemoid","haems","haen","haeredes","haeres","haes","haet","haets","haffet","haffets","haffit","haffits","hafis","hafiz","hafnium","hafniums","haft","haftara","haftarah","haftaras","haftarot","hafted","hafter","hafters","hafting","haftorah","haftorot","hafts","hag","hagadic","hagadist","hagberry","hagborn","hagbush","hagbut","hagbuts","hagdon","hagdons","hagfish","haggada","haggadah","haggadas","haggadic","haggadot","haggard","haggards","hagged","hagging","haggis","haggises","haggish","haggle","haggled","haggler","hagglers","haggles","haggling","hagride","hagrides","hagrode","hags","hah","haha","hahas","hahnium","hahniums","hahs","haik","haika","haiks","haiku","hail","hailed","hailer","hailers","hailing","hails","hair","hairball","hairband","haircap","haircaps","haircut","haircuts","hairdo","hairdos","haired","hairier","hairiest","hairless","hairlike","hairline","hairlock","hairnet","hairnets","hairpin","hairpins","hairs","hairwork","hairworm","hairy","haj","hajes","haji","hajis","hajj","hajjes","hajji","hajjis","hake","hakeem","hakeems","hakes","hakim","hakims","halacha","halachas","halachot","halakah","halakahs","halakha","halakhas","halakhot","halakic","halakist","halakoth","halala","halalah","halalahs","halalas","halation","halavah","halavahs","halazone","halberd","halberds","halbert","halberts","halcyon","halcyons","hale","haled","haleness","haler","halers","haleru","hales","halest","half","halfback","halfbeak","halflife","halfness","halftime","halftone","halfway","halibut","halibuts","halid","halide","halides","halidom","halidome","halidoms","halids","haling","halite","halites","halitus","hall","hallah","hallahs","hallel","hallels","halliard","hallmark","hallo","halloa","halloaed","halloas","halloed","halloes","halloing","halloo","hallooed","halloos","hallos","hallot","halloth","hallow","hallowed","hallower","hallows","halls","halluces","hallux","hallway","hallways","halm","halms","halo","haloed","haloes","halogen","halogens","haloid","haloids","haloing","halolike","halos","halt","halted","halter","haltere","haltered","halteres","halters","halting","haltless","halts","halutz","halutzim","halva","halvah","halvahs","halvas","halve","halved","halvers","halves","halving","halyard","halyards","ham","hamada","hamadas","hamal","hamals","hamartia","hamate","hamates","hamaul","hamauls","hambone","hamboned","hambones","hamburg","hamburgs","hame","hames","hamlet","hamlets","hammada","hammadas","hammal","hammals","hammed","hammer","hammered","hammerer","hammers","hammier","hammiest","hammily","hamming","hammock","hammocks","hammy","hamper","hampered","hamperer","hampers","hams","hamster","hamsters","hamular","hamulate","hamuli","hamulose","hamulous","hamulus","hamza","hamzah","hamzahs","hamzas","hanaper","hanapers","hance","hances","hand","handbag","handbags","handball","handbill","handbook","handcar","handcars","handcart","handcuff","handed","handfast","handful","handfuls","handgrip","handgun","handguns","handhold","handicap","handier","handiest","handily","handing","handle","handled","handler","handlers","handles","handless","handlike","handling","handlist","handloom","handmade","handmaid","handoff","handoffs","handout","handouts","handpick","handrail","hands","handsaw","handsaws","handsel","handsels","handset","handsets","handsewn","handsful","handsome","handwork","handwrit","handy","handyman","handymen","hang","hangable","hangar","hangared","hangars","hangbird","hangdog","hangdogs","hanged","hanger","hangers","hangfire","hanging","hangings","hangman","hangmen","hangnail","hangnest","hangout","hangouts","hangover","hangs","hangtag","hangtags","hangup","hangups","hank","hanked","hanker","hankered","hankerer","hankers","hankie","hankies","hanking","hanks","hanky","hansa","hansas","hanse","hansel","hanseled","hansels","hanses","hansom","hansoms","hant","hanted","hanting","hantle","hantles","hants","hanuman","hanumans","hao","haole","haoles","hap","hapax","hapaxes","haphtara","hapless","haplite","haplites","haploid","haploids","haploidy","haplont","haplonts","haplopia","haploses","haplosis","haply","happed","happen","happened","happens","happier","happiest","happily","happing","happy","haps","hapten","haptene","haptenes","haptenic","haptens","haptic","haptical","harangue","harass","harassed","harasser","harasses","harbor","harbored","harborer","harbors","harbour","harbours","hard","hardback","hardball","hardboot","hardcase","hardcore","hardedge","harden","hardened","hardener","hardens","harder","hardest","hardhack","hardhat","hardhats","hardhead","hardier","hardies","hardiest","hardily","hardline","hardly","hardness","hardnose","hardpan","hardpans","hards","hardset","hardship","hardtack","hardtop","hardtops","hardware","hardwire","hardwood","hardy","hare","harebell","hared","hareem","hareems","harelike","harelip","harelips","harem","harems","hares","hariana","harianas","haricot","haricots","harijan","harijans","haring","hark","harked","harken","harkened","harkener","harkens","harking","harks","harl","harlot","harlotry","harlots","harls","harm","harmed","harmer","harmers","harmful","harmin","harmine","harmines","harming","harmins","harmless","harmonic","harmony","harms","harness","harp","harped","harper","harpers","harpies","harpin","harping","harpings","harpins","harpist","harpists","harpoon","harpoons","harps","harpy","harridan","harried","harrier","harriers","harries","harrow","harrowed","harrower","harrows","harrumph","harry","harrying","harsh","harshen","harshens","harsher","harshest","harshly","harslet","harslets","hart","hartal","hartals","harts","harumph","harumphs","haruspex","harvest","harvests","has","hash","hashed","hasheesh","hashes","hashhead","hashing","hashish","haslet","haslets","hasp","hasped","hasping","hasps","hassel","hassels","hassle","hassled","hassles","hassling","hassock","hassocks","hast","hastate","haste","hasted","hasteful","hasten","hastened","hastener","hastens","hastes","hastier","hastiest","hastily","hasting","hasty","hat","hatable","hatband","hatbands","hatbox","hatboxes","hatch","hatcheck","hatched","hatchel","hatchels","hatcher","hatchers","hatchery","hatches","hatchet","hatchets","hatching","hatchway","hate","hateable","hated","hateful","hater","haters","hates","hatful","hatfuls","hath","hating","hatless","hatlike","hatmaker","hatpin","hatpins","hatrack","hatracks","hatred","hatreds","hats","hatsful","hatted","hatter","hatteria","hatters","hatting","hauberk","hauberks","haugh","haughs","haughty","haul","haulage","haulages","hauled","hauler","haulers","haulier","hauliers","hauling","haulm","haulmier","haulms","haulmy","hauls","haulyard","haunch","haunched","haunches","haunt","haunted","haunter","haunters","haunting","haunts","hausen","hausens","hausfrau","haut","hautbois","hautboy","hautboys","haute","hauteur","hauteurs","havarti","havartis","havdalah","have","havelock","haven","havened","havening","havens","haver","havered","haverel","haverels","havering","havers","haves","having","havior","haviors","haviour","haviours","havoc","havocked","havocker","havocs","haw","hawed","hawfinch","hawing","hawk","hawkbill","hawked","hawker","hawkers","hawkey","hawkeys","hawkie","hawkies","hawking","hawkings","hawkish","hawklike","hawkmoth","hawknose","hawks","hawkshaw","hawkweed","haws","hawse","hawser","hawsers","hawses","hawthorn","hay","haycock","haycocks","hayed","hayer","hayers","hayfield","hayfork","hayforks","haying","hayings","haylage","haylages","hayloft","haylofts","haymaker","haymow","haymows","hayrack","hayracks","hayrick","hayricks","hayride","hayrides","hays","hayseed","hayseeds","haystack","hayward","haywards","haywire","haywires","hazan","hazanim","hazans","hazard","hazarded","hazards","haze","hazed","hazel","hazelhen","hazelly","hazelnut","hazels","hazer","hazers","hazes","hazier","haziest","hazily","haziness","hazing","hazings","hazy","hazzan","hazzanim","hazzans","head","headache","headachy","headband","headed","header","headers","headfish","headgate","headgear","headhunt","headier","headiest","headily","heading","headings","headlamp","headland","headless","headline","headlock","headlong","headman","headmen","headmost","headnote","headpin","headpins","headrace","headrest","headroom","heads","headsail","headset","headsets","headship","headsman","headsmen","headstay","headway","headways","headwind","headword","headwork","heady","heal","healable","healed","healer","healers","healing","heals","health","healths","healthy","heap","heaped","heaping","heaps","hear","hearable","heard","hearer","hearers","hearing","hearings","hearken","hearkens","hears","hearsay","hearsays","hearse","hearsed","hearses","hearsing","heart","hearted","hearten","heartens","hearth","hearths","heartier","hearties","heartily","hearting","hearts","hearty","heat","heatable","heated","heatedly","heater","heaters","heath","heathen","heathens","heather","heathers","heathery","heathier","heaths","heathy","heating","heatless","heats","heaume","heaumes","heave","heaved","heaven","heavenly","heavens","heaver","heavers","heaves","heavier","heavies","heaviest","heavily","heaving","heavy","heavyset","hebdomad","hebe","hebes","hebetate","hebetic","hebetude","hebraize","hecatomb","heck","heckle","heckled","heckler","hecklers","heckles","heckling","hecks","hectare","hectares","hectic","hectical","hecticly","hector","hectored","hectors","heddle","heddles","heder","heders","hedge","hedged","hedgehog","hedgehop","hedgepig","hedger","hedgerow","hedgers","hedges","hedgier","hedgiest","hedging","hedgy","hedonic","hedonics","hedonism","hedonist","heed","heeded","heeder","heeders","heedful","heeding","heedless","heeds","heehaw","heehawed","heehaws","heel","heelball","heeled","heeler","heelers","heeling","heelings","heelless","heelpost","heels","heeltap","heeltaps","heeze","heezed","heezes","heezing","heft","hefted","hefter","hefters","heftier","heftiest","heftily","hefting","hefts","hefty","hegari","hegaris","hegemony","hegira","hegiras","hegumen","hegumene","hegumens","hegumeny","heh","hehs","heifer","heifers","heigh","height","heighten","heighth","heighths","heights","heil","heiled","heiling","heils","heimish","heinie","heinies","heinous","heir","heirdom","heirdoms","heired","heiress","heiring","heirless","heirloom","heirs","heirship","heishi","heist","heisted","heister","heisters","heisting","heists","hejira","hejiras","hektare","hektares","held","heliac","heliacal","heliast","heliasts","helical","helices","helicity","helicoid","helicon","helicons","helicopt","helilift","helio","helios","helipad","helipads","heliport","helistop","helium","heliums","helix","helixes","hell","hellbent","hellbox","hellcat","hellcats","helled","heller","helleri","hellers","hellery","hellfire","hellhole","helling","hellion","hellions","hellish","hellkite","hello","helloed","helloes","helloing","hellos","hells","helluva","helm","helmed","helmet","helmeted","helmets","helming","helminth","helmless","helms","helmsman","helmsmen","helot","helotage","helotism","helotry","helots","help","helpable","helped","helper","helpers","helpful","helping","helpings","helpless","helpmate","helpmeet","helps","helve","helved","helves","helving","hem","hemagog","hemagogs","hemal","hematal","hematein","hematic","hematics","hematin","hematine","hematins","hematite","hematoid","hematoma","heme","hemes","hemic","hemin","hemins","hemiola","hemiolas","hemiolia","hemipter","hemline","hemlines","hemlock","hemlocks","hemmed","hemmer","hemmers","hemming","hemocoel","hemocyte","hemoid","hemolyze","hemostat","hemp","hempen","hempie","hempier","hempiest","hemplike","hemps","hempseed","hempweed","hempy","hems","hen","henbane","henbanes","henbit","henbits","hence","henchman","henchmen","hencoop","hencoops","henequen","henequin","henhouse","heniquen","henlike","henna","hennaed","hennaing","hennas","hennery","henpeck","henpecks","henries","henry","henrys","hens","hent","hented","henting","hents","hep","heparin","heparins","hepatic","hepatica","hepatics","hepatize","hepatoma","hepcat","hepcats","heptad","heptads","heptagon","heptane","heptanes","heptarch","heptose","heptoses","her","herald","heralded","heraldic","heraldry","heralds","herb","herbage","herbages","herbal","herbals","herbaria","herbed","herbier","herbiest","herbless","herblike","herbs","herby","hercules","herd","herded","herder","herders","herdic","herdics","herding","herdlike","herdman","herdmen","herds","herdsman","herdsmen","here","hereat","hereaway","hereby","heredes","heredity","herein","hereinto","hereof","hereon","heres","heresies","heresy","heretic","heretics","hereto","heretrix","hereunto","hereupon","herewith","heriot","heriots","heritage","heritor","heritors","heritrix","herl","herls","herm","herma","hermae","hermaean","hermai","hermetic","hermit","hermitic","hermitry","hermits","herms","hern","hernia","herniae","hernial","hernias","herniate","herns","hero","heroes","heroic","heroical","heroics","heroin","heroine","heroines","heroins","heroism","heroisms","heroize","heroized","heroizes","heron","heronry","herons","heros","herpes","herpeses","herpetic","herried","herries","herring","herrings","herry","herrying","hers","herself","hertz","hertzes","hes","hesitant","hesitate","hessian","hessians","hessite","hessites","hest","hests","het","hetaera","hetaerae","hetaeras","hetaeric","hetaira","hetairai","hetairas","hetero","heteros","heth","heths","hetman","hetmans","hets","heuch","heuchs","heugh","heughs","hew","hewable","hewed","hewer","hewers","hewing","hewn","hews","hex","hexad","hexade","hexades","hexadic","hexads","hexagon","hexagons","hexagram","hexamine","hexane","hexanes","hexapla","hexaplar","hexaplas","hexapod","hexapods","hexapody","hexarchy","hexed","hexer","hexerei","hexereis","hexers","hexes","hexing","hexone","hexones","hexosan","hexosans","hexose","hexoses","hexyl","hexyls","hey","heyday","heydays","heydey","heydeys","hiatal","hiatus","hiatuses","hibachi","hibachis","hibernal","hibiscus","hic","hiccough","hiccup","hiccuped","hiccups","hick","hickey","hickeys","hickies","hickish","hickory","hicks","hid","hidable","hidalgo","hidalgos","hidden","hiddenly","hide","hideaway","hided","hideless","hideous","hideout","hideouts","hider","hiders","hides","hiding","hidings","hidroses","hidrosis","hidrotic","hie","hied","hieing","hiemal","hierarch","hieratic","hies","higgle","higgled","higgler","higglers","higgles","higgling","high","highball","highborn","highboy","highboys","highbred","highbrow","highbush","higher","highest","highjack","highland","highlife","highly","highness","highroad","highs","hight","hightail","highted","highth","highths","highting","hights","highway","highways","hijack","hijacked","hijacker","hijacks","hijinks","hike","hiked","hiker","hikers","hikes","hiking","hila","hilar","hilarity","hilding","hildings","hili","hill","hilled","hiller","hillers","hillier","hilliest","hilling","hillo","hilloa","hilloaed","hilloas","hillock","hillocks","hillocky","hilloed","hilloes","hilloing","hillos","hills","hillside","hilltop","hilltops","hilly","hilt","hilted","hilting","hiltless","hilts","hilum","hilus","him","himatia","himation","himself","hin","hind","hinder","hindered","hinderer","hinders","hindgut","hindguts","hindmost","hinds","hinge","hinged","hinger","hingers","hinges","hinging","hinnied","hinnies","hinny","hinnying","hins","hint","hinted","hinter","hinters","hinting","hints","hip","hipbone","hipbones","hipless","hiplike","hipline","hiplines","hipness","hipparch","hipped","hipper","hippest","hippie","hippier","hippies","hippiest","hipping","hippish","hippo","hippos","hippy","hips","hipshot","hipster","hipsters","hirable","hiragana","hircine","hire","hireable","hired","hireling","hirer","hirers","hires","hiring","hirple","hirpled","hirples","hirpling","hirsel","hirseled","hirsels","hirsle","hirsled","hirsles","hirsling","hirsute","hirudin","hirudins","his","hisn","hispid","hiss","hissed","hisself","hisser","hissers","hisses","hissing","hissings","hist","histamin","histed","histidin","histing","histogen","histoid","histone","histones","historic","history","hists","hit","hitch","hitched","hitcher","hitchers","hitches","hitching","hither","hitherto","hitless","hits","hitter","hitters","hitting","hive","hived","hiveless","hives","hiving","hizzoner","hmm","hoactzin","hoagie","hoagies","hoagy","hoar","hoard","hoarded","hoarder","hoarders","hoarding","hoards","hoarier","hoariest","hoarily","hoars","hoarse","hoarsely","hoarsen","hoarsens","hoarser","hoarsest","hoary","hoatzin","hoatzins","hoax","hoaxed","hoaxer","hoaxers","hoaxes","hoaxing","hob","hobbed","hobbies","hobbing","hobble","hobbled","hobbler","hobblers","hobbles","hobbling","hobby","hobbyist","hoblike","hobnail","hobnails","hobnob","hobnobs","hobo","hoboed","hoboes","hoboing","hoboism","hoboisms","hobos","hobs","hock","hocked","hocker","hockers","hockey","hockeys","hocking","hocks","hockshop","hocus","hocused","hocuses","hocusing","hocussed","hocusses","hod","hodad","hodaddy","hodads","hodden","hoddens","hoddin","hoddins","hods","hoe","hoecake","hoecakes","hoed","hoedown","hoedowns","hoeing","hoelike","hoer","hoers","hoes","hog","hogan","hogans","hogback","hogbacks","hogfish","hogg","hogged","hogger","hoggers","hogget","hoggets","hogging","hoggish","hoggs","hoglike","hogmanay","hogmane","hogmanes","hogmenay","hognose","hognoses","hognut","hognuts","hogs","hogshead","hogtie","hogtied","hogties","hogtying","hogwash","hogweed","hogweeds","hoick","hoicked","hoicking","hoicks","hoiden","hoidened","hoidens","hoise","hoised","hoises","hoising","hoist","hoisted","hoister","hoisters","hoisting","hoists","hoke","hoked","hokes","hokey","hokier","hokiest","hokily","hokiness","hoking","hokku","hokum","hokums","hokypoky","holard","holards","hold","holdable","holdall","holdalls","holdback","holden","holder","holders","holdfast","holding","holdings","holdout","holdouts","holdover","holds","holdup","holdups","hole","holed","holeless","holes","holey","holibut","holibuts","holiday","holidays","holier","holies","holiest","holily","holiness","holing","holism","holisms","holist","holistic","holists","holk","holked","holking","holks","holla","hollaed","hollaing","holland","hollands","hollas","holler","hollered","hollers","hollies","hollo","holloa","holloaed","holloas","holloed","holloes","holloing","holloo","hollooed","holloos","hollos","hollow","hollowed","hollower","hollowly","hollows","holly","holm","holmic","holmium","holmiums","holms","hologamy","hologram","hologyny","holotype","holozoic","holp","holpen","hols","holstein","holster","holsters","holt","holts","holy","holyday","holydays","holytide","homage","homaged","homager","homagers","homages","homaging","hombre","hombres","homburg","homburgs","home","homebody","homebred","homed","homeland","homeless","homelier","homelike","homely","homemade","homer","homered","homering","homeroom","homers","homes","homesick","homesite","homespun","homestay","hometown","homeward","homework","homey","homicide","homier","homiest","homilies","homilist","homily","homines","hominess","homing","hominian","hominid","hominids","hominies","hominine","hominize","hominoid","hominy","hommock","hommocks","hommos","hommoses","homo","homogamy","homogeny","homogony","homolog","homologs","homology","homonym","homonyms","homonymy","homos","homosex","homy","hon","honan","honans","honcho","honchoed","honchos","honda","hondas","hondle","hondled","hondles","hondling","hone","honed","honer","honers","hones","honest","honester","honestly","honesty","honewort","honey","honeybee","honeybun","honeydew","honeyed","honeyful","honeying","honeys","hong","hongs","honied","honing","honk","honked","honker","honkers","honkey","honkeys","honkie","honkies","honking","honks","honky","honor","honorand","honorary","honored","honoree","honorees","honorer","honorers","honoring","honors","honour","honoured","honourer","honours","hons","hooch","hooches","hood","hooded","hoodie","hoodies","hooding","hoodless","hoodlike","hoodlum","hoodlums","hoodoo","hoodooed","hoodoos","hoods","hoodwink","hooey","hooeys","hoof","hoofbeat","hoofed","hoofer","hoofers","hoofing","hoofless","hooflike","hoofs","hook","hooka","hookah","hookahs","hookas","hooked","hooker","hookers","hookey","hookeys","hookier","hookies","hookiest","hooking","hookless","hooklet","hooklets","hooklike","hooknose","hooks","hookup","hookups","hookworm","hooky","hoolie","hooligan","hooly","hoop","hooped","hooper","hoopers","hooping","hoopla","hooplas","hoopless","hooplike","hoopoe","hoopoes","hoopoo","hoopoos","hoops","hoopster","hoorah","hoorahed","hoorahs","hooray","hoorayed","hoorays","hoosegow","hoosgow","hoosgows","hoot","hootch","hootches","hooted","hooter","hooters","hootier","hootiest","hooting","hoots","hooty","hooves","hop","hope","hoped","hopeful","hopefuls","hopeless","hoper","hopers","hopes","hophead","hopheads","hoping","hoplite","hoplites","hoplitic","hopped","hopper","hoppers","hopping","hopple","hoppled","hopples","hoppling","hops","hopsack","hopsacks","hoptoad","hoptoads","hora","horah","horahs","horal","horary","horas","horde","horded","hordein","hordeins","hordes","hording","horizon","horizons","hormonal","hormone","hormones","hormonic","horn","hornbeam","hornbill","hornbook","horned","hornet","hornets","hornfels","hornier","horniest","hornily","horning","hornist","hornists","hornito","hornitos","hornless","hornlike","hornpipe","hornpout","horns","horntail","hornworm","hornwort","horny","horologe","horology","horrent","horrible","horribly","horrid","horridly","horrific","horrify","horror","horrors","horse","horsecar","horsed","horsefly","horseman","horsemen","horsepox","horses","horsey","horsier","horsiest","horsily","horsing","horst","horste","horstes","horsts","horsy","hosanna","hosannah","hosannas","hose","hosed","hosel","hosels","hosen","hoses","hosier","hosiers","hosiery","hosing","hospice","hospices","hospital","hospitia","hospodar","host","hosta","hostage","hostages","hostas","hosted","hostel","hosteled","hosteler","hostelry","hostels","hostess","hostile","hostiles","hosting","hostler","hostlers","hostly","hosts","hot","hotbed","hotbeds","hotblood","hotbox","hotboxes","hotcake","hotcakes","hotch","hotched","hotches","hotching","hotchpot","hotdog","hotdogs","hotel","hoteldom","hotelier","hotelman","hotelmen","hotels","hotfoot","hotfoots","hothead","hotheads","hothouse","hotline","hotlines","hotly","hotness","hotpress","hotrod","hotrods","hots","hotshot","hotshots","hotspur","hotspurs","hotted","hotter","hottest","hotting","hottish","houdah","houdahs","hound","hounded","hounder","hounders","hounding","hounds","hour","houri","houris","hourly","hours","house","houseboy","housed","housefly","houseful","housel","houseled","housels","houseman","housemen","houser","housers","houses","housesat","housesit","housetop","housing","housings","hove","hovel","hoveled","hoveling","hovelled","hovels","hover","hovered","hoverer","hoverers","hovering","hovers","how","howbeit","howdah","howdahs","howdie","howdied","howdies","howdy","howdying","howe","howes","however","howf","howff","howffs","howfs","howitzer","howk","howked","howking","howks","howl","howled","howler","howlers","howlet","howlets","howling","howls","hows","hoy","hoya","hoyas","hoyden","hoydened","hoydens","hoyle","hoyles","hoys","huarache","huaracho","hub","hubbies","hubbly","hubbub","hubbubs","hubby","hubcap","hubcaps","hubris","hubrises","hubs","huck","huckle","huckles","hucks","huckster","huddle","huddled","huddler","huddlers","huddles","huddling","hue","hued","hueless","hues","huff","huffed","huffier","huffiest","huffily","huffing","huffish","huffs","huffy","hug","huge","hugely","hugeness","hugeous","huger","hugest","huggable","hugged","hugger","huggers","hugging","hugs","huh","huic","huipil","huipiles","huipils","huisache","hula","hulas","hulk","hulked","hulkier","hulkiest","hulking","hulks","hulky","hull","hulled","huller","hullers","hulling","hullo","hulloa","hulloaed","hulloas","hulloed","hulloes","hulloing","hullos","hulls","hum","human","humane","humanely","humaner","humanest","humanise","humanism","humanist","humanity","humanize","humanly","humanoid","humans","humate","humates","humble","humbled","humbler","humblers","humbles","humblest","humbling","humbly","humbug","humbugs","humdrum","humdrums","humeral","humerals","humeri","humerus","humic","humid","humidify","humidity","humidly","humidor","humidors","humified","humility","hummable","hummed","hummer","hummers","humming","hummock","hummocks","hummocky","hummus","hummuses","humor","humoral","humored","humorful","humoring","humorist","humorous","humors","humour","humoured","humours","hump","humpback","humped","humph","humphed","humphing","humphs","humpier","humpiest","humping","humpless","humps","humpy","hums","humus","humuses","hun","hunch","hunched","hunches","hunching","hundred","hundreds","hung","hunger","hungered","hungers","hungrier","hungrily","hungry","hunh","hunk","hunker","hunkered","hunkers","hunkies","hunks","hunky","hunnish","huns","hunt","huntable","hunted","huntedly","hunter","hunters","hunting","huntings","huntress","hunts","huntsman","huntsmen","hup","hurdies","hurdle","hurdled","hurdler","hurdlers","hurdles","hurdling","hurds","hurl","hurled","hurler","hurlers","hurley","hurleys","hurlies","hurling","hurlings","hurls","hurly","hurrah","hurrahed","hurrahs","hurray","hurrayed","hurrays","hurried","hurrier","hurriers","hurries","hurry","hurrying","hurst","hursts","hurt","hurter","hurters","hurtful","hurting","hurtle","hurtled","hurtles","hurtless","hurtling","hurts","husband","husbands","hush","hushaby","hushed","hushedly","hushes","hushful","hushing","husk","husked","husker","huskers","huskier","huskies","huskiest","huskily","husking","huskings","husklike","husks","husky","hussar","hussars","hussies","hussy","hustings","hustle","hustled","hustler","hustlers","hustles","hustling","huswife","huswifes","huswives","hut","hutch","hutched","hutches","hutching","hutlike","hutment","hutments","huts","hutted","hutting","hutzpa","hutzpah","hutzpahs","hutzpas","huzza","huzzaed","huzzah","huzzahed","huzzahs","huzzaing","huzzas","hwan","hyacinth","hyaena","hyaenas","hyaenic","hyalin","hyaline","hyalines","hyalins","hyalite","hyalites","hyalogen","hyaloid","hyaloids","hybrid","hybrids","hybris","hybrises","hydatid","hydatids","hydra","hydracid","hydrae","hydragog","hydrant","hydranth","hydrants","hydras","hydrase","hydrases","hydrate","hydrated","hydrates","hydrator","hydria","hydriae","hydric","hydrid","hydride","hydrides","hydrids","hydro","hydrogel","hydrogen","hydroid","hydroids","hydromel","hydronic","hydropic","hydrops","hydropsy","hydros","hydroski","hydrosol","hydrous","hydroxy","hydroxyl","hyena","hyenas","hyenic","hyenine","hyenoid","hyetal","hygeist","hygeists","hygieist","hygiene","hygienes","hygienic","hying","hyla","hylas","hylozoic","hymen","hymenal","hymeneal","hymenia","hymenial","hymenium","hymens","hymn","hymnal","hymnals","hymnary","hymnbook","hymned","hymning","hymnist","hymnists","hymnless","hymnlike","hymnody","hymns","hyoid","hyoidal","hyoidean","hyoids","hyoscine","hyp","hype","hyped","hyper","hypergol","hyperon","hyperons","hyperope","hypes","hypha","hyphae","hyphal","hyphemia","hyphen","hyphened","hyphens","hyping","hypnic","hypnoid","hypnoses","hypnosis","hypnotic","hypo","hypoacid","hypoderm","hypoed","hypogea","hypogeal","hypogean","hypogene","hypogeum","hypogyny","hypoing","hyponea","hyponeas","hyponoia","hypopnea","hypopyon","hypos","hypothec","hypoxia","hypoxias","hypoxic","hyps","hyraces","hyracoid","hyrax","hyraxes","hyson","hysons","hyssop","hyssops","hysteria","hysteric","hyte","iamb","iambi","iambic","iambics","iambs","iambus","iambuses","iatric","iatrical","ibex","ibexes","ibices","ibidem","ibis","ibises","ibogaine","ice","iceberg","icebergs","iceblink","iceboat","iceboats","icebound","icebox","iceboxes","icecap","icecaps","iced","icefall","icefalls","icehouse","icekhana","iceless","icelike","iceman","icemen","ices","ich","ichnite","ichnites","ichor","ichorous","ichors","ichs","ichthyic","icicle","icicled","icicles","icier","iciest","icily","iciness","icing","icings","ick","icker","ickers","ickier","ickiest","ickily","ickiness","icky","icon","icones","iconic","iconical","icons","icteric","icterics","icterus","ictic","ictus","ictuses","icy","idea","ideal","idealess","idealise","idealism","idealist","ideality","idealize","ideally","idealogy","ideals","ideas","ideate","ideated","ideates","ideating","ideation","ideative","idem","identic","identify","identity","ideogram","ideology","ides","idiocies","idiocy","idiolect","idiom","idioms","idiot","idiotic","idiotism","idiots","idle","idled","idleness","idler","idlers","idles","idlesse","idlesses","idlest","idling","idly","idocrase","idol","idolater","idolator","idolatry","idolise","idolised","idoliser","idolises","idolism","idolisms","idolize","idolized","idolizer","idolizes","idols","idoneity","idoneous","ids","idyl","idylist","idylists","idyll","idyllic","idyllist","idylls","idyls","iffier","iffiest","iffiness","iffy","ifs","igloo","igloos","iglu","iglus","ignatia","ignatias","igneous","ignified","ignifies","ignify","ignite","ignited","igniter","igniters","ignites","igniting","ignition","ignitor","ignitors","ignitron","ignoble","ignobly","ignominy","ignorant","ignore","ignored","ignorer","ignorers","ignores","ignoring","iguana","iguanas","iguanian","ihram","ihrams","ikebana","ikebanas","ikon","ikons","ilea","ileac","ileal","ileitis","ileum","ileus","ileuses","ilex","ilexes","ilia","iliac","iliad","iliads","ilial","ilium","ilk","ilka","ilks","ill","illation","illative","illegal","illegals","illicit","illinium","illiquid","illite","illites","illitic","illness","illogic","illogics","ills","illume","illumed","illumes","illumine","illuming","illusion","illusive","illusory","illuvia","illuvial","illuvium","illy","ilmenite","image","imaged","imager","imagers","imagery","images","imaginal","imagine","imagined","imaginer","imagines","imaging","imagism","imagisms","imagist","imagists","imago","imagoes","imagos","imam","imamate","imamates","imams","imaret","imarets","imaum","imaums","imbalm","imbalmed","imbalmer","imbalms","imbark","imbarked","imbarks","imbecile","imbed","imbedded","imbeds","imbibe","imbibed","imbiber","imbibers","imbibes","imbibing","imbitter","imblaze","imblazed","imblazes","imbodied","imbodies","imbody","imbolden","imbosom","imbosoms","imbower","imbowers","imbrown","imbrowns","imbrue","imbrued","imbrues","imbruing","imbrute","imbruted","imbrutes","imbue","imbued","imbues","imbuing","imid","imide","imides","imidic","imido","imids","imine","imines","imino","imitable","imitate","imitated","imitates","imitator","immane","immanent","immature","immense","immenser","immerge","immerged","immerges","immerse","immersed","immerses","immesh","immeshed","immeshes","immies","imminent","immingle","immix","immixed","immixes","immixing","immobile","immodest","immolate","immoral","immortal","immotile","immune","immunes","immunise","immunity","immunize","immure","immured","immures","immuring","immy","imp","impact","impacted","impacter","impactor","impacts","impaint","impaints","impair","impaired","impairer","impairs","impala","impalas","impale","impaled","impaler","impalers","impales","impaling","impanel","impanels","imparity","impark","imparked","imparks","impart","imparted","imparter","imparts","impasse","impasses","impaste","impasted","impastes","impasto","impastos","impavid","impawn","impawned","impawns","impeach","impearl","impearls","imped","impede","impeded","impeder","impeders","impedes","impeding","impel","impelled","impeller","impellor","impels","impend","impended","impends","imperia","imperial","imperil","imperils","imperium","impetigo","impetus","imphee","imphees","impi","impiety","imping","impinge","impinged","impinger","impinges","impings","impious","impis","impish","impishly","implant","implants","implead","impleads","impledge","implicit","implied","implies","implode","imploded","implodes","implore","implored","implorer","implores","imply","implying","impolicy","impolite","impone","imponed","impones","imponing","imporous","import","imported","importer","imports","impose","imposed","imposer","imposers","imposes","imposing","impost","imposted","imposter","impostor","imposts","impotent","impound","impounds","impower","impowers","impregn","impregns","impresa","impresas","imprese","impreses","impress","imprest","imprests","imprimis","imprint","imprints","imprison","improper","improv","improve","improved","improver","improves","improvs","imps","impudent","impugn","impugned","impugner","impugns","impulse","impulsed","impulses","impunity","impure","impurely","impurity","impute","imputed","imputer","imputers","imputes","imputing","inaction","inactive","inane","inanely","inaner","inanes","inanest","inanity","inapt","inaptly","inarable","inarch","inarched","inarches","inarm","inarmed","inarming","inarms","inbeing","inbeings","inboard","inboards","inborn","inbound","inbounds","inbred","inbreds","inbreed","inbreeds","inbuilt","inburst","inbursts","inby","inbye","incage","incaged","incages","incaging","incant","incanted","incants","incase","incased","incases","incasing","incense","incensed","incenses","incept","incepted","inceptor","incepts","incest","incests","inch","inched","inches","inching","inchmeal","inchoate","inchworm","incident","incipit","incipits","incisal","incise","incised","incises","incising","incision","incisive","incisor","incisors","incisory","incisure","incitant","incite","incited","inciter","inciters","incites","inciting","incivil","inclasp","inclasps","incline","inclined","incliner","inclines","inclip","inclips","inclose","inclosed","incloser","incloses","include","included","includes","incog","incogs","income","incomer","incomers","incomes","incoming","inconnu","inconnus","incony","incorpse","increase","increate","incross","incrust","incrusts","incubate","incubi","incubus","incudal","incudate","incudes","incult","incumber","incur","incurred","incurs","incurve","incurved","incurves","incus","incuse","incused","incuses","incusing","indaba","indabas","indagate","indamin","indamine","indamins","indebted","indecent","indeed","indene","indenes","indent","indented","indenter","indentor","indents","indevout","index","indexed","indexer","indexers","indexes","indexing","indican","indicans","indicant","indicate","indices","indicia","indicias","indicium","indict","indicted","indictee","indicter","indictor","indicts","indie","indies","indigen","indigene","indigens","indigent","indign","indignly","indigo","indigoes","indigoid","indigos","indirect","indite","indited","inditer","inditers","indites","inditing","indium","indiums","indocile","indol","indole","indolent","indoles","indols","indoor","indoors","indorse","indorsed","indorsee","indorser","indorses","indorsor","indow","indowed","indowing","indows","indoxyl","indoxyls","indraft","indrafts","indrawn","indri","indris","induce","induced","inducer","inducers","induces","inducing","induct","inducted","inductee","inductor","inducts","indue","indued","indues","induing","indulge","indulged","indulger","indulges","indulin","induline","indulins","indult","indults","indurate","indusia","indusial","indusium","industry","indwell","indwells","indwelt","inearth","inearths","inedible","inedita","inedited","inept","ineptly","inequity","inerrant","inert","inertia","inertiae","inertial","inertias","inertly","inerts","inexact","inexpert","infamies","infamous","infamy","infancy","infant","infanta","infantas","infante","infantes","infantry","infants","infarct","infarcts","infare","infares","infauna","infaunae","infaunal","infaunas","infect","infected","infecter","infector","infects","infecund","infeoff","infeoffs","infer","inferior","infernal","inferno","infernos","inferred","inferrer","infers","infest","infested","infester","infests","infidel","infidels","infield","infields","infight","infights","infinite","infinity","infirm","infirmed","infirmly","infirms","infix","infixed","infixes","infixing","infixion","inflame","inflamed","inflamer","inflames","inflate","inflated","inflater","inflates","inflator","inflect","inflects","inflexed","inflict","inflicts","inflight","inflow","inflows","influent","influx","influxes","info","infold","infolded","infolder","infolds","inform","informal","informed","informer","informs","infos","infought","infra","infract","infracts","infrared","infringe","infrugal","infuse","infused","infuser","infusers","infuses","infusing","infusion","infusive","ingate","ingates","ingather","ingenue","ingenues","ingest","ingesta","ingested","ingests","ingle","ingles","ingoing","ingot","ingoted","ingoting","ingots","ingraft","ingrafts","ingrain","ingrains","ingrate","ingrates","ingress","ingroup","ingroups","ingrown","ingrowth","inguinal","ingulf","ingulfed","ingulfs","inhabit","inhabits","inhalant","inhale","inhaled","inhaler","inhalers","inhales","inhaling","inhaul","inhauler","inhauls","inhere","inhered","inherent","inheres","inhering","inherit","inherits","inhesion","inhibit","inhibits","inhuman","inhumane","inhume","inhumed","inhumer","inhumers","inhumes","inhuming","inia","inimical","inion","iniquity","initial","initials","initiate","inject","injected","injector","injects","injure","injured","injurer","injurers","injures","injuries","injuring","injury","ink","inkberry","inkblot","inkblots","inked","inker","inkers","inkhorn","inkhorns","inkier","inkiest","inkiness","inking","inkjet","inkle","inkles","inkless","inklike","inkling","inklings","inkpot","inkpots","inks","inkstand","inkwell","inkwells","inkwood","inkwoods","inky","inlace","inlaced","inlaces","inlacing","inlaid","inland","inlander","inlands","inlay","inlayer","inlayers","inlaying","inlays","inlet","inlets","inlier","inliers","inly","inmate","inmates","inmesh","inmeshed","inmeshes","inmost","inn","innards","innate","innately","inned","inner","innerly","inners","innerve","innerved","innerves","inning","innings","innless","innocent","innovate","inns","innuendo","inocula","inoculum","inosite","inosites","inositol","inphase","inpour","inpoured","inpours","input","inputs","inputted","inquest","inquests","inquiet","inquiets","inquire","inquired","inquirer","inquires","inquiry","inro","inroad","inroads","inrush","inrushes","ins","insane","insanely","insaner","insanest","insanity","inscape","inscapes","inscribe","inscroll","insculp","insculps","inseam","inseams","insect","insectan","insects","insecure","insert","inserted","inserter","inserts","inset","insets","insetted","insetter","insheath","inshore","inshrine","inside","insider","insiders","insides","insight","insights","insigne","insignia","insipid","insist","insisted","insister","insists","insnare","insnared","insnarer","insnares","insofar","insolate","insole","insolent","insoles","insomnia","insomuch","insoul","insouled","insouls","inspan","inspans","inspect","inspects","insphere","inspire","inspired","inspirer","inspires","inspirit","instable","instal","install","installs","instals","instance","instancy","instant","instants","instar","instars","instate","instated","instates","instead","instep","insteps","instil","instill","instills","instils","instinct","instroke","instruct","insulant","insular","insulars","insulate","insulin","insulins","insult","insulted","insulter","insults","insurant","insure","insured","insureds","insurer","insurers","insures","insuring","inswathe","inswept","intact","intagli","intaglio","intake","intakes","intarsia","integer","integers","integral","intend","intended","intender","intends","intense","intenser","intent","intently","intents","inter","interact","interage","interbed","intercom","intercut","interest","interim","interims","interior","interlap","interlay","intermit","intermix","intern","internal","interne","interned","internee","internes","interns","interred","interrex","interrow","inters","intersex","intertie","interval","interwar","inthral","inthrall","inthrals","inthrone","inti","intima","intimacy","intimae","intimal","intimas","intimate","intime","intimist","intine","intines","intis","intitle","intitled","intitles","intitule","into","intomb","intombed","intombs","intonate","intone","intoned","intoner","intoners","intones","intoning","intort","intorted","intorts","intown","intraday","intrados","intrant","intrants","intreat","intreats","intrench","intrepid","intrigue","intro","introfy","introit","introits","intromit","intron","introns","introrse","intros","intrude","intruded","intruder","intrudes","intrust","intrusts","intubate","intuit","intuited","intuits","inturn","inturned","inturns","intwine","intwined","intwines","intwist","intwists","inulase","inulases","inulin","inulins","inundant","inundate","inurbane","inure","inured","inures","inuring","inurn","inurned","inurning","inurns","inutile","invade","invaded","invader","invaders","invades","invading","invalid","invalids","invasion","invasive","invected","inveigh","inveighs","inveigle","invent","invented","inventer","inventor","invents","inverity","inverse","inverses","invert","inverted","inverter","invertor","inverts","invest","invested","investor","invests","inviable","inviably","invirile","inviscid","invital","invite","invited","invitee","invitees","inviter","inviters","invites","inviting","invocate","invoice","invoiced","invoices","invoke","invoked","invoker","invokers","invokes","invoking","involute","involve","involved","involver","involves","inwall","inwalled","inwalls","inward","inwardly","inwards","inweave","inweaved","inweaves","inwind","inwinds","inwound","inwove","inwoven","inwrap","inwraps","iodate","iodated","iodates","iodating","iodation","iodic","iodid","iodide","iodides","iodids","iodin","iodinate","iodine","iodines","iodins","iodism","iodisms","iodize","iodized","iodizer","iodizers","iodizes","iodizing","iodoform","iodophor","iodopsin","iodous","iolite","iolites","ion","ionic","ionicity","ionics","ionise","ionised","ionises","ionising","ionium","ioniums","ionize","ionized","ionizer","ionizers","ionizes","ionizing","ionogen","ionogens","ionomer","ionomers","ionone","ionones","ions","iota","iotacism","iotas","ipecac","ipecacs","ipomoea","ipomoeas","iracund","irade","irades","irate","irately","irater","iratest","ire","ired","ireful","irefully","ireless","irenic","irenical","irenics","ires","irid","irides","iridic","iridium","iridiums","irids","iring","iris","irised","irises","irising","iritic","iritis","iritises","irk","irked","irking","irks","irksome","iron","ironbark","ironclad","irone","ironed","ironer","ironers","irones","ironic","ironical","ironies","ironing","ironings","ironist","ironists","ironize","ironized","ironizes","ironlike","ironness","irons","ironside","ironware","ironweed","ironwood","ironwork","irony","irreal","irrigate","irritant","irritate","irrupt","irrupted","irrupts","isagoge","isagoges","isagogic","isarithm","isatin","isatine","isatines","isatinic","isatins","isba","isbas","ischemia","ischemic","ischia","ischial","ischium","island","islanded","islander","islands","isle","isled","isleless","isles","islet","islets","isling","ism","isms","isobar","isobare","isobares","isobaric","isobars","isobath","isobaths","isocheim","isochime","isochor","isochore","isochors","isochron","isocline","isocracy","isodose","isogamy","isogenic","isogeny","isogloss","isogon","isogonal","isogone","isogones","isogonic","isogons","isogony","isograft","isogram","isograms","isograph","isogriv","isogrivs","isohel","isohels","isohyet","isohyets","isolable","isolate","isolated","isolates","isolator","isolead","isoleads","isoline","isolines","isolog","isologs","isologue","isomer","isomeric","isomers","isometry","isomorph","isonomic","isonomy","isopach","isopachs","isophote","isopleth","isopod","isopodan","isopods","isoprene","isospin","isospins","isospory","isostasy","isotach","isotachs","isothere","isotherm","isotone","isotones","isotonic","isotope","isotopes","isotopic","isotopy","isotropy","isotype","isotypes","isotypic","isozyme","isozymes","isozymic","issei","isseis","issuable","issuably","issuance","issuant","issue","issued","issuer","issuers","issues","issuing","isthmi","isthmian","isthmic","isthmoid","isthmus","istle","istles","italic","italics","itch","itched","itches","itchier","itchiest","itchily","itching","itchings","itchy","item","itemed","iteming","itemize","itemized","itemizer","itemizes","items","iterance","iterant","iterate","iterated","iterates","iterum","ither","its","itself","ivied","ivies","ivories","ivory","ivy","ivylike","iwis","ixia","ixias","ixodid","ixodids","ixora","ixoras","ixtle","ixtles","izar","izars","izzard","izzards","jab","jabbed","jabber","jabbered","jabberer","jabbers","jabbing","jabiru","jabirus","jabot","jabots","jabs","jacal","jacales","jacals","jacamar","jacamars","jacana","jacanas","jacinth","jacinthe","jacinths","jack","jackal","jackals","jackaroo","jackass","jackboot","jackdaw","jackdaws","jacked","jacker","jackeroo","jackers","jacket","jacketed","jackets","jackfish","jackies","jacking","jackleg","jacklegs","jackpot","jackpots","jackroll","jacks","jackstay","jacky","jacobin","jacobins","jacobus","jaconet","jaconets","jacquard","jaculate","jade","jaded","jadedly","jadeite","jadeites","jades","jading","jadish","jadishly","jaditic","jaeger","jaegers","jag","jager","jagers","jagg","jaggary","jagged","jaggeder","jaggedly","jagger","jaggers","jaggery","jagghery","jaggier","jaggiest","jagging","jaggs","jaggy","jagless","jagra","jagras","jags","jaguar","jaguars","jail","jailbait","jailbird","jailed","jailer","jailers","jailing","jailor","jailors","jails","jake","jakes","jalap","jalapeno","jalapic","jalapin","jalapins","jalaps","jalop","jalopies","jaloppy","jalops","jalopy","jalousie","jam","jamb","jambe","jambeau","jambeaux","jambed","jambes","jambing","jamboree","jambs","jammed","jammer","jammers","jamming","jams","jane","janes","jangle","jangled","jangler","janglers","jangles","jangling","janiform","janisary","janitor","janitors","janizary","janty","japan","japanize","japanned","japanner","japans","jape","japed","japer","japeries","japers","japery","japes","japing","japingly","japonica","jar","jarful","jarfuls","jargon","jargoned","jargonel","jargons","jargoon","jargoons","jarina","jarinas","jarl","jarldom","jarldoms","jarls","jarosite","jarovize","jarrah","jarrahs","jarred","jarring","jars","jarsful","jarvey","jarveys","jasmin","jasmine","jasmines","jasmins","jasper","jaspers","jaspery","jassid","jassids","jato","jatos","jauk","jauked","jauking","jauks","jaunce","jaunced","jaunces","jauncing","jaundice","jaunt","jaunted","jauntier","jauntily","jaunting","jaunts","jaunty","jaup","jauped","jauping","jaups","java","javas","javelin","javelina","javelins","jaw","jawan","jawans","jawbone","jawboned","jawboner","jawbones","jawed","jawing","jawlike","jawline","jawlines","jaws","jay","jaybird","jaybirds","jaygee","jaygees","jays","jayvee","jayvees","jaywalk","jaywalks","jazz","jazzed","jazzer","jazzers","jazzes","jazzier","jazziest","jazzily","jazzing","jazzlike","jazzman","jazzmen","jazzy","jealous","jealousy","jean","jeans","jebel","jebels","jee","jeed","jeeing","jeep","jeeped","jeepers","jeeping","jeepney","jeepneys","jeeps","jeer","jeered","jeerer","jeerers","jeering","jeers","jees","jeez","jefe","jefes","jehad","jehads","jehu","jehus","jejuna","jejunal","jejune","jejunely","jejunity","jejunum","jell","jellaba","jellabas","jelled","jellied","jellies","jellify","jelling","jells","jelly","jellying","jelutong","jemadar","jemadars","jemidar","jemidars","jemmied","jemmies","jemmy","jemmying","jennet","jennets","jennies","jenny","jeon","jeopard","jeopards","jeopardy","jerboa","jerboas","jereed","jereeds","jeremiad","jerid","jerids","jerk","jerked","jerker","jerkers","jerkier","jerkies","jerkiest","jerkily","jerkin","jerking","jerkins","jerks","jerky","jeroboam","jerreed","jerreeds","jerrican","jerrid","jerrids","jerries","jerry","jerrycan","jersey","jerseyed","jerseys","jess","jessant","jesse","jessed","jesses","jessing","jest","jested","jester","jesters","jestful","jesting","jestings","jests","jesuit","jesuitic","jesuitry","jesuits","jet","jetbead","jetbeads","jete","jetes","jetliner","jeton","jetons","jetport","jetports","jets","jetsam","jetsams","jetsom","jetsoms","jetted","jettied","jettier","jetties","jettiest","jetting","jettison","jetton","jettons","jetty","jettying","jeu","jeux","jew","jewed","jewel","jeweled","jeweler","jewelers","jeweling","jewelled","jeweller","jewelry","jewels","jewfish","jewing","jews","jezail","jezails","jezebel","jezebels","jiao","jib","jibb","jibbed","jibber","jibbers","jibbing","jibboom","jibbooms","jibbs","jibe","jibed","jiber","jibers","jibes","jibing","jibingly","jibs","jicama","jicamas","jiff","jiffies","jiffs","jiffy","jig","jigaboo","jigaboos","jigged","jigger","jiggered","jiggers","jigging","jiggle","jiggled","jiggles","jigglier","jiggling","jiggly","jigs","jigsaw","jigsawed","jigsawn","jigsaws","jihad","jihads","jill","jillion","jillions","jills","jilt","jilted","jilter","jilters","jilting","jilts","jiminy","jimjams","jimmied","jimmies","jimminy","jimmy","jimmying","jimp","jimper","jimpest","jimply","jimpy","jin","jingal","jingall","jingalls","jingals","jingko","jingkoes","jingle","jingled","jingler","jinglers","jingles","jinglier","jingling","jingly","jingo","jingoes","jingoish","jingoism","jingoist","jink","jinked","jinker","jinkers","jinking","jinks","jinn","jinnee","jinni","jinns","jins","jinx","jinxed","jinxes","jinxing","jipijapa","jism","jisms","jitney","jitneys","jitter","jittered","jitters","jittery","jiujitsu","jiujutsu","jive","jiveass","jived","jiver","jivers","jives","jiving","jnana","jnanas","joannes","job","jobbed","jobber","jobbers","jobbery","jobbing","jobless","jobname","jobnames","jobs","jock","jockette","jockey","jockeyed","jockeys","jocko","jockos","jocks","jocose","jocosely","jocosity","jocular","jocund","jocundly","jodhpur","jodhpurs","joe","joes","joey","joeys","jog","jogged","jogger","joggers","jogging","joggings","joggle","joggled","joggler","jogglers","joggles","joggling","jogs","johannes","john","johnboat","johnnies","johnny","johns","join","joinable","joinder","joinders","joined","joiner","joiners","joinery","joining","joinings","joins","joint","jointed","jointer","jointers","jointing","jointly","joints","jointure","joist","joisted","joisting","joists","jojoba","jojobas","joke","joked","joker","jokers","jokes","jokester","jokey","jokier","jokiest","joking","jokingly","joky","jole","joles","jollied","jollier","jollies","jolliest","jollify","jollily","jollity","jolly","jollying","jolt","jolted","jolter","jolters","joltier","joltiest","joltily","jolting","jolts","jolty","jones","joneses","jongleur","jonquil","jonquils","joram","jorams","jordan","jordans","jorum","jorums","joseph","josephs","josh","joshed","josher","joshers","joshes","joshing","joss","josses","jostle","jostled","jostler","jostlers","jostles","jostling","jot","jota","jotas","jots","jotted","jotter","jotters","jotting","jottings","jotty","joual","jouals","jouk","jouked","jouking","jouks","joule","joules","jounce","jounced","jounces","jouncier","jouncing","jouncy","journal","journals","journey","journeys","joust","jousted","jouster","jousters","jousting","jousts","jovial","jovially","jovialty","jow","jowar","jowars","jowed","jowing","jowl","jowled","jowlier","jowliest","jowls","jowly","jows","joy","joyance","joyances","joyed","joyful","joyfully","joying","joyless","joyous","joyously","joypop","joypops","joyride","joyrider","joyrides","joyrode","joys","joystick","juba","jubas","jubbah","jubbahs","jube","jubes","jubhah","jubhahs","jubilant","jubilate","jubile","jubilee","jubilees","jubiles","judas","judases","judder","juddered","judders","judge","judged","judger","judgers","judges","judging","judgment","judicial","judo","judoist","judoists","judoka","judokas","judos","jug","juga","jugal","jugate","jugful","jugfuls","jugged","jugging","juggle","juggled","juggler","jugglers","jugglery","juggles","juggling","jughead","jugheads","jugs","jugsful","jugula","jugular","jugulars","jugulate","jugulum","jugum","jugums","juice","juiced","juicer","juicers","juices","juicier","juiciest","juicily","juicing","juicy","jujitsu","jujitsus","juju","jujube","jujubes","jujuism","jujuisms","jujuist","jujuists","jujus","jujutsu","jujutsus","juke","jukebox","juked","jukes","juking","julep","juleps","julienne","jumbal","jumbals","jumble","jumbled","jumbler","jumblers","jumbles","jumbling","jumbo","jumbos","jumbuck","jumbucks","jump","jumped","jumper","jumpers","jumpier","jumpiest","jumpily","jumping","jumpoff","jumpoffs","jumps","jumpsuit","jumpy","jun","junco","juncoes","juncos","junction","juncture","jungle","jungles","junglier","jungly","junior","juniors","juniper","junipers","junk","junked","junker","junkers","junket","junketed","junketer","junkets","junkie","junkier","junkies","junkiest","junking","junkman","junkmen","junks","junky","junkyard","junta","juntas","junto","juntos","jupe","jupes","jupon","jupons","jura","jural","jurally","jurant","jurants","jurat","juratory","jurats","jurel","jurels","juridic","juries","jurist","juristic","jurists","juror","jurors","jury","juryman","jurymen","jus","jussive","jussives","just","justed","juster","justers","justest","justice","justices","justify","justing","justle","justled","justles","justling","justly","justness","justs","jut","jute","jutes","juts","jutted","juttied","jutties","jutting","jutty","juttying","juvenal","juvenals","juvenile","kaas","kab","kabab","kababs","kabaka","kabakas","kabala","kabalas","kabar","kabars","kabaya","kabayas","kabbala","kabbalah","kabbalas","kabeljou","kabiki","kabikis","kabob","kabobs","kabs","kabuki","kabukis","kachina","kachinas","kaddish","kadi","kadis","kae","kaes","kaf","kaffir","kaffirs","kaffiyeh","kafir","kafirs","kafs","kaftan","kaftans","kagu","kagus","kahuna","kahunas","kaiak","kaiaks","kaif","kaifs","kail","kails","kailyard","kain","kainit","kainite","kainites","kainits","kains","kaiser","kaiserin","kaisers","kajeput","kajeputs","kaka","kakapo","kakapos","kakas","kakemono","kaki","kakis","kalam","kalams","kale","kalends","kales","kalewife","kaleyard","kalian","kalians","kalif","kalifate","kalifs","kalimba","kalimbas","kaliph","kaliphs","kalium","kaliums","kallidin","kalmia","kalmias","kalong","kalongs","kalpa","kalpak","kalpaks","kalpas","kalyptra","kamaaina","kamacite","kamala","kamalas","kame","kames","kami","kamik","kamikaze","kamiks","kampong","kampongs","kamseen","kamseens","kamsin","kamsins","kana","kanas","kane","kanes","kangaroo","kanji","kanjis","kantar","kantars","kantele","kanteles","kaoliang","kaolin","kaoline","kaolines","kaolinic","kaolins","kaon","kaons","kapa","kapas","kaph","kaphs","kapok","kapoks","kappa","kappas","kaput","kaputt","karakul","karakuls","karat","karate","karates","karats","karma","karmas","karmic","karn","karns","karoo","karoos","kaross","karosses","karroo","karroos","karst","karstic","karsts","kart","karting","kartings","karts","karyotin","kas","kasbah","kasbahs","kasha","kashas","kasher","kashered","kashers","kashmir","kashmirs","kashrut","kashruth","kashruts","kat","katakana","katchina","katcina","katcinas","kathodal","kathode","kathodes","kathodic","kation","kations","kats","katydid","katydids","kauri","kauries","kauris","kaury","kava","kavakava","kavas","kavass","kavasses","kay","kayak","kayaked","kayaker","kayakers","kayaking","kayaks","kayles","kayo","kayoed","kayoes","kayoing","kayos","kays","kazachki","kazachok","kazatski","kazatsky","kazoo","kazoos","kbar","kbars","kea","keas","kebab","kebabs","kebar","kebars","kebbie","kebbies","kebbock","kebbocks","kebbuck","kebbucks","keblah","keblahs","kebob","kebobs","keck","kecked","kecking","keckle","keckled","keckles","keckling","kecks","keddah","keddahs","kedge","kedged","kedgeree","kedges","kedging","keef","keefs","keek","keeked","keeking","keeks","keel","keelage","keelages","keelboat","keeled","keelhale","keelhaul","keeling","keelless","keels","keelson","keelsons","keen","keened","keener","keeners","keenest","keening","keenly","keenness","keens","keep","keepable","keeper","keepers","keeping","keepings","keeps","keepsake","keeshond","keester","keesters","keet","keets","keeve","keeves","kef","kefir","kefirs","kefs","keg","kegeler","kegelers","kegler","keglers","kegling","keglings","kegs","keir","keirs","keister","keisters","keitloa","keitloas","kelep","keleps","kellies","kelly","keloid","keloidal","keloids","kelp","kelped","kelpie","kelpies","kelping","kelps","kelpy","kelson","kelsons","kelter","kelters","kelvin","kelvins","kemp","kemps","kempt","ken","kenaf","kenafs","kench","kenches","kendo","kendos","kenned","kennel","kenneled","kennels","kenning","kennings","keno","kenos","kenosis","kenotic","kenotron","kens","kent","kep","kephalin","kepi","kepis","kepped","keppen","kepping","keps","kept","keramic","keramics","keratin","keratins","keratoid","keratoma","keratose","kerb","kerbed","kerbing","kerbs","kerchief","kerchoo","kerf","kerfed","kerfing","kerfs","kermes","kermess","kermis","kermises","kern","kerne","kerned","kernel","kerneled","kernels","kernes","kerning","kernite","kernites","kerns","kerogen","kerogens","kerosene","kerosine","kerplunk","kerria","kerrias","kerries","kerry","kersey","kerseys","kerygma","kestrel","kestrels","ketch","ketches","ketchup","ketchups","ketene","ketenes","keto","ketol","ketols","ketone","ketones","ketonic","ketose","ketoses","ketosis","ketotic","kettle","kettles","kev","kevel","kevels","kevil","kevils","kex","kexes","key","keyboard","keycard","keycards","keyed","keyhole","keyholes","keying","keyless","keynote","keynoted","keynoter","keynotes","keypad","keypads","keypunch","keys","keyset","keysets","keyster","keysters","keystone","keyway","keyways","keyword","keywords","khaddar","khaddars","khadi","khadis","khaf","khafs","khaki","khakis","khalif","khalifa","khalifas","khalifs","khamseen","khamsin","khamsins","khan","khanate","khanates","khans","khaph","khaphs","khat","khats","khazen","khazenim","khazens","kheda","khedah","khedahs","khedas","khedival","khedive","khedives","khet","kheth","kheths","khets","khi","khirkah","khirkahs","khis","khoum","khoums","kiang","kiangs","kiaugh","kiaughs","kibbe","kibbeh","kibbehs","kibbes","kibble","kibbled","kibbles","kibbling","kibbutz","kibe","kibei","kibeis","kibes","kibitz","kibitzed","kibitzer","kibitzes","kibla","kiblah","kiblahs","kiblas","kibosh","kiboshed","kiboshes","kick","kickable","kickback","kickball","kicked","kicker","kickers","kickier","kickiest","kicking","kickoff","kickoffs","kicks","kickshaw","kickup","kickups","kicky","kid","kidded","kidder","kidders","kiddie","kiddies","kidding","kiddish","kiddo","kiddoes","kiddos","kiddush","kiddy","kidlike","kidnap","kidnaped","kidnapee","kidnaper","kidnaps","kidney","kidneys","kids","kidskin","kidskins","kidvid","kidvids","kief","kiefs","kielbasa","kielbasi","kielbasy","kier","kiers","kiester","kiesters","kif","kifs","kike","kikes","kilim","kilims","kill","killdee","killdeer","killdees","killed","killer","killers","killick","killicks","killie","killies","killing","killings","killjoy","killjoys","killock","killocks","kills","kiln","kilned","kilning","kilns","kilo","kilobar","kilobars","kilobaud","kilobit","kilobits","kilobyte","kilogram","kilomole","kilorad","kilorads","kilos","kiloton","kilotons","kilovolt","kilowatt","kilt","kilted","kilter","kilters","kiltie","kilties","kilting","kiltings","kilts","kilty","kimchee","kimchees","kimchi","kimchis","kimono","kimonoed","kimonos","kin","kina","kinas","kinase","kinases","kind","kinder","kindest","kindle","kindled","kindler","kindlers","kindles","kindless","kindlier","kindling","kindly","kindness","kindred","kindreds","kinds","kine","kinema","kinemas","kines","kineses","kinesic","kinesics","kinesis","kinetic","kinetics","kinetin","kinetins","kinfolk","kinfolks","king","kingbird","kingbolt","kingcup","kingcups","kingdom","kingdoms","kinged","kingfish","kinghood","kinging","kingless","kinglet","kinglets","kinglier","kinglike","kingly","kingpin","kingpins","kingpost","kings","kingship","kingside","kingwood","kinin","kinins","kink","kinkajou","kinked","kinkier","kinkiest","kinkily","kinking","kinks","kinky","kino","kinos","kins","kinsfolk","kinship","kinships","kinsman","kinsmen","kiosk","kiosks","kip","kipped","kippen","kipper","kippered","kipperer","kippers","kipping","kips","kipskin","kipskins","kir","kirigami","kirk","kirkman","kirkmen","kirks","kirmess","kirn","kirned","kirning","kirns","kirs","kirsch","kirsches","kirtle","kirtled","kirtles","kishka","kishkas","kishke","kishkes","kismat","kismats","kismet","kismetic","kismets","kiss","kissable","kissably","kissed","kisser","kissers","kisses","kissing","kissy","kist","kistful","kistfuls","kists","kit","kitchen","kitchens","kite","kited","kitelike","kiter","kiters","kites","kith","kithara","kitharas","kithe","kithed","kithes","kithing","kiths","kiting","kitling","kitlings","kits","kitsch","kitsches","kitschy","kitted","kittel","kitten","kittened","kittens","kitties","kitting","kittle","kittled","kittler","kittles","kittlest","kittling","kitty","kiva","kivas","kiwi","kiwis","klatch","klatches","klatsch","klavern","klaverns","klaxon","klaxons","kleagle","kleagles","klepht","klephtic","klephts","klezmer","klister","klisters","klong","klongs","kloof","kloofs","kludge","kludges","kluge","kluges","klutz","klutzes","klutzier","klutzy","klystron","knack","knacked","knacker","knackers","knackery","knacking","knacks","knap","knapped","knapper","knappers","knapping","knaps","knapsack","knapweed","knar","knarred","knarry","knars","knaur","knaurs","knave","knavery","knaves","knavish","knawel","knawels","knead","kneaded","kneader","kneaders","kneading","kneads","knee","kneecap","kneecaps","kneed","kneehole","kneeing","kneel","kneeled","kneeler","kneelers","kneeling","kneels","kneepad","kneepads","kneepan","kneepans","knees","knell","knelled","knelling","knells","knelt","knesset","knessets","knew","knickers","knife","knifed","knifer","knifers","knifes","knifing","knight","knighted","knightly","knights","knish","knishes","knit","knits","knitted","knitter","knitters","knitting","knitwear","knives","knob","knobbed","knobbier","knobbly","knobby","knoblike","knobs","knock","knocked","knocker","knockers","knocking","knockoff","knockout","knocks","knoll","knolled","knoller","knollers","knolling","knolls","knolly","knop","knopped","knops","knosp","knosps","knot","knothole","knotless","knotlike","knots","knotted","knotter","knotters","knottier","knottily","knotting","knotty","knotweed","knout","knouted","knouting","knouts","know","knowable","knower","knowers","knowing","knowings","known","knowns","knows","knubbier","knubby","knuckle","knuckled","knuckler","knuckles","knuckly","knur","knurl","knurled","knurlier","knurling","knurls","knurly","knurs","koa","koala","koalas","koan","koans","koas","kob","kobo","kobold","kobolds","kobs","koel","koels","kohl","kohlrabi","kohls","koine","koines","kokanee","kokanees","kola","kolacky","kolas","kolbasi","kolbasis","kolbassi","kolhoz","kolhozes","kolhozy","kolinski","kolinsky","kolkhos","kolkhosy","kolkhoz","kolkhozy","kolkoz","kolkozes","kolkozy","kolo","kolos","komatik","komatiks","komondor","konk","konked","konking","konks","koodoo","koodoos","kook","kookie","kookier","kookiest","kooks","kooky","kop","kopeck","kopecks","kopek","kopeks","koph","kophs","kopje","kopjes","koppa","koppas","koppie","koppies","kops","kor","korat","korats","kors","korun","koruna","korunas","koruny","kos","kosher","koshered","koshers","koss","koto","kotos","kotow","kotowed","kotower","kotowers","kotowing","kotows","koumis","koumises","koumiss","koumys","koumyses","koumyss","kousso","koussos","kowtow","kowtowed","kowtower","kowtows","kraal","kraaled","kraaling","kraals","kraft","krafts","krait","kraits","kraken","krakens","krater","kraters","kraut","krauts","kreep","kreeps","kremlin","kremlins","kreplach","kreutzer","kreuzer","kreuzers","krill","krills","krimmer","krimmers","kris","krises","krona","krone","kronen","kroner","kronor","kronur","kroon","krooni","kroons","krubi","krubis","krubut","krubuts","kruller","krullers","krumhorn","kryolite","kryolith","krypton","kryptons","kuchen","kudo","kudos","kudu","kudus","kudzu","kudzus","kue","kues","kugel","kugels","kukri","kukris","kulak","kulaki","kulaks","kultur","kulturs","kumiss","kumisses","kummel","kummels","kumquat","kumquats","kumys","kumyses","kunzite","kunzites","kurbash","kurgan","kurgans","kurta","kurtas","kurtosis","kuru","kurus","kusso","kussos","kuvasz","kuvaszok","kvas","kvases","kvass","kvasses","kvetch","kvetched","kvetches","kwacha","kwanza","kwanzas","kyack","kyacks","kyak","kyaks","kyanise","kyanised","kyanises","kyanite","kyanites","kyanize","kyanized","kyanizes","kyar","kyars","kyat","kyats","kylikes","kylix","kymogram","kyphoses","kyphosis","kyphotic","kyrie","kyries","kyte","kytes","kythe","kythed","kythes","kything","laager","laagered","laagers","lab","labara","labarum","labarums","labdanum","label","labeled","labeler","labelers","labeling","labella","labelled","labeller","labellum","labels","labia","labial","labially","labials","labiate","labiated","labiates","labile","lability","labium","labor","labored","laborer","laborers","laboring","laborite","labors","labour","laboured","labourer","labours","labra","labrador","labret","labrets","labroid","labroids","labrum","labrums","labrusca","labs","laburnum","lac","lace","laced","laceless","lacelike","lacer","lacerate","lacers","lacertid","laces","lacewing","lacewood","lacework","lacey","laches","lacier","laciest","lacily","laciness","lacing","lacings","lack","lackaday","lacked","lacker","lackered","lackers","lackey","lackeyed","lackeys","lacking","lacks","laconic","laconism","lacquer","lacquers","lacquey","lacqueys","lacrimal","lacrosse","lacs","lactam","lactams","lactary","lactase","lactases","lactate","lactated","lactates","lacteal","lacteals","lactean","lacteous","lactic","lactone","lactones","lactonic","lactose","lactoses","lacuna","lacunae","lacunal","lacunar","lacunars","lacunary","lacunas","lacunate","lacune","lacunes","lacunose","lacy","lad","ladanum","ladanums","ladder","laddered","ladders","laddie","laddies","lade","laded","laden","ladened","ladening","ladens","lader","laders","lades","ladies","lading","ladings","ladino","ladinos","ladle","ladled","ladleful","ladler","ladlers","ladles","ladling","ladron","ladrone","ladrones","ladrons","lads","lady","ladybird","ladybug","ladybugs","ladyfish","ladyhood","ladyish","ladykin","ladykins","ladylike","ladylove","ladypalm","ladyship","laetrile","laevo","lag","lagan","lagans","lagend","lagends","lager","lagered","lagering","lagers","laggard","laggards","lagged","lagger","laggers","lagging","laggings","lagnappe","lagoon","lagoonal","lagoons","lags","laguna","lagunas","lagune","lagunes","lahar","lahars","laic","laical","laically","laich","laichs","laicise","laicised","laicises","laicism","laicisms","laicize","laicized","laicizes","laics","laid","laigh","laighs","lain","lair","laird","lairdly","lairds","laired","lairing","lairs","laitance","laith","laithly","laities","laity","lake","laked","lakeport","laker","lakers","lakes","lakeside","lakh","lakhs","lakier","lakiest","laking","lakings","laky","lall","lallan","lalland","lallands","lallans","lalled","lalling","lalls","lallygag","lam","lama","lamas","lamasery","lamb","lambast","lambaste","lambasts","lambda","lambdas","lambdoid","lambed","lambency","lambent","lamber","lambers","lambert","lamberts","lambie","lambies","lambing","lambkill","lambkin","lambkins","lamblike","lambs","lambskin","lame","lamed","lamedh","lamedhs","lameds","lamella","lamellae","lamellar","lamellas","lamely","lameness","lament","lamented","lamenter","laments","lamer","lames","lamest","lamia","lamiae","lamias","lamina","laminae","laminal","laminar","laminary","laminas","laminate","laming","laminose","laminous","lamister","lammed","lamming","lamp","lampad","lampads","lampas","lampases","lamped","lampers","lamping","lampion","lampions","lampoon","lampoons","lamppost","lamprey","lampreys","lamps","lampyrid","lams","lamster","lamsters","lanai","lanais","lanate","lanated","lance","lanced","lancelet","lancer","lancers","lances","lancet","lanceted","lancets","lanciers","lancing","land","landau","landaus","landed","lander","landers","landfall","landfill","landform","landing","landings","landlady","landler","landlers","landless","landlord","landman","landmark","landmass","landmen","lands","landside","landskip","landslid","landslip","landsman","landsmen","landward","lane","lanely","lanes","lang","langlauf","langley","langleys","langrage","langrel","langrels","langshan","langsyne","language","langue","langues","languet","languets","languid","languish","languor","languors","langur","langurs","laniard","laniards","laniary","lanital","lanitals","lank","lanker","lankest","lankier","lankiest","lankily","lankly","lankness","lanky","lanner","lanneret","lanners","lanolin","lanoline","lanolins","lanose","lanosity","lantana","lantanas","lantern","lanterns","lanthorn","lanugo","lanugos","lanyard","lanyards","lap","lapboard","lapdog","lapdogs","lapel","lapeled","lapelled","lapels","lapful","lapfuls","lapidary","lapidate","lapides","lapidify","lapidist","lapilli","lapillus","lapin","lapins","lapis","lapises","lapped","lapper","lappered","lappers","lappet","lappeted","lappets","lapping","laps","lapsable","lapse","lapsed","lapser","lapsers","lapses","lapsible","lapsing","lapsus","laptop","laptops","lapwing","lapwings","lar","larboard","larcener","larceny","larch","larches","lard","larded","larder","larders","lardier","lardiest","larding","lardlike","lardon","lardons","lardoon","lardoons","lards","lardy","laree","larees","lares","largando","large","largely","larger","larges","largess","largesse","largest","largish","largo","largos","lari","lariat","lariated","lariats","larine","laris","lark","larked","larker","larkers","larkier","larkiest","larking","larkish","larks","larksome","larkspur","larky","larrigan","larrikin","larrup","larruped","larruper","larrups","lars","larum","larums","larva","larvae","larval","larvas","laryngal","larynges","larynx","larynxes","las","lasagna","lasagnas","lasagne","lasagnes","lascar","lascars","lase","lased","laser","lasers","lases","lash","lashed","lasher","lashers","lashes","lashing","lashings","lashins","lashkar","lashkars","lasing","lass","lasses","lassie","lassies","lasso","lassoed","lassoer","lassoers","lassoes","lassoing","lassos","last","lasted","laster","lasters","lasting","lastings","lastly","lasts","lat","latakia","latakias","latch","latched","latches","latchet","latchets","latching","latchkey","late","lated","lateen","lateener","lateens","lately","laten","latency","latened","lateness","latening","latens","latent","latently","latents","later","laterad","lateral","laterals","laterite","laterize","latest","latests","latewood","latex","latexes","lath","lathe","lathed","lather","lathered","latherer","lathers","lathery","lathes","lathi","lathier","lathiest","lathing","lathings","lathis","laths","lathwork","lathy","lati","latices","latigo","latigoes","latigos","latinity","latinize","latino","latinos","latish","latitude","latke","latkes","latosol","latosols","latria","latrias","latrine","latrines","lats","latten","lattens","latter","latterly","lattice","latticed","lattices","lattin","lattins","lauan","lauans","laud","laudable","laudably","laudanum","laudator","lauded","lauder","lauders","lauding","lauds","laugh","laughed","laugher","laughers","laughing","laughs","laughter","launce","launces","launch","launched","launcher","launches","launder","launders","laundry","laura","laurae","lauras","laureate","laurel","laureled","laurels","lauwine","lauwines","lav","lava","lavabo","lavaboes","lavabos","lavage","lavages","lavalava","lavalier","lavalike","lavas","lavation","lavatory","lave","laved","laveer","laveered","laveers","lavender","laver","laverock","lavers","laves","laving","lavish","lavished","lavisher","lavishes","lavishly","lavrock","lavrocks","lavs","law","lawbook","lawbooks","lawed","lawful","lawfully","lawgiver","lawine","lawines","lawing","lawings","lawless","lawlike","lawmaker","lawman","lawmen","lawn","lawns","lawny","laws","lawsuit","lawsuits","lawyer","lawyered","lawyerly","lawyers","lax","laxation","laxative","laxer","laxest","laxities","laxity","laxly","laxness","lay","layabout","layaway","layaways","layed","layer","layerage","layered","layering","layers","layette","layettes","laying","layman","laymen","layoff","layoffs","layout","layouts","layover","layovers","lays","layup","layups","laywoman","laywomen","lazar","lazaret","lazarets","lazars","laze","lazed","lazes","lazied","lazier","lazies","laziest","lazily","laziness","lazing","lazuli","lazulis","lazulite","lazurite","lazy","lazying","lazyish","lea","leach","leachate","leached","leacher","leachers","leaches","leachier","leaching","leachy","lead","leaded","leaden","leadenly","leader","leaders","leadier","leadiest","leading","leadings","leadless","leadman","leadmen","leadoff","leadoffs","leads","leadsman","leadsmen","leadwork","leadwort","leady","leaf","leafage","leafages","leafed","leafier","leafiest","leafing","leafless","leaflet","leaflets","leaflike","leafs","leafworm","leafy","league","leagued","leaguer","leaguers","leagues","leaguing","leak","leakage","leakages","leaked","leaker","leakers","leakier","leakiest","leakily","leaking","leakless","leaks","leaky","leal","leally","lealties","lealty","lean","leaned","leaner","leaners","leanest","leaning","leanings","leanly","leanness","leans","leant","leap","leaped","leaper","leapers","leapfrog","leaping","leaps","leapt","lear","learier","leariest","learn","learned","learner","learners","learning","learns","learnt","lears","leary","leas","leasable","lease","leased","leaser","leasers","leases","leash","leashed","leashes","leashing","leasing","leasings","least","leasts","leather","leathern","leathers","leathery","leave","leaved","leaven","leavened","leavens","leaver","leavers","leaves","leavier","leaviest","leaving","leavings","leavy","leben","lebens","lech","lechayim","leched","lecher","lechered","lechers","lechery","leches","leching","lecithin","lectern","lecterns","lectin","lectins","lection","lections","lector","lectors","lecture","lectured","lecturer","lectures","lecythi","lecythis","lecythus","led","ledge","ledger","ledgers","ledges","ledgier","ledgiest","ledgy","lee","leeboard","leech","leeched","leeches","leeching","leek","leeks","leer","leered","leerier","leeriest","leerily","leering","leers","leery","lees","leet","leets","leeward","leewards","leeway","leeways","left","lefter","leftest","lefties","leftish","leftism","leftisms","leftist","leftists","leftover","lefts","leftward","leftwing","lefty","leg","legacies","legacy","legal","legalese","legalise","legalism","legalist","legality","legalize","legally","legals","legate","legated","legatee","legatees","legates","legatine","legating","legation","legato","legator","legators","legatos","legend","legendry","legends","leger","legerity","legers","leges","legged","leggier","leggiero","leggiest","leggin","legging","leggings","leggins","leggy","leghorn","leghorns","legible","legibly","legion","legions","legist","legists","legit","legits","legless","leglike","legman","legmen","legong","legongs","legroom","legrooms","legs","legume","legumes","legumin","legumins","legwork","legworks","lehayim","lehayims","lehr","lehrs","lehua","lehuas","lei","leis","leister","leisters","leisure","leisured","leisures","lek","leke","leks","leku","lekvar","lekvars","lekythi","lekythoi","lekythos","lekythus","leman","lemans","lemma","lemmas","lemmata","lemming","lemmings","lemnisci","lemon","lemonade","lemonish","lemons","lemony","lempira","lempiras","lemur","lemures","lemurine","lemuroid","lemurs","lend","lendable","lender","lenders","lending","lends","lenes","length","lengthen","lengths","lengthy","lenience","leniency","lenient","lenis","lenities","lenitive","lenity","leno","lenos","lens","lense","lensed","lenses","lensing","lensless","lent","lentando","lenten","lentic","lenticel","lentigo","lentil","lentils","lentisk","lentisks","lento","lentoid","lentos","leone","leones","leonine","leopard","leopards","leotard","leotards","leper","lepers","lepidote","leporid","leporids","leporine","leprose","leprosy","leprotic","leprous","lept","lepta","lepton","leptonic","leptons","lesbian","lesbians","lesion","lesioned","lesions","less","lessee","lessees","lessen","lessened","lessens","lesser","lesson","lessoned","lessons","lessor","lessors","lest","let","letch","letched","letches","letching","letdown","letdowns","lethal","lethally","lethals","lethargy","lethe","lethean","lethes","lets","letted","letter","lettered","letterer","letters","letting","lettuce","lettuces","letup","letups","leu","leucemia","leucemic","leucin","leucine","leucines","leucins","leucite","leucites","leucitic","leucoma","leucomas","leud","leudes","leuds","leukemia","leukemic","leukoma","leukomas","leukon","leukons","leukoses","leukosis","leukotic","lev","leva","levant","levanted","levanter","levants","levator","levators","levee","leveed","leveeing","levees","level","leveled","leveler","levelers","leveling","levelled","leveller","levelly","levels","lever","leverage","levered","leveret","leverets","levering","levers","leviable","levied","levier","leviers","levies","levigate","levin","levins","levirate","levitate","levities","levity","levo","levodopa","levogyre","levulin","levulins","levulose","levy","levying","lewd","lewder","lewdest","lewdly","lewdness","lewis","lewises","lewisite","lewisson","lex","lexeme","lexemes","lexemic","lexes","lexica","lexical","lexicon","lexicons","lexis","ley","leys","lez","lezes","lezzie","lezzies","lezzy","liable","liaise","liaised","liaises","liaising","liaison","liaisons","liana","lianas","liane","lianes","liang","liangs","lianoid","liar","liard","liards","liars","lib","libation","libber","libbers","libeccio","libel","libelant","libeled","libelee","libelees","libeler","libelers","libeling","libelist","libelled","libellee","libeller","libelous","libels","liber","liberal","liberals","liberate","libers","liberty","libido","libidos","liblab","liblabs","libra","librae","library","libras","librate","librated","librates","libretti","libretto","libri","libs","lice","licence","licenced","licencee","licencer","licences","license","licensed","licensee","licenser","licenses","licensor","licente","licenti","lich","lichee","lichees","lichen","lichened","lichenin","lichens","liches","lichi","lichis","licht","lichted","lichting","lichtly","lichts","licit","licitly","lick","licked","licker","lickers","licking","lickings","licks","lickspit","licorice","lictor","lictors","lid","lidar","lidars","lidded","lidding","lidless","lido","lidos","lids","lie","lied","lieder","lief","liefer","liefest","liefly","liege","liegeman","liegemen","lieges","lien","lienable","lienal","liens","lientery","lier","lierne","liernes","liers","lies","lieu","lieus","lieve","liever","lievest","life","lifeboat","lifeful","lifeless","lifelike","lifeline","lifelong","lifer","lifers","lifetime","lifeway","lifeways","lifework","lift","liftable","lifted","lifter","lifters","liftgate","lifting","liftman","liftmen","liftoff","liftoffs","lifts","ligament","ligan","ligand","ligands","ligans","ligase","ligases","ligate","ligated","ligates","ligating","ligation","ligative","ligature","liger","ligers","light","lighted","lighten","lightens","lighter","lighters","lightest","lightful","lighting","lightish","lightly","lights","ligneous","lignify","lignin","lignins","lignite","lignites","lignitic","ligroin","ligroine","ligroins","ligula","ligulae","ligular","ligulas","ligulate","ligule","ligules","liguloid","ligure","ligures","likable","like","likeable","liked","likelier","likely","liken","likened","likeness","likening","likens","liker","likers","likes","likest","likewise","liking","likings","likuta","lilac","lilacs","lilied","lilies","lilliput","lilt","lilted","lilting","lilts","lily","lilylike","lima","limacine","limacon","limacons","liman","limans","limas","limb","limba","limbas","limbate","limbeck","limbecks","limbed","limber","limbered","limberer","limberly","limbers","limbi","limbic","limbier","limbiest","limbing","limbless","limbo","limbos","limbs","limbus","limbuses","limby","lime","limeade","limeades","limed","limekiln","limeless","limen","limens","limerick","limes","limey","limeys","limier","limiest","limina","liminal","liminess","liming","limit","limitary","limited","limiteds","limiter","limiters","limites","limiting","limits","limmer","limmers","limn","limned","limner","limners","limnetic","limnic","limning","limns","limo","limonene","limonite","limos","limp","limpa","limpas","limped","limper","limpers","limpest","limpet","limpets","limpid","limpidly","limping","limpkin","limpkins","limply","limpness","limps","limpsey","limpsier","limpsy","limuli","limuloid","limulus","limy","lin","linable","linac","linacs","linage","linages","linalol","linalols","linalool","linchpin","lindane","lindanes","linden","lindens","lindies","lindy","line","lineable","lineage","lineages","lineal","lineally","linear","linearly","lineate","lineated","linebred","linecut","linecuts","lined","lineless","linelike","lineman","linemen","linen","linens","lineny","liner","liners","lines","linesman","linesmen","lineup","lineups","liney","ling","linga","lingam","lingams","lingas","lingcod","lingcods","linger","lingered","lingerer","lingerie","lingers","lingier","lingiest","lingo","lingoes","lings","lingua","linguae","lingual","linguals","linguine","linguini","linguist","lingy","linier","liniest","liniment","linin","lining","linings","linins","link","linkable","linkage","linkages","linkboy","linkboys","linked","linker","linkers","linking","linkman","linkmen","links","linksman","linksmen","linkup","linkups","linkwork","linky","linn","linnet","linnets","linns","lino","linocut","linocuts","linoleum","linos","lins","linsang","linsangs","linseed","linseeds","linsey","linseys","linstock","lint","lintel","lintels","linter","linters","lintier","lintiest","lintless","lintol","lintols","lints","linty","linum","linums","linuron","linurons","liny","lion","lioness","lionfish","lionise","lionised","lioniser","lionises","lionize","lionized","lionizer","lionizes","lionlike","lions","lip","lipase","lipases","lipid","lipide","lipides","lipidic","lipids","lipin","lipins","lipless","liplike","lipocyte","lipoid","lipoidal","lipoids","lipoma","lipomas","lipomata","liposome","lipped","lippen","lippened","lippens","lipper","lippered","lippers","lippier","lippiest","lipping","lippings","lippy","lips","lipstick","liquate","liquated","liquates","liquefy","liqueur","liqueurs","liquid","liquidly","liquids","liquify","liquor","liquored","liquors","lira","liras","lire","liripipe","lirot","liroth","lis","lisente","lisle","lisles","lisp","lisped","lisper","lispers","lisping","lisps","lissom","lissome","lissomly","list","listable","listed","listel","listels","listen","listened","listener","listens","lister","listers","listing","listings","listless","lists","lit","litai","litanies","litany","litas","litchi","litchis","liter","literacy","literal","literals","literary","literate","literati","liters","litharge","lithe","lithely","lithemia","lithemic","lither","lithest","lithia","lithias","lithic","lithium","lithiums","litho","lithoed","lithoid","lithoing","lithos","lithosol","litigant","litigate","litmus","litmuses","litoral","litotes","litotic","litre","litres","lits","litten","litter","littered","litterer","litters","littery","little","littler","littles","littlest","littlish","littoral","litu","liturgic","liturgy","livable","live","liveable","lived","livelier","livelily","livelong","lively","liven","livened","livener","liveners","liveness","livening","livens","liver","liveried","liveries","liverish","livers","livery","lives","livest","livetrap","livid","lividity","lividly","livier","liviers","living","livingly","livings","livre","livres","livyer","livyers","lixivia","lixivial","lixivium","lizard","lizards","llama","llamas","llano","llanos","loach","loaches","load","loaded","loader","loaders","loading","loadings","loads","loadstar","loaf","loafed","loafer","loafers","loafing","loafs","loam","loamed","loamier","loamiest","loaming","loamless","loams","loamy","loan","loanable","loaned","loaner","loaners","loaning","loanings","loans","loanword","loath","loathe","loathed","loather","loathers","loathes","loathful","loathing","loathly","loaves","lob","lobar","lobate","lobated","lobately","lobation","lobbed","lobber","lobbers","lobbied","lobbies","lobbing","lobby","lobbyer","lobbyers","lobbygow","lobbying","lobbyism","lobbyist","lobe","lobed","lobefin","lobefins","lobelia","lobelias","lobeline","lobes","loblolly","lobo","lobos","lobotomy","lobs","lobster","lobsters","lobstick","lobular","lobulate","lobule","lobules","lobulose","lobworm","lobworms","loca","local","locale","locales","localise","localism","localist","localite","locality","localize","locally","locals","locate","located","locater","locaters","locates","locating","location","locative","locator","locators","loch","lochia","lochial","lochs","loci","lock","lockable","lockage","lockages","lockbox","locked","locker","lockers","locket","lockets","locking","lockjaw","lockjaws","locknut","locknuts","lockout","lockouts","lockram","lockrams","locks","lockstep","lockup","lockups","loco","locoed","locoes","locofoco","locoing","locoism","locoisms","locomote","locos","locoweed","locular","loculate","locule","loculed","locules","loculi","loculus","locum","locums","locus","locust","locusta","locustae","locustal","locusts","locution","locutory","lode","loden","lodens","lodes","lodestar","lodge","lodged","lodger","lodgers","lodges","lodging","lodgings","lodgment","lodicule","loess","loessal","loesses","loessial","loft","lofted","lofter","lofters","loftier","loftiest","loftily","lofting","loftless","lofts","lofty","log","logan","logania","logans","logbook","logbooks","loge","loges","loggats","logged","logger","loggers","loggets","loggia","loggias","loggie","loggier","loggiest","logging","loggings","loggy","logia","logic","logical","logician","logicise","logicize","logics","logier","logiest","logily","loginess","logion","logions","logistic","logjam","logjams","logo","logogram","logoi","logomach","logos","logotype","logotypy","logroll","logrolls","logs","logway","logways","logwood","logwoods","logy","loin","loins","loiter","loitered","loiterer","loiters","loll","lolled","loller","lollers","lollies","lolling","lollipop","lollop","lolloped","lollops","lolls","lolly","lollygag","lollypop","lomein","lomeins","loment","lomenta","loments","lomentum","lone","lonelier","lonelily","lonely","loneness","loner","loners","lonesome","long","longan","longans","longboat","longbow","longbows","longe","longed","longeing","longer","longeron","longers","longes","longest","longhair","longhand","longhead","longhorn","longies","longing","longings","longish","longleaf","longline","longly","longness","longs","longship","longsome","longspur","longtime","longueur","longways","longwise","loo","loobies","looby","looed","looey","looeys","loof","loofa","loofah","loofahs","loofas","loofs","looie","looies","looing","look","lookdown","looked","looker","lookers","looking","lookout","lookouts","looks","lookup","lookups","loom","loomed","looming","looms","loon","looney","looneys","loonier","loonies","looniest","loons","loony","loop","looped","looper","loopers","loophole","loopier","loopiest","looping","loops","loopy","loos","loose","loosed","loosely","loosen","loosened","loosener","loosens","looser","looses","loosest","loosing","loot","looted","looter","looters","looting","loots","lop","lope","loped","loper","lopers","lopes","loping","lopped","lopper","loppered","loppers","loppier","loppiest","lopping","loppy","lops","lopsided","lopstick","loquat","loquats","loral","loran","lorans","lord","lorded","lording","lordings","lordless","lordlier","lordlike","lordling","lordly","lordoma","lordomas","lordoses","lordosis","lordotic","lords","lordship","lore","loreal","lores","lorgnon","lorgnons","lorica","loricae","loricate","lories","lorikeet","lorimer","lorimers","loriner","loriners","loris","lorises","lorn","lornness","lorries","lorry","lory","losable","lose","losel","losels","loser","losers","loses","losing","losingly","losings","loss","losses","lossy","lost","lostness","lot","lota","lotah","lotahs","lotas","loth","lothario","lothsome","loti","lotic","lotion","lotions","lotos","lotoses","lots","lotted","lottery","lotting","lotto","lottos","lotus","lotuses","louche","loud","louden","loudened","loudens","louder","loudest","loudish","loudlier","loudly","loudness","lough","loughs","louie","louies","louis","lounge","lounged","lounger","loungers","lounges","lounging","loungy","loup","loupe","louped","loupen","loupes","louping","loups","lour","loured","louring","lours","loury","louse","loused","louses","lousier","lousiest","lousily","lousing","lousy","lout","louted","louting","loutish","louts","louver","louvered","louvers","louvre","louvres","lovable","lovably","lovage","lovages","lovat","lovats","love","loveable","loveably","lovebird","lovebug","lovebugs","loved","loveless","lovelier","lovelies","lovelily","lovelock","lovelorn","lovely","lover","loverly","lovers","loves","lovesick","lovesome","lovevine","loving","lovingly","low","lowball","lowballs","lowborn","lowboy","lowboys","lowbred","lowbrow","lowbrows","lowdown","lowdowns","lowe","lowed","lower","lowered","lowering","lowers","lowery","lowes","lowest","lowing","lowings","lowish","lowland","lowlands","lowlier","lowliest","lowlife","lowlifer","lowlifes","lowlives","lowly","lown","lowness","lowrider","lows","lowse","lox","loxed","loxes","loxing","loyal","loyaler","loyalest","loyalism","loyalist","loyally","loyalty","lozenge","lozenges","luau","luaus","lubber","lubberly","lubbers","lube","lubes","lubric","lubrical","lucarne","lucarnes","luce","lucence","lucences","lucency","lucent","lucently","lucern","lucerne","lucernes","lucerns","luces","lucid","lucidity","lucidly","lucifer","lucifers","luck","lucked","luckie","luckier","luckies","luckiest","luckily","lucking","luckless","lucks","lucky","lucre","lucres","luculent","lude","ludes","ludic","lues","luetic","luetics","luff","luffa","luffas","luffed","luffing","luffs","lug","luge","luged","lugeing","luges","luggage","luggages","lugged","lugger","luggers","luggie","luggies","lugging","lugs","lugsail","lugsails","lugworm","lugworms","lukewarm","lull","lullaby","lulled","lulling","lulls","lulu","lulus","lum","lumbago","lumbagos","lumbar","lumbars","lumber","lumbered","lumberer","lumbers","lumen","lumenal","lumens","lumina","luminal","luminary","luminist","luminous","lummox","lummoxes","lump","lumped","lumpen","lumpens","lumper","lumpers","lumpfish","lumpier","lumpiest","lumpily","lumping","lumpish","lumps","lumpy","lums","luna","lunacies","lunacy","lunar","lunarian","lunars","lunas","lunate","lunated","lunately","lunatic","lunatics","lunation","lunch","lunched","luncheon","luncher","lunchers","lunches","lunching","lune","lunes","lunet","lunets","lunette","lunettes","lung","lungan","lungans","lunge","lunged","lungee","lungees","lunger","lungers","lunges","lungfish","lungi","lunging","lungis","lungs","lungworm","lungwort","lungyi","lungyis","lunier","lunies","luniest","lunk","lunker","lunkers","lunkhead","lunks","lunt","lunted","lunting","lunts","lunula","lunulae","lunular","lunulate","lunule","lunules","luny","lupanar","lupanars","lupin","lupine","lupines","lupins","lupous","lupulin","lupulins","lupus","lupuses","lurch","lurched","lurcher","lurchers","lurches","lurching","lurdan","lurdane","lurdanes","lurdans","lure","lured","lurer","lurers","lures","lurid","luridly","luring","lurk","lurked","lurker","lurkers","lurking","lurks","luscious","lush","lushed","lusher","lushes","lushest","lushing","lushly","lushness","lust","lusted","luster","lustered","lusters","lustful","lustier","lustiest","lustily","lusting","lustra","lustral","lustrate","lustre","lustred","lustres","lustring","lustrous","lustrum","lustrums","lusts","lusty","lusus","lususes","lutanist","lute","lutea","luteal","lutecium","luted","lutein","luteins","lutenist","luteolin","luteous","lutes","lutetium","luteum","luthern","lutherns","luthier","luthiers","luting","lutings","lutist","lutists","luv","luvs","lux","luxate","luxated","luxates","luxating","luxation","luxe","luxes","luxuries","luxury","lwei","lweis","lyard","lyart","lyase","lyases","lycea","lycee","lycees","lyceum","lyceums","lychee","lychees","lychnis","lycopene","lycopod","lycopods","lyddite","lyddites","lye","lyes","lying","lyingly","lyings","lymph","lymphoid","lymphoma","lymphs","lyncean","lynch","lynched","lyncher","lynchers","lynches","lynching","lynchpin","lynx","lynxes","lyophile","lyrate","lyrated","lyrately","lyre","lyrebird","lyres","lyric","lyrical","lyricise","lyricism","lyricist","lyricize","lyrics","lyriform","lyrism","lyrisms","lyrist","lyrists","lysate","lysates","lyse","lysed","lyses","lysin","lysine","lysines","lysing","lysins","lysis","lysogen","lysogens","lysogeny","lysosome","lysozyme","lyssa","lyssas","lytic","lytta","lyttae","lyttas","maar","maars","mabe","mabes","mac","macaber","macabre","macaco","macacos","macadam","macadams","macaque","macaques","macaroni","macaroon","macaw","macaws","maccabaw","maccaboy","macchia","macchie","maccoboy","mace","maced","macer","macerate","macers","maces","mach","mache","maches","machete","machetes","machine","machined","machines","machismo","macho","machos","machree","machrees","machs","machzor","machzors","macing","mack","mackerel","mackinaw","mackle","mackled","mackles","mackling","macks","macle","macled","macles","macon","macons","macrame","macrames","macro","macron","macrons","macros","macrural","macruran","macs","macula","maculae","macular","maculas","maculate","macule","maculed","macules","maculing","mad","madam","madame","madames","madams","madcap","madcaps","madded","madden","maddened","maddens","madder","madders","maddest","madding","maddish","made","madeira","madeiras","madhouse","madly","madman","madmen","madness","madonna","madonnas","madras","madrases","madre","madres","madrigal","madrona","madronas","madrone","madrones","madrono","madronos","mads","maduro","maduros","madwoman","madwomen","madwort","madworts","madzoon","madzoons","mae","maenad","maenades","maenadic","maenads","maes","maestoso","maestri","maestro","maestros","maffia","maffias","maffick","mafficks","mafia","mafias","mafic","mafiosi","mafioso","maftir","maftirs","mag","magazine","magdalen","mage","magenta","magentas","mages","maggot","maggots","maggoty","magi","magian","magians","magic","magical","magician","magicked","magics","magilp","magilps","magister","maglev","magma","magmas","magmata","magmatic","magnate","magnates","magnesia","magnesic","magnet","magnetic","magneto","magneton","magnetos","magnets","magnific","magnify","magnolia","magnum","magnums","magot","magots","magpie","magpies","mags","maguey","magueys","magus","maharaja","maharani","mahatma","mahatmas","mahimahi","mahjong","mahjongg","mahjongs","mahoe","mahoes","mahogany","mahonia","mahonias","mahout","mahouts","mahuang","mahuangs","mahzor","mahzorim","mahzors","maid","maiden","maidenly","maidens","maidhood","maidish","maids","maieutic","maigre","maihem","maihems","mail","mailable","mailbag","mailbags","mailbox","maile","mailed","mailer","mailers","mailes","mailing","mailings","maill","mailless","maillot","maillots","maills","mailman","mailmen","mails","maim","maimed","maimer","maimers","maiming","maims","main","mainland","mainline","mainly","mainmast","mains","mainsail","mainstay","maintain","maintop","maintops","maiolica","mair","mairs","maist","maists","maize","maizes","majagua","majaguas","majestic","majesty","majolica","major","majored","majoring","majority","majors","makable","makar","makars","make","makeable","makebate","makefast","maker","makers","makes","makeup","makeups","makimono","making","makings","mako","makos","makuta","malacca","malaccas","maladies","malady","malaise","malaises","malamute","malanga","malangas","malapert","malaprop","malar","malaria","malarial","malarian","malarias","malarkey","malarky","malaroma","malars","malate","malates","male","maleate","maleates","maledict","malefic","malemiut","malemute","maleness","males","malfed","malgre","malic","malice","malices","malign","maligned","maligner","malignly","maligns","malihini","maline","malines","malinger","malison","malisons","malkin","malkins","mall","mallard","mallards","malled","mallee","mallees","mallei","malleoli","mallet","mallets","malleus","malling","mallow","mallows","malls","malm","malmier","malmiest","malms","malmsey","malmseys","malmy","malodor","malodors","maloti","malposed","malt","maltase","maltases","malted","malteds","maltha","malthas","maltier","maltiest","malting","maltol","maltols","maltose","maltoses","maltreat","malts","maltster","malty","malvasia","mama","mamaliga","mamas","mamba","mambas","mambo","mamboed","mamboes","mamboing","mambos","mameluke","mamey","mameyes","mameys","mamie","mamies","mamluk","mamluks","mamma","mammae","mammal","mammals","mammary","mammas","mammate","mammati","mammatus","mammee","mammees","mammer","mammered","mammers","mammet","mammets","mammey","mammeys","mammie","mammies","mammilla","mammitis","mammock","mammocks","mammon","mammons","mammoth","mammoths","mammy","man","mana","manacle","manacled","manacles","manage","managed","manager","managers","manages","managing","manakin","manakins","manana","mananas","manas","manatee","manatees","manatoid","manche","manches","manchet","manchets","manciple","mandala","mandalas","mandalic","mandamus","mandarin","mandate","mandated","mandates","mandator","mandible","mandioca","mandola","mandolas","mandolin","mandrake","mandrel","mandrels","mandril","mandrill","mandrils","mane","maned","manege","maneges","maneless","manes","maneuver","manful","manfully","mangabey","mangaby","manganic","mange","mangel","mangels","manger","mangers","manges","mangey","mangier","mangiest","mangily","mangle","mangled","mangler","manglers","mangles","mangling","mango","mangoes","mangold","mangolds","mangonel","mangos","mangrove","mangy","manhole","manholes","manhood","manhoods","manhunt","manhunts","mania","maniac","maniacal","maniacs","manias","manic","manics","manicure","manifest","manifold","manihot","manihots","manikin","manikins","manila","manilas","manilla","manillas","manille","manilles","manioc","manioca","maniocas","maniocs","maniple","maniples","manito","manitos","manitou","manitous","manitu","manitus","mankind","manless","manlier","manliest","manlike","manlily","manly","manmade","manna","mannan","mannans","mannas","manned","manner","mannered","mannerly","manners","mannikin","manning","mannish","mannite","mannites","mannitic","mannitol","mannose","mannoses","mano","manor","manorial","manors","manos","manpack","manpower","manque","manrope","manropes","mans","mansard","mansards","manse","manses","mansion","mansions","manta","mantas","manteau","manteaus","manteaux","mantel","mantelet","mantels","mantes","mantic","mantid","mantids","mantilla","mantis","mantises","mantissa","mantle","mantled","mantles","mantlet","mantlets","mantling","mantra","mantrap","mantraps","mantras","mantric","mantua","mantuas","manual","manually","manuals","manuary","manubria","manumit","manumits","manure","manured","manurer","manurers","manures","manurial","manuring","manus","manward","manwards","manwise","many","manyfold","map","maple","maples","maplike","mapmaker","mappable","mapped","mapper","mappers","mapping","mappings","maps","maquette","maqui","maquis","mar","marabou","marabous","marabout","maraca","maracas","maranta","marantas","marasca","marascas","marasmic","marasmus","marathon","maraud","marauded","marauder","marauds","maravedi","marble","marbled","marbler","marblers","marbles","marblier","marbling","marbly","marc","marcato","marcel","marcels","march","marched","marchen","marcher","marchers","marches","marchesa","marchese","marchesi","marching","marcs","mare","maremma","maremme","marengo","mares","margaric","margarin","margay","margays","marge","margent","margents","marges","margin","marginal","margined","margins","margrave","maria","mariachi","marigold","marimba","marimbas","marina","marinade","marinara","marinas","marinate","marine","mariner","mariners","marines","mariposa","marish","marishes","marital","maritime","marjoram","mark","markdown","marked","markedly","marker","markers","market","marketed","marketer","markets","markhoor","markhor","markhors","marking","markings","markka","markkaa","markkas","marks","marksman","marksmen","markup","markups","marl","marled","marlier","marliest","marlin","marline","marlines","marling","marlings","marlins","marlite","marlites","marlitic","marls","marly","marmite","marmites","marmoset","marmot","marmots","maroon","marooned","maroons","marplot","marplots","marque","marquee","marquees","marques","marquess","marquis","marquise","marram","marrams","marrano","marranos","marred","marrer","marrers","marriage","married","marrieds","marrier","marriers","marries","marring","marron","marrons","marrow","marrowed","marrows","marrowy","marry","marrying","mars","marsala","marsalas","marse","marses","marsh","marshal","marshall","marshals","marshes","marshier","marshy","marsupia","mart","martagon","marted","martello","marten","martens","martial","martian","martians","martin","martinet","marting","martini","martinis","martins","martlet","martlets","marts","martyr","martyred","martyrly","martyrs","martyry","marvel","marveled","marvels","marvy","maryjane","marzipan","mas","mascara","mascaras","mascon","mascons","mascot","mascots","maser","masers","mash","mashed","masher","mashers","mashes","mashie","mashies","mashing","mashy","masjid","masjids","mask","maskable","masked","maskeg","maskegs","masker","maskers","masking","maskings","masklike","masks","mason","masoned","masonic","masoning","masonry","masons","masque","masquer","masquers","masques","mass","massa","massacre","massage","massaged","massager","massages","massas","masscult","masse","massed","massedly","masses","masseter","masseur","masseurs","masseuse","massicot","massier","massiest","massif","massifs","massing","massive","massless","massy","mast","mastaba","mastabah","mastabas","masted","master","mastered","masterly","masters","mastery","masthead","mastic","mastiche","mastics","mastiff","mastiffs","masting","mastitic","mastitis","mastix","mastixes","mastless","mastlike","mastodon","mastoid","mastoids","masts","masurium","mat","matador","matadors","match","matchbox","matched","matcher","matchers","matches","matching","matchup","matchups","mate","mated","mateless","matelote","mater","material","materiel","maternal","maters","mates","mateship","matey","mateys","math","maths","matilda","matildas","matin","matinal","matinee","matinees","matiness","mating","matings","matins","matless","matrass","matres","matrices","matrix","matrixes","matron","matronal","matronly","matrons","mats","matsah","matsahs","matt","matte","matted","mattedly","matter","mattered","matters","mattery","mattes","mattin","matting","mattings","mattins","mattock","mattocks","mattoid","mattoids","mattrass","mattress","matts","maturate","mature","matured","maturely","maturer","matures","maturest","maturing","maturity","matza","matzah","matzahs","matzas","matzo","matzoh","matzohs","matzoon","matzoons","matzos","matzot","matzoth","maud","maudlin","mauds","mauger","maugre","maul","mauled","mauler","maulers","mauling","mauls","maumet","maumetry","maumets","maun","maund","maunder","maunders","maundies","maunds","maundy","mausolea","maut","mauts","mauve","mauves","maven","mavens","maverick","mavie","mavies","mavin","mavins","mavis","mavises","maw","mawed","mawing","mawkish","mawn","maws","maxi","maxicoat","maxilla","maxillae","maxillas","maxim","maxima","maximal","maximals","maximin","maximins","maximise","maximite","maximize","maxims","maximum","maximums","maxis","maxixe","maxixes","maxwell","maxwells","may","maya","mayan","mayapple","mayas","maybe","maybes","maybush","mayday","maydays","mayed","mayest","mayflies","mayfly","mayhap","mayhem","mayhems","maying","mayings","mayo","mayor","mayoral","mayoress","mayors","mayos","maypole","maypoles","maypop","maypops","mays","mayst","mayvin","mayvins","mayweed","mayweeds","mazaedia","mazard","mazards","maze","mazed","mazedly","mazelike","mazer","mazers","mazes","mazier","maziest","mazily","maziness","mazing","mazourka","mazuma","mazumas","mazurka","mazurkas","mazy","mazzard","mazzards","mbira","mbiras","mead","meadow","meadows","meadowy","meads","meager","meagerly","meagre","meagrely","meal","mealie","mealier","mealies","mealiest","mealless","meals","mealtime","mealworm","mealy","mealybug","mean","meander","meanders","meaner","meaners","meanest","meanie","meanies","meaning","meanings","meanly","meanness","means","meant","meantime","meany","measle","measled","measles","measlier","measly","measure","measured","measurer","measures","meat","meatal","meatball","meathead","meatier","meatiest","meatily","meatless","meatloaf","meatman","meatmen","meats","meatus","meatuses","meaty","mecca","meccas","mechanic","meconium","med","medaka","medakas","medal","medaled","medaling","medalist","medalled","medallic","medals","meddle","meddled","meddler","meddlers","meddles","meddling","medevac","medevacs","medflies","medfly","media","mediacy","mediad","mediae","medial","medially","medials","median","medianly","medians","mediant","mediants","medias","mediate","mediated","mediates","mediator","medic","medicaid","medical","medicals","medicare","medicate","medicine","medick","medicks","medico","medicos","medics","medieval","medii","medina","medinas","mediocre","meditate","medium","mediums","medius","medlar","medlars","medley","medleys","medulla","medullae","medullar","medullas","medusa","medusae","medusal","medusan","medusans","medusas","medusoid","meed","meeds","meek","meeker","meekest","meekly","meekness","meet","meeter","meeters","meeting","meetings","meetly","meetness","meets","megabar","megabars","megabit","megabits","megabuck","megabyte","megadose","megadyne","megalith","megalops","megapod","megapode","megapods","megass","megasse","megasses","megaton","megatons","megavolt","megawatt","megillah","megilp","megilph","megilphs","megilps","megohm","megohms","megrim","megrims","meikle","meinie","meinies","meiny","meioses","meiosis","meiotic","mel","melamdim","melamed","melamine","melange","melanges","melanian","melanic","melanics","melanin","melanins","melanism","melanist","melanite","melanize","melanoid","melanoma","melanous","meld","melded","melder","melders","melding","melds","melee","melees","melic","melilite","melilot","melilots","melinite","melisma","melismas","mell","melled","mellific","melling","mellow","mellowed","mellower","mellowly","mellows","mells","melodeon","melodia","melodias","melodic","melodica","melodies","melodise","melodist","melodize","melody","meloid","meloids","melon","melons","mels","melt","meltable","meltage","meltages","meltdown","melted","melter","melters","melting","melton","meltons","melts","mem","member","membered","members","membrane","memento","mementos","memo","memoir","memoirs","memorial","memories","memorize","memory","memos","mems","memsahib","men","menace","menaced","menacer","menacers","menaces","menacing","menad","menads","menage","menages","menarche","menazon","menazons","mend","mendable","mended","mender","menders","mendigo","mendigos","mending","mendings","mends","menfolk","menfolks","menhaden","menhir","menhirs","menial","menially","menials","meninges","meninx","meniscal","menisci","meniscus","meno","menology","menorah","menorahs","mensa","mensae","mensal","mensas","mensch","menschen","mensches","mense","mensed","menseful","menses","mensing","menstrua","mensural","menswear","menta","mental","mentally","menthene","menthol","menthols","mention","mentions","mentor","mentored","mentors","mentum","menu","menus","meou","meoued","meouing","meous","meow","meowed","meowing","meows","mephitic","mephitis","mercapto","mercer","mercers","mercery","merchant","mercies","merciful","mercuric","mercury","mercy","merde","merdes","mere","merely","merengue","merer","meres","merest","merge","merged","mergence","merger","mergers","merges","merging","meridian","meringue","merino","merinos","merises","merisis","meristem","meristic","merit","merited","meriting","merits","merk","merks","merl","merle","merles","merlin","merlins","merlon","merlons","merlot","merlots","merls","mermaid","mermaids","merman","mermen","meropia","meropias","meropic","merrier","merriest","merrily","merry","mesa","mesally","mesarch","mesas","mescal","mescals","mesdames","meseemed","meseems","mesh","meshed","meshes","meshier","meshiest","meshing","meshuga","meshugah","meshugga","meshugge","meshwork","meshy","mesial","mesially","mesian","mesic","mesmeric","mesnalty","mesne","mesnes","mesocarp","mesoderm","mesoglea","mesomere","meson","mesonic","mesons","mesophyl","mesosome","mesotron","mesquit","mesquite","mesquits","mess","message","messaged","messages","messan","messans","messed","messes","messiah","messiahs","messier","messiest","messily","messing","messman","messmate","messmen","messuage","messy","mestee","mestees","mesteso","mestesos","mestino","mestinos","mestiza","mestizas","mestizo","mestizos","met","meta","metage","metages","metal","metaled","metaling","metalise","metalist","metalize","metalled","metallic","metals","metamer","metamere","metamers","metaphor","metate","metates","metazoa","metazoal","metazoan","metazoic","metazoon","mete","meted","meteor","meteoric","meteors","metepa","metepas","meter","meterage","metered","metering","meters","metes","meth","methadon","methane","methanes","methanol","methinks","method","methodic","methods","methoxy","methoxyl","meths","methyl","methylal","methylic","methyls","meticais","metical","meticals","metier","metiers","meting","metis","metisse","metisses","metonym","metonyms","metonymy","metopae","metope","metopes","metopic","metopon","metopons","metre","metred","metres","metric","metrical","metrics","metrify","metring","metrist","metrists","metritis","metro","metros","mettle","mettled","mettles","metump","metumps","meuniere","mew","mewed","mewing","mewl","mewled","mewler","mewlers","mewling","mewls","mews","mezcal","mezcals","mezereon","mezereum","mezquit","mezquite","mezquits","mezuza","mezuzah","mezuzahs","mezuzas","mezuzot","mezuzoth","mezzo","mezzos","mho","mhos","miaou","miaoued","miaouing","miaous","miaow","miaowed","miaowing","miaows","miasm","miasma","miasmal","miasmas","miasmata","miasmic","miasms","miaul","miauled","miauling","miauls","mib","mibs","mica","micas","micawber","mice","micell","micella","micellae","micellar","micelle","micelles","micells","miche","miched","miches","miching","mick","mickey","mickeys","mickle","mickler","mickles","micklest","micks","micra","micrify","micro","microbar","microbe","microbes","microbic","microbus","microdot","microhm","microhms","microlux","micromho","micron","microns","micrurgy","mid","midair","midairs","midbrain","midcult","midcults","midday","middays","midden","middens","middies","middle","middled","middler","middlers","middles","middling","middy","midfield","midge","midges","midget","midgets","midgut","midguts","midi","midiron","midirons","midis","midland","midlands","midleg","midlegs","midlife","midline","midlines","midlives","midmonth","midmost","midmosts","midnight","midnoon","midnoons","midpoint","midrange","midrash","midrib","midribs","midriff","midriffs","mids","midship","midships","midsize","midspace","midst","midstory","midsts","midterm","midterms","midtown","midtowns","midwatch","midway","midways","midweek","midweeks","midwife","midwifed","midwifes","midwived","midwives","midyear","midyears","mien","miens","miff","miffed","miffier","miffiest","miffing","miffs","miffy","mig","migg","miggle","miggles","miggs","might","mightier","mightily","mights","mighty","mignon","mignonne","mignons","migraine","migrant","migrants","migrate","migrated","migrates","migrator","migs","mihrab","mihrabs","mijnheer","mikado","mikados","mike","miked","mikes","miking","mikra","mikron","mikrons","mikvah","mikvahs","mikveh","mikvehs","mikvoth","mil","miladi","miladies","miladis","milady","milage","milages","milch","milchig","mild","milden","mildened","mildens","milder","mildest","mildew","mildewed","mildews","mildewy","mildly","mildness","mile","mileage","mileages","milepost","miler","milers","miles","milesimo","milfoil","milfoils","milia","miliaria","miliary","milieu","milieus","milieux","militant","military","militate","militia","militias","milium","milk","milked","milker","milkers","milkfish","milkier","milkiest","milkily","milking","milkmaid","milkman","milkmen","milks","milkshed","milksop","milksops","milkweed","milkwood","milkwort","milky","mill","millable","millage","millages","millcake","milldam","milldams","mille","milled","milleped","miller","millers","milles","millet","millets","milliard","milliare","milliary","millibar","millieme","millier","milliers","milligal","millilux","millime","millimes","millimho","milline","milliner","millines","milling","millings","milliohm","million","millions","milliped","millirem","millpond","millrace","millrun","millruns","mills","millwork","milneb","milnebs","milo","milord","milords","milos","milpa","milpas","milreis","mils","milt","milted","milter","milters","miltier","miltiest","milting","milts","milty","mim","mimbar","mimbars","mime","mimed","mimeo","mimeoed","mimeoing","mimeos","mimer","mimers","mimes","mimesis","mimetic","mimetite","mimic","mimical","mimicked","mimicker","mimicry","mimics","miming","mimosa","mimosas","mina","minable","minacity","minae","minaret","minarets","minas","minatory","mince","minced","mincer","mincers","minces","mincier","minciest","mincing","mincy","mind","minded","minder","minders","mindful","minding","mindless","minds","mindset","mindsets","mine","mineable","mined","miner","mineral","minerals","miners","mines","mingier","mingiest","mingle","mingled","mingler","minglers","mingles","mingling","mingy","mini","minibike","minibus","minicab","minicabs","minicar","minicars","minified","minifies","minify","minikin","minikins","minim","minima","minimal","minimals","minimax","minimise","minimize","minims","minimum","minimums","mining","minings","minion","minions","minipark","minis","minish","minished","minishes","miniski","miniskis","minister","ministry","minium","miniums","minivan","minivans","miniver","minivers","mink","minke","minkes","minks","minnies","minnow","minnows","minny","minor","minorca","minorcas","minored","minoring","minority","minors","minster","minsters","minstrel","mint","mintage","mintages","minted","minter","minters","mintier","mintiest","minting","mints","minty","minuend","minuends","minuet","minuets","minus","minuses","minute","minuted","minutely","minuter","minutes","minutest","minutia","minutiae","minutial","minuting","minx","minxes","minxish","minyan","minyanim","minyans","mioses","miosis","miotic","miotics","miquelet","mir","miracle","miracles","mirador","miradors","mirage","mirages","mire","mired","mires","mirex","mirexes","miri","mirier","miriest","miriness","miring","mirk","mirker","mirkest","mirkier","mirkiest","mirkily","mirks","mirky","mirliton","mirror","mirrored","mirrors","mirs","mirth","mirthful","mirths","miry","mirza","mirzas","mis","misact","misacted","misacts","misadapt","misadd","misadded","misadds","misagent","misaim","misaimed","misaims","misalign","misally","misalter","misandry","misapply","misassay","misate","misatone","misaver","misavers","misaward","misbegan","misbegin","misbegot","misbegun","misbias","misbill","misbills","misbind","misbinds","misbound","misbrand","misbuild","misbuilt","miscall","miscalls","miscarry","miscast","miscasts","mischief","miscible","miscite","miscited","miscites","misclaim","misclass","miscode","miscoded","miscodes","miscoin","miscoins","miscolor","miscook","miscooks","miscopy","miscount","miscue","miscued","miscues","miscuing","miscut","miscuts","misdate","misdated","misdates","misdeal","misdeals","misdealt","misdeed","misdeeds","misdeem","misdeems","misdial","misdials","misdid","misdo","misdoer","misdoers","misdoes","misdoing","misdone","misdoubt","misdraw","misdrawn","misdraws","misdrew","misdrive","misdrove","mise","misease","miseases","miseat","miseaten","miseats","misedit","misedits","misenrol","misenter","misentry","miser","miserere","miseries","miserly","misers","misery","mises","misevent","misfaith","misfield","misfile","misfiled","misfiles","misfire","misfired","misfires","misfit","misfits","misfocus","misform","misforms","misframe","misgauge","misgave","misgive","misgiven","misgives","misgrade","misgraft","misgrew","misgrow","misgrown","misgrows","misguess","misguide","mishap","mishaps","mishear","misheard","mishears","mishit","mishits","mishmash","mishmosh","misinfer","misinter","misjoin","misjoins","misjudge","miskal","miskals","miskeep","miskeeps","miskept","miskick","miskicks","misknew","misknow","misknown","misknows","mislabel","mislabor","mislaid","mislain","mislay","mislayer","mislays","mislead","misleads","mislearn","misled","mislie","mislies","mislight","mislike","misliked","misliker","mislikes","mislit","mislive","mislived","mislives","mislodge","mislying","mismade","mismake","mismakes","mismark","mismarks","mismatch","mismate","mismated","mismates","mismeet","mismeets","mismet","mismove","mismoved","mismoves","misname","misnamed","misnames","misnomer","miso","misogamy","misogyny","misology","misorder","misos","mispage","mispaged","mispages","mispaint","misparse","mispart","misparts","mispatch","mispen","mispens","misplace","misplan","misplans","misplant","misplay","misplays","misplead","mispled","mispoint","mispoise","misprice","misprint","misprize","misquote","misraise","misrate","misrated","misrates","misread","misreads","misrefer","misrely","misroute","misrule","misruled","misrules","miss","missaid","missal","missals","missay","missays","misseat","misseats","missed","missel","missels","missend","missends","missense","missent","misses","misset","missets","misshape","misshod","missies","missile","missiles","missilry","missing","mission","missions","missis","missises","missive","missives","missort","missorts","missound","missout","missouts","misspace","misspeak","misspell","misspelt","misspend","misspent","misspoke","misstart","misstate","missteer","misstep","missteps","misstop","misstops","misstyle","missuit","missuits","missus","missuses","missy","mist","mistake","mistaken","mistaker","mistakes","mistbow","mistbows","misteach","misted","mistend","mistends","mister","misterm","misterms","misters","misteuk","misthink","misthrew","misthrow","mistier","mistiest","mistily","mistime","mistimed","mistimes","misting","mistitle","mistook","mistouch","mistrace","mistrain","mistral","mistrals","mistreat","mistress","mistrial","mistrust","mistruth","mistryst","mists","mistune","mistuned","mistunes","mistutor","misty","mistype","mistyped","mistypes","misunion","misusage","misuse","misused","misuser","misusers","misuses","misusing","misvalue","misword","miswords","miswrit","miswrite","miswrote","misyoke","misyoked","misyokes","mite","miter","mitered","miterer","miterers","mitering","miters","mites","mither","mithers","miticide","mitier","mitiest","mitigate","mitis","mitises","mitogen","mitogens","mitoses","mitosis","mitotic","mitral","mitre","mitred","mitres","mitring","mitsvah","mitsvahs","mitsvoth","mitt","mitten","mittens","mittimus","mitts","mity","mitzvah","mitzvahs","mitzvoth","mix","mixable","mixed","mixer","mixers","mixes","mixible","mixing","mixology","mixt","mixture","mixtures","mixup","mixups","mizen","mizens","mizzen","mizzens","mizzle","mizzled","mizzles","mizzling","mizzly","mnemonic","moa","moan","moaned","moanful","moaning","moans","moas","moat","moated","moating","moatlike","moats","mob","mobbed","mobber","mobbers","mobbing","mobbish","mobcap","mobcaps","mobile","mobiles","mobilise","mobility","mobilize","mobocrat","mobs","mobster","mobsters","moccasin","mocha","mochas","mochila","mochilas","mock","mockable","mocked","mocker","mockers","mockery","mocking","mocks","mockup","mockups","mod","modal","modality","modally","mode","model","modeled","modeler","modelers","modeling","modelist","modelled","modeller","models","modem","modems","moderate","moderato","modern","moderne","moderner","modernly","moderns","modes","modest","modester","modestly","modesty","modi","modica","modicum","modicums","modified","modifier","modifies","modify","modioli","modiolus","modish","modishly","modiste","modistes","mods","modular","modulate","module","modules","moduli","modulo","modulus","modus","mofette","mofettes","moffette","mog","mogged","mogging","mogs","mogul","moguls","mohair","mohairs","mohalim","mohel","mohelim","mohels","mohur","mohurs","moidore","moidores","moieties","moiety","moil","moiled","moiler","moilers","moiling","moils","moira","moirai","moire","moires","moist","moisten","moistens","moister","moistest","moistful","moistly","moisture","mojarra","mojarras","mojo","mojoes","mojos","moke","mokes","mol","mola","molal","molality","molar","molarity","molars","molas","molasses","mold","moldable","molded","molder","moldered","molders","moldier","moldiest","molding","moldings","molds","moldwarp","moldy","mole","molecule","molehill","moles","moleskin","molest","molested","molester","molests","molies","moline","moll","mollah","mollahs","mollie","mollies","mollify","molls","mollusc","molluscs","mollusk","mollusks","molly","moloch","molochs","mols","molt","molted","molten","moltenly","molter","molters","molting","molto","molts","moly","molybdic","mom","mome","moment","momenta","momently","momento","momentos","moments","momentum","momes","momi","momism","momisms","momma","mommas","mommies","mommy","moms","momser","momsers","momus","momuses","momzer","momzers","mon","monachal","monacid","monacids","monad","monadal","monades","monadic","monadism","monads","monandry","monarch","monarchs","monarchy","monarda","monardas","monas","monastic","monaural","monaxial","monaxon","monaxons","monazite","monde","mondes","mondo","mondos","monecian","monellin","monetary","monetise","monetize","money","moneybag","moneyed","moneyer","moneyers","moneys","mongeese","monger","mongered","mongers","mongo","mongoe","mongoes","mongol","mongols","mongoose","mongos","mongrel","mongrels","mongst","monicker","monie","monied","monies","moniker","monikers","monish","monished","monishes","monism","monisms","monist","monistic","monists","monition","monitive","monitor","monitors","monitory","monk","monkery","monkey","monkeyed","monkeys","monkfish","monkhood","monkish","monks","mono","monoacid","monocarp","monocle","monocled","monocles","monocot","monocots","monocrat","monocyte","monodic","monodies","monodist","monody","monoecy","monofil","monofils","monofuel","monogamy","monogeny","monogerm","monoglot","monogram","monogyny","monolith","monolog","monologs","monology","monomer","monomers","monomial","monopode","monopody","monopole","monopoly","monorail","monos","monosome","monosomy","monotint","monotone","monotony","monotype","monoxide","mons","monsieur","monsoon","monsoons","monster","monstera","monsters","montage","montaged","montages","montane","montanes","monte","monteith","montero","monteros","montes","month","monthly","months","monument","monuron","monurons","mony","moo","mooch","mooched","moocher","moochers","mooches","mooching","mood","moodier","moodiest","moodily","moods","moody","mooed","mooing","mool","moola","moolah","moolahs","moolas","mooley","mooleys","mools","moon","moonbeam","moonbow","moonbows","mooncalf","mooned","mooneye","mooneyes","moonfish","moonier","mooniest","moonily","mooning","moonish","moonless","moonlet","moonlets","moonlike","moonlit","moonport","moonrise","moons","moonsail","moonseed","moonset","moonsets","moonshot","moonwalk","moonward","moonwort","moony","moor","moorage","moorages","moorcock","moored","moorfowl","moorhen","moorhens","moorier","mooriest","mooring","moorings","moorish","moorland","moors","moorwort","moory","moos","moose","moot","mooted","mooter","mooters","mooting","moots","mop","mopboard","mope","moped","mopeds","moper","moperies","mopers","mopery","mopes","mopey","mopier","mopiest","moping","mopingly","mopish","mopishly","mopoke","mopokes","mopped","mopper","moppers","moppet","moppets","mopping","mops","mopy","moquette","mor","mora","morae","morainal","moraine","moraines","morainic","moral","morale","morales","moralise","moralism","moralist","morality","moralize","morally","morals","moras","morass","morasses","morassy","moratory","moray","morays","morbid","morbidly","morbific","morbilli","morceau","morceaux","mordancy","mordant","mordants","mordent","mordents","more","moreen","moreens","morel","morelle","morelles","morello","morellos","morels","moreover","mores","moresque","morgen","morgens","morgue","morgues","moribund","morion","morions","morn","morning","mornings","morns","morocco","moroccos","moron","moronic","moronism","moronity","morons","morose","morosely","morosity","morph","morpheme","morphia","morphias","morphic","morphin","morphine","morphins","morpho","morphos","morphs","morrion","morrions","morris","morrises","morro","morros","morrow","morrows","mors","morse","morsel","morseled","morsels","mort","mortal","mortally","mortals","mortar","mortared","mortars","mortary","mortgage","mortice","morticed","mortices","mortify","mortise","mortised","mortiser","mortises","mortmain","morts","mortuary","morula","morulae","morular","morulas","mos","mosaic","mosaics","mosasaur","moschate","mosey","moseyed","moseying","moseys","moshav","moshavim","mosk","mosks","mosque","mosques","mosquito","moss","mossback","mossed","mosser","mossers","mosses","mossier","mossiest","mossing","mosslike","mosso","mossy","most","moste","mostest","mostests","mostly","mosts","mot","mote","motel","motels","motes","motet","motets","motey","moth","mothball","mother","mothered","motherly","mothers","mothery","mothier","mothiest","mothlike","moths","mothy","motif","motific","motifs","motile","motiles","motility","motion","motional","motioned","motioner","motions","motivate","motive","motived","motives","motivic","motiving","motivity","motley","motleyer","motleys","motlier","motliest","motmot","motmots","motor","motorbus","motorcar","motordom","motored","motoric","motoring","motorise","motorist","motorize","motorman","motormen","motors","motorway","mots","mott","motte","mottes","mottle","mottled","mottler","mottlers","mottles","mottling","motto","mottoes","mottos","motts","mouch","mouched","mouches","mouching","mouchoir","moue","moues","moufflon","mouflon","mouflons","mouille","moujik","moujiks","moulage","moulages","mould","moulded","moulder","moulders","mouldier","moulding","moulds","mouldy","moulin","moulins","moult","moulted","moulter","moulters","moulting","moults","mound","mounded","mounding","mounds","mount","mountain","mounted","mounter","mounters","mounting","mounts","mourn","mourned","mourner","mourners","mournful","mourning","mourns","mouse","moused","mouser","mousers","mouses","mousey","mousier","mousiest","mousily","mousing","mousings","moussaka","mousse","mousses","mousy","mouth","mouthed","mouther","mouthers","mouthful","mouthier","mouthily","mouthing","mouths","mouthy","mouton","moutons","movable","movables","movably","move","moveable","moveably","moved","moveless","movement","mover","movers","moves","movie","moviedom","movieola","movies","moving","movingly","moviola","moviolas","mow","mowed","mower","mowers","mowing","mowings","mown","mows","moxa","moxas","moxie","moxies","mozetta","mozettas","mozette","mozo","mozos","mozzetta","mozzette","mridanga","much","muchacho","muches","muchly","muchness","mucid","mucidity","mucilage","mucin","mucinoid","mucinous","mucins","muck","mucked","mucker","muckers","muckier","muckiest","muckily","mucking","muckle","muckles","muckluck","muckrake","mucks","muckworm","mucky","mucluc","muclucs","mucoid","mucoidal","mucoids","mucor","mucors","mucosa","mucosae","mucosal","mucosas","mucose","mucosity","mucous","mucro","mucrones","mucus","mucuses","mud","mudcap","mudcaps","mudcat","mudcats","mudded","mudder","mudders","muddied","muddier","muddies","muddiest","muddily","mudding","muddle","muddled","muddler","muddlers","muddles","muddling","muddly","muddy","muddying","mudfish","mudflow","mudflows","mudguard","mudhole","mudholes","mudlark","mudlarks","mudpack","mudpacks","mudpuppy","mudra","mudras","mudrock","mudrocks","mudroom","mudrooms","muds","mudsill","mudsills","mudslide","mudstone","mueddin","mueddins","muenster","muesli","mueslis","muezzin","muezzins","muff","muffed","muffin","muffing","muffins","muffle","muffled","muffler","mufflers","muffles","muffling","muffs","mufti","muftis","mug","mugful","mugfuls","mugg","muggar","muggars","mugged","muggee","muggees","mugger","muggers","muggier","muggiest","muggily","mugging","muggings","muggins","muggs","muggur","muggurs","muggy","mugs","mugwort","mugworts","mugwump","mugwumps","muhlies","muhly","mujik","mujiks","mukluk","mukluks","muktuk","muktuks","mulatto","mulattos","mulberry","mulch","mulched","mulches","mulching","mulct","mulcted","mulcting","mulcts","mule","muled","mules","muleta","muletas","muleteer","muley","muleys","muling","mulish","mulishly","mull","mulla","mullah","mullahs","mullas","mulled","mullein","mulleins","mullen","mullens","muller","mullers","mullet","mullets","mulley","mulleys","mulligan","mulling","mullion","mullions","mullite","mullites","mullock","mullocks","mullocky","mulls","multiage","multicar","multifid","multijet","multiped","multiple","multiply","multiton","multiuse","multure","multures","mum","mumble","mumbled","mumbler","mumblers","mumbles","mumbling","mumbly","mumm","mummed","mummer","mummers","mummery","mummied","mummies","mummify","mumming","mumms","mummy","mummying","mump","mumped","mumper","mumpers","mumping","mumps","mums","mumu","mumus","mun","munch","munched","muncher","munchers","munches","munchies","munching","munchkin","mundane","mundungo","mungo","mungoose","mungos","muniment","munition","munnion","munnions","muns","munster","munsters","muntin","munting","muntings","muntins","muntjac","muntjacs","muntjak","muntjaks","muon","muonic","muonium","muoniums","muons","mura","muraenid","mural","muralist","murals","muras","murder","murdered","murderee","murderer","murders","mure","mured","murein","mureins","mures","murex","murexes","muriate","muriated","muriates","muricate","murices","murid","murids","murine","murines","muring","murk","murker","murkest","murkier","murkiest","murkily","murkly","murks","murky","murmur","murmured","murmurer","murmurs","murphies","murphy","murr","murra","murrain","murrains","murras","murre","murrelet","murres","murrey","murreys","murrha","murrhas","murrhine","murries","murrine","murrs","murry","murther","murthers","mus","musca","muscadel","muscadet","muscae","muscat","muscatel","muscats","muscid","muscids","muscle","muscled","muscles","muscling","muscly","muscular","muse","mused","museful","muser","musers","muses","musette","musettes","museum","museums","mush","mushed","musher","mushers","mushes","mushier","mushiest","mushily","mushing","mushroom","mushy","music","musical","musicale","musicals","musician","musics","musing","musingly","musings","musjid","musjids","musk","muskeg","muskegs","musket","musketry","muskets","muskie","muskier","muskies","muskiest","muskily","muskit","muskits","muskrat","muskrats","musks","musky","muslin","muslins","muspike","muspikes","musquash","muss","mussed","mussel","mussels","musses","mussier","mussiest","mussily","mussing","mussy","must","mustache","mustang","mustangs","mustard","mustards","mustardy","musted","mustee","mustees","muster","mustered","musters","musth","musths","mustier","mustiest","mustily","musting","musts","musty","mut","mutable","mutably","mutagen","mutagens","mutant","mutants","mutase","mutases","mutate","mutated","mutates","mutating","mutation","mutative","mutch","mutches","mutchkin","mute","muted","mutedly","mutely","muteness","muter","mutes","mutest","muticous","mutilate","mutine","mutined","mutineer","mutines","muting","mutinied","mutinies","mutining","mutinous","mutiny","mutism","mutisms","muton","mutons","muts","mutt","mutter","muttered","mutterer","mutters","mutton","muttons","muttony","mutts","mutual","mutually","mutuel","mutuels","mutular","mutule","mutules","muumuu","muumuus","muzhik","muzhiks","muzjik","muzjiks","muzzier","muzziest","muzzily","muzzle","muzzled","muzzler","muzzlers","muzzles","muzzling","muzzy","myalgia","myalgias","myalgic","myases","myasis","mycele","myceles","mycelia","mycelial","mycelian","mycelium","myceloid","mycetoma","mycology","mycoses","mycosis","mycotic","myelin","myeline","myelines","myelinic","myelins","myelitis","myeloid","myeloma","myelomas","myiases","myiasis","mylonite","myna","mynah","mynahs","mynas","mynheer","mynheers","myoblast","myogenic","myograph","myoid","myologic","myology","myoma","myomas","myomata","myopathy","myope","myopes","myopia","myopias","myopic","myopies","myopy","myoscope","myoses","myosin","myosins","myosis","myositis","myosote","myosotes","myosotis","myotic","myotics","myotome","myotomes","myotonia","myotonic","myriad","myriads","myriapod","myrica","myricas","myriopod","myrmidon","myrrh","myrrhic","myrrhs","myrtle","myrtles","myself","mysid","mysids","mysost","mysosts","mystagog","mystery","mystic","mystical","mysticly","mystics","mystify","mystique","myth","mythic","mythical","mythoi","mythos","myths","myxedema","myxocyte","myxoid","myxoma","myxomas","myxomata","nab","nabbed","nabber","nabbers","nabbing","nabe","nabes","nabis","nabob","nabobery","nabobess","nabobish","nabobism","nabobs","nabs","nacelle","nacelles","nachas","naches","nacho","nachos","nacre","nacred","nacreous","nacres","nadir","nadiral","nadirs","nae","naething","naevi","naevoid","naevus","nag","nagana","naganas","nagged","nagger","naggers","naggier","naggiest","nagging","naggy","nags","nah","naiad","naiades","naiads","naif","naifs","nail","nailed","nailer","nailers","nailfold","nailhead","nailing","nails","nailset","nailsets","nainsook","naira","naive","naively","naiver","naives","naivest","naivete","naivetes","naivety","naked","nakeder","nakedest","nakedly","naled","naleds","naloxone","nam","namable","name","nameable","named","nameless","namely","namer","namers","names","namesake","nametag","nametags","naming","nana","nanas","nance","nances","nancies","nancy","nandin","nandins","nanism","nanisms","nankeen","nankeens","nankin","nankins","nannie","nannies","nanny","nanogram","nanowatt","naoi","naos","nap","napalm","napalmed","napalms","nape","naperies","napery","napes","naphtha","naphthas","naphthol","naphthyl","naphtol","naphtols","napiform","napkin","napkins","napless","napoleon","nappe","napped","napper","nappers","nappes","nappie","nappier","nappies","nappiest","napping","nappy","naps","narc","narcein","narceine","narceins","narcism","narcisms","narcissi","narcist","narcists","narco","narcos","narcose","narcoses","narcosis","narcotic","narcs","nard","nardine","nards","nares","narghile","nargile","nargileh","nargiles","narial","naric","narine","naris","nark","narked","narking","narks","narky","narrate","narrated","narrater","narrates","narrator","narrow","narrowed","narrower","narrowly","narrows","narthex","narwal","narwals","narwhal","narwhale","narwhals","nary","nasal","nasalise","nasality","nasalize","nasally","nasals","nascence","nascency","nascent","nasial","nasion","nasions","nastic","nastier","nasties","nastiest","nastily","nasty","natal","natality","natant","natantly","natation","natatory","natch","nates","nathless","nation","national","nations","native","natively","natives","nativism","nativist","nativity","natrium","natriums","natron","natrons","natter","nattered","natters","nattier","nattiest","nattily","natty","natural","naturals","nature","natured","natures","naturism","naturist","naught","naughts","naughty","naumachy","nauplial","nauplii","nauplius","nausea","nauseant","nauseas","nauseate","nauseous","nautch","nautches","nautical","nautili","nautilus","navaid","navaids","naval","navally","navar","navars","nave","navel","navels","naves","navette","navettes","navicert","navies","navigate","navvies","navvy","navy","naw","nawab","nawabs","nay","nays","naysayer","nazi","nazified","nazifies","nazify","nazis","neap","neaps","near","nearby","neared","nearer","nearest","nearing","nearlier","nearly","nearness","nears","neat","neaten","neatened","neatens","neater","neatest","neath","neatherd","neatly","neatness","neats","neb","nebbish","nebs","nebula","nebulae","nebular","nebulas","nebule","nebulise","nebulize","nebulose","nebulous","nebuly","neck","neckband","necked","necker","neckers","necking","neckings","necklace","neckless","necklike","neckline","necks","necktie","neckties","neckwear","necropsy","necrose","necrosed","necroses","necrosis","necrotic","nectar","nectars","nectary","nee","need","needed","needer","needers","needful","needfuls","needier","neediest","needily","needing","needle","needled","needler","needlers","needles","needless","needling","needs","needy","neem","neems","neep","neeps","negate","negated","negater","negaters","negates","negating","negation","negative","negaton","negatons","negator","negators","negatron","neglect","neglects","neglige","negligee","negliges","negroid","negroids","negroni","negronis","negus","neguses","neif","neifs","neigh","neighbor","neighed","neighing","neighs","neist","neither","nekton","nektonic","nektons","nellie","nellies","nelly","nelson","nelsons","nelumbo","nelumbos","nema","nemas","nematic","nematode","nemeses","nemesis","nene","neolith","neoliths","neologic","neology","neomorph","neomycin","neon","neonatal","neonate","neonates","neoned","neons","neophyte","neoplasm","neoprene","neotenic","neoteny","neoteric","neotype","neotypes","nepenthe","nephew","nephews","nephric","nephrism","nephrite","nephron","nephrons","nepotic","nepotism","nepotist","nerd","nerds","nerdy","nereid","nereides","nereids","nereis","neritic","nerol","neroli","nerolis","nerols","nerts","nertz","nervate","nerve","nerved","nerves","nervier","nerviest","nervily","nervine","nervines","nerving","nervings","nervous","nervule","nervules","nervure","nervures","nervy","nescient","ness","nesses","nest","nestable","nested","nester","nesters","nesting","nestle","nestled","nestler","nestlers","nestles","nestlike","nestling","nestor","nestors","nests","net","nether","netless","netlike","netop","netops","nets","netsuke","netsukes","nett","nettable","netted","netter","netters","nettier","nettiest","netting","nettings","nettle","nettled","nettler","nettlers","nettles","nettlier","nettling","nettly","netts","netty","network","networks","neuk","neuks","neum","neumatic","neume","neumes","neumic","neums","neural","neurally","neuraxon","neurine","neurines","neuritic","neuritis","neuroid","neuroma","neuromas","neuron","neuronal","neurone","neurones","neuronic","neurons","neurosal","neuroses","neurosis","neurotic","neurula","neurulae","neurulas","neuston","neustons","neuter","neutered","neuters","neutral","neutrals","neutrino","neutron","neutrons","neve","never","neves","nevi","nevoid","nevus","new","newborn","newborns","newcomer","newel","newels","newer","newest","newfound","newie","newies","newish","newly","newlywed","newmown","newness","news","newsboy","newsboys","newscast","newshawk","newsie","newsier","newsies","newsiest","newsless","newsman","newsmen","newspeak","newsreel","newsroom","newsy","newt","newton","newtons","newts","next","nextdoor","nexus","nexuses","ngultrum","ngwee","niacin","niacins","nib","nibbed","nibbing","nibble","nibbled","nibbler","nibblers","nibbles","nibbling","niblick","niblicks","niblike","nibs","nicad","nicads","nice","nicely","niceness","nicer","nicest","niceties","nicety","niche","niched","niches","niching","nick","nicked","nickel","nickeled","nickelic","nickels","nicker","nickered","nickers","nicking","nickle","nickled","nickles","nickling","nicknack","nickname","nicks","nicol","nicols","nicotin","nicotine","nicotins","nictate","nictated","nictates","nidal","nide","nided","nidering","nides","nidget","nidgets","nidi","nidified","nidifies","nidify","niding","nidus","niduses","niece","nieces","nielli","niellist","niello","nielloed","niellos","nieve","nieves","niffer","niffered","niffers","niftier","nifties","niftiest","niftily","nifty","niggard","niggards","nigger","niggers","niggle","niggled","niggler","nigglers","niggles","niggling","nigh","nighed","nigher","nighest","nighing","nighness","nighs","night","nightcap","nightie","nighties","nightjar","nightly","nights","nighty","nigrify","nigrosin","nihil","nihilism","nihilist","nihility","nihils","nil","nilgai","nilgais","nilgau","nilgaus","nilghai","nilghais","nilghau","nilghaus","nill","nilled","nilling","nills","nils","nim","nimbi","nimble","nimbler","nimblest","nimbly","nimbus","nimbused","nimbuses","nimiety","nimious","nimmed","nimming","nimrod","nimrods","nims","nine","ninebark","ninefold","ninepin","ninepins","nines","nineteen","nineties","ninety","ninja","ninjas","ninnies","ninny","ninnyish","ninon","ninons","ninth","ninthly","ninths","niobic","niobium","niobiums","niobous","nip","nipa","nipas","nipped","nipper","nippers","nippier","nippiest","nippily","nipping","nipple","nipples","nippy","nips","nirvana","nirvanas","nirvanic","nisei","niseis","nisi","nisus","nit","nitchie","nitchies","niter","niteries","niters","nitery","nitid","nitinol","nitinols","niton","nitons","nitpick","nitpicks","nitrate","nitrated","nitrates","nitrator","nitre","nitres","nitric","nitrid","nitride","nitrided","nitrides","nitrids","nitrify","nitril","nitrile","nitriles","nitrils","nitrite","nitrites","nitro","nitrogen","nitrolic","nitros","nitroso","nitrosyl","nitrous","nits","nittier","nittiest","nitty","nitwit","nitwits","nival","niveous","nix","nixe","nixed","nixes","nixie","nixies","nixing","nixy","nizam","nizamate","nizams","nob","nobbier","nobbiest","nobbily","nobble","nobbled","nobbler","nobblers","nobbles","nobbling","nobby","nobelium","nobility","noble","nobleman","noblemen","nobler","nobles","noblesse","noblest","nobly","nobodies","nobody","nobs","nocent","nock","nocked","nocking","nocks","noctuid","noctuids","noctule","noctules","noctuoid","nocturn","nocturne","nocturns","nocuous","nod","nodal","nodality","nodally","nodded","nodder","nodders","noddies","nodding","noddle","noddled","noddles","noddling","noddy","node","nodes","nodi","nodical","nodose","nodosity","nodous","nods","nodular","nodule","nodules","nodulose","nodulous","nodus","noel","noels","noes","noesis","noesises","noetic","nog","nogg","nogged","noggin","nogging","noggings","noggins","noggs","nogs","noh","nohow","noil","noils","noily","noise","noised","noises","noisette","noisier","noisiest","noisily","noising","noisome","noisy","nolo","nolos","nom","noma","nomad","nomadic","nomadism","nomads","nomarch","nomarchs","nomarchy","nomas","nombles","nombril","nombrils","nome","nomen","nomes","nomina","nominal","nominals","nominate","nominee","nominees","nomism","nomisms","nomistic","nomogram","nomoi","nomology","nomos","noms","nona","nonacid","nonacids","nonactor","nonadult","nonage","nonages","nonagon","nonagons","nonart","nonarts","nonas","nonbank","nonbasic","nonbeing","nonblack","nonbody","nonbook","nonbooks","nonbrand","noncash","nonce","nonces","nonclass","noncling","noncolor","noncom","noncoms","noncrime","nondairy","nondance","nondrug","none","nonego","nonegos","nonelect","nonelite","nonempty","nonentry","nonequal","nones","nonesuch","nonet","nonets","nonevent","nonfact","nonfacts","nonfan","nonfans","nonfarm","nonfat","nonfatal","nonfatty","nonfinal","nonfluid","nonfocal","nonfood","nonfuel","nongame","nongay","nongays","nonglare","nongreen","nonguilt","nonhardy","nonheme","nonhero","nonhome","nonhuman","nonideal","nonimage","nonionic","noniron","nonissue","nonjuror","nonjury","nonleafy","nonlegal","nonlife","nonlives","nonlocal","nonmajor","nonman","nonmeat","nonmen","nonmetal","nonmodal","nonmoney","nonmoral","nonmusic","nonnaval","nonnews","nonnovel","nonobese","nonohmic","nonowner","nonpagan","nonpapal","nonpar","nonparty","nonpast","nonpasts","nonpeak","nonplay","nonplays","nonplus","nonpolar","nonpoor","nonprint","nonpros","nonquota","nonrated","nonrigid","nonrival","nonroyal","nonrural","nonself","nonsense","nonsked","nonskeds","nonskid","nonskier","nonslip","nonsolar","nonsolid","nonstick","nonstop","nonstory","nonsuch","nonsugar","nonsuit","nonsuits","nontax","nontaxes","nontidal","nontitle","nontonal","nontoxic","nontrump","nontruth","nonunion","nonuple","nonuples","nonurban","nonuse","nonuser","nonusers","nonuses","nonusing","nonvalid","nonviral","nonvocal","nonvoter","nonwhite","nonwoody","nonword","nonwords","nonwoven","nonyl","nonyls","nonzero","noo","noodge","noodged","noodges","noodging","noodle","noodled","noodles","noodling","nook","nookies","nooklike","nooks","nooky","noon","noonday","noondays","nooning","noonings","noons","noontide","noontime","noose","noosed","nooser","noosers","nooses","noosing","nopal","nopals","nope","nor","nordic","noria","norias","norite","norites","noritic","norland","norlands","norm","normal","normalcy","normally","normals","normed","normless","norms","north","norther","northern","northers","northing","norths","nos","nose","nosebag","nosebags","noseband","nosed","nosedive","nosegay","nosegays","noseless","noselike","noses","nosey","nosh","noshed","nosher","noshers","noshes","noshing","nosier","nosiest","nosily","nosiness","nosing","nosings","nosology","nostoc","nostocs","nostril","nostrils","nostrum","nostrums","nosy","not","nota","notable","notables","notably","notal","notarial","notaries","notarize","notary","notate","notated","notates","notating","notation","notch","notched","notcher","notchers","notches","notching","note","notebook","notecase","noted","notedly","noteless","notepad","notepads","noter","noters","notes","nother","nothing","nothings","notice","noticed","notices","noticing","notified","notifier","notifies","notify","noting","notion","notional","notions","notornis","notturni","notturno","notum","nougat","nougats","nought","noughts","noumena","noumenal","noumenon","noun","nounal","nounally","nounless","nouns","nourish","nous","nouses","nouveau","nova","novae","novalike","novas","novation","novel","novelise","novelist","novelize","novella","novellas","novelle","novelly","novels","novelty","novena","novenae","novenas","novercal","novice","novices","now","nowadays","noway","noways","nowhere","nowheres","nowise","nowness","nows","nowt","nowts","noxious","noyade","noyades","nozzle","nozzles","nth","nuance","nuanced","nuances","nub","nubbier","nubbiest","nubbin","nubbins","nubble","nubbles","nubblier","nubbly","nubby","nubia","nubias","nubile","nubility","nubilose","nubilous","nubs","nucellar","nucelli","nucellus","nucha","nuchae","nuchal","nuchals","nucleal","nuclear","nuclease","nucleate","nuclei","nuclein","nucleins","nucleoid","nucleole","nucleoli","nucleon","nucleons","nucleus","nuclide","nuclides","nuclidic","nude","nudely","nudeness","nuder","nudes","nudest","nudge","nudged","nudger","nudgers","nudges","nudging","nudicaul","nudie","nudies","nudism","nudisms","nudist","nudists","nudities","nudity","nudnick","nudnicks","nudnik","nudniks","nudzh","nudzhed","nudzhes","nudzhing","nugatory","nugget","nuggets","nuggety","nuisance","nuke","nuked","nukes","nuking","null","nullah","nullahs","nulled","nullify","nulling","nullity","nulls","numb","numbat","numbats","numbed","number","numbered","numberer","numbers","numbest","numbfish","numbing","numbles","numbly","numbness","numbs","numen","numeracy","numeral","numerals","numerary","numerate","numeric","numerics","numerous","numina","numinous","nummary","nummular","numskull","nun","nunatak","nunataks","nunchaku","nuncio","nuncios","nuncle","nuncles","nunlike","nunnery","nunnish","nuns","nuptial","nuptials","nurd","nurds","nurl","nurled","nurling","nurls","nurse","nursed","nurser","nursers","nursery","nurses","nursing","nursings","nursling","nurtural","nurture","nurtured","nurturer","nurtures","nus","nut","nutant","nutate","nutated","nutates","nutating","nutation","nutbrown","nutgall","nutgalls","nutgrass","nuthatch","nuthouse","nutlet","nutlets","nutlike","nutmeat","nutmeats","nutmeg","nutmegs","nutpick","nutpicks","nutria","nutrias","nutrient","nuts","nutsedge","nutshell","nutsier","nutsiest","nutsy","nutted","nutter","nutters","nuttier","nuttiest","nuttily","nutting","nuttings","nutty","nutwood","nutwoods","nuzzle","nuzzled","nuzzler","nuzzlers","nuzzles","nuzzling","nyala","nyalas","nylghai","nylghais","nylghau","nylghaus","nylon","nylons","nymph","nympha","nymphae","nymphal","nymphean","nymphet","nymphets","nympho","nymphos","nymphs","nystatin","oaf","oafish","oafishly","oafs","oak","oaken","oaklike","oakmoss","oaks","oakum","oakums","oar","oared","oarfish","oaring","oarless","oarlike","oarlock","oarlocks","oars","oarsman","oarsmen","oases","oasis","oast","oasts","oat","oatcake","oatcakes","oaten","oater","oaters","oath","oaths","oatlike","oatmeal","oatmeals","oats","oaves","obconic","obduracy","obdurate","obe","obeah","obeahism","obeahs","obedient","obeisant","obeli","obelia","obelias","obelise","obelised","obelises","obelisk","obelisks","obelism","obelisms","obelize","obelized","obelizes","obelus","obes","obese","obesely","obesity","obey","obeyable","obeyed","obeyer","obeyers","obeying","obeys","obi","obia","obias","obiism","obiisms","obis","obit","obits","obituary","object","objected","objector","objects","oblast","oblasti","oblasts","oblate","oblately","oblates","oblation","oblatory","obligate","obligati","obligato","oblige","obliged","obligee","obligees","obliger","obligers","obliges","obliging","obligor","obligors","oblique","obliqued","obliques","oblivion","oblong","oblongly","oblongs","obloquy","oboe","oboes","oboist","oboists","obol","obole","oboles","oboli","obols","obolus","obovate","obovoid","obscene","obscener","obscure","obscured","obscurer","obscures","obsequy","observe","observed","observer","observes","obsess","obsessed","obsesses","obsessor","obsidian","obsolete","obstacle","obstruct","obtain","obtained","obtainer","obtains","obtect","obtected","obtest","obtested","obtests","obtrude","obtruded","obtruder","obtrudes","obtund","obtunded","obtunds","obturate","obtuse","obtusely","obtuser","obtusest","obtusity","obverse","obverses","obvert","obverted","obverts","obviable","obviate","obviated","obviates","obviator","obvious","obvolute","oca","ocarina","ocarinas","ocas","occasion","occident","occipita","occiput","occiputs","occlude","occluded","occludes","occlusal","occult","occulted","occulter","occultly","occults","occupant","occupied","occupier","occupies","occupy","occur","occurred","occurs","ocean","oceanaut","oceanic","oceans","ocellar","ocellate","ocelli","ocellus","oceloid","ocelot","ocelots","ocher","ochered","ochering","ocherous","ochers","ochery","ochone","ochre","ochrea","ochreae","ochred","ochreous","ochres","ochring","ochroid","ochrous","ochry","ocker","ockers","ocotillo","ocrea","ocreae","ocreate","octad","octadic","octads","octagon","octagons","octal","octan","octane","octanes","octangle","octanol","octanols","octans","octant","octantal","octants","octarchy","octaval","octave","octaves","octavo","octavos","octet","octets","octette","octettes","octonary","octopi","octopod","octopods","octopus","octoroon","octroi","octrois","octuple","octupled","octuples","octuplet","octuplex","octuply","octyl","octyls","ocular","ocularly","oculars","oculist","oculists","odalisk","odalisks","odd","oddball","oddballs","odder","oddest","oddish","oddities","oddity","oddly","oddment","oddments","oddness","odds","ode","odea","odeon","odeons","odes","odeum","odeums","odic","odious","odiously","odist","odists","odium","odiums","odograph","odometer","odometry","odonate","odonates","odontoid","odor","odorant","odorants","odored","odorful","odorize","odorized","odorizes","odorless","odorous","odors","odour","odourful","odours","ods","odyl","odyle","odyles","odyls","odyssey","odysseys","oecology","oedema","oedemas","oedemata","oedipal","oedipean","oeillade","oenology","oenomel","oenomels","oersted","oersteds","oes","oestrin","oestrins","oestriol","oestrone","oestrous","oestrum","oestrums","oestrus","oeuvre","oeuvres","ofay","ofays","off","offal","offals","offbeat","offbeats","offcast","offcasts","offed","offence","offences","offend","offended","offender","offends","offense","offenses","offer","offered","offerer","offerers","offering","offeror","offerors","offers","offhand","office","officer","officers","offices","official","offing","offings","offish","offishly","offkey","offload","offloads","offprint","offramp","offramps","offs","offset","offsets","offshoot","offshore","offside","offsides","offstage","offtrack","oft","often","oftener","oftenest","ofter","oftest","ofttimes","ogam","ogams","ogdoad","ogdoads","ogee","ogees","ogham","oghamic","oghamist","oghams","ogival","ogive","ogives","ogle","ogled","ogler","oglers","ogles","ogling","ogre","ogreish","ogreism","ogreisms","ogres","ogress","ogresses","ogrish","ogrishly","ogrism","ogrisms","ohed","ohia","ohias","ohing","ohm","ohmage","ohmages","ohmic","ohmmeter","ohms","oho","ohs","oidia","oidium","oil","oilbird","oilbirds","oilcamp","oilcamps","oilcan","oilcans","oilcloth","oilcup","oilcups","oiled","oiler","oilers","oilhole","oilholes","oilier","oiliest","oilily","oiliness","oiling","oilman","oilmen","oilpaper","oilproof","oils","oilseed","oilseeds","oilskin","oilskins","oilstone","oiltight","oilway","oilways","oily","oink","oinked","oinking","oinks","oinology","oinomel","oinomels","ointment","oiticica","oka","okapi","okapis","okas","okay","okayed","okaying","okays","oke","okeh","okehs","okes","okeydoke","okra","okras","old","olden","older","oldest","oldie","oldies","oldish","oldness","olds","oldsquaw","oldster","oldsters","oldstyle","oldwife","oldwives","oldy","ole","olea","oleander","oleaster","oleate","oleates","olefin","olefine","olefines","olefinic","olefins","oleic","olein","oleine","oleines","oleins","oleo","oleos","oles","oleum","oleums","olibanum","oligarch","oligomer","oliguria","olio","olios","olivary","olive","olives","olivine","olivines","olivinic","olla","ollas","ologies","ologist","ologists","ology","oloroso","olorosos","olympiad","omasa","omasum","omber","ombers","ombre","ombres","omega","omegas","omelet","omelets","omelette","omen","omened","omening","omens","omenta","omental","omentum","omentums","omer","omers","omicron","omicrons","omikron","omikrons","ominous","omission","omissive","omit","omits","omitted","omitter","omitters","omitting","omniarch","omnibus","omnific","omniform","omnimode","omnivora","omnivore","omophagy","omphali","omphalos","oms","onager","onagers","onagri","onanism","onanisms","onanist","onanists","onboard","once","oncidium","oncogene","oncology","oncoming","ondogram","one","onefold","oneiric","oneness","onerier","oneriest","onerous","onery","ones","oneself","onetime","ongoing","onion","onions","onium","onlooker","only","onrush","onrushes","ons","onset","onsets","onshore","onside","onstage","ontic","onto","ontogeny","ontology","onus","onuses","onward","onwards","onyx","onyxes","oocyst","oocysts","oocyte","oocytes","oodles","oodlins","oogamete","oogamies","oogamous","oogamy","oogenies","oogeny","oogonia","oogonial","oogonium","ooh","oohed","oohing","oohs","oolachan","oolite","oolites","oolith","ooliths","oolitic","oologic","oologies","oologist","oology","oolong","oolongs","oomiac","oomiack","oomiacks","oomiacs","oomiak","oomiaks","oompah","oompahed","oompahs","oomph","oomphs","oophyte","oophytes","oophytic","oops","oorali","ooralis","oorie","oosperm","oosperms","oosphere","oospore","oospores","oosporic","oot","ootheca","oothecae","oothecal","ootid","ootids","oots","ooze","oozed","oozes","oozier","ooziest","oozily","ooziness","oozing","oozy","opacify","opacity","opah","opahs","opal","opalesce","opaline","opalines","opals","opaque","opaqued","opaquely","opaquer","opaques","opaquest","opaquing","ope","oped","open","openable","opened","opener","openers","openest","opening","openings","openly","openness","opens","openwork","opera","operable","operably","operand","operands","operant","operants","operas","operate","operated","operates","operatic","operator","opercele","opercula","opercule","operetta","operon","operons","operose","opes","ophidian","ophite","ophites","ophitic","opiate","opiated","opiates","opiating","opine","opined","opines","oping","opining","opinion","opinions","opioid","opioids","opium","opiumism","opiums","opossum","opossums","oppidan","oppidans","oppilant","oppilate","opponent","oppose","opposed","opposer","opposers","opposes","opposing","opposite","oppress","oppugn","oppugned","oppugner","oppugns","ops","opsin","opsins","opsonic","opsonify","opsonin","opsonins","opsonize","opt","optative","opted","optic","optical","optician","opticist","optics","optima","optimal","optime","optimes","optimise","optimism","optimist","optimize","optimum","optimums","opting","option","optional","optioned","optionee","options","opts","opulence","opulency","opulent","opuntia","opuntias","opus","opuscula","opuscule","opuses","oquassa","oquassas","ora","orach","orache","oraches","oracle","oracles","oracular","orad","oral","oralism","oralisms","oralist","oralists","orality","orally","orals","orang","orange","orangery","oranges","orangey","orangier","orangish","orangs","orangy","orate","orated","orates","orating","oration","orations","orator","oratorio","orators","oratory","oratress","oratrix","orb","orbed","orbier","orbiest","orbing","orbit","orbital","orbitals","orbited","orbiter","orbiters","orbiting","orbits","orbs","orby","orc","orca","orcas","orcein","orceins","orchard","orchards","orchid","orchids","orchil","orchils","orchis","orchises","orchitic","orchitis","orcin","orcinol","orcinols","orcins","orcs","ordain","ordained","ordainer","ordains","ordeal","ordeals","order","ordered","orderer","orderers","ordering","orderly","orders","ordinal","ordinals","ordinand","ordinary","ordinate","ordines","ordnance","ordo","ordos","ordure","ordures","ore","oread","oreads","orectic","orective","oregano","oreganos","oreide","oreides","ores","orfray","orfrays","organ","organa","organdie","organdy","organic","organics","organise","organism","organist","organize","organon","organons","organs","organum","organums","organza","organzas","orgasm","orgasmic","orgasms","orgastic","orgeat","orgeats","orgiac","orgic","orgies","orgone","orgones","orgulous","orgy","oribatid","oribi","oribis","oriel","oriels","orient","oriental","oriented","orients","orifice","orifices","origami","origamis","origan","origans","origanum","origin","original","origins","orinasal","oriole","orioles","orison","orisons","orle","orles","orlop","orlops","ormer","ormers","ormolu","ormolus","ornament","ornate","ornately","ornerier","ornery","ornis","ornithes","ornithic","orogenic","orogeny","oroide","oroides","orology","orometer","orotund","orphan","orphaned","orphans","orphic","orphical","orphrey","orphreys","orpiment","orpin","orpine","orpines","orpins","orra","orreries","orrery","orrice","orrices","orris","orrises","ors","ort","orthicon","ortho","orthodox","orthoepy","orthotic","ortolan","ortolans","orts","oryx","oryxes","orzo","orzos","osar","oscine","oscines","oscinine","oscitant","oscula","osculant","oscular","osculate","oscule","oscules","osculum","ose","oses","osier","osiers","osmatic","osmic","osmics","osmious","osmium","osmiums","osmol","osmolal","osmolar","osmols","osmose","osmosed","osmoses","osmosing","osmosis","osmotic","osmous","osmund","osmunda","osmundas","osmunds","osnaburg","osprey","ospreys","ossa","ossein","osseins","osseous","ossia","ossicle","ossicles","ossific","ossified","ossifier","ossifies","ossify","ossuary","osteal","osteitic","osteitis","osteoid","osteoids","osteoma","osteomas","osteoses","osteosis","ostia","ostiary","ostinato","ostiolar","ostiole","ostioles","ostium","ostler","ostlers","ostmark","ostmarks","ostomies","ostomy","ostoses","ostosis","ostraca","ostracod","ostracon","ostrich","otalgia","otalgias","otalgic","otalgies","otalgy","other","others","otic","otiose","otiosely","otiosity","otitic","otitides","otitis","otocyst","otocysts","otolith","otoliths","otology","otoscope","otoscopy","ototoxic","ottar","ottars","ottava","ottavas","otter","otters","otto","ottoman","ottomans","ottos","ouabain","ouabains","ouch","ouched","ouches","ouching","oud","ouds","ought","oughted","oughting","oughts","ouguiya","ouistiti","ounce","ounces","ouph","ouphe","ouphes","ouphs","our","ourang","ourangs","ourari","ouraris","ourebi","ourebis","ourie","ours","ourself","ousel","ousels","oust","ousted","ouster","ousters","ousting","ousts","out","outact","outacted","outacts","outadd","outadded","outadds","outage","outages","outargue","outask","outasked","outasks","outate","outback","outbacks","outbake","outbaked","outbakes","outbark","outbarks","outbawl","outbawls","outbeam","outbeams","outbeg","outbegs","outbid","outbids","outbitch","outblaze","outbleat","outbless","outbloom","outbluff","outblush","outboard","outboast","outbound","outbox","outboxed","outboxes","outbrag","outbrags","outbrave","outbrawl","outbreak","outbred","outbreed","outbribe","outbuild","outbuilt","outbulk","outbulks","outbully","outburn","outburns","outburnt","outburst","outby","outbye","outcaper","outcast","outcaste","outcasts","outcatch","outcavil","outcharm","outcheat","outchid","outchide","outclass","outclimb","outclomb","outcoach","outcome","outcomes","outcook","outcooks","outcount","outcrawl","outcried","outcries","outcrop","outcrops","outcross","outcrow","outcrows","outcry","outcurse","outcurve","outdance","outdare","outdared","outdares","outdate","outdated","outdates","outdid","outdo","outdodge","outdoer","outdoers","outdoes","outdoing","outdone","outdoor","outdoors","outdrag","outdrags","outdrank","outdraw","outdrawn","outdraws","outdream","outdress","outdrew","outdrink","outdrive","outdrop","outdrops","outdrove","outdrunk","outduel","outduels","outearn","outearns","outeat","outeaten","outeats","outecho","outed","outer","outers","outfable","outface","outfaced","outfaces","outfall","outfalls","outfast","outfasts","outfawn","outfawns","outfeast","outfeel","outfeels","outfelt","outfield","outfight","outfind","outfinds","outfire","outfired","outfires","outfish","outfit","outfits","outflank","outflew","outflies","outflow","outflown","outflows","outfly","outfool","outfools","outfoot","outfoots","outfound","outfox","outfoxed","outfoxes","outfrown","outgain","outgains","outgas","outgave","outgive","outgiven","outgives","outglare","outglow","outglows","outgnaw","outgnawn","outgnaws","outgo","outgoes","outgoing","outgone","outgrew","outgrin","outgrins","outgross","outgroup","outgrow","outgrown","outgrows","outguess","outguide","outgun","outguns","outgush","outhaul","outhauls","outhear","outheard","outhears","outhit","outhits","outhomer","outhouse","outhowl","outhowls","outhumor","outhunt","outhunts","outing","outings","outjinx","outjump","outjumps","outjut","outjuts","outkeep","outkeeps","outkept","outkick","outkicks","outkill","outkills","outkiss","outlaid","outlain","outland","outlands","outlast","outlasts","outlaugh","outlaw","outlawed","outlawry","outlaws","outlay","outlays","outleap","outleaps","outleapt","outlearn","outlet","outlets","outlie","outlier","outliers","outlies","outline","outlined","outliner","outlines","outlive","outlived","outliver","outlives","outlook","outlooks","outlove","outloved","outloves","outlying","outman","outmans","outmarch","outmatch","outmode","outmoded","outmodes","outmost","outmove","outmoved","outmoves","outpace","outpaced","outpaces","outpaint","outpass","outpitch","outpity","outplan","outplans","outplay","outplays","outplod","outplods","outplot","outplots","outpoint","outpoll","outpolls","outport","outports","outpost","outposts","outpour","outpours","outpray","outprays","outpreen","outpress","outprice","outpull","outpulls","outpunch","outpush","output","outputs","outquote","outrace","outraced","outraces","outrage","outraged","outrages","outraise","outran","outrance","outrang","outrange","outrank","outranks","outrate","outrated","outrates","outrave","outraved","outraves","outre","outreach","outread","outreads","outride","outrider","outrides","outright","outring","outrings","outrival","outroar","outroars","outrock","outrocks","outrode","outroll","outrolls","outroot","outroots","outrow","outrowed","outrows","outrun","outrung","outruns","outrush","outs","outsail","outsails","outsang","outsat","outsavor","outsaw","outscold","outscoop","outscore","outscorn","outsee","outseen","outsees","outsell","outsells","outsert","outserts","outserve","outset","outsets","outshame","outshine","outshone","outshoot","outshot","outshout","outside","outsider","outsides","outsight","outsin","outsing","outsings","outsins","outsit","outsits","outsize","outsized","outsizes","outskate","outskirt","outsleep","outslept","outsmart","outsmile","outsmoke","outsnore","outsoar","outsoars","outsold","outsole","outsoles","outspan","outspans","outspeak","outsped","outspeed","outspell","outspelt","outspend","outspent","outspoke","outstand","outstare","outstart","outstate","outstay","outstays","outsteer","outstood","outstrip","outstudy","outstunt","outsulk","outsulks","outsung","outswam","outsware","outswear","outswim","outswims","outswore","outsworn","outswum","outtake","outtakes","outtalk","outtalks","outtask","outtasks","outtell","outtells","outthank","outthink","outthrew","outthrob","outthrow","outtold","outtower","outtrade","outtrick","outtrot","outtrots","outtrump","outturn","outturns","outvalue","outvaunt","outvie","outvied","outvies","outvoice","outvote","outvoted","outvotes","outvying","outwait","outwaits","outwalk","outwalks","outwar","outward","outwards","outwars","outwash","outwaste","outwatch","outwear","outwears","outweary","outweep","outweeps","outweigh","outwent","outwept","outwhirl","outwile","outwiled","outwiles","outwill","outwills","outwind","outwinds","outwish","outwit","outwits","outwore","outwork","outworks","outworn","outwrit","outwrite","outwrote","outyell","outyells","outyelp","outyelps","outyield","ouzel","ouzels","ouzo","ouzos","ova","oval","ovality","ovally","ovalness","ovals","ovarial","ovarian","ovaries","ovariole","ovaritis","ovary","ovate","ovately","ovation","ovations","oven","ovenbird","ovenlike","ovens","ovenware","over","overable","overact","overacts","overage","overages","overall","overalls","overapt","overarch","overarm","overate","overawe","overawed","overawes","overbake","overbear","overbeat","overbed","overbet","overbets","overbid","overbids","overbig","overbill","overbite","overblew","overblow","overboil","overbold","overbook","overbore","overborn","overbred","overburn","overbusy","overbuy","overbuys","overcall","overcame","overcast","overcoat","overcold","overcome","overcook","overcool","overcoy","overcram","overcrop","overcure","overdare","overdear","overdeck","overdid","overdo","overdoer","overdoes","overdone","overdose","overdraw","overdrew","overdry","overdub","overdubs","overdue","overdye","overdyed","overdyes","overeasy","overeat","overeats","overed","overedit","overfar","overfast","overfat","overfear","overfed","overfeed","overfill","overfish","overflew","overflow","overfly","overfond","overfoul","overfree","overfull","overfund","overgild","overgilt","overgird","overgirt","overglad","overgoad","overgrew","overgrow","overhand","overhang","overhard","overhate","overhaul","overhead","overheap","overhear","overheat","overheld","overhigh","overhold","overholy","overhope","overhot","overhung","overhunt","overhype","overidle","overing","overjoy","overjoys","overjust","overkeen","overkill","overkind","overlade","overlaid","overlain","overland","overlap","overlaps","overlate","overlax","overlay","overlays","overleaf","overleap","overlend","overlent","overlet","overlets","overlewd","overlie","overlies","overlit","overlive","overload","overlong","overlook","overlord","overloud","overlove","overlush","overly","overman","overmans","overmany","overmeek","overmelt","overmen","overmild","overmilk","overmine","overmix","overmuch","overnear","overneat","overnew","overnice","overpaid","overpass","overpast","overpay","overpays","overpert","overplan","overplay","overplot","overplus","overply","overpump","overran","overrank","overrash","overrate","overrich","override","overrife","overripe","overrode","overrude","overruff","overrule","overrun","overruns","overs","oversad","oversale","oversalt","oversave","oversaw","oversea","overseas","oversee","overseed","overseen","overseer","oversees","oversell","overset","oversets","oversew","oversewn","oversews","overshoe","overshot","oversick","overside","oversize","overslip","overslow","oversoak","oversoft","oversold","oversoon","oversoul","overspin","overstay","overstep","overstir","oversuds","oversup","oversups","oversure","overt","overtake","overtalk","overtame","overtart","overtask","overtax","overthin","overtime","overtip","overtips","overtire","overtly","overtoil","overtone","overtook","overtop","overtops","overtrim","overture","overturn","overurge","overuse","overused","overuses","overview","overvote","overwarm","overwary","overweak","overwear","overween","overwet","overwets","overwide","overwily","overwind","overwise","overword","overwore","overwork","overworn","overzeal","ovibos","ovicidal","ovicide","ovicides","oviducal","oviduct","oviducts","oviform","ovine","ovines","ovipara","oviposit","ovisac","ovisacs","ovoid","ovoidal","ovoids","ovoli","ovolo","ovolos","ovonic","ovonics","ovular","ovulary","ovulate","ovulated","ovulates","ovule","ovules","ovum","owe","owed","owes","owing","owl","owlet","owlets","owlish","owlishly","owllike","owls","own","ownable","owned","owner","owners","owning","owns","owse","owsen","oxalate","oxalated","oxalates","oxalic","oxalis","oxalises","oxazepam","oxazine","oxazines","oxblood","oxbloods","oxbow","oxbows","oxcart","oxcarts","oxen","oxes","oxeye","oxeyes","oxford","oxfords","oxheart","oxhearts","oxid","oxidable","oxidant","oxidants","oxidase","oxidases","oxidasic","oxidate","oxidated","oxidates","oxide","oxides","oxidic","oxidise","oxidised","oxidiser","oxidises","oxidize","oxidized","oxidizer","oxidizes","oxids","oxim","oxime","oximes","oxims","oxlip","oxlips","oxo","oxpecker","oxtail","oxtails","oxter","oxters","oxtongue","oxy","oxyacid","oxyacids","oxygen","oxygenic","oxygens","oxymora","oxymoron","oxyphil","oxyphile","oxyphils","oxysalt","oxysalts","oxysome","oxysomes","oxytocic","oxytocin","oxytone","oxytones","oyer","oyers","oyes","oyesses","oyez","oyster","oystered","oysterer","oysters","ozone","ozones","ozonic","ozonide","ozonides","ozonise","ozonised","ozonises","ozonize","ozonized","ozonizer","ozonizes","ozonous","pabular","pabulum","pabulums","pac","paca","pacas","pace","paced","pacer","pacers","paces","pacha","pachadom","pachalic","pachas","pachinko","pachisi","pachisis","pachouli","pachuco","pachucos","pacific","pacified","pacifier","pacifies","pacifism","pacifist","pacify","pacing","pack","packable","package","packaged","packager","packages","packed","packer","packers","packet","packeted","packets","packing","packings","packly","packman","packmen","packness","packs","packsack","packwax","pacs","pact","paction","pactions","pacts","pad","padauk","padauks","padded","padder","padders","paddies","padding","paddings","paddle","paddled","paddler","paddlers","paddles","paddling","paddock","paddocks","paddy","padi","padis","padishah","padle","padles","padlock","padlocks","padnag","padnags","padouk","padouks","padre","padres","padri","padrone","padrones","padroni","pads","padshah","padshahs","paduasoy","paean","paeanism","paeans","paella","paellas","paeon","paeons","paesan","paesani","paesano","paesanos","paesans","pagan","pagandom","paganise","paganish","paganism","paganist","paganize","pagans","page","pageant","pageants","pageboy","pageboys","paged","pager","pagers","pages","paginal","paginate","paging","pagings","pagod","pagoda","pagodas","pagods","pagurian","pagurid","pagurids","pah","pahlavi","pahlavis","pahoehoe","paid","paik","paiked","paiking","paiks","pail","pailful","pailfuls","paillard","pails","pailsful","pain","painch","painches","pained","painful","paining","painless","pains","paint","painted","painter","painters","paintier","painting","paints","painty","pair","paired","pairing","pairings","pairs","paisa","paisan","paisana","paisanas","paisano","paisanos","paisans","paisas","paise","paisley","paisleys","pajama","pajamaed","pajamas","pal","palabra","palabras","palace","palaced","palaces","paladin","paladins","palais","palatal","palatals","palate","palates","palatial","palatine","palaver","palavers","palazzi","palazzo","palazzos","pale","palea","paleae","paleal","paled","paleface","palely","paleness","paleosol","paler","pales","palest","palestra","palet","paletot","paletots","palets","palette","palettes","paleways","palewise","palfrey","palfreys","palier","paliest","palikar","palikars","palimony","paling","palings","palinode","palisade","palish","pall","palladia","palladic","palled","pallet","pallets","pallette","pallia","pallial","palliate","pallid","pallidly","pallier","palliest","palling","pallium","palliums","pallor","pallors","palls","pally","palm","palmar","palmary","palmate","palmated","palmed","palmer","palmers","palmette","palmetto","palmier","palmiest","palming","palmist","palmists","palmitin","palmlike","palms","palmy","palmyra","palmyras","palomino","palooka","palookas","palp","palpable","palpably","palpal","palpate","palpated","palpates","palpator","palpebra","palpi","palps","palpus","pals","palship","palships","palsied","palsies","palsy","palsying","palter","paltered","palterer","palters","paltrier","paltrily","paltry","paludal","paludism","paly","pam","pampa","pampas","pampean","pampeans","pamper","pampered","pamperer","pampero","pamperos","pampers","pamphlet","pams","pan","panacea","panacean","panaceas","panache","panaches","panada","panadas","panama","panamas","panatela","panbroil","pancake","pancaked","pancakes","panchax","pancreas","panda","pandani","pandanus","pandas","pandect","pandects","pandemic","pander","pandered","panderer","panders","pandied","pandies","pandit","pandits","pandoor","pandoors","pandora","pandoras","pandore","pandores","pandour","pandours","pandowdy","pandura","panduras","pandy","pandying","pane","paned","panel","paneled","paneling","panelist","panelled","panels","panes","panetela","panfish","panfried","panfries","panfry","panful","panfuls","pang","panga","pangas","panged","pangen","pangene","pangenes","pangens","panging","pangolin","pangs","panhuman","panic","panicked","panicky","panicle","panicled","panicles","panics","panicum","panicums","panier","paniers","panmixes","panmixia","panmixis","panne","panned","pannes","pannier","panniers","pannikin","panning","panocha","panochas","panoche","panoches","panoply","panoptic","panorama","panpipe","panpipes","pans","pansies","pansophy","pansy","pant","panted","pantheon","panther","panthers","pantie","panties","pantile","pantiled","pantiles","panting","panto","pantofle","pantos","pantoum","pantoums","pantries","pantry","pants","pantsuit","panty","panzer","panzers","pap","papa","papacies","papacy","papain","papains","papal","papally","papas","papaw","papaws","papaya","papayan","papayas","paper","paperboy","papered","paperer","paperers","papering","papers","papery","paphian","paphians","papilla","papillae","papillar","papillon","papist","papistic","papistry","papists","papoose","papooses","pappi","pappier","pappies","pappiest","pappoose","pappose","pappous","pappus","pappy","paprica","papricas","paprika","paprikas","paps","papula","papulae","papular","papule","papules","papulose","papyral","papyri","papyrian","papyrine","papyrus","par","para","parable","parables","parabola","parachor","parade","paraded","parader","paraders","parades","paradigm","parading","paradise","parador","paradors","parados","paradox","paradrop","paraffin","paraform","paragoge","paragon","paragons","parakeet","parakite","parallax","parallel","paralyse","paralyze","parament","paramo","paramos","paramour","parang","parangs","paranoea","paranoia","paranoic","paranoid","parapet","parapets","paraph","paraphs","paraquat","paraquet","paras","parasang","parashah","parasite","parasol","parasols","paravane","parawing","parazoan","parboil","parboils","parcel","parceled","parcels","parcener","parch","parched","parches","parchesi","parching","parchisi","pard","pardah","pardahs","pardee","pardi","pardie","pardine","pardner","pardners","pardon","pardoned","pardoner","pardons","pards","pardy","pare","parecism","pared","pareira","pareiras","parent","parental","parented","parents","parer","parerga","parergon","parers","pares","pareses","paresis","paretic","paretics","pareu","pareus","pareve","parfait","parfaits","parflesh","parfocal","parge","parged","parges","parget","pargeted","pargets","parging","pargings","pargo","pargos","parhelia","parhelic","pariah","pariahs","parian","parians","paries","parietal","parietes","paring","parings","paris","parises","parish","parishes","parities","parity","park","parka","parkas","parked","parker","parkers","parking","parkings","parkland","parklike","parks","parkway","parkways","parlance","parlando","parlante","parlay","parlayed","parlays","parle","parled","parles","parley","parleyed","parleyer","parleys","parling","parlor","parlors","parlour","parlours","parlous","parodic","parodied","parodies","parodist","parodoi","parodos","parody","parol","parole","paroled","parolee","parolees","paroles","paroling","parols","paronym","paronyms","paroquet","parotic","parotid","parotids","parotoid","parous","paroxysm","parquet","parquets","parr","parral","parrals","parred","parrel","parrels","parridge","parried","parries","parring","parritch","parroket","parrot","parroted","parroter","parrots","parroty","parrs","parry","parrying","pars","parsable","parse","parsec","parsecs","parsed","parser","parsers","parses","parsing","parsley","parsleys","parsnip","parsnips","parson","parsonic","parsons","part","partake","partaken","partaker","partakes","partan","partans","parted","parterre","partial","partials","partible","particle","partied","partier","partiers","parties","parting","partings","partisan","partita","partitas","partite","partizan","partlet","partlets","partly","partner","partners","parton","partons","partook","parts","partway","party","partyer","partyers","partying","parura","paruras","parure","parures","parve","parvenu","parvenue","parvenus","parvis","parvise","parvises","parvolin","pas","pascal","pascals","paschal","paschals","pase","paseo","paseos","pases","pash","pasha","pashadom","pashalic","pashalik","pashas","pashed","pashes","pashing","pasquil","pasquils","pass","passable","passably","passade","passades","passado","passados","passage","passaged","passages","passant","passband","passbook","passe","passed","passee","passel","passels","passer","passerby","passers","passes","passible","passim","passing","passings","passion","passions","passive","passives","passkey","passkeys","passless","passover","passport","passus","passuses","password","past","pasta","pastas","paste","pasted","pastel","pastels","paster","pastern","pasterns","pasters","pastes","pasteup","pasteups","pasticci","pastiche","pastie","pastier","pasties","pastiest","pastil","pastille","pastils","pastime","pastimes","pastina","pastinas","pasting","pastis","pastises","pastness","pastor","pastoral","pastored","pastors","pastrami","pastries","pastromi","pastry","pasts","pastural","pasture","pastured","pasturer","pastures","pasty","pat","pataca","patacas","patagia","patagial","patagium","patamar","patamars","patch","patched","patcher","patchers","patches","patchier","patchily","patching","patchy","pate","pated","patella","patellae","patellar","patellas","paten","patency","patens","patent","patented","patentee","patently","patentor","patents","pater","paternal","paters","pates","path","pathetic","pathless","pathogen","pathos","pathoses","paths","pathway","pathways","patience","patient","patients","patin","patina","patinae","patinas","patinate","patine","patined","patines","patining","patinize","patins","patio","patios","patly","patness","patois","patriot","patriots","patrol","patrols","patron","patronal","patronly","patrons","patroon","patroons","pats","patsies","patsy","pattamar","patted","pattee","patten","pattens","patter","pattered","patterer","pattern","patterns","patters","pattie","patties","patting","patty","pattypan","patulent","patulous","paty","patzer","patzers","paucity","paughty","pauldron","paulin","paulins","paunch","paunched","paunches","paunchy","pauper","paupered","paupers","pausal","pause","paused","pauser","pausers","pauses","pausing","pavan","pavane","pavanes","pavans","pave","paved","paveed","pavement","paver","pavers","paves","pavid","pavilion","pavillon","pavin","paving","pavings","pavins","pavior","paviors","paviour","paviours","pavis","pavise","paviser","pavisers","pavises","pavonine","paw","pawed","pawer","pawers","pawing","pawkier","pawkiest","pawkily","pawky","pawl","pawls","pawn","pawnable","pawnage","pawnages","pawned","pawnee","pawnees","pawner","pawners","pawning","pawnor","pawnors","pawns","pawnshop","pawpaw","pawpaws","paws","pax","paxes","paxwax","paxwaxes","pay","payable","payables","payably","payback","paybacks","paycheck","payday","paydays","payed","payee","payees","payer","payers","paygrade","paying","payload","payloads","payment","payments","paynim","paynims","payoff","payoffs","payola","payolas","payor","payors","payout","payouts","payroll","payrolls","pays","pazazz","pazazzes","pea","peace","peaced","peaceful","peacenik","peaces","peach","peached","peacher","peachers","peaches","peachier","peaching","peachy","peacing","peacoat","peacoats","peacock","peacocks","peacocky","peafowl","peafowls","peag","peage","peages","peags","peahen","peahens","peak","peaked","peakier","peakiest","peaking","peakish","peakless","peaklike","peaks","peaky","peal","pealed","pealike","pealing","peals","pean","peans","peanut","peanuts","pear","pearl","pearlash","pearled","pearler","pearlers","pearlier","pearling","pearlite","pearls","pearly","pearmain","pears","peart","pearter","peartest","peartly","peas","peasant","peasants","peascod","peascods","pease","peasecod","peasen","peases","peat","peatier","peatiest","peats","peaty","peavey","peaveys","peavies","peavy","pebble","pebbled","pebbles","pebblier","pebbling","pebbly","pecan","pecans","peccable","peccancy","peccant","peccary","peccavi","peccavis","pech","pechan","pechans","peched","peching","pechs","peck","pecked","pecker","peckers","peckier","peckiest","pecking","peckish","pecks","pecky","pecorini","pecorino","pecs","pectase","pectases","pectate","pectates","pecten","pectens","pectic","pectin","pectines","pectins","pectize","pectized","pectizes","pectoral","peculate","peculia","peculiar","peculium","ped","pedagog","pedagogs","pedagogy","pedal","pedaled","pedalfer","pedalier","pedaling","pedalled","pedals","pedant","pedantic","pedantry","pedants","pedate","pedately","peddle","peddled","peddler","peddlers","peddlery","peddles","peddling","pederast","pedes","pedestal","pedicab","pedicabs","pedicel","pedicels","pedicle","pedicled","pedicles","pedicure","pediform","pedigree","pediment","pedipalp","pedlar","pedlars","pedlary","pedler","pedlers","pedlery","pedocal","pedocals","pedology","pedro","pedros","peds","peduncle","pee","peebeen","peebeens","peed","peeing","peek","peekaboo","peeked","peeking","peeks","peel","peelable","peeled","peeler","peelers","peeling","peelings","peels","peen","peened","peening","peens","peep","peeped","peeper","peepers","peephole","peeping","peeps","peepshow","peepul","peepuls","peer","peerage","peerages","peered","peeress","peerie","peeries","peering","peerless","peers","peery","pees","peesweep","peetweet","peeve","peeved","peeves","peeving","peevish","peewee","peewees","peewit","peewits","peg","pegboard","pegbox","pegboxes","pegged","pegging","pegless","peglike","pegs","peh","pehs","peignoir","pein","peined","peining","peins","peise","peised","peises","peising","pekan","pekans","peke","pekes","pekin","pekins","pekoe","pekoes","pelage","pelages","pelagial","pelagic","pele","pelerine","peles","pelf","pelfs","pelican","pelicans","pelisse","pelisses","pelite","pelites","pelitic","pellagra","pellet","pelletal","pelleted","pellets","pellicle","pellmell","pellucid","pelmet","pelmets","pelon","peloria","pelorian","pelorias","peloric","pelorus","pelota","pelotas","pelt","peltast","peltasts","peltate","pelted","pelter","peltered","pelters","pelting","peltries","peltry","pelts","pelves","pelvic","pelvics","pelvis","pelvises","pembina","pembinas","pemican","pemicans","pemmican","pemoline","pemphix","pen","penal","penalise","penality","penalize","penally","penalty","penance","penanced","penances","penang","penangs","penates","pence","pencel","pencels","penchant","pencil","penciled","penciler","pencils","pend","pendant","pendants","pended","pendency","pendent","pendents","pending","pends","pendular","pendulum","penes","pengo","pengos","penguin","penguins","penial","penicil","penicils","penile","penis","penises","penitent","penknife","penlight","penlite","penlites","penman","penmen","penna","pennae","penname","pennames","pennant","pennants","pennate","pennated","penned","penner","penners","penni","pennia","pennies","pennine","pennines","penning","pennis","pennon","pennoned","pennons","penny","penoche","penoches","penology","penoncel","penpoint","pens","pensee","pensees","pensil","pensile","pensils","pension","pensione","pensions","pensive","penster","pensters","penstock","pent","pentacle","pentad","pentads","pentagon","pentane","pentanes","pentanol","pentarch","pentene","pentenes","pentode","pentodes","pentomic","pentosan","pentose","pentoses","pentyl","pentyls","penuche","penuches","penuchi","penuchis","penuchle","penuckle","penult","penults","penumbra","penuries","penury","peon","peonage","peonages","peones","peonies","peonism","peonisms","peons","peony","people","peopled","peopler","peoplers","peoples","peopling","pep","peperoni","pepla","peplos","peploses","peplum","peplumed","peplums","peplus","pepluses","pepo","peponida","peponium","pepos","pepped","pepper","peppered","pepperer","peppers","peppery","peppier","peppiest","peppily","pepping","peppy","peps","pepsin","pepsine","pepsines","pepsins","peptic","peptics","peptid","peptide","peptides","peptidic","peptids","peptize","peptized","peptizer","peptizes","peptone","peptones","peptonic","per","peracid","peracids","percale","percales","perceive","percent","percents","percept","percepts","perch","perched","percher","perchers","perches","perching","percoid","percoids","percuss","perdie","perdu","perdue","perdues","perdure","perdured","perdures","perdus","perdy","perea","peregrin","pereia","pereion","pereon","pereopod","perfect","perfecta","perfecto","perfects","perfidy","perforce","perform","performs","perfume","perfumed","perfumer","perfumes","perfuse","perfused","perfuses","pergola","pergolas","perhaps","peri","perianth","periapt","periapts","periblem","pericarp","pericope","periderm","peridia","peridial","peridium","peridot","peridots","perigeal","perigean","perigee","perigees","perigon","perigons","perigyny","peril","periled","periling","perilla","perillas","perilled","perilous","perils","perilune","perinea","perineal","perineum","period","periodic","periodid","periods","periotic","peripety","peripter","perique","periques","peris","perisarc","perish","perished","perishes","periwig","periwigs","perjure","perjured","perjurer","perjures","perjury","perk","perked","perkier","perkiest","perkily","perking","perkish","perks","perky","perlite","perlites","perlitic","perm","permeant","permease","permeate","permed","perming","permit","permits","perms","permute","permuted","permutes","peroneal","peroral","perorate","peroxid","peroxide","peroxids","peroxy","perpend","perpends","perpent","perpents","perplex","perries","perron","perrons","perry","persalt","persalts","perse","perses","persist","persists","person","persona","personae","personal","personas","persons","perspire","perspiry","persuade","pert","pertain","pertains","perter","pertest","pertly","pertness","perturb","perturbs","peruke","perukes","perusal","perusals","peruse","perused","peruser","perusers","peruses","perusing","pervade","pervaded","pervader","pervades","perverse","pervert","perverts","pervious","pes","pesade","pesades","peseta","pesetas","pesewa","pesewas","peskier","peskiest","peskily","pesky","peso","pesos","pessary","pest","pester","pestered","pesterer","pesters","pesthole","pestle","pestled","pestles","pestling","pesto","pestos","pests","pet","petal","petaled","petaline","petalled","petalody","petaloid","petalous","petals","petard","petards","petasos","petasus","petcock","petcocks","petechia","peter","petered","petering","peters","petiolar","petiole","petioled","petioles","petit","petite","petites","petition","petnap","petnaps","petrel","petrels","petrify","petrol","petrolic","petrols","petronel","petrosal","petrous","pets","petsai","petsais","petted","pettedly","petter","petters","petti","pettier","pettiest","pettifog","pettily","petting","pettings","pettish","pettle","pettled","pettles","pettling","petto","petty","petulant","petunia","petunias","petuntse","petuntze","pew","pewee","pewees","pewit","pewits","pews","pewter","pewterer","pewters","peyote","peyotes","peyotl","peyotls","peytral","peytrals","peytrel","peytrels","pfennig","pfennige","pfennigs","pfft","pfui","phaeton","phaetons","phage","phages","phalange","phalanx","phalli","phallic","phallism","phallist","phallus","phantasm","phantast","phantasy","phantom","phantoms","pharaoh","pharaohs","pharisee","pharmacy","pharos","pharoses","pharynx","phase","phaseal","phased","phaseout","phases","phasic","phasing","phasis","phasmid","phasmids","phat","phatic","pheasant","phellem","phellems","phelonia","phenate","phenates","phenazin","phenetic","phenetol","phenix","phenixes","phenol","phenolic","phenols","phenom","phenoms","phenoxy","phenyl","phenylic","phenyls","phew","phi","phial","phials","philabeg","philibeg","philomel","philter","philters","philtra","philtre","philtred","philtres","philtrum","phimoses","phimosis","phimotic","phis","phiz","phizes","phlegm","phlegms","phlegmy","phloem","phloems","phlox","phloxes","phobia","phobias","phobic","phobics","phocine","phoebe","phoebes","phoebus","phoenix","phon","phonal","phonate","phonated","phonates","phone","phoned","phoneme","phonemes","phonemic","phones","phonetic","phoney","phoneyed","phoneys","phonic","phonics","phonied","phonier","phonies","phoniest","phonily","phoning","phono","phonon","phonons","phonos","phons","phony","phonying","phooey","phorate","phorates","phoronid","phosgene","phosphid","phosphin","phosphor","phot","photic","photics","photo","photoed","photog","photogs","photoing","photomap","photon","photonic","photons","photopia","photopic","photos","photoset","phots","phpht","phrasal","phrase","phrased","phrases","phrasing","phratral","phratric","phratry","phreatic","phrenic","phrensy","pht","phthalic","phthalin","phthises","phthisic","phthisis","phut","phuts","phyla","phylae","phylar","phylaxis","phyle","phyleses","phylesis","phyletic","phylic","phyllary","phyllite","phyllo","phyllode","phylloid","phyllome","phyllos","phylon","phylum","physed","physeds","physes","physic","physical","physics","physique","physis","phytane","phytanes","phytoid","phytol","phytols","phyton","phytonic","phytons","pia","piacular","piaffe","piaffed","piaffer","piaffers","piaffes","piaffing","pial","pian","pianic","pianism","pianisms","pianist","pianists","piano","pianos","pians","pias","piasaba","piasabas","piasava","piasavas","piassaba","piassava","piaster","piasters","piastre","piastres","piazza","piazzas","piazze","pibal","pibals","pibroch","pibrochs","pic","pica","picacho","picachos","picador","picadors","pical","picara","picaras","picaro","picaroon","picaros","picas","picayune","piccolo","piccolos","pice","piceous","piciform","pick","pickadil","pickax","pickaxe","pickaxed","pickaxes","picked","pickeer","pickeers","picker","pickerel","pickers","picket","picketed","picketer","pickets","pickier","pickiest","picking","pickings","pickle","pickled","pickles","pickling","picklock","pickoff","pickoffs","picks","pickup","pickups","pickwick","picky","picloram","picnic","picnicky","picnics","picogram","picolin","picoline","picolins","picomole","picot","picoted","picotee","picotees","picoting","picots","picquet","picquets","picrate","picrated","picrates","picric","picrite","picrites","picritic","pics","picture","pictured","pictures","picul","piculs","piddle","piddled","piddler","piddlers","piddles","piddling","piddly","piddock","piddocks","pidgin","pidgins","pie","piebald","piebalds","piece","pieced","piecer","piecers","pieces","piecing","piecings","piecrust","pied","piedfort","piedmont","piefort","pieforts","pieing","pieplant","pier","pierce","pierced","piercer","piercers","pierces","piercing","pierogi","pierrot","pierrots","piers","pies","pieta","pietas","pieties","pietism","pietisms","pietist","pietists","piety","piffle","piffled","piffles","piffling","pig","pigboat","pigboats","pigeon","pigeons","pigfish","pigged","piggery","piggie","piggier","piggies","piggiest","piggin","pigging","piggins","piggish","piggy","piglet","piglets","pigment","pigments","pigmies","pigmy","pignoli","pignolia","pignolis","pignora","pignus","pignut","pignuts","pigout","pigouts","pigpen","pigpens","pigs","pigskin","pigskins","pigsney","pigsneys","pigstick","pigsties","pigsty","pigtail","pigtails","pigweed","pigweeds","piing","pika","pikake","pikakes","pikas","pike","piked","pikeman","pikemen","piker","pikers","pikes","piking","pilaf","pilaff","pilaffs","pilafs","pilar","pilaster","pilau","pilaus","pilaw","pilaws","pilchard","pile","pilea","pileate","pileated","piled","pilei","pileless","pileous","piles","pileum","pileup","pileups","pileus","pilewort","pilfer","pilfered","pilferer","pilfers","pilgrim","pilgrims","pili","piliform","piling","pilings","pilis","pill","pillage","pillaged","pillager","pillages","pillar","pillared","pillars","pillbox","pilled","pilling","pillion","pillions","pillory","pillow","pillowed","pillows","pillowy","pills","pilose","pilosity","pilot","pilotage","piloted","piloting","pilots","pilous","pilsener","pilsner","pilsners","pilular","pilule","pilules","pilus","pily","pima","pimas","pimento","pimentos","pimiento","pimp","pimped","pimping","pimple","pimpled","pimples","pimplier","pimply","pimps","pin","pina","pinafore","pinang","pinangs","pinas","pinaster","pinata","pinatas","pinball","pinballs","pinbone","pinbones","pincer","pincers","pinch","pinchbug","pincheck","pinched","pincher","pinchers","pinches","pinching","pinder","pinders","pindling","pine","pineal","pinecone","pined","pineland","pinelike","pinene","pinenes","pineries","pinery","pines","pinesap","pinesaps","pineta","pinetum","pinewood","piney","pinfish","pinfold","pinfolds","ping","pinged","pinger","pingers","pinging","pingo","pingos","pingrass","pings","pinguid","pinhead","pinheads","pinhole","pinholes","pinier","piniest","pining","pinion","pinioned","pinions","pinite","pinites","pinitol","pinitols","pink","pinked","pinken","pinkened","pinkens","pinker","pinkers","pinkest","pinkey","pinkeye","pinkeyes","pinkeys","pinkie","pinkies","pinking","pinkings","pinkish","pinkly","pinkness","pinko","pinkoes","pinkos","pinkroot","pinks","pinky","pinna","pinnace","pinnaces","pinnacle","pinnae","pinnal","pinnas","pinnate","pinnated","pinned","pinner","pinners","pinnies","pinning","pinniped","pinnula","pinnulae","pinnular","pinnule","pinnules","pinny","pinochle","pinocle","pinocles","pinole","pinoles","pinon","pinones","pinons","pinot","pinots","pinpoint","pinprick","pins","pinscher","pint","pinta","pintada","pintadas","pintado","pintados","pintail","pintails","pintano","pintanos","pintas","pintle","pintles","pinto","pintoes","pintos","pints","pintsize","pinup","pinups","pinwale","pinwales","pinweed","pinweeds","pinwheel","pinwork","pinworks","pinworm","pinworms","piny","pinyin","pinyon","pinyons","piolet","piolets","pion","pioneer","pioneers","pionic","pions","piosity","pious","piously","pip","pipage","pipages","pipal","pipals","pipe","pipeage","pipeages","piped","pipefish","pipeful","pipefuls","pipeless","pipelike","pipeline","piper","piperine","pipers","pipes","pipestem","pipet","pipets","pipette","pipetted","pipettes","pipier","pipiest","pipiness","piping","pipingly","pipings","pipit","pipits","pipkin","pipkins","pipped","pippin","pipping","pippins","pips","pipy","piquancy","piquant","pique","piqued","piques","piquet","piquets","piquing","piracies","piracy","piragua","piraguas","pirana","piranas","piranha","piranhas","pirarucu","pirate","pirated","pirates","piratic","pirating","piraya","pirayas","piriform","pirn","pirns","pirog","pirogen","piroghi","pirogi","pirogies","pirogue","pirogues","pirojki","piroque","piroques","piroshki","pirozhki","pirozhok","pis","piscary","piscator","piscina","piscinae","piscinal","piscinas","piscine","pisco","piscos","pish","pished","pishes","pishing","pishoge","pishoges","pishogue","pisiform","pismire","pismires","pisolite","piss","pissant","pissants","pissed","pisser","pissers","pisses","pissing","pissoir","pissoirs","pistache","piste","pistes","pistil","pistils","pistol","pistole","pistoled","pistoles","pistols","piston","pistons","pit","pita","pitapat","pitapats","pitas","pitch","pitched","pitcher","pitchers","pitches","pitchier","pitchily","pitching","pitchman","pitchmen","pitchout","pitchy","piteous","pitfall","pitfalls","pith","pithead","pitheads","pithed","pithier","pithiest","pithily","pithing","pithless","piths","pithy","pitiable","pitiably","pitied","pitier","pitiers","pities","pitiful","pitiless","pitman","pitmans","pitmen","piton","pitons","pits","pitsaw","pitsaws","pittance","pitted","pitting","pittings","pity","pitying","piu","pivot","pivotal","pivoted","pivoting","pivotman","pivotmen","pivots","pix","pixel","pixels","pixes","pixie","pixieish","pixies","pixiness","pixy","pixyish","pizazz","pizazzes","pizazzy","pizza","pizzas","pizzeria","pizzle","pizzles","placable","placably","placard","placards","placate","placated","placater","placates","place","placebo","placebos","placed","placeman","placemen","placenta","placer","placers","places","placet","placets","placid","placidly","placing","plack","placket","plackets","placks","placoid","placoids","plafond","plafonds","plagal","plage","plages","plagiary","plague","plagued","plaguer","plaguers","plagues","plaguey","plaguily","plaguing","plaguy","plaice","plaices","plaid","plaided","plaids","plain","plained","plainer","plainest","plaining","plainly","plains","plaint","plaints","plaister","plait","plaited","plaiter","plaiters","plaiting","plaits","plan","planar","planaria","planate","planch","planche","planches","planchet","plane","planed","planer","planers","planes","planet","planets","planform","plangent","planing","planish","plank","planked","planking","planks","plankter","plankton","planless","planned","planner","planners","planning","planosol","plans","plant","plantain","plantar","planted","planter","planters","planting","plantlet","plants","planula","planulae","planular","plaque","plaques","plash","plashed","plasher","plashers","plashes","plashier","plashing","plashy","plasm","plasma","plasmas","plasmic","plasmid","plasmids","plasmin","plasmins","plasmoid","plasmon","plasmons","plasms","plaster","plasters","plastery","plastic","plastics","plastid","plastids","plastral","plastron","plastrum","plat","platan","platane","platanes","platans","plate","plateau","plateaus","plateaux","plated","plateful","platelet","platen","platens","plater","platers","plates","platform","platier","platies","platiest","platina","platinas","plating","platings","platinic","platinum","platonic","platoon","platoons","plats","platted","platter","platters","platting","platy","platypi","platypus","platys","plaudit","plaudits","plausive","play","playa","playable","playact","playacts","playas","playback","playbill","playbook","playboy","playboys","playdate","playday","playdays","playdown","played","player","players","playful","playgirl","playgoer","playing","playland","playless","playlet","playlets","playlike","playlist","playmate","playoff","playoffs","playpen","playpens","playroom","plays","playsuit","playtime","playwear","plaza","plazas","plea","pleach","pleached","pleaches","plead","pleaded","pleader","pleaders","pleading","pleads","pleas","pleasant","please","pleased","pleaser","pleasers","pleases","pleasing","pleasure","pleat","pleated","pleater","pleaters","pleating","pleats","pleb","plebe","plebeian","plebes","plebs","plectra","plectron","plectrum","pled","pledge","pledged","pledgee","pledgees","pledgeor","pledger","pledgers","pledges","pledget","pledgets","pledging","pledgor","pledgors","pleiad","pleiades","pleiads","plena","plenary","plench","plenches","plenish","plenism","plenisms","plenist","plenists","plenties","plenty","plenum","plenums","pleonasm","pleopod","pleopods","plessor","plessors","plethora","pleura","pleurae","pleural","pleuras","pleurisy","pleuron","pleuston","plew","plews","plexal","plexor","plexors","plexus","plexuses","pliable","pliably","pliancy","pliant","pliantly","plica","plicae","plical","plicate","plicated","plie","plied","plier","pliers","plies","plight","plighted","plighter","plights","plimsol","plimsole","plimsoll","plimsols","plink","plinked","plinker","plinkers","plinking","plinks","plinth","plinths","pliotron","pliskie","pliskies","plisky","plisse","plisses","plod","plodded","plodder","plodders","plodding","plods","ploidies","ploidy","plonk","plonked","plonking","plonks","plop","plopped","plopping","plops","plosion","plosions","plosive","plosives","plot","plotless","plots","plottage","plotted","plotter","plotters","plottier","plotties","plotting","plotty","plotz","plotzed","plotzes","plotzing","plough","ploughed","plougher","ploughs","plover","plovers","plow","plowable","plowback","plowboy","plowboys","plowed","plower","plowers","plowhead","plowing","plowland","plowman","plowmen","plows","ploy","ployed","ploying","ploys","pluck","plucked","plucker","pluckers","pluckier","pluckily","plucking","plucks","plucky","plug","plugged","plugger","pluggers","plugging","plugless","plugola","plugolas","plugs","plugugly","plum","plumage","plumaged","plumages","plumate","plumb","plumbago","plumbed","plumber","plumbers","plumbery","plumbic","plumbing","plumbism","plumbous","plumbs","plumbum","plumbums","plume","plumed","plumelet","plumes","plumier","plumiest","pluming","plumiped","plumlike","plummet","plummets","plummier","plummy","plumose","plump","plumped","plumpen","plumpens","plumper","plumpers","plumpest","plumping","plumpish","plumply","plumps","plums","plumular","plumule","plumules","plumy","plunder","plunders","plunge","plunged","plunger","plungers","plunges","plunging","plunk","plunked","plunker","plunkers","plunking","plunks","plural","plurally","plurals","plus","pluses","plush","plusher","plushes","plushest","plushier","plushily","plushly","plushy","plussage","plusses","plutei","pluteus","pluton","plutonic","plutons","pluvial","pluvials","pluvian","pluviose","pluvious","ply","plyer","plyers","plying","plyingly","plywood","plywoods","pneuma","pneumas","poaceous","poach","poached","poacher","poachers","poaches","poachier","poaching","poachy","pochard","pochards","pock","pocked","pocket","pocketed","pocketer","pockets","pockier","pockiest","pockily","pocking","pockmark","pocks","pocky","poco","pocosin","pocosins","pod","podagra","podagral","podagras","podagric","podded","podding","podesta","podestas","podgier","podgiest","podgily","podgy","podia","podiatry","podite","podites","poditic","podium","podiums","podlike","podocarp","podomere","pods","podsol","podsolic","podsols","podzol","podzolic","podzols","poechore","poem","poems","poesies","poesy","poet","poetess","poetic","poetical","poetics","poetise","poetised","poetiser","poetises","poetize","poetized","poetizer","poetizes","poetless","poetlike","poetries","poetry","poets","pogey","pogeys","pogies","pogonia","pogonias","pogonip","pogonips","pogrom","pogromed","pogroms","pogy","poh","poi","poignant","poilu","poilus","poind","poinded","poinding","poinds","point","pointe","pointed","pointer","pointers","pointes","pointier","pointing","pointman","pointmen","points","pointy","pois","poise","poised","poiser","poisers","poises","poising","poison","poisoned","poisoner","poisons","poitrel","poitrels","poke","poked","poker","pokeroot","pokers","pokes","pokeweed","pokey","pokeys","pokier","pokies","pokiest","pokily","pokiness","poking","poky","pol","polar","polarise","polarity","polarize","polaron","polarons","polars","polder","polders","pole","poleax","poleaxe","poleaxed","poleaxes","polecat","polecats","poled","poleis","poleless","polemic","polemics","polemist","polemize","polenta","polentas","poler","polers","poles","polestar","poleward","poleyn","poleyns","police","policed","polices","policies","policing","policy","poling","polio","polios","polis","polish","polished","polisher","polishes","polite","politely","politer","politest","politic","politick","politico","politics","polities","polity","polka","polkaed","polkaing","polkas","poll","pollack","pollacks","pollard","pollards","polled","pollee","pollees","pollen","pollened","pollens","poller","pollers","pollex","pollical","pollices","polling","pollinia","pollinic","pollist","pollists","polliwog","pollock","pollocks","polls","pollster","pollute","polluted","polluter","pollutes","pollywog","polo","poloist","poloists","polonium","polos","pols","poltroon","poly","polybrid","polycot","polycots","polyene","polyenes","polyenic","polygala","polygamy","polygene","polyglot","polygon","polygons","polygony","polygyny","polymath","polymer","polymers","polynya","polynyas","polyoma","polyomas","polyp","polypary","polypi","polypide","polypnea","polypod","polypods","polypody","polypoid","polypore","polypous","polyps","polypus","polys","polysemy","polysome","polytene","polyteny","polytype","polyuria","polyuric","polyzoan","polyzoic","pom","pomace","pomaces","pomade","pomaded","pomades","pomading","pomander","pomatum","pomatums","pome","pomelo","pomelos","pomes","pomfret","pomfrets","pommee","pommel","pommeled","pommels","pommie","pommies","pommy","pomology","pomp","pompano","pompanos","pompom","pompoms","pompon","pompons","pompous","pomps","poms","ponce","ponced","ponces","poncho","ponchos","poncing","pond","ponded","ponder","pondered","ponderer","ponders","ponding","ponds","pondweed","pone","ponent","pones","pong","ponged","pongee","pongees","pongid","pongids","ponging","pongs","poniard","poniards","ponied","ponies","pons","pontes","pontifex","pontiff","pontiffs","pontific","pontil","pontils","pontine","ponton","pontons","pontoon","pontoons","pony","ponying","ponytail","pooch","pooched","pooches","pooching","pood","poodle","poodles","poods","poof","poofs","pooftah","pooftahs","poofter","poofters","poofy","pooh","poohed","poohing","poohs","pool","pooled","poolhall","pooling","poolroom","pools","poolside","poon","poons","poop","pooped","pooping","poops","poor","poorer","poorest","poori","pooris","poorish","poorly","poorness","poortith","poove","pooves","pop","popcorn","popcorns","pope","popedom","popedoms","popeless","popelike","poperies","popery","popes","popeyed","popgun","popguns","popinjay","popish","popishly","poplar","poplars","poplin","poplins","poplitic","popover","popovers","poppa","poppas","popped","popper","poppers","poppet","poppets","poppied","poppies","popping","popple","poppled","popples","poppling","poppy","pops","popsie","popsies","popsy","populace","popular","populate","populism","populist","populous","porch","porches","porcine","porcini","porcino","pore","pored","pores","porgies","porgy","poring","porism","porisms","pork","porker","porkers","porkier","porkies","porkiest","porkpie","porkpies","porks","porkwood","porky","porn","porno","pornos","porns","porny","porose","porosity","porous","porously","porphyry","porpoise","porrect","porridge","port","portable","portably","portage","portaged","portages","portal","portaled","portals","portance","portapak","ported","portend","portends","portent","portents","porter","porters","porthole","portico","porticos","portiere","porting","portion","portions","portless","portlier","portly","portrait","portray","portrays","portress","ports","posada","posadas","pose","posed","poser","posers","poses","poseur","poseurs","posh","posher","poshest","poshly","poshness","posies","posing","posingly","posit","posited","positing","position","positive","positron","posits","posology","posse","posses","possess","posset","possets","possible","possibly","possum","possums","post","postage","postages","postal","postally","postals","postanal","postbag","postbags","postbase","postbox","postboy","postboys","postburn","postcard","postcava","postcode","postcoup","postdate","postdive","postdrug","posted","posteen","posteens","poster","postern","posterns","posters","postface","postfix","postform","postgame","postheat","posthole","postiche","postin","posting","postings","postins","postique","postlude","postman","postmark","postmen","postoral","postpaid","postpone","postrace","postriot","posts","postsync","postteen","posttest","postural","posture","postured","posturer","postures","postwar","posy","pot","potable","potables","potage","potages","potamic","potash","potashes","potassic","potation","potato","potatoes","potatory","potbelly","potboil","potboils","potboy","potboys","poteen","poteens","potence","potences","potency","potent","potently","potful","potfuls","pothead","potheads","potheen","potheens","pother","potherb","potherbs","pothered","pothers","pothole","potholed","potholes","pothook","pothooks","pothouse","potiche","potiches","potion","potions","potlach","potlache","potlatch","potlike","potline","potlines","potluck","potlucks","potman","potmen","potpie","potpies","pots","potshard","potsherd","potshot","potshots","potsie","potsies","potstone","potsy","pottage","pottages","potted","potteen","potteens","potter","pottered","potterer","potters","pottery","pottier","potties","pottiest","potting","pottle","pottles","potto","pottos","potty","pouch","pouched","pouches","pouchier","pouching","pouchy","pouf","poufed","pouff","pouffe","pouffed","pouffes","pouffs","poufs","poulard","poularde","poulards","poult","poulter","poulters","poultice","poultry","poults","pounce","pounced","pouncer","pouncers","pounces","pouncing","pound","poundage","poundal","poundals","pounded","pounder","pounders","pounding","pounds","pour","pourable","poured","pourer","pourers","pouring","pours","poussie","poussies","pout","pouted","pouter","pouters","poutful","poutier","poutiest","pouting","pouts","pouty","poverty","pow","powder","powdered","powderer","powders","powdery","power","powered","powerful","powering","powers","pows","powter","powters","powwow","powwowed","powwows","pox","poxed","poxes","poxing","poxvirus","poyou","poyous","pozzolan","praam","praams","practic","practice","practise","praecipe","praedial","praefect","praelect","praetor","praetors","prahu","prahus","prairie","prairies","praise","praised","praiser","praisers","praises","praising","praline","pralines","pram","prams","prance","pranced","prancer","prancers","prances","prancing","prandial","prang","pranged","pranging","prangs","prank","pranked","pranking","prankish","pranks","prao","praos","prase","prases","prat","prate","prated","prater","praters","prates","pratfall","prating","pratique","prats","prattle","prattled","prattler","prattles","prau","praus","prawn","prawned","prawner","prawners","prawning","prawns","praxes","praxis","praxises","pray","prayed","prayer","prayers","praying","prays","preach","preached","preacher","preaches","preachy","preact","preacted","preacts","preadapt","preadmit","preadopt","preadult","preaged","preallot","preamble","preamp","preamps","preanal","prearm","prearmed","prearms","preaudit","preaver","preavers","preaxial","prebasal","prebend","prebends","prebill","prebills","prebind","prebinds","prebless","preboil","preboils","preboom","prebound","precast","precasts","precava","precavae","precaval","precede","preceded","precedes","precent","precents","precept","precepts","precess","precheck","prechill","precieux","precinct","precious","precipe","precipes","precis","precise","precised","preciser","precises","precited","preclean","preclear","preclude","precode","precoded","precodes","precook","precooks","precool","precools","precoup","precrash","precure","precured","precures","precut","precuts","predate","predated","predates","predator","predawn","predawns","predial","predict","predicts","predive","predrill","predusk","predusks","pree","preed","preedit","preedits","preeing","preelect","preemie","preemies","preempt","preempts","preen","preenact","preened","preener","preeners","preening","preens","preerect","prees","preexist","prefab","prefabs","preface","prefaced","prefacer","prefaces","prefade","prefaded","prefades","prefect","prefects","prefer","prefers","prefight","prefile","prefiled","prefiles","prefire","prefired","prefires","prefix","prefixal","prefixed","prefixes","preflame","prefocus","preform","preforms","prefrank","prefroze","pregame","preggers","pregnant","preheat","preheats","prehuman","prejudge","prelacy","prelate","prelates","prelatic","prelect","prelects","prelegal","prelife","prelim","prelimit","prelims","prelives","prelude","preluded","preluder","preludes","prelunch","preman","premeal","premed","premedic","premeds","premeet","premen","premie","premier","premiere","premiers","premies","premise","premised","premises","premiss","premium","premiums","premix","premixed","premixes","premolar","premold","premolds","premolt","premoral","premorse","premune","prename","prenames","prenatal","prenomen","prenoon","prentice","preorder","prep","prepack","prepacks","prepaid","prepare","prepared","preparer","prepares","prepaste","prepay","prepays","prepense","prepill","preplace","preplan","preplans","preplant","prepped","preppie","preppier","preppies","preppily","prepping","preppy","prepreg","prepregs","preprice","preprint","preps","prepuce","prepuces","prepunch","prepupal","prerace","prerenal","prerinse","preriot","prerock","presa","presage","presaged","presager","presages","presale","prescind","prescore","prese","presell","presells","presence","present","presents","preserve","preset","presets","preshape","preshow","preshown","preshows","preside","presided","presider","presides","presidia","presidio","presift","presifts","presleep","preslice","presoak","presoaks","presold","presong","presort","presorts","presplit","press","pressed","presser","pressers","presses","pressing","pressman","pressmen","pressor","pressors","pressrun","pressure","prest","prestamp","prester","presters","prestige","presto","prestos","prests","presume","presumed","presumer","presumes","pretape","pretaped","pretapes","pretaste","pretax","preteen","preteens","pretence","pretend","pretends","pretense","preterit","pretest","pretests","pretext","pretexts","pretor","pretors","pretrain","pretreat","pretrial","pretrim","pretrims","prettied","prettier","pretties","prettify","prettily","pretty","pretype","pretyped","pretypes","pretzel","pretzels","preunion","preunite","prevail","prevails","prevent","prevents","preview","previews","previous","previse","prevised","previses","previsor","prevue","prevued","prevues","prevuing","prewar","prewarm","prewarms","prewarn","prewarns","prewash","prework","prewrap","prewraps","prex","prexes","prexies","prexy","prey","preyed","preyer","preyers","preying","preys","prez","prezes","priapean","priapi","priapic","priapism","priapus","price","priced","pricer","pricers","prices","pricey","pricier","priciest","pricing","prick","pricked","pricker","prickers","pricket","prickets","prickier","pricking","prickle","prickled","prickles","prickly","pricks","pricky","pricy","pride","prided","prideful","prides","priding","pried","priedieu","prier","priers","pries","priest","priested","priestly","priests","prig","prigged","priggery","prigging","priggish","priggism","prigs","prill","prilled","prilling","prills","prim","prima","primacy","primage","primages","primal","primary","primas","primatal","primate","primates","prime","primed","primely","primer","primero","primeros","primers","primes","primeval","primi","primine","primines","priming","primings","primly","primmed","primmer","primmest","primming","primness","primo","primos","primp","primped","primping","primps","primrose","prims","primsie","primula","primulas","primus","primuses","prince","princely","princes","princess","principe","principi","princock","princox","prink","prinked","prinker","prinkers","prinking","prinks","print","printed","printer","printers","printery","printing","printout","prints","prior","priorate","prioress","priories","priority","priorly","priors","priory","prise","prised","prisere","priseres","prises","prising","prism","prismoid","prisms","prison","prisoned","prisoner","prisons","priss","prissed","prisses","prissier","prissies","prissily","prissing","prissy","pristane","pristine","prithee","privacy","private","privater","privates","privet","privets","privier","privies","priviest","privily","privity","privy","prize","prized","prizer","prizers","prizes","prizing","pro","proa","proas","probable","probably","proband","probands","probang","probangs","probate","probated","probates","probe","probed","prober","probers","probes","probing","probit","probits","probity","problem","problems","procaine","procarp","procarps","proceed","proceeds","process","prochain","prochein","proclaim","proctor","proctors","procural","procure","procured","procurer","procures","prod","prodded","prodder","prodders","prodding","prodigal","prodigy","prodrome","prods","produce","produced","producer","produces","product","products","proem","proemial","proems","proette","proettes","prof","profane","profaned","profaner","profanes","profess","proffer","proffers","profile","profiled","profiler","profiles","profit","profited","profiter","profits","profound","profs","profuse","prog","progeny","progeria","progged","progger","proggers","progging","prognose","prograde","program","programs","progress","progs","prohibit","project","projects","projet","projets","prolabor","prolamin","prolan","prolans","prolapse","prolate","prole","proleg","prolegs","proles","prolific","proline","prolines","prolix","prolixly","prolog","prologed","prologs","prologue","prolong","prolonge","prolongs","prom","promine","promines","promise","promised","promisee","promiser","promises","promisor","promo","promos","promote","promoted","promoter","promotes","prompt","prompted","prompter","promptly","prompts","proms","promulge","pronate","pronated","pronates","pronator","prone","pronely","prong","pronged","pronging","prongs","pronota","pronotum","pronoun","pronouns","pronto","proof","proofed","proofer","proofers","proofing","proofs","prop","propane","propanes","propel","propels","propend","propends","propene","propenes","propenol","propense","propenyl","proper","properer","properly","propers","property","prophage","prophase","prophecy","prophesy","prophet","prophets","propine","propined","propines","propjet","propjets","propman","propmen","propolis","propone","proponed","propones","proposal","propose","proposed","proposer","proposes","propound","propped","propping","props","propyl","propyla","propylic","propylon","propyls","prorate","prorated","prorates","prorogue","pros","prosaic","prosaism","prosaist","prose","prosect","prosects","prosed","proser","prosers","proses","prosier","prosiest","prosily","prosing","prosit","proso","prosodic","prosody","prosoma","prosomal","prosomas","prosos","prospect","prosper","prospers","pross","prosses","prossie","prossies","prost","prostate","prostie","prosties","prostyle","prosy","protamin","protases","protasis","protatic","protea","protean","proteans","proteas","protease","protect","protects","protege","protegee","proteges","protei","proteid","proteide","proteids","protein","proteins","protend","protends","proteose","protest","protests","proteus","protist","protists","protium","protiums","protocol","proton","protonic","protons","protopod","protoxid","protozoa","protract","protrude","protyl","protyle","protyles","protyls","proud","prouder","proudest","proudful","proudly","prounion","provable","provably","prove","proved","proven","provenly","prover","proverb","proverbs","provers","proves","provide","provided","provider","provides","province","proving","proviral","provirus","proviso","provisos","provoke","provoked","provoker","provokes","provost","provosts","prow","prowar","prower","prowess","prowest","prowl","prowled","prowler","prowlers","prowling","prowls","prows","proxemic","proxies","proximal","proximo","proxy","prude","prudence","prudent","prudery","prudes","prudish","pruinose","prunable","prune","pruned","prunella","prunelle","prunello","pruner","pruners","prunes","pruning","prurient","prurigo","prurigos","pruritic","pruritus","prussic","pruta","prutah","prutot","prutoth","pry","pryer","pryers","prying","pryingly","prythee","psalm","psalmed","psalmic","psalming","psalmist","psalmody","psalms","psalter","psalters","psaltery","psaltry","psammite","psammon","psammons","pschent","pschents","psephite","pseud","pseudo","pseudos","pseuds","pshaw","pshawed","pshawing","pshaws","psi","psilocin","psiloses","psilosis","psilotic","psis","psoae","psoai","psoas","psoatic","psocid","psocids","psoralea","psoralen","psst","psych","psyche","psyched","psyches","psychic","psychics","psyching","psycho","psychos","psychs","psylla","psyllas","psyllid","psyllids","psyllium","psywar","psywars","pterin","pterins","pteropod","pterygia","pteryla","pterylae","ptisan","ptisans","ptomain","ptomaine","ptomains","ptoses","ptosis","ptotic","ptyalin","ptyalins","ptyalism","pub","puberal","pubertal","puberty","pubes","pubic","pubis","public","publican","publicly","publics","publish","pubs","puccoon","puccoons","puce","puces","puck","pucka","pucker","puckered","puckerer","puckers","puckery","puckish","pucks","pud","pudding","puddings","puddle","puddled","puddler","puddlers","puddles","puddlier","puddling","puddly","pudency","pudenda","pudendal","pudendum","pudgier","pudgiest","pudgily","pudgy","pudibund","pudic","puds","pueblo","pueblos","puerile","puff","puffball","puffed","puffer","puffers","puffery","puffier","puffiest","puffily","puffin","puffing","puffins","puffs","puffy","pug","pugaree","pugarees","puggaree","pugged","puggier","puggiest","pugging","puggish","puggree","puggrees","puggries","puggry","puggy","pugh","pugilism","pugilist","pugmark","pugmarks","pugree","pugrees","pugs","puisne","puisnes","puissant","puja","pujah","pujahs","pujas","puke","puked","pukes","puking","pukka","pul","pula","pule","puled","puler","pulers","pules","puli","pulicene","pulicide","pulik","puling","pulingly","pulings","pulis","pull","pullback","pulled","puller","pullers","pullet","pullets","pulley","pulleys","pulling","pullman","pullmans","pullout","pullouts","pullover","pulls","pullup","pullups","pulmonic","pulmotor","pulp","pulpal","pulpally","pulped","pulper","pulpers","pulpier","pulpiest","pulpily","pulping","pulpit","pulpital","pulpits","pulpless","pulpous","pulps","pulpwood","pulpy","pulque","pulques","puls","pulsant","pulsar","pulsars","pulsate","pulsated","pulsates","pulsator","pulse","pulsed","pulsejet","pulser","pulsers","pulses","pulsing","pulsion","pulsions","pulsojet","pulvilli","pulvinar","pulvini","pulvinus","puma","pumas","pumelo","pumelos","pumice","pumiced","pumicer","pumicers","pumices","pumicing","pumicite","pummel","pummeled","pummels","pump","pumped","pumper","pumpers","pumping","pumpkin","pumpkins","pumpless","pumplike","pumps","pun","puna","punas","punch","punched","puncheon","puncher","punchers","punches","punchier","punchily","punching","punchy","punctate","punctual","puncture","pundit","punditic","punditry","pundits","pung","pungency","pungent","pungle","pungled","pungles","pungling","pungs","punier","puniest","punily","puniness","punish","punished","punisher","punishes","punition","punitive","punitory","punk","punka","punkah","punkahs","punkas","punker","punkest","punkey","punkeys","punkie","punkier","punkies","punkiest","punkin","punkins","punks","punky","punned","punner","punners","punnet","punnets","punnier","punniest","punning","punny","puns","punster","punsters","punt","punted","punter","punters","punties","punting","punto","puntos","punts","punty","puny","pup","pupa","pupae","pupal","puparia","puparial","puparium","pupas","pupate","pupated","pupates","pupating","pupation","pupfish","pupil","pupilage","pupilar","pupilary","pupils","pupped","puppet","puppetry","puppets","puppies","pupping","puppy","puppydom","puppyish","pups","pur","purana","puranas","puranic","purblind","purchase","purda","purdah","purdahs","purdas","pure","purebred","puree","pureed","pureeing","purees","purely","pureness","purer","purest","purfle","purfled","purfles","purfling","purge","purged","purger","purgers","purges","purging","purgings","puri","purified","purifier","purifies","purify","purin","purine","purines","purins","puris","purism","purisms","purist","puristic","purists","puritan","puritans","purities","purity","purl","purled","purlieu","purlieus","purlin","purline","purlines","purling","purlins","purloin","purloins","purls","purple","purpled","purpler","purples","purplest","purpling","purplish","purply","purport","purports","purpose","purposed","purposes","purpura","purpuras","purpure","purpures","purpuric","purpurin","purr","purred","purring","purrs","purs","purse","pursed","purser","pursers","purses","pursier","pursiest","pursily","pursing","purslane","pursuant","pursue","pursued","pursuer","pursuers","pursues","pursuing","pursuit","pursuits","pursy","purulent","purvey","purveyed","purveyor","purveys","purview","purviews","pus","puses","push","pushball","pushcart","pushdown","pushed","pusher","pushers","pushes","pushful","pushier","pushiest","pushily","pushing","pushover","pushpin","pushpins","pushrod","pushrods","pushup","pushups","pushy","pusley","pusleys","puslike","puss","pusses","pussier","pussies","pussiest","pussley","pussleys","pusslies","pusslike","pussly","pussy","pussycat","pustular","pustule","pustuled","pustules","put","putamen","putamina","putative","putlog","putlogs","putoff","putoffs","puton","putons","putout","putouts","putrefy","putrid","putridly","puts","putsch","putsches","putt","putted","puttee","puttees","putter","puttered","putterer","putters","putti","puttied","puttier","puttiers","putties","putting","putto","putts","putty","puttying","putz","putzed","putzes","putzing","puzzle","puzzled","puzzler","puzzlers","puzzles","puzzling","pya","pyaemia","pyaemias","pyaemic","pyas","pycnidia","pycnoses","pycnosis","pycnotic","pye","pyelitic","pyelitis","pyemia","pyemias","pyemic","pyes","pygidia","pygidial","pygidium","pygmaean","pygmean","pygmies","pygmoid","pygmy","pygmyish","pygmyism","pyic","pyin","pyins","pyjamas","pyknic","pyknics","pyknoses","pyknosis","pyknotic","pylon","pylons","pylori","pyloric","pylorus","pyoderma","pyogenic","pyoid","pyorrhea","pyoses","pyosis","pyralid","pyralids","pyramid","pyramids","pyran","pyranoid","pyranose","pyrans","pyre","pyrene","pyrenes","pyrenoid","pyres","pyretic","pyrexia","pyrexial","pyrexias","pyrexic","pyric","pyridic","pyridine","pyriform","pyrite","pyrites","pyritic","pyritous","pyrogen","pyrogens","pyrola","pyrolas","pyrology","pyrolyze","pyrone","pyrones","pyronine","pyrope","pyropes","pyrosis","pyrostat","pyroxene","pyrrhic","pyrrhics","pyrrol","pyrrole","pyrroles","pyrrolic","pyrrols","pyruvate","python","pythonic","pythons","pyuria","pyurias","pyx","pyxes","pyxides","pyxidia","pyxidium","pyxie","pyxies","pyxis","qaid","qaids","qanat","qanats","qat","qats","qindar","qindarka","qindars","qintar","qintars","qiviut","qiviuts","qoph","qophs","qua","quack","quacked","quackery","quacking","quackish","quackism","quacks","quad","quadded","quadding","quadplex","quadrans","quadrant","quadrat","quadrate","quadrats","quadric","quadrics","quadriga","quadroon","quads","quaere","quaeres","quaestor","quaff","quaffed","quaffer","quaffers","quaffing","quaffs","quag","quagga","quaggas","quaggier","quaggy","quagmire","quagmiry","quags","quahaug","quahaugs","quahog","quahogs","quai","quaich","quaiches","quaichs","quaigh","quaighs","quail","quailed","quailing","quails","quaint","quainter","quaintly","quais","quake","quaked","quaker","quakers","quakes","quakier","quakiest","quakily","quaking","quaky","quale","qualia","qualify","quality","qualm","qualmier","qualmish","qualms","qualmy","quamash","quandang","quandary","quandong","quango","quangos","quant","quanta","quantal","quanted","quantic","quantics","quantify","quantile","quanting","quantity","quantize","quantong","quants","quantum","quare","quark","quarks","quarrel","quarrels","quarried","quarrier","quarries","quarry","quart","quartan","quartans","quarte","quarter","quartern","quarters","quartes","quartet","quartets","quartic","quartics","quartile","quarto","quartos","quarts","quartz","quartzes","quasar","quasars","quash","quashed","quasher","quashers","quashes","quashing","quasi","quass","quasses","quassia","quassias","quassin","quassins","quate","quatorze","quatrain","quatre","quatres","quaver","quavered","quaverer","quavers","quavery","quay","quayage","quayages","quaylike","quays","quayside","quean","queans","queasier","queasily","queasy","queazier","queazy","queen","queendom","queened","queening","queenly","queens","queer","queered","queerer","queerest","queering","queerish","queerly","queers","quell","quelled","queller","quellers","quelling","quells","quench","quenched","quencher","quenches","quenelle","quercine","querida","queridas","queried","querier","queriers","queries","querist","querists","quern","querns","query","querying","quest","quested","quester","questers","questing","question","questor","questors","quests","quetzal","quetzals","queue","queued","queueing","queuer","queuers","queues","queuing","quey","queys","quezal","quezales","quezals","quibble","quibbled","quibbler","quibbles","quiche","quiches","quick","quicken","quickens","quicker","quickest","quickie","quickies","quickly","quicks","quickset","quid","quiddity","quidnunc","quids","quiet","quieted","quieten","quietens","quieter","quieters","quietest","quieting","quietism","quietist","quietly","quiets","quietude","quietus","quiff","quiffs","quill","quillai","quillaia","quillais","quillaja","quilled","quillet","quillets","quilling","quills","quilt","quilted","quilter","quilters","quilting","quilts","quin","quinary","quinate","quince","quinces","quincunx","quinela","quinelas","quinella","quinic","quiniela","quinin","quinina","quininas","quinine","quinines","quinins","quinnat","quinnats","quinoa","quinoas","quinoid","quinoids","quinol","quinolin","quinols","quinone","quinones","quins","quinsies","quinsy","quint","quintain","quintal","quintals","quintan","quintans","quintar","quintars","quinte","quintes","quintet","quintets","quintic","quintics","quintile","quintin","quintins","quints","quip","quipped","quipping","quippish","quippu","quippus","quips","quipster","quipu","quipus","quire","quired","quires","quiring","quirk","quirked","quirkier","quirkily","quirking","quirks","quirky","quirt","quirted","quirting","quirts","quisling","quit","quitch","quitches","quite","quitrent","quits","quitted","quitter","quitters","quitting","quittor","quittors","quiver","quivered","quiverer","quivers","quivery","quixote","quixotes","quixotic","quixotry","quiz","quizzed","quizzer","quizzers","quizzes","quizzing","quod","quods","quohog","quohogs","quoin","quoined","quoining","quoins","quoit","quoited","quoiting","quoits","quokka","quokkas","quomodo","quomodos","quondam","quorum","quorums","quota","quotable","quotably","quotas","quote","quoted","quoter","quoters","quotes","quoth","quotha","quotient","quoting","qursh","qurshes","qurush","qurushes","rabat","rabato","rabatos","rabats","rabbet","rabbeted","rabbets","rabbi","rabbies","rabbin","rabbinic","rabbins","rabbis","rabbit","rabbited","rabbiter","rabbitry","rabbits","rabbity","rabble","rabbled","rabbler","rabblers","rabbles","rabbling","rabboni","rabbonis","rabic","rabid","rabidity","rabidly","rabies","rabietic","raccoon","raccoons","race","raced","racemate","raceme","racemed","racemes","racemic","racemism","racemize","racemoid","racemose","racemous","racer","racers","races","raceway","raceways","rachet","rachets","rachial","rachides","rachilla","rachis","rachises","rachitic","rachitis","racial","racially","racier","raciest","racily","raciness","racing","racings","racism","racisms","racist","racists","rack","racked","racker","rackers","racket","racketed","rackets","rackety","rackful","rackfuls","racking","rackle","racks","rackwork","raclette","racon","racons","racoon","racoons","racquet","racquets","racy","rad","radar","radars","radded","radding","raddle","raddled","raddles","raddling","radiable","radial","radiale","radialia","radially","radials","radian","radiance","radiancy","radians","radiant","radiants","radiate","radiated","radiates","radiator","radical","radicals","radicand","radicate","radicel","radicels","radices","radicle","radicles","radii","radio","radioed","radioing","radioman","radiomen","radios","radish","radishes","radium","radiums","radius","radiuses","radix","radixes","radome","radomes","radon","radons","rads","radula","radulae","radular","radulas","raff","raffia","raffias","raffish","raffle","raffled","raffler","rafflers","raffles","raffling","raffs","raft","rafted","rafter","raftered","rafters","rafting","rafts","raftsman","raftsmen","rag","raga","ragas","ragbag","ragbags","rage","raged","ragee","ragees","rages","ragged","raggeder","raggedly","raggedy","raggee","raggees","raggies","ragging","raggle","raggles","raggy","ragi","raging","ragingly","ragis","raglan","raglans","ragman","ragmen","ragout","ragouted","ragouts","rags","ragtag","ragtags","ragtime","ragtimes","ragtop","ragtops","ragweed","ragweeds","ragwort","ragworts","rah","raia","raias","raid","raided","raider","raiders","raiding","raids","rail","railbird","railbus","railcar","railcars","railed","railer","railers","railhead","railing","railings","raillery","railroad","rails","railway","railways","raiment","raiments","rain","rainband","rainbird","rainbow","rainbows","raincoat","raindrop","rained","rainfall","rainier","rainiest","rainily","raining","rainless","rainout","rainouts","rains","rainwash","rainwear","rainy","raisable","raise","raised","raiser","raisers","raises","raisin","raising","raisings","raisins","raisiny","raisonne","raj","raja","rajah","rajahs","rajas","rajes","rake","raked","rakee","rakees","rakehell","rakeoff","rakeoffs","raker","rakers","rakes","raki","raking","rakis","rakish","rakishly","rale","rales","rallied","rallier","ralliers","rallies","ralline","rally","rallye","rallyes","rallying","rallyist","ralph","ralphed","ralphing","ralphs","ram","ramate","ramble","rambled","rambler","ramblers","rambles","rambling","rambutan","ramee","ramees","ramekin","ramekins","ramenta","ramentum","ramequin","ramet","ramets","rami","ramie","ramies","ramified","ramifies","ramiform","ramify","ramilie","ramilies","ramillie","ramjet","ramjets","rammed","rammer","rammers","rammier","rammiest","ramming","rammish","rammy","ramose","ramosely","ramosity","ramous","ramp","rampage","rampaged","rampager","rampages","rampancy","rampant","rampart","ramparts","ramped","rampike","rampikes","ramping","rampion","rampions","rampole","rampoles","ramps","ramrod","ramrods","rams","ramshorn","ramson","ramsons","ramtil","ramtils","ramulose","ramulous","ramus","ran","rance","rances","ranch","ranched","rancher","ranchero","ranchers","ranches","ranching","ranchman","ranchmen","rancho","ranchos","rancid","rancidly","rancor","rancored","rancors","rancour","rancours","rand","randan","randans","randier","randies","randiest","random","randomly","randoms","rands","randy","ranee","ranees","rang","range","ranged","ranger","rangers","ranges","rangier","rangiest","ranging","rangy","rani","ranid","ranids","ranis","rank","ranked","ranker","rankers","rankest","ranking","rankings","rankish","rankle","rankled","rankles","rankling","rankly","rankness","ranks","ranpike","ranpikes","ransack","ransacks","ransom","ransomed","ransomer","ransoms","rant","ranted","ranter","ranters","ranting","rants","ranula","ranulas","rap","rapacity","rape","raped","raper","rapers","rapes","rapeseed","raphae","raphe","raphes","raphia","raphias","raphide","raphides","raphis","rapid","rapider","rapidest","rapidity","rapidly","rapids","rapier","rapiered","rapiers","rapine","rapines","raping","rapist","rapists","rapparee","rapped","rappee","rappees","rappel","rappels","rappen","rapper","rappers","rapping","rappini","rapport","rapports","raps","rapt","raptly","raptness","raptor","raptors","rapture","raptured","raptures","rare","rarebit","rarebits","rared","rarefied","rarefier","rarefies","rarefy","rarely","rareness","rarer","rareripe","rares","rarest","rarified","rarifies","rarify","raring","rarities","rarity","ras","rasbora","rasboras","rascal","rascally","rascals","rase","rased","raser","rasers","rases","rash","rasher","rashers","rashes","rashest","rashlike","rashly","rashness","rasing","rasorial","rasp","rasped","rasper","raspers","raspier","raspiest","rasping","raspish","rasps","raspy","rassle","rassled","rassles","rassling","raster","rasters","rasure","rasures","rat","ratable","ratably","ratafee","ratafees","ratafia","ratafias","ratal","ratals","ratan","ratanies","ratans","ratany","rataplan","ratatat","ratatats","ratch","ratches","ratchet","ratchets","rate","rateable","rateably","rated","ratel","ratels","rater","raters","rates","ratfink","ratfinks","ratfish","rath","rathe","rather","rathole","ratholes","raticide","ratified","ratifier","ratifies","ratify","ratine","ratines","rating","ratings","ratio","ration","rational","rationed","rations","ratios","ratite","ratites","ratlike","ratlin","ratline","ratlines","ratlins","rato","ratoon","ratooned","ratooner","ratoons","ratos","rats","ratsbane","rattail","rattails","rattan","rattans","ratted","ratteen","ratteens","ratten","rattened","rattener","rattens","ratter","ratters","rattier","rattiest","ratting","rattish","rattle","rattled","rattler","rattlers","rattles","rattling","rattly","ratton","rattons","rattoon","rattoons","rattrap","rattraps","ratty","raucity","raucous","raunchy","ravage","ravaged","ravager","ravagers","ravages","ravaging","rave","raved","ravel","raveled","raveler","ravelers","ravelin","raveling","ravelins","ravelled","raveller","ravelly","ravels","raven","ravened","ravener","raveners","ravening","ravenous","ravens","raver","ravers","raves","ravigote","ravin","ravine","ravined","ravines","raving","ravingly","ravings","ravining","ravins","ravioli","raviolis","ravish","ravished","ravisher","ravishes","raw","rawboned","rawer","rawest","rawhide","rawhided","rawhides","rawin","rawins","rawish","rawly","rawness","raws","rax","raxed","raxes","raxing","ray","raya","rayah","rayahs","rayas","rayed","raygrass","raying","rayless","raylike","rayon","rayons","rays","raze","razed","razee","razeed","razeeing","razees","razer","razers","razes","razing","razor","razored","razoring","razors","razz","razzed","razzes","razzing","reabsorb","reaccede","reaccent","reaccept","reaccuse","reach","reached","reacher","reachers","reaches","reaching","react","reactant","reacted","reacting","reaction","reactive","reactor","reactors","reacts","read","readable","readably","readapt","readapts","readd","readded","readdict","readding","readds","reader","readers","readied","readier","readies","readiest","readily","reading","readings","readjust","readmit","readmits","readopt","readopts","readorn","readorns","readout","readouts","reads","ready","readying","reaffirm","reaffix","reagent","reagents","reagin","reaginic","reagins","real","realer","reales","realest","realgar","realgars","realia","realign","realigns","realise","realised","realiser","realises","realism","realisms","realist","realists","reality","realize","realized","realizer","realizes","reallot","reallots","really","realm","realms","realness","reals","realter","realters","realties","realty","ream","reamed","reamer","reamers","reaming","reams","reannex","reanoint","reap","reapable","reaped","reaper","reapers","reaphook","reaping","reappear","reapply","reaps","rear","reared","rearer","rearers","reargue","reargued","reargues","rearing","rearm","rearmed","rearmice","rearming","rearmost","rearms","rearouse","rearrest","rears","rearward","reascend","reascent","reason","reasoned","reasoner","reasons","reassail","reassert","reassess","reassign","reassort","reassume","reassure","reata","reatas","reattach","reattack","reattain","reavail","reavails","reave","reaved","reaver","reavers","reaves","reaving","reavow","reavowed","reavows","reawake","reawaked","reawaken","reawakes","reawoke","reawoken","reb","rebait","rebaited","rebaits","rebate","rebated","rebater","rebaters","rebates","rebating","rebato","rebatos","rebbe","rebbes","rebec","rebeck","rebecks","rebecs","rebel","rebeldom","rebelled","rebels","rebid","rebidden","rebids","rebill","rebilled","rebills","rebind","rebinds","rebirth","rebirths","reblend","reblends","rebloom","reblooms","reboant","reboard","reboards","rebodied","rebodies","rebody","reboil","reboiled","reboils","rebook","rebooked","rebooks","rebop","rebops","rebore","rebored","rebores","reboring","reborn","rebottle","rebought","rebound","rebounds","rebozo","rebozos","rebranch","rebs","rebuff","rebuffed","rebuffs","rebuild","rebuilds","rebuilt","rebuke","rebuked","rebuker","rebukers","rebukes","rebuking","reburial","reburied","reburies","rebury","rebus","rebuses","rebut","rebuts","rebuttal","rebutted","rebutter","rebutton","rebuy","rebuying","rebuys","rec","recall","recalled","recaller","recalls","recamier","recane","recaned","recanes","recaning","recant","recanted","recanter","recants","recap","recapped","recaps","recarry","recast","recasts","recede","receded","recedes","receding","receipt","receipts","receive","received","receiver","receives","recency","recent","recenter","recently","recept","receptor","recepts","recess","recessed","recesses","rechange","recharge","rechart","recharts","recheat","recheats","recheck","rechecks","rechew","rechewed","rechews","rechoose","rechose","rechosen","recipe","recipes","recircle","recision","recital","recitals","recite","recited","reciter","reciters","recites","reciting","reck","recked","recking","reckless","reckon","reckoned","reckoner","reckons","recks","reclad","reclaim","reclaims","reclame","reclames","reclasp","reclasps","reclean","recleans","recline","reclined","recliner","reclines","reclothe","recluse","recluses","recoal","recoaled","recoals","recock","recocked","recocks","recode","recoded","recodes","recodify","recoding","recoil","recoiled","recoiler","recoils","recoin","recoined","recoins","recolor","recolors","recomb","recombed","recombs","recommit","recon","recons","reconvey","recook","recooked","recooks","recopied","recopies","recopy","record","recorded","recorder","records","recork","recorked","recorks","recount","recounts","recoup","recoupe","recouped","recouple","recoups","recourse","recover","recovers","recovery","recrate","recrated","recrates","recreant","recreate","recross","recrown","recrowns","recruit","recruits","recs","recta","rectal","rectally","recti","rectify","recto","rector","rectors","rectory","rectos","rectrix","rectum","rectums","rectus","recur","recurred","recurs","recurve","recurved","recurves","recusant","recuse","recused","recuses","recusing","recut","recuts","recycle","recycled","recycler","recycles","red","redact","redacted","redactor","redacts","redamage","redan","redans","redargue","redate","redated","redates","redating","redbait","redbaits","redbay","redbays","redbird","redbirds","redbone","redbones","redbrick","redbud","redbuds","redbug","redbugs","redcap","redcaps","redcoat","redcoats","redd","redded","redden","reddened","reddens","redder","redders","reddest","redding","reddish","reddle","reddled","reddles","reddling","redds","rede","redear","redears","redecide","reded","redeem","redeemed","redeemer","redeems","redefeat","redefect","redefied","redefies","redefine","redefy","redemand","redenied","redenies","redeny","redeploy","redes","redesign","redeye","redeyes","redfin","redfins","redfish","redhead","redheads","redhorse","redia","rediae","redial","redias","redid","redigest","reding","redip","redipped","redips","redipt","redirect","redivide","redleg","redlegs","redline","redlined","redlines","redly","redneck","rednecks","redness","redo","redock","redocked","redocks","redoes","redoing","redolent","redon","redone","redonned","redons","redos","redouble","redoubt","redoubts","redound","redounds","redout","redouts","redowa","redowas","redox","redoxes","redpoll","redpolls","redraft","redrafts","redraw","redrawer","redrawn","redraws","redream","redreams","redreamt","redress","redrew","redried","redries","redrill","redrills","redrive","redriven","redrives","redroot","redroots","redrove","redry","redrying","reds","redshank","redshift","redshirt","redskin","redskins","redstart","redtop","redtops","redub","redubbed","redubs","reduce","reduced","reducer","reducers","reduces","reducing","reductor","reduviid","redux","redware","redwares","redwing","redwings","redwood","redwoods","redye","redyed","redyeing","redyes","ree","reearn","reearned","reearns","reechier","reecho","reechoed","reechoes","reechy","reed","reedbird","reedbuck","reeded","reedier","reediest","reedify","reedily","reeding","reedings","reedit","reedited","reedits","reedling","reedman","reedmen","reeds","reedy","reef","reefed","reefer","reefers","reefier","reefiest","reefing","reefs","reefy","reeject","reejects","reek","reeked","reeker","reekers","reekier","reekiest","reeking","reeks","reeky","reel","reelable","reelect","reelects","reeled","reeler","reelers","reeling","reels","reembark","reembody","reemerge","reemit","reemits","reemploy","reenact","reenacts","reendow","reendows","reengage","reenjoy","reenjoys","reenlist","reenroll","reenter","reenters","reentry","reequip","reequips","reerect","reerects","rees","reest","reested","reesting","reests","reeve","reeved","reeves","reeving","reevoke","reevoked","reevokes","reexpel","reexpels","reexport","ref","reface","refaced","refaces","refacing","refall","refallen","refalls","refasten","refect","refected","refects","refed","refeed","refeeds","refeel","refeels","refel","refell","refelled","refels","refelt","refence","refenced","refences","refer","referee","refereed","referees","referent","referral","referred","referrer","refers","reffed","reffing","refight","refights","refigure","refile","refiled","refiles","refiling","refill","refilled","refills","refilm","refilmed","refilms","refilter","refind","refinds","refine","refined","refiner","refiners","refinery","refines","refining","refinish","refire","refired","refires","refiring","refit","refits","refitted","refix","refixed","refixes","refixing","reflate","reflated","reflates","reflect","reflects","reflet","reflets","reflew","reflex","reflexed","reflexes","reflexly","reflies","refloat","refloats","reflood","refloods","reflow","reflowed","reflower","reflown","reflows","refluent","reflux","refluxed","refluxes","refly","reflying","refocus","refold","refolded","refolds","reforest","reforge","reforged","reforges","reform","reformat","reformed","reformer","reforms","refought","refound","refounds","refract","refracts","refrain","refrains","reframe","reframed","reframes","refreeze","refresh","refried","refries","refront","refronts","refroze","refrozen","refry","refrying","refs","reft","refuel","refueled","refuels","refuge","refuged","refugee","refugees","refuges","refugia","refuging","refugium","refund","refunded","refunder","refunds","refusal","refusals","refuse","refused","refuser","refusers","refuses","refusing","refusnik","refutal","refutals","refute","refuted","refuter","refuters","refutes","refuting","reg","regain","regained","regainer","regains","regal","regale","regaled","regaler","regalers","regales","regalia","regaling","regality","regally","regard","regarded","regards","regather","regatta","regattas","regauge","regauged","regauges","regave","regear","regeared","regears","regelate","regency","regent","regental","regents","reges","reggae","reggaes","regicide","regild","regilded","regilds","regilt","regime","regimen","regimens","regiment","regimes","regina","reginae","reginal","reginas","region","regional","regions","register","registry","regius","regive","regiven","regives","regiving","reglaze","reglazed","reglazes","reglet","reglets","regloss","reglow","reglowed","reglows","reglue","reglued","reglues","regluing","regma","regmata","regna","regnal","regnancy","regnant","regnum","regolith","regorge","regorged","regorges","regosol","regosols","regrade","regraded","regrades","regraft","regrafts","regrant","regrants","regrate","regrated","regrates","regreen","regreens","regreet","regreets","regress","regret","regrets","regrew","regrind","regrinds","regroom","regrooms","regroove","reground","regroup","regroups","regrow","regrown","regrows","regrowth","regs","regular","regulars","regulate","reguli","reguline","regulus","rehab","rehabbed","rehabber","rehabs","rehammer","rehandle","rehang","rehanged","rehangs","reharden","rehash","rehashed","rehashes","rehear","reheard","rehears","rehearse","reheat","reheated","reheater","reheats","reheel","reheeled","reheels","rehem","rehemmed","rehems","rehinge","rehinged","rehinges","rehire","rehired","rehires","rehiring","rehoboam","rehouse","rehoused","rehouses","rehung","rei","reif","reified","reifier","reifiers","reifies","reifs","reify","reifying","reign","reigned","reigning","reignite","reigns","reimage","reimaged","reimages","reimport","reimpose","rein","reincite","reincur","reincurs","reindeer","reindex","reindict","reinduce","reinduct","reined","reinfect","reinform","reinfuse","reining","reinject","reinjure","reinjury","reink","reinked","reinking","reinks","reinless","reins","reinsert","reinsman","reinsmen","reinsure","reinter","reinters","reinvade","reinvent","reinvest","reinvite","reinvoke","reis","reissue","reissued","reissuer","reissues","reitbok","reitboks","reive","reived","reiver","reivers","reives","reiving","rejacket","reject","rejected","rejectee","rejecter","rejector","rejects","rejigger","rejoice","rejoiced","rejoicer","rejoices","rejoin","rejoined","rejoins","rejudge","rejudged","rejudges","rejuggle","rekey","rekeyed","rekeying","rekeys","rekindle","reknit","reknits","relabel","relabels","relace","relaced","relaces","relacing","relaid","relapse","relapsed","relapser","relapses","relate","related","relater","relaters","relates","relating","relation","relative","relator","relators","relaunch","relax","relaxant","relaxed","relaxer","relaxers","relaxes","relaxin","relaxing","relaxins","relay","relayed","relaying","relays","relearn","relearns","relearnt","release","released","releaser","releases","relegate","relend","relends","relent","relented","relents","relet","relets","reletter","relevant","releve","releves","reliable","reliably","reliance","reliant","relic","relics","relict","relicts","relied","relief","reliefs","relier","reliers","relies","relieve","relieved","reliever","relieves","relievo","relievos","relight","relights","religion","reline","relined","relines","relining","relink","relinked","relinks","relique","reliques","relish","relished","relishes","relist","relisted","relists","relit","relive","relived","relives","reliving","reload","reloaded","reloader","reloads","reloan","reloaned","reloans","relocate","relock","relocked","relocks","relucent","reluct","relucted","relucts","relume","relumed","relumes","relumine","reluming","rely","relying","rem","remade","remail","remailed","remails","remain","remained","remains","remake","remakes","remaking","reman","remand","remanded","remands","remanent","remanned","remans","remap","remapped","remaps","remark","remarked","remarker","remarket","remarks","remarque","remarry","remaster","rematch","remate","remated","remates","remating","remedial","remedied","remedies","remedy","remeet","remeets","remelt","remelted","remelts","remember","remend","remended","remends","remerge","remerged","remerges","remet","remex","remiges","remigial","remind","reminded","reminder","reminds","remint","reminted","remints","remise","remised","remises","remising","remiss","remissly","remit","remits","remittal","remitted","remitter","remittor","remix","remixed","remixes","remixing","remixt","remnant","remnants","remodel","remodels","remodify","remolade","remold","remolded","remolds","remora","remoras","remorid","remorse","remorses","remote","remotely","remoter","remotes","remotest","remotion","remount","remounts","removal","removals","remove","removed","remover","removers","removes","removing","rems","remuda","remudas","renail","renailed","renails","renal","rename","renamed","renames","renaming","renature","rend","rended","render","rendered","renderer","renders","rendible","rending","rends","rendzina","renegade","renegado","renege","reneged","reneger","renegers","reneges","reneging","renest","renested","renests","renew","renewal","renewals","renewed","renewer","renewers","renewing","renews","reniform","renig","renigged","renigs","renin","renins","renitent","renminbi","rennase","rennases","rennet","rennets","rennin","rennins","renogram","renotify","renounce","renovate","renown","renowned","renowns","rent","rentable","rental","rentals","rente","rented","renter","renters","rentes","rentier","rentiers","renting","rents","renumber","renvoi","renvois","reobject","reobtain","reoccupy","reoccur","reoccurs","reoffer","reoffers","reoil","reoiled","reoiling","reoils","reopen","reopened","reopens","reoppose","reordain","reorder","reorders","reorient","reoutfit","reovirus","rep","repacify","repack","repacked","repacks","repaid","repaint","repaints","repair","repaired","repairer","repairs","repand","repandly","repanel","repanels","repaper","repapers","repark","reparked","reparks","repartee","repass","repassed","repasses","repast","repasted","repasts","repave","repaved","repaves","repaving","repay","repaying","repays","repeal","repealed","repealer","repeals","repeat","repeated","repeater","repeats","repeg","repegged","repegs","repel","repelled","repeller","repels","repent","repented","repenter","repents","repeople","reperk","reperked","reperks","repetend","rephrase","repin","repine","repined","repiner","repiners","repines","repining","repinned","repins","replace","replaced","replacer","replaces","replan","replans","replant","replants","replate","replated","replates","replay","replayed","replays","replead","repleads","repled","repledge","replete","replevin","replevy","replica","replicas","replicon","replied","replier","repliers","replies","replot","replots","replumb","replumbs","replunge","reply","replying","repo","repolish","repoll","repolled","repolls","report","reported","reporter","reports","repos","reposal","reposals","repose","reposed","reposer","reposers","reposes","reposing","reposit","reposits","repot","repots","repotted","repour","repoured","repours","repousse","repower","repowers","repp","repped","repps","repress","reprice","repriced","reprices","reprieve","reprint","reprints","reprisal","reprise","reprised","reprises","repro","reproach","reprobe","reprobed","reprobes","reproof","reproofs","repros","reproval","reprove","reproved","reprover","reproves","reps","reptant","reptile","reptiles","republic","repugn","repugned","repugns","repulse","repulsed","repulser","repulses","repump","repumped","repumps","repurify","repursue","repute","reputed","reputes","reputing","request","requests","requiem","requiems","requin","requins","require","required","requirer","requires","requital","requite","requited","requiter","requites","rerack","reracked","reracks","reraise","reraised","reraises","reran","reread","rereads","rerecord","reredos","reremice","reremind","rerepeat","rereview","rereward","rerise","rerisen","rerises","rerising","reroll","rerolled","reroller","rerolls","reroof","reroofed","reroofs","rerose","reroute","rerouted","reroutes","rerun","reruns","res","resaddle","resaid","resail","resailed","resails","resale","resales","resalute","resample","resaw","resawed","resawing","resawn","resaws","resay","resaying","resays","rescale","rescaled","rescales","reschool","rescind","rescinds","rescore","rescored","rescores","rescreen","rescript","rescue","rescued","rescuer","rescuers","rescues","rescuing","resculpt","reseal","resealed","reseals","research","reseason","reseat","reseated","reseats","reseau","reseaus","reseaux","resect","resected","resects","resecure","reseda","resedas","resee","reseed","reseeded","reseeds","reseeing","reseek","reseeks","reseen","resees","reseize","reseized","reseizes","resell","reseller","resells","resemble","resend","resends","resent","resented","resents","reserve","reserved","reserver","reserves","reset","resets","resetter","resettle","resew","resewed","resewing","resewn","resews","resh","reshape","reshaped","reshaper","reshapes","reshave","reshaved","reshaven","reshaves","reshes","reshine","reshined","reshines","reship","reships","reshod","reshoe","reshoes","reshone","reshoot","reshoots","reshot","reshow","reshowed","reshown","reshows","resid","reside","resided","resident","resider","residers","resides","residing","resids","residua","residual","residue","residues","residuum","resift","resifted","resifts","resight","resights","resign","resigned","resigner","resigns","resile","resiled","resiles","resiling","resilver","resin","resinate","resined","resinify","resining","resinoid","resinous","resins","resiny","resist","resisted","resister","resistor","resists","resite","resited","resites","resiting","resize","resized","resizes","resizing","resketch","reslate","reslated","reslates","resmelt","resmelts","resmooth","resoak","resoaked","resoaks","resod","resodded","resods","resojet","resojets","resold","resolder","resole","resoled","resoles","resoling","resolute","resolve","resolved","resolver","resolves","resonant","resonate","resorb","resorbed","resorbs","resorcin","resort","resorted","resorter","resorts","resought","resound","resounds","resource","resow","resowed","resowing","resown","resows","respace","respaced","respaces","respade","respaded","respades","respeak","respeaks","respect","respects","respell","respells","respelt","respire","respired","respires","respite","respited","respites","resplice","resplit","resplits","respoke","respoken","respond","responds","responsa","response","respot","respots","resprang","respray","resprays","respread","respring","resprout","resprung","rest","restack","restacks","restaff","restaffs","restage","restaged","restages","restamp","restamps","restart","restarts","restate","restated","restates","rested","rester","resters","restful","resting","restitch","restive","restless","restock","restocks","restoral","restore","restored","restorer","restores","restrain","restress","restrict","restrike","restring","restrive","restroom","restrove","restruck","restrung","rests","restudy","restuff","restuffs","restyle","restyled","restyles","resubmit","result","resulted","results","resume","resumed","resumer","resumers","resumes","resuming","resummon","resupine","resupply","resurge","resurged","resurges","resurvey","ret","retable","retables","retack","retacked","retackle","retacks","retag","retagged","retags","retail","retailed","retailer","retailor","retails","retain","retained","retainer","retains","retake","retaken","retaker","retakers","retakes","retaking","retape","retaped","retapes","retaping","retard","retarded","retarder","retards","retarget","retaste","retasted","retastes","retaught","retax","retaxed","retaxes","retaxing","retch","retched","retches","retching","rete","reteach","reteam","reteamed","reteams","retear","retears","retell","retells","retem","retemper","retems","retene","retenes","retest","retested","retests","rethink","rethinks","rethread","retia","retial","retiarii","retiary","reticent","reticle","reticles","reticula","reticule","retie","retied","reties","retiform","retime","retimed","retimes","retiming","retina","retinae","retinal","retinals","retinas","retine","retinene","retines","retinite","retinol","retinols","retint","retinted","retints","retinue","retinued","retinues","retinula","retirant","retire","retired","retiree","retirees","retirer","retirers","retires","retiring","retitle","retitled","retitles","retold","retook","retool","retooled","retools","retore","retorn","retort","retorted","retorter","retorts","retouch","retrace","retraced","retraces","retrack","retracks","retract","retracts","retrain","retrains","retral","retrally","retread","retreads","retreat","retreats","retrench","retrial","retrials","retried","retries","retrieve","retrim","retrims","retro","retroact","retrofit","retrorse","retros","retry","retrying","rets","retsina","retsinas","retted","retting","retune","retuned","retunes","retuning","return","returned","returnee","returner","returns","retuse","retwist","retwists","retying","retype","retyped","retypes","retyping","reunify","reunion","reunions","reunite","reunited","reuniter","reunites","reusable","reuse","reused","reuses","reusing","reutter","reutters","rev","revalue","revalued","revalues","revamp","revamped","revamper","revamps","revanche","reveal","revealed","revealer","reveals","revehent","reveille","revel","reveled","reveler","revelers","reveling","revelled","reveller","revelry","revels","revenant","revenge","revenged","revenger","revenges","revenual","revenue","revenued","revenuer","revenues","reverb","reverbed","reverbs","revere","revered","reverend","reverent","reverer","reverers","reveres","reverie","reveries","reverify","revering","revers","reversal","reverse","reversed","reverser","reverses","reverso","reversos","revert","reverted","reverter","reverts","revery","revest","revested","revests","revet","revets","revetted","review","reviewal","reviewed","reviewer","reviews","revile","reviled","reviler","revilers","reviles","reviling","revisal","revisals","revise","revised","reviser","revisers","revises","revising","revision","revisit","revisits","revisor","revisors","revisory","revival","revivals","revive","revived","reviver","revivers","revives","revivify","reviving","revoice","revoiced","revoices","revoke","revoked","revoker","revokers","revokes","revoking","revolt","revolted","revolter","revolts","revolute","revolve","revolved","revolver","revolves","revote","revoted","revotes","revoting","revs","revue","revues","revuist","revuists","revulsed","revved","revving","rewake","rewaked","rewaken","rewakens","rewakes","rewaking","rewan","reward","rewarded","rewarder","rewards","rewarm","rewarmed","rewarms","rewash","rewashed","rewashes","rewax","rewaxed","rewaxes","rewaxing","reweave","reweaved","reweaves","rewed","rewedded","reweds","reweigh","reweighs","reweld","rewelded","rewelds","rewet","rewets","rewetted","rewiden","rewidens","rewin","rewind","rewinded","rewinder","rewinds","rewins","rewire","rewired","rewires","rewiring","rewoke","rewoken","rewon","reword","reworded","rewords","rework","reworked","reworks","rewound","rewove","rewoven","rewrap","rewraps","rewrapt","rewrite","rewriter","rewrites","rewrote","rex","rexes","reynard","reynards","rezone","rezoned","rezones","rezoning","rhabdom","rhabdome","rhabdoms","rhachis","rhamnose","rhamnus","rhaphae","rhaphe","rhaphes","rhapsode","rhapsody","rhatany","rhea","rheas","rhebok","rheboks","rhematic","rhenium","rheniums","rheobase","rheology","rheophil","rheostat","rhesus","rhesuses","rhetor","rhetoric","rhetors","rheum","rheumic","rheumier","rheums","rheumy","rhinal","rhinitis","rhino","rhinos","rhizobia","rhizoid","rhizoids","rhizoma","rhizome","rhizomes","rhizomic","rhizopi","rhizopod","rhizopus","rho","rhodamin","rhodic","rhodium","rhodiums","rhodora","rhodoras","rhomb","rhombi","rhombic","rhomboid","rhombs","rhombus","rhonchal","rhonchi","rhonchus","rhos","rhubarb","rhubarbs","rhumb","rhumba","rhumbaed","rhumbas","rhumbs","rhus","rhuses","rhyme","rhymed","rhymer","rhymers","rhymes","rhyming","rhyolite","rhyta","rhythm","rhythmic","rhythms","rhyton","ria","rial","rials","rialto","rialtos","riant","riantly","rias","riata","riatas","rib","ribald","ribaldly","ribaldry","ribalds","riband","ribands","ribband","ribbands","ribbed","ribber","ribbers","ribbier","ribbiest","ribbing","ribbings","ribbon","ribboned","ribbons","ribbony","ribby","ribes","ribgrass","ribier","ribiers","ribless","riblet","riblets","riblike","ribose","riboses","ribosome","ribs","ribwort","ribworts","rice","ricebird","riced","ricer","ricercar","ricers","rices","rich","richen","richened","richens","richer","riches","richest","richly","richness","richweed","ricin","ricing","ricins","ricinus","rick","ricked","rickets","rickety","rickey","rickeys","ricking","rickrack","ricks","ricksha","rickshas","rickshaw","ricochet","ricotta","ricottas","ricrac","ricracs","rictal","rictus","rictuses","rid","ridable","riddance","ridded","ridden","ridder","ridders","ridding","riddle","riddled","riddler","riddlers","riddles","riddling","ride","rideable","rident","rider","riders","rides","ridge","ridged","ridgel","ridgels","ridges","ridgier","ridgiest","ridgil","ridgils","ridging","ridgling","ridgy","ridicule","riding","ridings","ridley","ridleys","ridotto","ridottos","rids","riel","riels","riesling","riever","rievers","rif","rifampin","rife","rifely","rifeness","rifer","rifest","riff","riffed","riffing","riffle","riffled","riffler","rifflers","riffles","riffling","riffraff","riffs","rifle","rifled","rifleman","riflemen","rifler","riflers","riflery","rifles","rifling","riflings","rifs","rift","rifted","rifting","riftless","rifts","rig","rigadoon","rigatoni","rigaudon","rigged","rigger","riggers","rigging","riggings","right","righted","righter","righters","rightest","rightful","righties","righting","rightism","rightist","rightly","righto","rights","righty","rigid","rigidify","rigidity","rigidly","rigor","rigorism","rigorist","rigorous","rigors","rigour","rigours","rigs","rikisha","rikishas","rikshaw","rikshaws","rile","riled","riles","riley","rilievi","rilievo","riling","rill","rille","rilled","rilles","rillet","rillets","rilling","rills","rim","rime","rimed","rimer","rimers","rimes","rimester","rimfire","rimfires","rimier","rimiest","riminess","riming","rimland","rimlands","rimless","rimmed","rimmer","rimmers","rimming","rimose","rimosely","rimosity","rimous","rimple","rimpled","rimples","rimpling","rimrock","rimrocks","rims","rimy","rin","rind","rinded","rinds","ring","ringbark","ringbolt","ringbone","ringdove","ringed","ringent","ringer","ringers","ringgit","ringhals","ringing","ringlet","ringlets","ringlike","ringneck","rings","ringside","ringtail","ringtaw","ringtaws","ringtoss","ringworm","rink","rinks","rinning","rins","rinsable","rinse","rinsed","rinser","rinsers","rinses","rinsible","rinsing","rinsings","rioja","riojas","riot","rioted","rioter","rioters","rioting","riotous","riots","rip","riparian","ripcord","ripcords","ripe","riped","ripely","ripen","ripened","ripener","ripeners","ripeness","ripening","ripens","riper","ripes","ripest","ripieni","ripieno","ripienos","riping","ripoff","ripoffs","ripost","riposte","riposted","ripostes","riposts","rippable","ripped","ripper","rippers","ripping","ripple","rippled","rippler","ripplers","ripples","ripplet","ripplets","ripplier","rippling","ripply","riprap","ripraps","rips","ripsaw","ripsaws","ripstop","ripstops","riptide","riptides","rise","risen","riser","risers","rises","rishi","rishis","risible","risibles","risibly","rising","risings","risk","risked","risker","riskers","riskier","riskiest","riskily","risking","risks","risky","risotto","risottos","risque","rissole","rissoles","risus","risuses","ritard","ritards","rite","rites","ritter","ritters","ritual","ritually","rituals","ritz","ritzes","ritzier","ritziest","ritzily","ritzy","rivage","rivages","rival","rivaled","rivaling","rivalled","rivalry","rivals","rive","rived","riven","river","riverbed","riverine","rivers","rives","rivet","riveted","riveter","riveters","riveting","rivets","rivetted","riviera","rivieras","riviere","rivieres","riving","rivulet","rivulets","rivulose","riyal","riyals","roach","roached","roaches","roaching","road","roadbed","roadbeds","roadeo","roadeos","roadie","roadies","roadless","roads","roadshow","roadside","roadster","roadway","roadways","roadwork","roam","roamed","roamer","roamers","roaming","roams","roan","roans","roar","roared","roarer","roarers","roaring","roarings","roars","roast","roasted","roaster","roasters","roasting","roasts","rob","robalo","robalos","roband","robands","robbed","robber","robbers","robbery","robbin","robbing","robbins","robe","robed","robes","robin","robing","robins","roble","robles","roborant","robot","robotic","robotics","robotism","robotize","robotry","robots","robs","robust","robuster","robustly","roc","rochet","rochets","rock","rockaby","rockabye","rockaway","rocked","rocker","rockers","rockery","rocket","rocketed","rocketer","rocketry","rockets","rockfall","rockfish","rockier","rockiest","rocking","rockless","rocklike","rockling","rockoon","rockoons","rockrose","rocks","rockweed","rockwork","rocky","rococo","rococos","rocs","rod","rodded","rodding","rode","rodent","rodents","rodeo","rodeos","rodless","rodlike","rodman","rodmen","rods","rodsman","rodsmen","roe","roebuck","roebucks","roentgen","roes","rogation","rogatory","roger","rogers","rogue","rogued","rogueing","roguery","rogues","roguing","roguish","roil","roiled","roilier","roiliest","roiling","roils","roily","roister","roisters","rolamite","role","roles","roll","rollaway","rollback","rolled","roller","rollers","rollick","rollicks","rollicky","rolling","rollings","rollmop","rollmops","rollout","rollouts","rollover","rolls","rolltop","rollway","rollways","rom","romaine","romaines","roman","romance","romanced","romancer","romances","romanize","romano","romanos","romans","romantic","romaunt","romaunts","romeo","romeos","romp","romped","romper","rompers","romping","rompish","romps","roms","rondeau","rondeaux","rondel","rondelet","rondelle","rondels","rondo","rondos","rondure","rondures","ronion","ronions","ronnel","ronnels","rontgen","rontgens","ronyon","ronyons","rood","roods","roof","roofed","roofer","roofers","roofing","roofings","roofless","rooflike","roofline","roofs","rooftop","rooftops","rooftree","rook","rooked","rookery","rookie","rookier","rookies","rookiest","rooking","rooks","rooky","room","roomed","roomer","roomers","roomette","roomful","roomfuls","roomie","roomier","roomies","roomiest","roomily","rooming","roommate","rooms","roomy","roorbach","roorback","roose","roosed","rooser","roosers","rooses","roosing","roost","roosted","rooster","roosters","roosting","roosts","root","rootage","rootages","rooted","rooter","rooters","roothold","rootier","rootiest","rooting","rootless","rootlet","rootlets","rootlike","roots","rooty","ropable","rope","roped","roper","roperies","ropers","ropery","ropes","ropewalk","ropeway","ropeways","ropey","ropier","ropiest","ropily","ropiness","roping","ropy","roque","roques","roquet","roqueted","roquets","rorqual","rorquals","rosaria","rosarian","rosaries","rosarium","rosary","roscoe","roscoes","rose","roseate","rosebay","rosebays","rosebud","rosebuds","rosebush","rosed","rosefish","roselike","roselle","roselles","rosemary","roseola","roseolar","roseolas","roseries","roseroot","rosery","roses","roseslug","roset","rosets","rosette","rosettes","rosewood","rosier","rosiest","rosily","rosin","rosined","rosiness","rosing","rosining","rosinol","rosinols","rosinous","rosins","rosiny","rosolio","rosolios","rostella","roster","rosters","rostra","rostral","rostrate","rostrum","rostrums","rosulate","rosy","rot","rota","rotaries","rotary","rotas","rotate","rotated","rotates","rotating","rotation","rotative","rotator","rotators","rotatory","rotch","rotche","rotches","rote","rotenone","rotes","rotgut","rotguts","rotifer","rotifers","rotiform","rotl","rotls","roto","rotor","rotors","rotos","rototill","rots","rotte","rotted","rotten","rottener","rottenly","rotter","rotters","rottes","rotting","rotund","rotunda","rotundas","rotundly","roturier","rouble","roubles","rouche","rouches","roue","rouen","rouens","roues","rouge","rouged","rouges","rough","roughage","roughdry","roughed","roughen","roughens","rougher","roughers","roughest","roughhew","roughing","roughish","roughleg","roughly","roughs","rouging","rouille","rouilles","roulade","roulades","rouleau","rouleaus","rouleaux","roulette","round","rounded","roundel","roundels","rounder","rounders","roundest","rounding","roundish","roundlet","roundly","rounds","roundup","roundups","roup","rouped","roupet","roupier","roupiest","roupily","rouping","roups","roupy","rouse","roused","rouser","rousers","rouses","rousing","rousseau","roust","rousted","rouster","rousters","rousting","rousts","rout","route","routed","routeman","routemen","router","routers","routes","routeway","routh","rouths","routine","routines","routing","routs","roux","rove","roved","roven","rover","rovers","roves","roving","rovingly","rovings","row","rowable","rowan","rowans","rowboat","rowboats","rowdier","rowdies","rowdiest","rowdily","rowdy","rowdyish","rowdyism","rowed","rowel","roweled","roweling","rowelled","rowels","rowen","rowens","rower","rowers","rowing","rowings","rowlock","rowlocks","rows","rowth","rowths","royal","royalism","royalist","royally","royals","royalty","royster","roysters","rozzer","rozzers","ruana","ruanas","rub","rubaboo","rubaboos","rubace","rubaces","rubaiyat","rubasse","rubasses","rubato","rubatos","rubbaboo","rubbed","rubber","rubbered","rubbers","rubbery","rubbing","rubbings","rubbish","rubbishy","rubble","rubbled","rubbles","rubblier","rubbling","rubbly","rubdown","rubdowns","rube","rubella","rubellas","rubeola","rubeolar","rubeolas","rubes","rubicund","rubidic","rubidium","rubied","rubier","rubies","rubiest","rubigo","rubigos","rubious","ruble","rubles","ruboff","ruboffs","rubout","rubouts","rubric","rubrical","rubrics","rubs","rubus","ruby","rubying","rubylike","ruche","ruched","ruches","ruching","ruchings","ruck","rucked","rucking","ruckle","ruckled","ruckles","ruckling","rucks","rucksack","ruckus","ruckuses","ruction","ructions","ructious","rudd","rudder","rudders","ruddier","ruddiest","ruddily","ruddle","ruddled","ruddles","ruddling","ruddock","ruddocks","rudds","ruddy","rude","rudely","rudeness","ruder","ruderal","ruderals","rudesby","rudest","rudiment","rue","rued","rueful","ruefully","ruer","ruers","rues","ruff","ruffe","ruffed","ruffes","ruffian","ruffians","ruffing","ruffle","ruffled","ruffler","rufflers","ruffles","rufflier","rufflike","ruffling","ruffly","ruffs","rufiyaa","rufous","rug","ruga","rugae","rugal","rugate","rugbies","rugby","rugged","ruggeder","ruggedly","rugger","ruggers","rugging","ruglike","rugola","rugolas","rugose","rugosely","rugosity","rugous","rugs","rugulose","ruin","ruinable","ruinate","ruinated","ruinates","ruined","ruiner","ruiners","ruing","ruining","ruinous","ruins","rulable","rule","ruled","ruleless","ruler","rulers","rules","ruling","rulings","rum","rumaki","rumakis","rumba","rumbaed","rumbaing","rumbas","rumble","rumbled","rumbler","rumblers","rumbles","rumbling","rumbly","rumen","rumens","rumina","ruminal","ruminant","ruminate","rummage","rummaged","rummager","rummages","rummer","rummers","rummest","rummier","rummies","rummiest","rummy","rumor","rumored","rumoring","rumors","rumour","rumoured","rumours","rump","rumple","rumpled","rumples","rumpless","rumplier","rumpling","rumply","rumps","rumpus","rumpuses","rums","run","runabout","runagate","runaway","runaways","runback","runbacks","rundle","rundles","rundlet","rundlets","rundown","rundowns","rune","runelike","runes","rung","rungless","rungs","runic","runkle","runkled","runkles","runkling","runless","runlet","runlets","runnel","runnels","runner","runners","runnier","runniest","running","runnings","runny","runoff","runoffs","runout","runouts","runover","runovers","runround","runs","runt","runtier","runtiest","runtish","runts","runty","runway","runways","rupee","rupees","rupiah","rupiahs","rupture","ruptured","ruptures","rural","ruralise","ruralism","ruralist","ruralite","rurality","ruralize","rurally","rurban","ruse","ruses","rush","rushed","rushee","rushees","rusher","rushers","rushes","rushier","rushiest","rushing","rushings","rushlike","rushy","rusine","rusk","rusks","russet","russets","russety","russify","rust","rustable","rusted","rustic","rustical","rusticly","rustics","rustier","rustiest","rustily","rusting","rustle","rustled","rustler","rustlers","rustles","rustless","rustling","rusts","rusty","rut","rutabaga","ruth","ruthenic","ruthful","ruthless","ruths","rutilant","rutile","rutiles","rutin","rutins","ruts","rutted","ruttier","ruttiest","ruttily","rutting","ruttish","rutty","rya","ryas","rye","ryegrass","ryes","ryke","ryked","rykes","ryking","rynd","rynds","ryokan","ryokans","ryot","ryots","sab","sabaton","sabatons","sabayon","sabayons","sabbat","sabbath","sabbaths","sabbatic","sabbats","sabbed","sabbing","sabe","sabed","sabeing","saber","sabered","sabering","sabers","sabes","sabin","sabine","sabines","sabins","sabir","sabirs","sable","sables","sabot","sabotage","saboteur","sabots","sabra","sabras","sabre","sabred","sabres","sabring","sabs","sabulose","sabulous","sac","sacaton","sacatons","sacbut","sacbuts","saccade","saccades","saccadic","saccate","saccular","saccule","saccules","sacculi","sacculus","sachem","sachemic","sachems","sachet","sacheted","sachets","sack","sackbut","sackbuts","sacked","sacker","sackers","sackful","sackfuls","sacking","sackings","sacklike","sacks","sacksful","saclike","sacque","sacques","sacra","sacral","sacrals","sacraria","sacred","sacredly","sacring","sacrings","sacrist","sacrists","sacristy","sacrum","sacrums","sacs","sad","sadden","saddened","saddens","sadder","saddest","saddhu","saddhus","saddle","saddled","saddler","saddlers","saddlery","saddles","saddling","sade","sades","sadhe","sadhes","sadhu","sadhus","sadi","sadiron","sadirons","sadis","sadism","sadisms","sadist","sadistic","sadists","sadly","sadness","sae","safari","safaried","safaris","safe","safely","safeness","safer","safes","safest","safetied","safeties","safety","saffron","saffrons","safranin","safrol","safrole","safroles","safrols","sag","saga","sagacity","sagaman","sagamen","sagamore","saganash","sagas","sagbut","sagbuts","sage","sagely","sageness","sager","sages","sagest","saggar","saggard","saggards","saggared","saggars","sagged","sagger","saggered","saggers","saggier","saggiest","sagging","saggy","sagier","sagiest","sagittal","sago","sagos","sags","saguaro","saguaros","sagum","sagy","sahib","sahibs","sahiwal","sahiwals","sahuaro","sahuaros","saice","saices","said","saids","saiga","saigas","sail","sailable","sailboat","sailed","sailer","sailers","sailfish","sailing","sailings","sailor","sailorly","sailors","sails","saimin","saimins","sain","sained","sainfoin","saining","sains","saint","saintdom","sainted","sainting","saintly","saints","saith","saithe","saiyid","saiyids","sajou","sajous","sake","saker","sakers","sakes","saki","sakis","sal","salaam","salaamed","salaams","salable","salably","salacity","salad","saladang","salads","salal","salals","salami","salamis","salariat","salaried","salaries","salary","sale","saleable","saleably","salep","saleps","saleroom","sales","salesman","salesmen","salic","salicin","salicine","salicins","salience","saliency","salient","salients","salified","salifies","salify","salina","salinas","saline","salines","salinity","salinize","saliva","salivary","salivas","salivate","sall","sallet","sallets","sallied","sallier","salliers","sallies","sallow","sallowed","sallower","sallowly","sallows","sallowy","sally","sallying","salmi","salmis","salmon","salmonid","salmons","salol","salols","salon","salons","saloon","saloons","saloop","saloops","salp","salpa","salpae","salpas","salpian","salpians","salpid","salpids","salpinx","salps","sals","salsa","salsas","salsify","salsilla","salt","saltant","saltbox","saltbush","salted","salter","saltern","salterns","salters","saltest","saltie","saltier","saltiers","salties","saltiest","saltily","saltine","saltines","salting","saltings","saltire","saltires","saltish","saltless","saltlike","saltness","saltpan","saltpans","salts","saltwork","saltwort","salty","saluki","salukis","salutary","salute","saluted","saluter","saluters","salutes","saluting","salvable","salvably","salvage","salvaged","salvagee","salvager","salvages","salve","salved","salver","salvers","salves","salvia","salvias","salvific","salving","salvo","salvoed","salvoes","salvoing","salvor","salvors","salvos","samara","samaras","samarium","samba","sambaed","sambaing","sambar","sambars","sambas","sambhar","sambhars","sambhur","sambhurs","sambo","sambos","sambuca","sambucas","sambuke","sambukes","sambur","samburs","same","samech","samechs","samek","samekh","samekhs","sameks","sameness","samiel","samiels","samisen","samisens","samite","samites","samizdat","samlet","samlets","samosa","samosas","samovar","samovars","samp","sampan","sampans","samphire","sample","sampled","sampler","samplers","samples","sampling","samps","samsara","samsaras","samshu","samshus","samurai","samurais","sanative","sancta","sanctify","sanction","sanctity","sanctum","sanctums","sand","sandal","sandaled","sandals","sandarac","sandbag","sandbags","sandbank","sandbar","sandbars","sandbox","sandbur","sandburr","sandburs","sanddab","sanddabs","sanded","sander","sanders","sandfish","sandfly","sandhi","sandhis","sandhog","sandhogs","sandier","sandiest","sanding","sandlike","sandling","sandlot","sandlots","sandman","sandmen","sandpeep","sandpile","sandpit","sandpits","sands","sandsoap","sandspur","sandwich","sandworm","sandwort","sandy","sane","saned","sanely","saneness","saner","sanes","sanest","sang","sanga","sangar","sangaree","sangars","sangas","sanger","sangers","sangh","sanghs","sangria","sangrias","sanguine","sanicle","sanicles","sanies","saning","sanious","sanitary","sanitate","sanities","sanitise","sanitize","sanity","sanjak","sanjaks","sank","sannop","sannops","sannup","sannups","sannyasi","sans","sansar","sansars","sansei","sanseis","sanserif","santalic","santalol","santimi","santims","santir","santirs","santol","santols","santonin","santour","santours","santur","santurs","sap","sapajou","sapajous","saphead","sapheads","saphena","saphenae","sapid","sapidity","sapience","sapiency","sapiens","sapient","sapless","sapling","saplings","saponify","saponin","saponine","saponins","saponite","sapor","saporous","sapors","sapota","sapotas","sapote","sapotes","sapour","sapours","sapped","sapper","sappers","sapphic","sapphics","sapphire","sapphism","sapphist","sappier","sappiest","sappily","sapping","sappy","sapremia","sapremic","saprobe","saprobes","saprobic","sapropel","saps","sapsago","sapsagos","sapwood","sapwoods","saraband","saran","sarans","sarape","sarapes","sarcasm","sarcasms","sarcenet","sarcoid","sarcoids","sarcoma","sarcomas","sarcous","sard","sardana","sardanas","sardar","sardars","sardine","sardines","sardius","sardonic","sardonyx","sards","saree","sarees","sargasso","sarge","sarges","sari","sarin","sarins","saris","sark","sarkier","sarkiest","sarks","sarky","sarment","sarmenta","sarments","sarod","sarode","sarodes","sarodist","sarods","sarong","sarongs","saros","saroses","sarsar","sarsars","sarsen","sarsenet","sarsens","sartor","sartorii","sartors","sash","sashay","sashayed","sashays","sashed","sashes","sashimi","sashimis","sashing","sasin","sasins","sass","sassaby","sassed","sasses","sassier","sassies","sassiest","sassily","sassing","sasswood","sassy","sastruga","sastrugi","sat","satang","satangs","satanic","satanism","satanist","satara","sataras","satay","satays","satchel","satchels","sate","sated","sateen","sateens","satem","sates","sati","satiable","satiably","satiate","satiated","satiates","satiety","satin","satinet","satinets","sating","satinpod","satins","satiny","satire","satires","satiric","satirise","satirist","satirize","satis","satisfy","satori","satoris","satrap","satraps","satrapy","satsuma","satsumas","saturant","saturate","satyr","satyric","satyrid","satyrids","satyrs","sau","sauce","saucebox","sauced","saucepan","saucer","saucers","sauces","sauch","sauchs","saucier","sauciest","saucily","saucing","saucy","sauger","saugers","saugh","saughs","saughy","saul","sauls","sault","saults","sauna","saunas","saunter","saunters","saurel","saurels","saurian","saurians","sauries","sauropod","saury","sausage","sausages","saute","sauted","sauteed","sauteing","sauterne","sautes","sautoir","sautoire","sautoirs","savable","savage","savaged","savagely","savager","savagery","savages","savagest","savaging","savagism","savanna","savannah","savannas","savant","savants","savarin","savarins","savate","savates","save","saveable","saved","saveloy","saveloys","saver","savers","saves","savin","savine","savines","saving","savingly","savings","savins","savior","saviors","saviour","saviours","savor","savored","savorer","savorers","savorier","savories","savorily","savoring","savorous","savors","savory","savour","savoured","savourer","savours","savoury","savoy","savoys","savvied","savvier","savvies","savviest","savvy","savvying","saw","sawbill","sawbills","sawbones","sawbuck","sawbucks","sawdust","sawdusts","sawed","sawer","sawers","sawfish","sawflies","sawfly","sawhorse","sawing","sawlike","sawlog","sawlogs","sawmill","sawmills","sawn","sawney","sawneys","saws","sawteeth","sawtooth","sawyer","sawyers","sax","saxatile","saxes","saxhorn","saxhorns","saxonies","saxony","saxtuba","saxtubas","say","sayable","sayer","sayers","sayest","sayid","sayids","saying","sayings","sayonara","says","sayst","sayyid","sayyids","scab","scabbard","scabbed","scabbier","scabbily","scabbing","scabble","scabbled","scabbles","scabby","scabies","scabiosa","scabious","scabland","scablike","scabrous","scabs","scad","scads","scaffold","scag","scags","scalable","scalably","scalade","scalades","scalado","scalados","scalage","scalages","scalar","scalare","scalares","scalars","scalawag","scald","scalded","scaldic","scalding","scalds","scale","scaled","scalene","scaleni","scalenus","scalepan","scaler","scalers","scales","scaleup","scaleups","scalier","scaliest","scaling","scall","scallion","scallop","scallops","scalls","scalp","scalped","scalpel","scalpels","scalper","scalpers","scalping","scalps","scaly","scam","scammed","scamming","scammony","scamp","scamped","scamper","scampers","scampi","scampies","scamping","scampish","scamps","scams","scan","scandal","scandals","scandent","scandia","scandias","scandic","scandium","scanned","scanner","scanners","scanning","scans","scansion","scant","scanted","scanter","scantest","scantier","scanties","scantily","scanting","scantly","scants","scanty","scape","scaped","scapes","scaphoid","scaping","scapose","scapula","scapulae","scapular","scapulas","scar","scarab","scarabs","scarce","scarcely","scarcer","scarcest","scarcity","scare","scared","scarer","scarers","scares","scarey","scarf","scarfed","scarfing","scarfpin","scarfs","scarier","scariest","scarify","scarily","scaring","scariose","scarious","scarless","scarlet","scarlets","scarp","scarped","scarper","scarpers","scarph","scarphed","scarphs","scarping","scarps","scarred","scarrier","scarring","scarry","scars","scart","scarted","scarting","scarts","scarves","scary","scat","scatback","scathe","scathed","scathes","scathing","scats","scatt","scatted","scatter","scatters","scattier","scatting","scatts","scatty","scaup","scauper","scaupers","scaups","scaur","scaurs","scavenge","scena","scenario","scenas","scend","scended","scending","scends","scene","scenery","scenes","scenic","scenical","scent","scented","scenting","scents","scepter","scepters","sceptic","sceptics","sceptral","sceptre","sceptred","sceptres","schappe","schappes","schav","schavs","schedule","schema","schemas","schemata","scheme","schemed","schemer","schemers","schemes","scheming","scherzi","scherzo","scherzos","schiller","schism","schisms","schist","schists","schizier","schizo","schizoid","schizont","schizos","schizy","schizzy","schlep","schlepp","schlepps","schleps","schliere","schlock","schlocks","schlocky","schlump","schlumps","schmaltz","schmalz","schmalzy","schmear","schmears","schmeer","schmeers","schmelze","schmo","schmoe","schmoes","schmoos","schmoose","schmooze","schmos","schmuck","schmucks","schnapps","schnaps","schnecke","schnook","schnooks","schnoz","schnozz","scholar","scholars","scholia","scholium","school","schooled","schools","schooner","schorl","schorls","schrik","schriks","schrod","schrods","schtick","schticks","schtik","schtiks","schuit","schuits","schul","schuln","schuss","schussed","schusser","schusses","schwa","schwas","sciaenid","sciatic","sciatica","sciatics","science","sciences","scilicet","scilla","scillas","scimetar","scimitar","scimiter","scincoid","sciolism","sciolist","scion","scions","scirocco","scirrhi","scirrhus","scissile","scission","scissor","scissors","scissure","sciurid","sciurids","sciurine","sciuroid","sclaff","sclaffed","sclaffer","sclaffs","sclera","sclerae","scleral","scleras","sclereid","sclerite","scleroid","scleroma","sclerose","sclerous","scoff","scoffed","scoffer","scoffers","scoffing","scofflaw","scoffs","scold","scolded","scolder","scolders","scolding","scolds","scoleces","scolex","scolices","scolioma","scollop","scollops","sconce","sconced","sconces","sconcing","scone","scones","scoop","scooped","scooper","scoopers","scoopful","scooping","scoops","scoot","scooted","scooter","scooters","scooting","scoots","scop","scope","scopes","scops","scopula","scopulae","scopulas","scorch","scorched","scorcher","scorches","score","scored","scorepad","scorer","scorers","scores","scoria","scoriae","scorify","scoring","scorn","scorned","scorner","scorners","scornful","scorning","scorns","scorpion","scot","scotch","scotched","scotches","scoter","scoters","scotia","scotias","scotoma","scotomas","scotopia","scotopic","scots","scottie","scotties","scour","scoured","scourer","scourers","scourge","scourged","scourger","scourges","scouring","scours","scouse","scouses","scout","scouted","scouter","scouters","scouth","scouther","scouths","scouting","scouts","scow","scowder","scowders","scowed","scowing","scowl","scowled","scowler","scowlers","scowling","scowls","scows","scrabble","scrabbly","scrag","scragged","scraggly","scraggy","scrags","scraich","scraichs","scraigh","scraighs","scram","scramble","scramjet","scrammed","scrams","scrannel","scrap","scrape","scraped","scraper","scrapers","scrapes","scrapie","scrapies","scraping","scrapped","scrapper","scrapple","scrappy","scraps","scratch","scratchy","scrawl","scrawled","scrawler","scrawls","scrawly","scrawny","screak","screaked","screaks","screaky","scream","screamed","screamer","screams","scree","screech","screechy","screed","screeded","screeds","screen","screened","screener","screens","screes","screw","screwed","screwer","screwers","screwier","screwing","screws","screwup","screwups","screwy","scribal","scribble","scribe","scribed","scriber","scribers","scribes","scribing","scried","scries","scrieve","scrieved","scrieves","scrim","scrimp","scrimped","scrimper","scrimpit","scrimps","scrimpy","scrims","scrip","scrips","script","scripted","scripter","scripts","scrive","scrived","scrives","scriving","scrod","scrods","scrofula","scroggy","scroll","scrolled","scrolls","scrooch","scrooge","scrooges","scroop","scrooped","scroops","scrootch","scrota","scrotal","scrotum","scrotums","scrouge","scrouged","scrouges","scrounge","scroungy","scrub","scrubbed","scrubber","scrubby","scrubs","scruff","scruffs","scruffy","scrum","scrummed","scrums","scrunch","scruple","scrupled","scruples","scrutiny","scry","scrying","scuba","scubas","scud","scudded","scudding","scudi","scudo","scuds","scuff","scuffed","scuffing","scuffle","scuffled","scuffler","scuffles","scuffs","sculk","sculked","sculker","sculkers","sculking","sculks","scull","sculled","sculler","scullers","scullery","sculling","scullion","sculls","sculp","sculped","sculpin","sculping","sculpins","sculps","sculpt","sculpted","sculptor","sculpts","scum","scumble","scumbled","scumbles","scumlike","scummed","scummer","scummers","scummier","scumming","scummy","scums","scunner","scunners","scup","scuppaug","scupper","scuppers","scups","scurf","scurfier","scurfs","scurfy","scurried","scurries","scurril","scurrile","scurry","scurvier","scurvies","scurvily","scurvy","scut","scuta","scutage","scutages","scutate","scutch","scutched","scutcher","scutches","scute","scutella","scutes","scuts","scutter","scutters","scuttle","scuttled","scuttles","scutum","scuzzier","scuzzy","scyphate","scyphi","scyphus","scythe","scythed","scythes","scything","sea","seabag","seabags","seabeach","seabed","seabeds","seabird","seabirds","seaboard","seaboot","seaboots","seaborne","seacoast","seacock","seacocks","seacraft","seadog","seadogs","seadrome","seafarer","seafloor","seafood","seafoods","seafowl","seafowls","seafront","seagirt","seagoing","seal","sealable","sealant","sealants","sealed","sealer","sealers","sealery","sealing","seallike","seals","sealskin","seam","seaman","seamanly","seamark","seamarks","seamed","seamen","seamer","seamers","seamier","seamiest","seaming","seamless","seamlike","seamount","seams","seamster","seamy","seance","seances","seapiece","seaplane","seaport","seaports","seaquake","sear","search","searched","searcher","searches","seared","searer","searest","searing","searobin","sears","seas","seascape","seascout","seashell","seashore","seasick","seaside","seasides","season","seasonal","seasoned","seasoner","seasons","seat","seated","seater","seaters","seating","seatings","seatless","seatmate","seatrain","seats","seatwork","seawall","seawalls","seawan","seawans","seawant","seawants","seaward","seawards","seaware","seawares","seawater","seaway","seaways","seaweed","seaweeds","sebacic","sebasic","sebum","sebums","sec","secalose","secant","secantly","secants","secateur","secco","seccos","secede","seceded","seceder","seceders","secedes","seceding","secern","secerned","secerns","seclude","secluded","secludes","second","seconde","seconded","seconder","secondes","secondi","secondly","secondo","seconds","secpar","secpars","secrecy","secret","secrete","secreted","secreter","secretes","secretin","secretly","secretor","secrets","secs","sect","sectary","sectile","section","sections","sector","sectoral","sectored","sectors","sects","secular","seculars","secund","secundly","secundum","secure","secured","securely","securer","securers","secures","securest","securing","security","sedan","sedans","sedarim","sedate","sedated","sedately","sedater","sedates","sedatest","sedating","sedation","sedative","seder","seders","sederunt","sedge","sedges","sedgier","sedgiest","sedgy","sedile","sedilia","sedilium","sediment","sedition","seduce","seduced","seducer","seducers","seduces","seducing","seducive","sedulity","sedulous","sedum","sedums","see","seeable","seecatch","seed","seedbed","seedbeds","seedcake","seedcase","seeded","seeder","seeders","seedier","seediest","seedily","seeding","seedless","seedlike","seedling","seedman","seedmen","seedpod","seedpods","seeds","seedsman","seedsmen","seedtime","seedy","seeing","seeings","seek","seeker","seekers","seeking","seeks","seel","seeled","seeling","seels","seely","seem","seemed","seemer","seemers","seeming","seemings","seemlier","seemly","seems","seen","seep","seepage","seepages","seeped","seepier","seepiest","seeping","seeps","seepy","seer","seeress","seers","sees","seesaw","seesawed","seesaws","seethe","seethed","seethes","seething","seg","segetal","seggar","seggars","segment","segments","segni","segno","segnos","sego","segos","segs","segue","segued","segueing","segues","sei","seicento","seiche","seiches","seidel","seidels","seif","seifs","seigneur","seignior","seignory","seine","seined","seiner","seiners","seines","seining","seis","seisable","seise","seised","seiser","seisers","seises","seisin","seising","seisings","seisins","seism","seismal","seismic","seismism","seisms","seisor","seisors","seisure","seisures","seizable","seize","seized","seizer","seizers","seizes","seizin","seizing","seizings","seizins","seizor","seizors","seizure","seizures","sejant","sejeant","sel","seladang","selah","selahs","selamlik","selcouth","seldom","seldomly","select","selected","selectee","selectly","selector","selects","selenate","selenic","selenide","selenite","selenium","selenous","self","selfdom","selfdoms","selfed","selfheal","selfhood","selfing","selfish","selfless","selfness","selfs","selfsame","selfward","sell","sellable","selle","seller","sellers","selles","selling","sellout","sellouts","sells","sels","selsyn","selsyns","seltzer","seltzers","selva","selvage","selvaged","selvages","selvas","selvedge","selves","semantic","sematic","seme","sememe","sememes","semen","semens","semes","semester","semi","semiarid","semibald","semicoma","semideaf","semidome","semidry","semifit","semigala","semihard","semihigh","semihobo","semilog","semimat","semimatt","semimute","semina","seminal","seminar","seminars","seminary","seminude","semioses","semiosis","semiotic","semipro","semipros","semiraw","semis","semises","semisoft","semitist","semitone","semiwild","semolina","semple","semplice","sempre","sen","senarii","senarius","senary","senate","senates","senator","senators","send","sendable","sendal","sendals","sended","sender","senders","sending","sendoff","sendoffs","sends","sendup","sendups","sene","seneca","senecas","senecio","senecios","senega","senegas","sengi","senhor","senhora","senhoras","senhores","senhors","senile","senilely","seniles","senility","senior","seniors","seniti","senna","sennas","sennet","sennets","sennight","sennit","sennits","senopia","senopias","senor","senora","senoras","senores","senorita","senors","senryu","sensa","sensate","sensated","sensates","sense","sensed","senseful","senses","sensible","sensibly","sensilla","sensing","sensor","sensoria","sensors","sensory","sensual","sensum","sensuous","sent","sentence","senti","sentient","sentimo","sentimos","sentinel","sentries","sentry","sepal","sepaled","sepaline","sepalled","sepaloid","sepalous","sepals","separate","sepia","sepias","sepic","sepoy","sepoys","seppuku","seppukus","sepses","sepsis","sept","septa","septal","septaria","septate","septet","septets","septette","septic","septical","septics","septime","septimes","septs","septum","septums","septuple","sequel","sequela","sequelae","sequels","sequence","sequency","sequent","sequents","sequin","sequined","sequins","sequitur","sequoia","sequoias","ser","sera","serac","seracs","seraglio","serai","serail","serails","serais","seral","serape","serapes","seraph","seraphic","seraphim","seraphin","seraphs","serdab","serdabs","sere","sered","serein","sereins","serenade","serenata","serenate","serene","serenely","serener","serenes","serenest","serenity","serer","seres","serest","serf","serfage","serfages","serfdom","serfdoms","serfhood","serfish","serflike","serfs","serge","sergeant","serges","serging","sergings","serial","serially","serials","seriate","seriated","seriates","seriatim","sericin","sericins","seriema","seriemas","series","serif","serifed","seriffed","serifs","serin","serine","serines","sering","seringa","seringas","serins","serious","serjeant","sermon","sermonic","sermons","serology","serosa","serosae","serosal","serosas","serosity","serotine","serotype","serous","serow","serows","serpent","serpents","serpigo","serranid","serrate","serrated","serrates","serried","serries","serry","serrying","sers","serum","serumal","serums","servable","serval","servals","servant","servants","serve","served","server","servers","serves","service","serviced","servicer","services","servile","serving","servings","servitor","servo","servos","sesame","sesames","sesamoid","sessile","session","sessions","sesspool","sesterce","sestet","sestets","sestina","sestinas","sestine","sestines","set","seta","setae","setal","setback","setbacks","setenant","setiform","setline","setlines","setoff","setoffs","seton","setons","setose","setous","setout","setouts","sets","setscrew","sett","settee","settees","setter","setters","setting","settings","settle","settled","settler","settlers","settles","settling","settlor","settlors","setts","setulose","setulous","setup","setups","seven","sevens","seventh","sevenths","seventy","sever","several","severals","severe","severed","severely","severer","severest","severing","severity","severs","seviche","seviches","sew","sewable","sewage","sewages","sewan","sewans","sewar","sewars","sewed","sewer","sewerage","sewered","sewering","sewers","sewing","sewings","sewn","sews","sex","sexed","sexes","sexier","sexiest","sexily","sexiness","sexing","sexism","sexisms","sexist","sexists","sexless","sexology","sexpot","sexpots","sext","sextain","sextains","sextan","sextans","sextant","sextants","sextarii","sextet","sextets","sextette","sextile","sextiles","sexto","sexton","sextons","sextos","sexts","sextuple","sextuply","sexual","sexually","sexy","sferics","sforzato","sfumato","sfumatos","sha","shabbier","shabbily","shabby","shack","shackle","shackled","shackler","shackles","shacko","shackoes","shackos","shacks","shad","shadblow","shadbush","shadchan","shaddock","shade","shaded","shader","shaders","shades","shadfly","shadier","shadiest","shadily","shading","shadings","shadoof","shadoofs","shadow","shadowed","shadower","shadows","shadowy","shadrach","shads","shaduf","shadufs","shady","shaft","shafted","shafting","shafts","shag","shagbark","shagged","shaggier","shaggily","shagging","shaggy","shagreen","shags","shah","shahdom","shahdoms","shahs","shaird","shairds","shairn","shairns","shaitan","shaitans","shakable","shake","shaken","shakeout","shaker","shakers","shakes","shakeup","shakeups","shakier","shakiest","shakily","shaking","shako","shakoes","shakos","shaky","shale","shaled","shales","shaley","shalier","shaliest","shall","shalloon","shallop","shallops","shallot","shallots","shallow","shallows","shalom","shaloms","shalt","shaly","sham","shamable","shaman","shamanic","shamans","shamas","shamble","shambled","shambles","shame","shamed","shameful","shames","shaming","shammas","shammash","shammed","shammer","shammers","shammes","shammied","shammies","shamming","shammos","shammy","shamois","shamos","shamosim","shamoy","shamoyed","shamoys","shampoo","shampoos","shamrock","shams","shamus","shamuses","shandies","shandy","shanghai","shank","shanked","shanking","shanks","shannies","shanny","shantey","shanteys","shanti","shanties","shantih","shantihs","shantis","shantung","shanty","shapable","shape","shaped","shapely","shapen","shaper","shapers","shapes","shapeup","shapeups","shaping","sharable","shard","shards","share","shared","sharer","sharers","shares","sharif","sharifs","sharing","shark","sharked","sharker","sharkers","sharking","sharks","sharn","sharns","sharny","sharp","sharped","sharpen","sharpens","sharper","sharpers","sharpest","sharpie","sharpies","sharping","sharply","sharps","sharpy","shashlik","shaslik","shasliks","shat","shatter","shatters","shaugh","shaughs","shaul","shauled","shauling","shauls","shavable","shave","shaved","shaven","shaver","shavers","shaves","shavie","shavies","shaving","shavings","shaw","shawed","shawing","shawl","shawled","shawling","shawls","shawm","shawms","shawn","shaws","shay","shays","she","shea","sheaf","sheafed","sheafing","sheafs","sheal","shealing","sheals","shear","sheared","shearer","shearers","shearing","shears","sheas","sheath","sheathe","sheathed","sheather","sheathes","sheaths","sheave","sheaved","sheaves","sheaving","shebang","shebangs","shebean","shebeans","shebeen","shebeens","shed","shedable","shedded","shedder","shedders","shedding","sheds","sheen","sheened","sheeney","sheeneys","sheenful","sheenie","sheenier","sheenies","sheening","sheens","sheeny","sheep","sheepcot","sheepdog","sheepish","sheepman","sheepmen","sheer","sheered","sheerer","sheerest","sheering","sheerly","sheers","sheet","sheeted","sheeter","sheeters","sheetfed","sheeting","sheets","sheeve","sheeves","shegetz","sheik","sheikdom","sheikh","sheikhs","sheiks","sheila","sheilas","sheitan","sheitans","shekel","shekels","shelduck","shelf","shelfful","shell","shellac","shellack","shellacs","shelled","sheller","shellers","shellier","shelling","shells","shelly","shelta","sheltas","shelter","shelters","sheltie","shelties","shelty","shelve","shelved","shelver","shelvers","shelves","shelvier","shelving","shelvy","shend","shending","shends","shent","sheol","sheols","shepherd","sherbert","sherbet","sherbets","sherd","sherds","shereef","shereefs","sherif","sheriff","sheriffs","sherifs","sherlock","sheroot","sheroots","sherpa","sherpas","sherries","sherris","sherry","shes","shetland","sheuch","sheuchs","sheugh","sheughs","shew","shewed","shewer","shewers","shewing","shewn","shews","shh","shiatsu","shiatsus","shiatzu","shiatzus","shibah","shibahs","shicker","shickers","shicksa","shicksas","shied","shiel","shield","shielded","shielder","shields","shieling","shiels","shier","shiers","shies","shiest","shift","shifted","shifter","shifters","shiftier","shiftily","shifting","shifts","shifty","shigella","shikar","shikaree","shikari","shikaris","shikars","shikker","shikkers","shiksa","shiksas","shikse","shikses","shilingi","shill","shillala","shilled","shilling","shills","shilpit","shily","shim","shimmed","shimmer","shimmers","shimmery","shimmied","shimmies","shimming","shimmy","shims","shin","shinbone","shindies","shindig","shindigs","shindy","shindys","shine","shined","shiner","shiners","shines","shingle","shingled","shingler","shingles","shingly","shinier","shiniest","shinily","shining","shinleaf","shinned","shinnery","shinney","shinneys","shinnied","shinnies","shinning","shinny","shins","shiny","ship","shiplap","shiplaps","shipload","shipman","shipmate","shipmen","shipment","shipped","shippen","shippens","shipper","shippers","shipping","shippon","shippons","ships","shipside","shipway","shipways","shipworm","shipyard","shire","shires","shirk","shirked","shirker","shirkers","shirking","shirks","shirr","shirred","shirring","shirrs","shirt","shirtier","shirting","shirts","shirty","shist","shists","shit","shithead","shits","shittah","shittahs","shitted","shittier","shittim","shittims","shitting","shitty","shiv","shiva","shivah","shivahs","shivaree","shivas","shive","shiver","shivered","shiverer","shivers","shivery","shives","shivs","shkotzim","shlemiel","shlep","shlepp","shlepped","shlepps","shleps","shlock","shlocks","shlump","shlumped","shlumps","shlumpy","shmaltz","shmaltzy","shmear","shmears","shmo","shmoes","shmooze","shmoozed","shmoozes","shmuck","shmucks","shnaps","shnook","shnooks","shoal","shoaled","shoaler","shoalest","shoalier","shoaling","shoals","shoaly","shoat","shoats","shock","shocked","shocker","shockers","shocking","shocks","shod","shodden","shoddier","shoddies","shoddily","shoddy","shoe","shoebill","shoed","shoehorn","shoeing","shoelace","shoeless","shoepac","shoepack","shoepacs","shoer","shoers","shoes","shoetree","shofar","shofars","shofroth","shog","shogged","shogging","shogs","shogun","shogunal","shoguns","shoji","shojis","sholom","sholoms","shone","shoo","shooed","shoofly","shooing","shook","shooks","shool","shooled","shooling","shools","shoon","shoos","shoot","shooter","shooters","shooting","shootout","shoots","shop","shopboy","shopboys","shopgirl","shophar","shophars","shoplift","shopman","shopmen","shoppe","shopped","shopper","shoppers","shoppes","shopping","shops","shoptalk","shopworn","shoran","shorans","shore","shored","shores","shoring","shorings","shorl","shorls","shorn","short","shortage","shortcut","shorted","shorten","shortens","shorter","shortest","shortia","shortias","shortie","shorties","shorting","shortish","shortly","shorts","shorty","shot","shote","shotes","shotgun","shotguns","shots","shott","shotted","shotten","shotting","shotts","should","shoulder","shouldst","shout","shouted","shouter","shouters","shouting","shouts","shove","shoved","shovel","shoveled","shoveler","shovels","shover","shovers","shoves","shoving","show","showboat","showcase","showdown","showed","shower","showered","showers","showery","showgirl","showier","showiest","showily","showing","showings","showman","showmen","shown","showoff","showoffs","showroom","shows","showy","shoyu","shoyus","shrank","shrapnel","shred","shredded","shredder","shreds","shrew","shrewd","shrewder","shrewdie","shrewdly","shrewed","shrewing","shrewish","shrews","shri","shriek","shrieked","shrieker","shrieks","shrieky","shrieval","shrieve","shrieved","shrieves","shrift","shrifts","shrike","shrikes","shrill","shrilled","shriller","shrills","shrilly","shrimp","shrimped","shrimper","shrimps","shrimpy","shrine","shrined","shrines","shrining","shrink","shrinker","shrinks","shris","shrive","shrived","shrivel","shrivels","shriven","shriver","shrivers","shrives","shriving","shroff","shroffed","shroffs","shroud","shrouded","shrouds","shrove","shrub","shrubby","shrubs","shrug","shrugged","shrugs","shrunk","shrunken","shtetel","shtetels","shtetl","shtetls","shtick","shticks","shtik","shtiks","shuck","shucked","shucker","shuckers","shucking","shucks","shudder","shudders","shuddery","shuffle","shuffled","shuffler","shuffles","shul","shuln","shuls","shun","shunned","shunner","shunners","shunning","shunpike","shuns","shunt","shunted","shunter","shunters","shunting","shunts","shush","shushed","shushes","shushing","shut","shutdown","shute","shuted","shutes","shuteye","shuteyes","shuting","shutoff","shutoffs","shutout","shutouts","shuts","shutter","shutters","shutting","shuttle","shuttled","shuttles","shwanpan","shy","shyer","shyers","shyest","shying","shylock","shylocks","shyly","shyness","shyster","shysters","sial","sialic","sialid","sialidan","sialids","sialoid","sials","siamang","siamangs","siamese","siameses","sib","sibb","sibbs","sibilant","sibilate","sibling","siblings","sibs","sibyl","sibylic","sibyllic","sibyls","sic","siccan","sicced","siccing","sice","sices","sick","sickbay","sickbays","sickbed","sickbeds","sicked","sickee","sickees","sicken","sickened","sickener","sickens","sicker","sickerly","sickest","sickie","sickies","sicking","sickish","sickle","sickled","sickles","sicklied","sicklier","sicklies","sicklily","sickling","sickly","sickness","sicko","sickos","sickout","sickouts","sickroom","sicks","sics","siddur","siddurim","siddurs","side","sidearm","sideband","sidebar","sidebars","sidecar","sidecars","sided","sidehill","sidekick","sideline","sideling","sidelong","sideman","sidemen","sidereal","siderite","sides","sideshow","sideslip","sidespin","sidestep","sidewalk","sidewall","sideward","sideway","sideways","sidewise","siding","sidings","sidle","sidled","sidler","sidlers","sidles","sidling","siege","sieged","sieges","sieging","siemens","sienite","sienites","sienna","siennas","sierozem","sierra","sierran","sierras","siesta","siestas","sieur","sieurs","sieve","sieved","sieves","sieving","sifaka","sifakas","siffleur","sift","sifted","sifter","sifters","sifting","siftings","sifts","siganid","siganids","sigh","sighed","sigher","sighers","sighing","sighless","sighlike","sighs","sight","sighted","sighter","sighters","sighting","sightly","sights","sightsaw","sightsee","sigil","sigils","sigloi","siglos","sigma","sigmas","sigmate","sigmoid","sigmoids","sign","signage","signages","signal","signaled","signaler","signally","signals","signed","signee","signees","signer","signers","signet","signeted","signets","signify","signing","signior","signiori","signiors","signiory","signor","signora","signoras","signore","signori","signors","signory","signpost","signs","sike","siker","sikes","silage","silages","silane","silanes","sild","silds","silence","silenced","silencer","silences","sileni","silent","silenter","silently","silents","silenus","silesia","silesias","silex","silexes","silica","silicas","silicate","silicic","silicide","silicify","silicium","silicle","silicles","silicon","silicone","silicons","silicula","siliqua","siliquae","silique","siliques","silk","silked","silken","silkier","silkiest","silkily","silking","silklike","silks","silkweed","silkworm","silky","sill","sillabub","siller","sillers","sillibub","sillier","sillies","silliest","sillily","sills","silly","silo","siloed","siloing","silos","siloxane","silt","silted","siltier","siltiest","silting","silts","silty","silurid","silurids","siluroid","silva","silvae","silvan","silvans","silvas","silver","silvered","silverer","silverly","silvern","silvers","silvery","silvex","silvexes","silvical","silvics","sim","sima","simar","simars","simaruba","simas","simazine","simian","simians","similar","simile","similes","simioid","simious","simitar","simitars","simlin","simlins","simmer","simmered","simmers","simnel","simnels","simoleon","simoniac","simonies","simonist","simonize","simony","simoom","simooms","simoon","simoons","simp","simper","simpered","simperer","simpers","simple","simpler","simples","simplest","simplex","simplify","simplism","simplist","simply","simps","sims","simulant","simular","simulars","simulate","sin","sinapism","since","sincere","sincerer","sinciput","sine","sinecure","sines","sinew","sinewed","sinewing","sinews","sinewy","sinfonia","sinfonie","sinful","sinfully","sing","singable","singe","singed","singeing","singer","singers","singes","singing","single","singled","singles","singlet","singlets","singling","singly","sings","singsong","singular","sinh","sinhs","sinicize","sinister","sink","sinkable","sinkage","sinkages","sinker","sinkers","sinkhole","sinking","sinks","sinless","sinned","sinner","sinners","sinning","sinology","sinopia","sinopias","sinopie","sins","sinsyne","sinter","sintered","sinters","sinuate","sinuated","sinuates","sinuous","sinus","sinuses","sinusoid","sip","sipe","siped","sipes","siphon","siphonal","siphoned","siphonic","siphons","siping","sipped","sipper","sippers","sippet","sippets","sipping","sips","sir","sirdar","sirdars","sire","sired","siree","sirees","siren","sirenian","sirens","sires","siring","sirloin","sirloins","sirocco","siroccos","sirra","sirrah","sirrahs","sirras","sirree","sirrees","sirs","sirup","sirups","sirupy","sirvente","sis","sisal","sisals","sises","siskin","siskins","sissier","sissies","sissiest","sissy","sissyish","sister","sistered","sisterly","sisters","sistra","sistroid","sistrum","sistrums","sit","sitar","sitarist","sitars","sitcom","sitcoms","site","sited","sites","sith","sithence","sithens","siting","sitology","sits","sitten","sitter","sitters","sitting","sittings","situate","situated","situates","situp","situps","situs","situses","sitzmark","siver","sivers","six","sixes","sixfold","sixmo","sixmos","sixpence","sixpenny","sixte","sixteen","sixteens","sixtes","sixth","sixthly","sixths","sixties","sixtieth","sixty","sizable","sizably","sizar","sizars","size","sizeable","sizeably","sized","sizer","sizers","sizes","sizier","siziest","siziness","sizing","sizings","sizy","sizzle","sizzled","sizzler","sizzlers","sizzles","sizzling","sjambok","sjamboks","ska","skag","skags","skald","skaldic","skalds","skas","skat","skate","skated","skater","skaters","skates","skating","skatings","skatol","skatole","skatoles","skatols","skats","skean","skeane","skeanes","skeans","skee","skeed","skeeing","skeen","skeens","skees","skeet","skeeter","skeeters","skeets","skeg","skegs","skeigh","skein","skeined","skeining","skeins","skeletal","skeleton","skellum","skellums","skelm","skelms","skelp","skelped","skelping","skelpit","skelps","skelter","skelters","skene","skenes","skep","skeps","skepsis","skeptic","skeptics","skerries","skerry","sketch","sketched","sketcher","sketches","sketchy","skew","skewback","skewbald","skewed","skewer","skewered","skewers","skewing","skewness","skews","ski","skiable","skiagram","skibob","skibobs","skid","skidded","skidder","skidders","skiddier","skidding","skiddoo","skiddoos","skiddy","skidoo","skidooed","skidoos","skids","skidway","skidways","skied","skier","skiers","skies","skiey","skiff","skiffle","skiffled","skiffles","skiffs","skiing","skiings","skijorer","skilful","skill","skilled","skilless","skillet","skillets","skillful","skilling","skills","skim","skimmed","skimmer","skimmers","skimming","skimo","skimos","skimp","skimped","skimpier","skimpily","skimping","skimps","skimpy","skims","skin","skinful","skinfuls","skinhead","skink","skinked","skinker","skinkers","skinking","skinks","skinless","skinlike","skinned","skinner","skinners","skinnier","skinning","skinny","skins","skint","skioring","skip","skipjack","skiplane","skipped","skipper","skippers","skippet","skippets","skipping","skips","skirl","skirled","skirling","skirls","skirmish","skirr","skirred","skirret","skirrets","skirring","skirrs","skirt","skirted","skirter","skirters","skirting","skirts","skis","skit","skite","skited","skites","skiting","skits","skitter","skitters","skittery","skittish","skittle","skittles","skive","skived","skiver","skivers","skives","skiving","skivvied","skivvies","skivvy","skiwear","skiwears","sklent","sklented","sklents","skoal","skoaled","skoaling","skoals","skookum","skreegh","skreeghs","skreigh","skreighs","skua","skuas","skulk","skulked","skulker","skulkers","skulking","skulks","skull","skullcap","skulled","skulls","skunk","skunked","skunking","skunks","sky","skyborne","skycap","skycaps","skydive","skydived","skydiver","skydives","skydove","skyed","skyey","skyhook","skyhooks","skying","skyjack","skyjacks","skylark","skylarks","skylight","skyline","skylines","skylit","skyman","skymen","skyphoi","skyphos","skysail","skysails","skywalk","skywalks","skyward","skywards","skyway","skyways","skywrite","skywrote","slab","slabbed","slabber","slabbers","slabbery","slabbing","slablike","slabs","slack","slacked","slacken","slackens","slacker","slackers","slackest","slacking","slackly","slacks","slag","slagged","slaggier","slagging","slaggy","slags","slain","slainte","slakable","slake","slaked","slaker","slakers","slakes","slaking","slalom","slalomed","slaloms","slam","slammed","slammer","slammers","slamming","slams","slander","slanders","slang","slanged","slangier","slangily","slanging","slangs","slangy","slank","slant","slanted","slanting","slants","slanty","slap","slapdash","slapjack","slapped","slapper","slappers","slapping","slaps","slash","slashed","slasher","slashers","slashes","slashing","slat","slatch","slatches","slate","slated","slater","slaters","slates","slatey","slather","slathers","slatier","slatiest","slating","slatings","slats","slatted","slattern","slatting","slaty","slave","slaved","slaver","slavered","slaverer","slavers","slavery","slaves","slavey","slaveys","slaving","slavish","slaw","slaws","slay","slayed","slayer","slayers","slaying","slays","sleave","sleaved","sleaves","sleaving","sleaze","sleazes","sleazier","sleazily","sleazo","sleazy","sled","sledded","sledder","sledders","sledding","sledge","sledged","sledges","sledging","sleds","sleek","sleeked","sleeken","sleekens","sleeker","sleekest","sleekier","sleeking","sleekit","sleekly","sleeks","sleeky","sleep","sleeper","sleepers","sleepier","sleepily","sleeping","sleeps","sleepy","sleet","sleeted","sleetier","sleeting","sleets","sleety","sleeve","sleeved","sleeves","sleeving","sleigh","sleighed","sleigher","sleighs","sleight","sleights","slender","slept","sleuth","sleuthed","sleuths","slew","slewed","slewing","slews","slice","sliced","slicer","slicers","slices","slicing","slick","slicked","slicker","slickers","slickest","slicking","slickly","slicks","slid","slidable","slidden","slide","slider","sliders","slides","slideway","sliding","slier","sliest","slight","slighted","slighter","slightly","slights","slily","slim","slime","slimed","slimes","slimier","slimiest","slimily","sliming","slimly","slimmed","slimmer","slimmest","slimming","slimness","slimpsy","slims","slimsier","slimsy","slimy","sling","slinger","slingers","slinging","slings","slink","slinked","slinkier","slinkily","slinking","slinks","slinky","slip","slipcase","slipe","sliped","slipes","slipform","sliping","slipknot","slipless","slipout","slipouts","slipover","slippage","slipped","slipper","slippers","slippery","slippier","slipping","slippy","slips","slipshod","slipslop","slipsole","slipt","slipup","slipups","slipware","slipway","slipways","slit","slither","slithers","slithery","slitless","slits","slitted","slitter","slitters","slitting","sliver","slivered","sliverer","slivers","slivovic","slob","slobber","slobbers","slobbery","slobbish","slobs","sloe","sloes","slog","slogan","slogans","slogged","slogger","sloggers","slogging","slogs","sloid","sloids","slojd","slojds","sloop","sloops","slop","slope","sloped","sloper","slopers","slopes","sloping","slopped","sloppier","sloppily","slopping","sloppy","slops","slopwork","slosh","sloshed","sloshes","sloshier","sloshing","sloshy","slot","slotback","sloth","slothful","sloths","slots","slotted","slotting","slouch","slouched","sloucher","slouches","slouchy","slough","sloughed","sloughs","sloughy","sloven","slovenly","slovens","slow","slowdown","slowed","slower","slowest","slowing","slowish","slowly","slowness","slowpoke","slows","slowworm","sloyd","sloyds","slub","slubbed","slubber","slubbers","slubbing","slubs","sludge","sludges","sludgier","sludgy","slue","slued","slues","sluff","sluffed","sluffing","sluffs","slug","slugabed","slugfest","sluggard","slugged","slugger","sluggers","slugging","sluggish","slugs","sluice","sluiced","sluices","sluicing","sluicy","sluing","slum","slumber","slumbers","slumbery","slumgum","slumgums","slumism","slumisms","slumlord","slummed","slummer","slummers","slummier","slumming","slummy","slump","slumped","slumping","slumps","slums","slung","slunk","slur","slurb","slurban","slurbs","slurp","slurped","slurping","slurps","slurred","slurried","slurries","slurring","slurry","slurs","slush","slushed","slushes","slushier","slushily","slushing","slushy","slut","sluts","sluttish","sly","slyboots","slyer","slyest","slyly","slyness","slype","slypes","smack","smacked","smacker","smackers","smacking","smacks","small","smallage","smaller","smallest","smallish","smallpox","smalls","smalt","smalti","smaltine","smaltite","smalto","smaltos","smalts","smaragd","smaragde","smaragds","smarm","smarmier","smarms","smarmy","smart","smartass","smarted","smarten","smartens","smarter","smartest","smartie","smarties","smarting","smartly","smarts","smarty","smash","smashed","smasher","smashers","smashes","smashing","smashup","smashups","smatter","smatters","smaze","smazes","smear","smeared","smearer","smearers","smearier","smearing","smears","smeary","smectic","smeddum","smeddums","smeek","smeeked","smeeking","smeeks","smegma","smegmas","smell","smelled","smeller","smellers","smellier","smelling","smells","smelly","smelt","smelted","smelter","smelters","smeltery","smelting","smelts","smerk","smerked","smerking","smerks","smew","smews","smidgen","smidgens","smidgeon","smidgin","smidgins","smilax","smilaxes","smile","smiled","smiler","smilers","smiles","smiley","smiling","smirch","smirched","smirches","smirk","smirked","smirker","smirkers","smirkier","smirking","smirks","smirky","smit","smite","smiter","smiters","smites","smith","smithers","smithery","smithies","smiths","smithy","smiting","smitten","smock","smocked","smocking","smocks","smog","smoggier","smoggy","smogless","smogs","smokable","smoke","smoked","smokepot","smoker","smokers","smokes","smokey","smokier","smokiest","smokily","smoking","smoky","smolder","smolders","smolt","smolts","smooch","smooched","smooches","smoochy","smooth","smoothed","smoothen","smoother","smoothie","smoothly","smooths","smoothy","smote","smother","smothers","smothery","smoulder","smudge","smudged","smudges","smudgier","smudgily","smudging","smudgy","smug","smugger","smuggest","smuggle","smuggled","smuggler","smuggles","smugly","smugness","smut","smutch","smutched","smutches","smutchy","smuts","smutted","smuttier","smuttily","smutting","smutty","snack","snacked","snacking","snacks","snaffle","snaffled","snaffles","snafu","snafued","snafuing","snafus","snag","snagged","snaggier","snagging","snaggy","snaglike","snags","snail","snailed","snailing","snails","snake","snaked","snakes","snakey","snakier","snakiest","snakily","snaking","snaky","snap","snapback","snapless","snapped","snapper","snappers","snappier","snappily","snapping","snappish","snappy","snaps","snapshot","snapweed","snare","snared","snarer","snarers","snares","snaring","snark","snarks","snarl","snarled","snarler","snarlers","snarlier","snarling","snarls","snarly","snash","snashes","snatch","snatched","snatcher","snatches","snatchy","snath","snathe","snathes","snaths","snaw","snawed","snawing","snaws","snazzier","snazzy","sneak","sneaked","sneaker","sneakers","sneakier","sneakily","sneaking","sneaks","sneaky","sneap","sneaped","sneaping","sneaps","sneck","snecks","sned","snedded","snedding","sneds","sneer","sneered","sneerer","sneerers","sneerful","sneering","sneers","sneesh","sneeshes","sneeze","sneezed","sneezer","sneezers","sneezes","sneezier","sneezing","sneezy","snell","snelled","sneller","snellest","snelling","snells","snib","snibbed","snibbing","snibs","snick","snicked","snicker","snickers","snickery","snicking","snicks","snide","snidely","snider","snidest","sniff","sniffed","sniffer","sniffers","sniffier","sniffily","sniffing","sniffish","sniffle","sniffled","sniffler","sniffles","sniffs","sniffy","snifter","snifters","snigger","sniggers","sniggle","sniggled","sniggler","sniggles","snip","snipe","sniped","sniper","snipers","snipes","sniping","snipped","snipper","snippers","snippet","snippets","snippety","snippier","snippily","snipping","snippy","snips","snit","snitch","snitched","snitcher","snitches","snits","snivel","sniveled","sniveler","snivels","snob","snobbery","snobbier","snobbily","snobbish","snobbism","snobby","snobs","snog","snogged","snogging","snogs","snood","snooded","snooding","snoods","snook","snooked","snooker","snookers","snooking","snooks","snool","snooled","snooling","snools","snoop","snooped","snooper","snoopers","snoopier","snoopily","snooping","snoops","snoopy","snoot","snooted","snootier","snootily","snooting","snoots","snooty","snooze","snoozed","snoozer","snoozers","snoozes","snoozier","snoozing","snoozle","snoozled","snoozles","snoozy","snore","snored","snorer","snorers","snores","snoring","snorkel","snorkels","snort","snorted","snorter","snorters","snorting","snorts","snot","snots","snottier","snottily","snotty","snout","snouted","snoutier","snouting","snoutish","snouts","snouty","snow","snowball","snowbank","snowbell","snowbelt","snowbird","snowbush","snowcap","snowcaps","snowdrop","snowed","snowfall","snowier","snowiest","snowily","snowing","snowland","snowless","snowlike","snowman","snowmelt","snowmen","snowmold","snowpack","snowplow","snows","snowshed","snowshoe","snowsuit","snowy","snub","snubbed","snubber","snubbers","snubbier","snubbing","snubby","snubness","snubs","snuck","snuff","snuffbox","snuffed","snuffer","snuffers","snuffier","snuffily","snuffing","snuffle","snuffled","snuffler","snuffles","snuffly","snuffs","snuffy","snug","snugged","snugger","snuggery","snuggest","snuggies","snugging","snuggle","snuggled","snuggles","snugly","snugness","snugs","snye","snyes","soak","soakage","soakages","soaked","soaker","soakers","soaking","soaks","soap","soapbark","soapbox","soaped","soaper","soapers","soapier","soapiest","soapily","soaping","soapless","soaplike","soaps","soapsuds","soapwort","soapy","soar","soared","soarer","soarers","soaring","soarings","soars","soave","soaves","sob","sobbed","sobber","sobbers","sobbing","sobeit","sober","sobered","soberer","soberest","sobering","soberize","soberly","sobers","sobful","sobriety","sobs","socage","socager","socagers","socages","soccage","soccages","soccer","soccers","sociable","sociably","social","socially","socials","societal","society","sock","socked","socket","socketed","sockets","sockeye","sockeyes","socking","sockless","sockman","sockmen","socko","socks","socle","socles","socman","socmen","sod","soda","sodaless","sodalist","sodalite","sodality","sodamide","sodas","sodded","sodden","soddened","soddenly","soddens","soddies","sodding","soddy","sodic","sodium","sodiums","sodom","sodomies","sodomite","sodomize","sodoms","sodomy","sods","soever","sofa","sofar","sofars","sofas","soffit","soffits","soft","softa","softas","softback","softball","soften","softened","softener","softens","softer","softest","softhead","softie","softies","softish","softly","softness","softs","software","softwood","softy","sogged","soggier","soggiest","soggily","soggy","soigne","soignee","soil","soilage","soilages","soiled","soiling","soilless","soils","soilure","soilures","soiree","soirees","soja","sojas","sojourn","sojourns","soke","sokeman","sokemen","sokes","sokol","sokols","sol","sola","solace","solaced","solacer","solacers","solaces","solacing","solan","soland","solander","solands","solanin","solanine","solanins","solano","solanos","solans","solanum","solanums","solar","solaria","solarise","solarism","solarium","solarize","solate","solated","solates","solatia","solating","solation","solatium","sold","soldan","soldans","solder","soldered","solderer","solders","soldi","soldier","soldiers","soldiery","soldo","sole","solecise","solecism","solecist","solecize","soled","solei","soleless","solely","solemn","solemner","solemnly","soleness","solenoid","soleret","solerets","soles","soleus","solfege","solfeges","solfeggi","solgel","soli","solicit","solicits","solid","solidago","solidary","solider","solidest","solidi","solidify","solidity","solidly","solids","solidus","soling","solion","solions","soliquid","solitary","soliton","solitons","solitude","solleret","solo","soloed","soloing","soloist","soloists","solon","solonets","solonetz","solons","solos","sols","solstice","soluble","solubles","solubly","solum","solums","solus","solute","solutes","solution","solvable","solvate","solvated","solvates","solve","solved","solvency","solvent","solvents","solver","solvers","solves","solving","soma","somas","somata","somatic","somber","somberly","sombre","sombrely","sombrero","sombrous","some","somebody","someday","somedeal","somehow","someone","someones","somerset","sometime","someway","someways","somewhat","somewhen","somewise","somital","somite","somites","somitic","son","sonance","sonances","sonant","sonantal","sonantic","sonants","sonar","sonarman","sonarmen","sonars","sonata","sonatas","sonatina","sonatine","sonde","sonder","sonders","sondes","sone","sones","song","songbird","songbook","songfest","songful","songless","songlike","songs","songster","sonhood","sonhoods","sonic","sonicate","sonics","sonless","sonlike","sonly","sonnet","sonneted","sonnets","sonnies","sonny","sonobuoy","sonogram","sonorant","sonority","sonorous","sonovox","sons","sonship","sonships","sonsie","sonsier","sonsiest","sonsy","soochong","sooey","sook","sooks","soon","sooner","sooners","soonest","soot","sooted","sooth","soothe","soothed","soother","soothers","soothes","soothest","soothing","soothly","sooths","soothsay","sootier","sootiest","sootily","sooting","soots","sooty","sop","soph","sophies","sophism","sophisms","sophist","sophists","sophs","sophy","sopite","sopited","sopites","sopiting","sopor","sopors","sopped","soppier","soppiest","sopping","soppy","soprani","soprano","sopranos","sops","sora","soras","sorb","sorbable","sorbate","sorbates","sorbed","sorbent","sorbents","sorbet","sorbets","sorbic","sorbing","sorbitol","sorbose","sorboses","sorbs","sorcerer","sorcery","sord","sordid","sordidly","sordine","sordines","sordini","sordino","sordor","sordors","sords","sore","sorehead","sorel","sorels","sorely","soreness","sorer","sores","sorest","sorgho","sorghos","sorghum","sorghums","sorgo","sorgos","sori","soricine","soring","sorings","sorites","soritic","sorn","sorned","sorner","sorners","sorning","sorns","soroche","soroches","sororal","sororate","sorority","soroses","sorosis","sorption","sorptive","sorrel","sorrels","sorrier","sorriest","sorrily","sorrow","sorrowed","sorrower","sorrows","sorry","sort","sortable","sortably","sorted","sorter","sorters","sortie","sortied","sorties","sorting","sorts","sorus","sos","sot","soth","soths","sotol","sotols","sots","sotted","sottish","sou","souari","souaris","soubise","soubises","soucar","soucars","souchong","soudan","soudans","souffle","souffled","souffles","sough","soughed","soughing","soughs","sought","souk","souks","soul","souled","soulful","soulless","soullike","souls","sound","soundbox","sounded","sounder","sounders","soundest","sounding","soundly","sounds","soup","soupcon","soupcons","souped","soupier","soupiest","souping","soups","soupy","sour","sourball","source","sources","sourdine","soured","sourer","sourest","souring","sourish","sourly","sourness","sourpuss","sours","soursop","soursops","sourwood","sous","souse","soused","souses","sousing","soutache","soutane","soutanes","souter","souters","south","southed","souther","southern","southers","southing","southpaw","southron","souths","souvenir","souvlaki","soviet","soviets","sovkhoz","sovkhozy","sovran","sovranly","sovrans","sovranty","sow","sowable","sowans","sowar","sowars","sowbelly","sowbread","sowcar","sowcars","sowed","sowens","sower","sowers","sowing","sown","sows","sox","soy","soya","soyas","soybean","soybeans","soymilk","soymilks","soys","soyuz","soyuzes","sozin","sozine","sozines","sozins","sozzled","spa","space","spaced","spaceman","spacemen","spacer","spacers","spaces","spacey","spacial","spacier","spaciest","spacing","spacings","spacious","spackle","spackled","spackles","spacy","spade","spaded","spadeful","spader","spaders","spades","spadices","spadille","spading","spadix","spadixes","spado","spadones","spae","spaed","spaeing","spaeings","spaes","spaetzle","spagyric","spahee","spahees","spahi","spahis","spail","spails","spait","spaits","spake","spale","spales","spall","spalled","spaller","spallers","spalling","spalls","spalpeen","span","spancel","spancels","spandex","spandrel","spandril","spang","spangle","spangled","spangles","spangly","spaniel","spaniels","spank","spanked","spanker","spankers","spanking","spanks","spanless","spanned","spanner","spanners","spanning","spans","spanworm","spar","sparable","spare","spared","sparely","sparer","sparerib","sparers","spares","sparest","sparge","sparged","sparger","spargers","sparges","sparging","sparid","sparids","sparing","spark","sparked","sparker","sparkers","sparkier","sparkily","sparking","sparkish","sparkle","sparkled","sparkler","sparkles","sparks","sparky","sparlike","sparling","sparoid","sparoids","sparred","sparrier","sparring","sparrow","sparrows","sparry","spars","sparse","sparsely","sparser","sparsest","sparsity","spas","spasm","spasms","spastic","spastics","spat","spate","spates","spathal","spathe","spathed","spathes","spathic","spathose","spatial","spats","spatted","spatter","spatters","spatting","spatula","spatular","spatulas","spatzle","spavie","spavies","spaviet","spavin","spavined","spavins","spawn","spawned","spawner","spawners","spawning","spawns","spay","spayed","spaying","spays","spaz","spazes","speak","speaker","speakers","speaking","speaks","spean","speaned","speaning","speans","spear","speared","spearer","spearers","spearing","spearman","spearmen","spears","spec","specced","speccing","special","specials","speciate","specie","species","specific","specify","specimen","specious","speck","specked","specking","speckle","speckled","speckles","specks","specs","spectate","specter","specters","spectra","spectral","spectre","spectres","spectrum","specula","specular","speculum","sped","speech","speeches","speed","speeded","speeder","speeders","speedier","speedily","speeding","speedo","speedos","speeds","speedup","speedups","speedway","speedy","speel","speeled","speeling","speels","speer","speered","speering","speers","speil","speiled","speiling","speils","speir","speired","speiring","speirs","speise","speises","speiss","speisses","spelaean","spelean","spell","spelled","speller","spellers","spelling","spells","spelt","spelter","spelters","spelts","speltz","speltzes","spelunk","spelunks","spence","spencer","spencers","spences","spend","spender","spenders","spending","spends","spense","spenses","spent","sperm","spermary","spermic","spermine","spermous","sperms","spew","spewed","spewer","spewers","spewing","spews","sphagnum","sphene","sphenes","sphenic","sphenoid","spheral","sphere","sphered","spheres","spheric","spherics","spherier","sphering","spheroid","spherule","sphery","sphinges","sphingid","sphinx","sphinxes","sphygmic","sphygmus","spic","spica","spicae","spicas","spicate","spicated","spiccato","spice","spiced","spicer","spicers","spicery","spices","spicey","spicier","spiciest","spicily","spicing","spick","spicks","spics","spicula","spiculae","spicular","spicule","spicules","spiculum","spicy","spider","spiders","spidery","spied","spiegel","spiegels","spiel","spieled","spieler","spielers","spieling","spiels","spier","spiered","spiering","spiers","spies","spiff","spiffed","spiffier","spiffily","spiffing","spiffs","spiffy","spigot","spigots","spik","spike","spiked","spikelet","spiker","spikers","spikes","spikier","spikiest","spikily","spiking","spiks","spiky","spile","spiled","spiles","spilikin","spiling","spilings","spill","spillage","spilled","spiller","spillers","spilling","spills","spillway","spilt","spilth","spilths","spin","spinach","spinage","spinages","spinal","spinally","spinals","spinate","spindle","spindled","spindler","spindles","spindly","spine","spined","spinel","spinelle","spinels","spines","spinet","spinets","spinier","spiniest","spinifex","spinless","spinner","spinners","spinnery","spinney","spinneys","spinnies","spinning","spinny","spinoff","spinoffs","spinor","spinors","spinose","spinous","spinout","spinouts","spins","spinster","spinto","spintos","spinula","spinulae","spinule","spinules","spiny","spiracle","spiraea","spiraeas","spiral","spiraled","spirally","spirals","spirant","spirants","spire","spirea","spireas","spired","spirem","spireme","spiremes","spirems","spires","spirier","spiriest","spirilla","spiring","spirit","spirited","spirits","spiroid","spirt","spirted","spirting","spirts","spirula","spirulae","spirulas","spiry","spit","spital","spitals","spitball","spite","spited","spiteful","spites","spitfire","spiting","spits","spitted","spitter","spitters","spitting","spittle","spittles","spittoon","spitz","spitzes","spiv","spivs","splake","splakes","splash","splashed","splasher","splashes","splashy","splat","splats","splatted","splatter","splay","splayed","splaying","splays","spleen","spleens","spleeny","splendid","splendor","splenia","splenial","splenic","splenii","splenium","splenius","splent","splents","splice","spliced","splicer","splicers","splices","splicing","spliff","spliffs","spline","splined","splines","splining","splint","splinted","splinter","splints","split","splits","splitter","splodge","splodged","splodges","splore","splores","splosh","sploshed","sploshes","splotch","splotchy","splurge","splurged","splurger","splurges","splurgy","splutter","spode","spodes","spoil","spoilage","spoiled","spoiler","spoilers","spoiling","spoils","spoilt","spoke","spoked","spoken","spokes","spoking","spoliate","spondaic","spondee","spondees","sponge","sponged","sponger","spongers","sponges","spongier","spongily","spongin","sponging","spongins","spongy","sponsal","sponsion","sponson","sponsons","sponsor","sponsors","spontoon","spoof","spoofed","spoofer","spoofers","spoofery","spoofing","spoofs","spoofy","spook","spooked","spookery","spookier","spookily","spooking","spookish","spooks","spooky","spool","spooled","spooling","spools","spoon","spooned","spooney","spooneys","spoonful","spoonier","spoonies","spoonily","spooning","spoons","spoony","spoor","spoored","spooring","spoors","sporadic","sporal","spore","spored","spores","sporing","sporoid","sporozoa","sporran","sporrans","sport","sported","sporter","sporters","sportful","sportier","sportily","sporting","sportive","sports","sporty","sporular","sporule","sporules","spot","spotless","spotlit","spots","spotted","spotter","spotters","spottier","spottily","spotting","spotty","spousal","spousals","spouse","spoused","spouses","spousing","spout","spouted","spouter","spouters","spouting","spouts","spraddle","sprag","sprags","sprain","sprained","sprains","sprang","sprangs","sprat","sprats","sprattle","sprawl","sprawled","sprawler","sprawls","sprawly","spray","sprayed","sprayer","sprayers","spraying","sprays","spread","spreader","spreads","spree","sprees","sprent","sprier","spriest","sprig","sprigged","sprigger","spriggy","spright","sprights","sprigs","spring","springal","springe","springed","springer","springes","springs","springy","sprinkle","sprint","sprinted","sprinter","sprints","sprit","sprite","sprites","sprits","spritz","spritzed","spritzer","spritzes","sprocket","sprout","sprouted","sprouts","spruce","spruced","sprucely","sprucer","spruces","sprucest","sprucier","sprucing","sprucy","sprue","sprues","sprug","sprugs","sprung","spry","spryer","spryest","spryly","spryness","spud","spudded","spudder","spudders","spudding","spuds","spue","spued","spues","spuing","spume","spumed","spumes","spumier","spumiest","spuming","spumone","spumones","spumoni","spumonis","spumous","spumy","spun","spunk","spunked","spunkie","spunkier","spunkies","spunkily","spunking","spunks","spunky","spur","spurgall","spurge","spurges","spurious","spurn","spurned","spurner","spurners","spurning","spurns","spurred","spurrer","spurrers","spurrey","spurreys","spurrier","spurries","spurring","spurry","spurs","spurt","spurted","spurting","spurtle","spurtles","spurts","sputa","sputnik","sputniks","sputter","sputters","sputum","spy","spyglass","spying","squab","squabble","squabby","squabs","squad","squadded","squadron","squads","squalene","squalid","squall","squalled","squaller","squalls","squally","squalor","squalors","squama","squamae","squamate","squamose","squamous","squander","square","squared","squarely","squarer","squarers","squares","squarest","squaring","squarish","squash","squashed","squasher","squashes","squashy","squat","squatly","squats","squatted","squatter","squatty","squaw","squawk","squawked","squawker","squawks","squaws","squeak","squeaked","squeaker","squeaks","squeaky","squeal","squealed","squealer","squeals","squeegee","squeeze","squeezed","squeezer","squeezes","squeg","squegged","squegs","squelch","squelchy","squib","squibbed","squibs","squid","squidded","squids","squiffed","squiffy","squiggle","squiggly","squilgee","squill","squilla","squillae","squillas","squills","squinch","squinny","squint","squinted","squinter","squints","squinty","squire","squired","squireen","squires","squiring","squirish","squirm","squirmed","squirmer","squirms","squirmy","squirrel","squirt","squirted","squirter","squirts","squish","squished","squishes","squishy","squoosh","squooshy","squush","squushed","squushes","sraddha","sraddhas","sradha","sradhas","sri","sris","stab","stabbed","stabber","stabbers","stabbing","stabile","stabiles","stable","stabled","stabler","stablers","stables","stablest","stabling","stablish","stably","stabs","staccati","staccato","stack","stacked","stacker","stackers","stacking","stacks","stackup","stackups","stacte","stactes","staddle","staddles","stade","stades","stadia","stadias","stadium","stadiums","staff","staffed","staffer","staffers","staffing","staffs","stag","stage","staged","stageful","stager","stagers","stages","stagey","staggard","staggart","stagged","stagger","staggers","staggery","staggie","staggier","staggies","stagging","staggy","stagier","stagiest","stagily","staging","stagings","stagnant","stagnate","stags","stagy","staid","staider","staidest","staidly","staig","staigs","stain","stained","stainer","stainers","staining","stains","stair","stairs","stairway","staithe","staithes","stake","staked","stakeout","stakes","staking","stalag","stalags","stale","staled","stalely","staler","stales","stalest","staling","stalk","stalked","stalker","stalkers","stalkier","stalkily","stalking","stalks","stalky","stall","stalled","stalling","stallion","stalls","stalwart","stamen","stamens","stamina","staminal","staminas","stammel","stammels","stammer","stammers","stamp","stamped","stampede","stamper","stampers","stamping","stamps","stance","stances","stanch","stanched","stancher","stanches","stanchly","stand","standard","standby","standbys","standee","standees","stander","standers","standing","standish","standoff","standout","standpat","stands","standup","stane","staned","stanes","stang","stanged","stanging","stangs","stanhope","stanine","stanines","staning","stank","stanks","stannary","stannic","stannite","stannous","stannum","stannums","stanza","stanzaed","stanzaic","stanzas","stapedes","stapelia","stapes","staph","staphs","staple","stapled","stapler","staplers","staples","stapling","star","starch","starched","starches","starchy","stardom","stardoms","stardust","stare","stared","starer","starers","stares","starets","starfish","stargaze","staring","stark","starker","starkers","starkest","starkly","starless","starlet","starlets","starlike","starling","starlit","starnose","starred","starrier","starring","starry","stars","start","started","starter","starters","starting","startle","startled","startler","startles","starts","startsy","startup","startups","starve","starved","starver","starvers","starves","starving","starwort","stases","stash","stashed","stashes","stashing","stasima","stasimon","stasis","stat","statable","statal","statant","state","stated","statedly","stately","stater","staters","states","static","statical","statice","statices","staticky","statics","stating","station","stations","statism","statisms","statist","statists","stative","statives","stator","stators","stats","statuary","statue","statued","statues","stature","statures","status","statuses","statute","statutes","staumrel","staunch","stave","staved","staves","staving","staw","stay","stayed","stayer","stayers","staying","stays","staysail","stead","steaded","steadied","steadier","steadies","steadily","steading","steads","steady","steak","steaks","steal","stealage","stealer","stealers","stealing","steals","stealth","stealths","stealthy","steam","steamed","steamer","steamers","steamier","steamily","steaming","steams","steamy","steapsin","stearate","stearic","stearin","stearine","stearins","steatite","stedfast","steed","steeds","steek","steeked","steeking","steeks","steel","steeled","steelie","steelier","steelies","steeling","steels","steely","steenbok","steep","steeped","steepen","steepens","steeper","steepers","steepest","steeping","steeple","steepled","steeples","steeply","steeps","steer","steerage","steered","steerer","steerers","steering","steers","steeve","steeved","steeves","steeving","stegodon","stein","steinbok","steins","stela","stelae","stelai","stelar","stele","stelene","steles","stelic","stella","stellar","stellas","stellate","stellify","stem","stemless","stemlike","stemma","stemmas","stemmata","stemmed","stemmer","stemmers","stemmery","stemmier","stemming","stemmy","stems","stemson","stemsons","stemware","stench","stenches","stenchy","stencil","stencils","stengah","stengahs","steno","stenoky","stenos","stenosed","stenoses","stenosis","stenotic","stentor","stentors","step","stepdame","steplike","steppe","stepped","stepper","steppers","steppes","stepping","steps","stepson","stepsons","stepwise","stere","stereo","stereoed","stereos","steres","steric","sterical","sterigma","sterile","sterlet","sterlets","sterling","stern","sterna","sternal","sterner","sternest","sternite","sternly","sterns","sternson","sternum","sternums","sternway","steroid","steroids","sterol","sterols","stertor","stertors","stet","stets","stetted","stetting","stew","steward","stewards","stewbum","stewbums","stewed","stewing","stewpan","stewpans","stews","stey","sthenia","sthenias","sthenic","stibial","stibine","stibines","stibium","stibiums","stibnite","stich","stichic","stichs","stick","sticked","sticker","stickers","stickful","stickier","stickily","sticking","stickit","stickle","stickled","stickler","stickles","stickman","stickmen","stickout","stickpin","sticks","stickum","stickums","stickup","stickups","sticky","stiction","stied","sties","stiff","stiffed","stiffen","stiffens","stiffer","stiffest","stiffing","stiffish","stiffly","stiffs","stifle","stifled","stifler","stiflers","stifles","stifling","stigma","stigmal","stigmas","stigmata","stilbene","stilbite","stile","stiles","stiletto","still","stilled","stiller","stillest","stillier","stilling","stillman","stillmen","stills","stilly","stilt","stilted","stilting","stilts","stime","stimes","stimied","stimies","stimuli","stimulus","stimy","stimying","sting","stinger","stingers","stingier","stingily","stinging","stingo","stingos","stingray","stings","stingy","stink","stinkard","stinkbug","stinker","stinkers","stinkier","stinking","stinko","stinkpot","stinks","stinky","stint","stinted","stinter","stinters","stinting","stints","stipe","stiped","stipel","stipels","stipend","stipends","stipes","stipites","stipple","stippled","stippler","stipples","stipular","stipule","stipuled","stipules","stir","stirk","stirks","stirp","stirpes","stirps","stirred","stirrer","stirrers","stirring","stirrup","stirrups","stirs","stitch","stitched","stitcher","stitches","stithied","stithies","stithy","stiver","stivers","stoa","stoae","stoai","stoas","stoat","stoats","stob","stobbed","stobbing","stobs","stoccado","stoccata","stock","stockade","stockcar","stocked","stocker","stockers","stockier","stockily","stocking","stockish","stockist","stockman","stockmen","stockpot","stocks","stocky","stodge","stodged","stodges","stodgier","stodgily","stodging","stodgy","stogey","stogeys","stogie","stogies","stogy","stoic","stoical","stoicism","stoics","stoke","stoked","stoker","stokers","stokes","stokesia","stoking","stole","stoled","stolen","stoles","stolid","stolider","stolidly","stollen","stollens","stolon","stolonic","stolons","stolport","stoma","stomach","stomachs","stomachy","stomal","stomas","stomata","stomatal","stomate","stomates","stomatic","stomodea","stomp","stomped","stomper","stompers","stomping","stomps","stonable","stone","stoned","stonefly","stoner","stoners","stones","stoney","stonier","stoniest","stonily","stoning","stonish","stony","stood","stooge","stooged","stooges","stooging","stook","stooked","stooker","stookers","stooking","stooks","stool","stooled","stoolie","stoolies","stooling","stools","stoop","stooped","stooper","stoopers","stooping","stoops","stop","stopbank","stopcock","stope","stoped","stoper","stopers","stopes","stopgap","stopgaps","stoping","stopover","stoppage","stopped","stopper","stoppers","stopping","stopple","stoppled","stopples","stops","stopt","storable","storage","storages","storax","storaxes","store","stored","stores","storey","storeyed","storeys","storied","stories","storing","stork","storks","storm","stormed","stormier","stormily","storming","storms","stormy","story","storying","stoss","stotinka","stotinki","stound","stounded","stounds","stoup","stoups","stour","stoure","stoures","stourie","stours","stoury","stout","stouten","stoutens","stouter","stoutest","stoutish","stoutly","stouts","stove","stover","stovers","stoves","stow","stowable","stowage","stowages","stowaway","stowed","stowing","stowp","stowps","stows","straddle","strafe","strafed","strafer","strafers","strafes","strafing","straggle","straggly","straight","strain","strained","strainer","strains","strait","straiten","straiter","straitly","straits","strake","straked","strakes","stramash","stramony","strand","stranded","strander","strands","strang","strange","stranger","strangle","strap","strapped","strapper","straps","strass","strasses","strata","stratal","stratas","strategy","strath","straths","strati","stratify","stratous","stratum","stratums","stratus","stravage","stravaig","straw","strawed","strawhat","strawier","strawing","straws","strawy","stray","strayed","strayer","strayers","straying","strays","streak","streaked","streaker","streaks","streaky","stream","streamed","streamer","streams","streamy","streek","streeked","streeker","streeks","street","streets","strength","strep","streps","stress","stressed","stresses","stressor","stretch","stretchy","stretta","strettas","strette","stretti","stretto","strettos","streusel","strew","strewed","strewer","strewers","strewing","strewn","strews","stria","striae","striate","striated","striates","strick","stricken","strickle","stricks","strict","stricter","strictly","strid","stridden","stride","strident","strider","striders","strides","striding","stridor","stridors","strife","strifes","strigil","strigils","strigose","strike","striker","strikers","strikes","striking","string","stringed","stringer","strings","stringy","strip","stripe","striped","striper","stripers","stripes","stripier","striping","stripped","stripper","strips","stript","stripy","strive","strived","striven","striver","strivers","strives","striving","strobe","strobes","strobic","strobil","strobila","strobile","strobili","strobils","strode","stroke","stroked","stroker","strokers","strokes","stroking","stroll","strolled","stroller","strolls","stroma","stromal","stromata","strong","stronger","strongly","strongyl","strontia","strontic","strook","strop","strophe","strophes","strophic","stropped","stropper","stroppy","strops","stroud","strouds","strove","strow","strowed","strowing","strown","strows","stroy","stroyed","stroyer","stroyers","stroying","stroys","struck","strucken","strudel","strudels","struggle","strum","struma","strumae","strumas","strummed","strummer","strumose","strumous","strumpet","strums","strung","strunt","strunted","strunts","strut","struts","strutted","strutter","stub","stubbed","stubbier","stubbily","stubbing","stubble","stubbled","stubbles","stubbly","stubborn","stubby","stubs","stucco","stuccoed","stuccoer","stuccoes","stuccos","stuck","stud","studbook","studded","studdie","studdies","studding","student","students","studfish","studied","studier","studiers","studies","studio","studios","studious","studs","studwork","study","studying","stuff","stuffed","stuffer","stuffers","stuffier","stuffily","stuffing","stuffs","stuffy","stuiver","stuivers","stull","stulls","stultify","stum","stumble","stumbled","stumbler","stumbles","stummed","stumming","stump","stumpage","stumped","stumper","stumpers","stumpier","stumping","stumps","stumpy","stums","stun","stung","stunk","stunned","stunner","stunners","stunning","stuns","stunsail","stunt","stunted","stunting","stuntman","stuntmen","stunts","stupa","stupas","stupe","stupefy","stupes","stupid","stupider","stupidly","stupids","stupor","stupors","sturdied","sturdier","sturdies","sturdily","sturdy","sturgeon","sturt","sturts","stutter","stutters","sty","stye","styed","styes","stygian","stying","stylar","stylate","style","styled","styler","stylers","styles","stylet","stylets","styli","styling","stylings","stylise","stylised","styliser","stylises","stylish","stylist","stylists","stylite","stylites","stylitic","stylize","stylized","stylizer","stylizes","styloid","stylus","styluses","stymie","stymied","stymies","stymy","stymying","stypsis","styptic","styptics","styrax","styraxes","styrene","styrenes","suable","suably","suasion","suasions","suasive","suasory","suave","suavely","suaver","suavest","suavity","sub","suba","subabbot","subacid","subacrid","subacute","subadar","subadars","subadult","subagent","subah","subahdar","subahs","subalar","subarea","subareas","subarid","subas","subatom","subatoms","subaxial","subbase","subbases","subbasin","subbass","subbed","subbing","subbings","subblock","subbreed","subcaste","subcause","subcell","subcells","subchief","subclan","subclans","subclass","subclerk","subcode","subcodes","subcool","subcools","subcutes","subcutis","subdean","subdeans","subdeb","subdebs","subdepot","subdual","subduals","subduce","subduced","subduces","subduct","subducts","subdue","subdued","subduer","subduers","subdues","subduing","subdural","subecho","subedit","subedits","subentry","subepoch","suber","suberect","suberic","suberin","suberins","suberise","suberize","suberose","suberous","subers","subfield","subfile","subfiles","subfix","subfixes","subfloor","subfluid","subframe","subfusc","subgenre","subgenus","subgoal","subgoals","subgrade","subgraph","subgroup","subgum","subgums","subhead","subheads","subhuman","subhumid","subidea","subideas","subindex","subitem","subitems","subito","subject","subjects","subjoin","subjoins","sublate","sublated","sublates","sublease","sublet","sublets","sublevel","sublime","sublimed","sublimer","sublimes","subline","sublines","sublot","sublots","sublunar","submerge","submerse","submiss","submit","submits","subnasal","subnet","subnets","subniche","subnodal","suboptic","suboral","suborder","suborn","suborned","suborner","suborns","suboval","subovate","suboxide","subpanel","subpar","subpart","subparts","subpena","subpenas","subphase","subphyla","subplot","subplots","subpoena","subpolar","subpubic","subrace","subraces","subrent","subrents","subring","subrings","subrule","subrules","subs","subsale","subsales","subscale","subsea","subsect","subsects","subsense","subsere","subseres","subserve","subset","subsets","subshaft","subshell","subshrub","subside","subsided","subsider","subsides","subsidy","subsist","subsists","subsite","subsites","subsoil","subsoils","subsolar","subsonic","subspace","substage","substate","subsume","subsumed","subsumes","subtask","subtasks","subtaxa","subtaxon","subteen","subteens","subtend","subtends","subtest","subtests","subtext","subtexts","subtheme","subtile","subtiler","subtilin","subtilty","subtitle","subtle","subtler","subtlest","subtlety","subtly","subtone","subtones","subtonic","subtopia","subtopic","subtotal","subtract","subtrend","subtribe","subtunic","subtype","subtypes","subulate","subunit","subunits","suburb","suburban","suburbed","suburbia","suburbs","subvene","subvened","subvenes","subvert","subverts","subvicar","subviral","subvocal","subway","subwayed","subways","subzero","subzone","subzones","succah","succahs","succeed","succeeds","success","succinct","succinic","succinyl","succor","succored","succorer","succors","succory","succoth","succour","succours","succuba","succubae","succubi","succubus","succumb","succumbs","succuss","such","suchlike","suchness","suck","sucked","sucker","suckered","suckers","suckfish","sucking","suckle","suckled","suckler","sucklers","suckles","suckless","suckling","sucks","sucrase","sucrases","sucre","sucres","sucrose","sucroses","suction","suctions","sudaria","sudaries","sudarium","sudary","sudation","sudatory","sudd","sudden","suddenly","suddens","sudds","sudor","sudoral","sudors","suds","sudsed","sudser","sudsers","sudses","sudsier","sudsiest","sudsing","sudsless","sudsy","sue","sued","suede","sueded","suedes","sueding","suer","suers","sues","suet","suets","suety","suffari","suffaris","suffer","suffered","sufferer","suffers","suffice","sufficed","sufficer","suffices","suffix","suffixal","suffixed","suffixes","sufflate","suffrage","suffuse","suffused","suffuses","sugar","sugared","sugarier","sugaring","sugars","sugary","suggest","suggests","sugh","sughed","sughing","sughs","suicidal","suicide","suicided","suicides","suing","suint","suints","suit","suitable","suitably","suitcase","suite","suited","suiter","suiters","suites","suiting","suitings","suitlike","suitor","suitors","suits","sukiyaki","sukkah","sukkahs","sukkot","sukkoth","sulcal","sulcate","sulcated","sulci","sulcus","suldan","suldans","sulfa","sulfas","sulfate","sulfated","sulfates","sulfid","sulfide","sulfides","sulfids","sulfinyl","sulfite","sulfites","sulfitic","sulfo","sulfone","sulfones","sulfonic","sulfonyl","sulfur","sulfured","sulfuret","sulfuric","sulfurs","sulfury","sulfuryl","sulk","sulked","sulker","sulkers","sulkier","sulkies","sulkiest","sulkily","sulking","sulks","sulky","sullage","sullages","sullen","sullener","sullenly","sullied","sullies","sully","sullying","sulpha","sulphas","sulphate","sulphid","sulphide","sulphids","sulphite","sulphone","sulphur","sulphurs","sulphury","sultan","sultana","sultanas","sultanic","sultans","sultrier","sultrily","sultry","sulu","sulus","sum","sumac","sumach","sumachs","sumacs","sumless","summa","summable","summae","summand","summands","summary","summas","summate","summated","summates","summed","summer","summered","summerly","summers","summery","summing","summit","summital","summitry","summits","summon","summoned","summoner","summons","sumo","sumos","sump","sumps","sumpter","sumpters","sumpweed","sums","sun","sunback","sunbaked","sunbath","sunbathe","sunbaths","sunbeam","sunbeams","sunbeamy","sunbelt","sunbelts","sunbird","sunbirds","sunbow","sunbows","sunburn","sunburns","sunburnt","sunburst","sundae","sundaes","sunder","sundered","sunderer","sunders","sundew","sundews","sundial","sundials","sundog","sundogs","sundown","sundowns","sundress","sundries","sundrops","sundry","sunfast","sunfish","sung","sunglass","sunglow","sunglows","sunk","sunken","sunket","sunkets","sunlamp","sunlamps","sunland","sunlands","sunless","sunlight","sunlike","sunlit","sunn","sunna","sunnas","sunned","sunnier","sunniest","sunnily","sunning","sunns","sunny","sunproof","sunrise","sunrises","sunroof","sunroofs","sunroom","sunrooms","suns","sunscald","sunset","sunsets","sunshade","sunshine","sunshiny","sunspot","sunspots","sunstone","sunsuit","sunsuits","suntan","suntans","sunup","sunups","sunward","sunwards","sunwise","sup","supe","super","superadd","superb","superbad","superber","superbly","supercar","supercop","supered","superego","superfan","superfix","superhit","supering","superior","superjet","superlay","superlie","superman","supermen","supermom","supernal","superpro","supers","supersex","superspy","supertax","supes","supinate","supine","supinely","supines","supped","supper","suppers","supping","supplant","supple","suppled","supplely","suppler","supples","supplest","supplied","supplier","supplies","suppling","supply","support","supports","supposal","suppose","supposed","supposer","supposes","suppress","supra","supreme","supremer","supremo","supremos","sups","sura","surah","surahs","sural","suras","surbase","surbased","surbases","surcease","surcoat","surcoats","surd","surds","sure","surefire","surely","sureness","surer","surest","sureties","surety","surf","surfable","surface","surfaced","surfacer","surfaces","surfbird","surfboat","surfed","surfeit","surfeits","surfer","surfers","surffish","surfier","surfiest","surfing","surfings","surflike","surfs","surfy","surge","surged","surgeon","surgeons","surger","surgers","surgery","surges","surgical","surging","surgy","suricate","surlier","surliest","surlily","surly","surmise","surmised","surmiser","surmises","surmount","surname","surnamed","surnamer","surnames","surpass","surplice","surplus","surprint","surprise","surprize","surra","surras","surreal","surrey","surreys","surround","surroyal","surtax","surtaxed","surtaxes","surtout","surtouts","surveil","surveils","survey","surveyed","surveyor","surveys","survival","survive","survived","surviver","survives","survivor","sushi","sushis","suslik","susliks","suspect","suspects","suspend","suspends","suspense","suspire","suspired","suspires","suss","sussed","susses","sussing","sustain","sustains","susurrus","sutler","sutlers","sutra","sutras","sutta","suttas","suttee","suttees","sutural","suture","sutured","sutures","suturing","suzerain","svaraj","svarajes","svedberg","svelte","sveltely","svelter","sveltest","swab","swabbed","swabber","swabbers","swabbie","swabbies","swabbing","swabby","swabs","swacked","swaddle","swaddled","swaddles","swag","swage","swaged","swager","swagers","swages","swagged","swagger","swaggers","swagging","swaging","swagman","swagmen","swags","swail","swails","swain","swainish","swains","swale","swales","swallow","swallows","swam","swami","swamies","swamis","swamp","swamped","swamper","swampers","swampier","swamping","swampish","swamps","swampy","swamy","swan","swang","swanherd","swank","swanked","swanker","swankest","swankier","swankily","swanking","swanks","swanky","swanlike","swanned","swannery","swanning","swanpan","swanpans","swans","swanskin","swap","swapped","swapper","swappers","swapping","swaps","swaraj","swarajes","sward","swarded","swarding","swards","sware","swarf","swarfs","swarm","swarmed","swarmer","swarmers","swarming","swarms","swart","swarth","swarths","swarthy","swarty","swash","swashed","swasher","swashers","swashes","swashing","swastica","swastika","swat","swatch","swatches","swath","swathe","swathed","swather","swathers","swathes","swathing","swaths","swats","swatted","swatter","swatters","swatting","sway","swayable","swayback","swayed","swayer","swayers","swayful","swaying","sways","swear","swearer","swearers","swearing","swears","sweat","sweatbox","sweated","sweater","sweaters","sweatier","sweatily","sweating","sweats","sweaty","swede","swedes","sweenies","sweeny","sweep","sweeper","sweepers","sweepier","sweeping","sweeps","sweepy","sweer","sweet","sweeten","sweetens","sweeter","sweetest","sweetie","sweeties","sweeting","sweetish","sweetly","sweets","sweetsop","swell","swelled","sweller","swellest","swelling","swells","swelter","swelters","sweltry","swept","swerve","swerved","swerver","swervers","swerves","swerving","sweven","swevens","swidden","swiddens","swift","swifter","swifters","swiftest","swiftly","swifts","swig","swigged","swigger","swiggers","swigging","swigs","swill","swilled","swiller","swillers","swilling","swills","swim","swimmer","swimmers","swimmier","swimmily","swimming","swimmy","swims","swimsuit","swimwear","swindle","swindled","swindler","swindles","swine","swinepox","swing","swingby","swingbys","swinge","swinged","swinger","swingers","swinges","swingier","swinging","swingle","swingled","swingles","swingman","swingmen","swings","swingy","swinish","swink","swinked","swinking","swinks","swinney","swinneys","swipe","swiped","swipes","swiping","swiple","swiples","swipple","swipples","swirl","swirled","swirlier","swirling","swirls","swirly","swish","swished","swisher","swishers","swishes","swishier","swishing","swishy","swiss","swisses","switch","switched","switcher","switches","swith","swithe","swither","swithers","swithly","swive","swived","swivel","swiveled","swivels","swives","swivet","swivets","swiving","swizzle","swizzled","swizzler","swizzles","swob","swobbed","swobber","swobbers","swobbing","swobs","swollen","swoon","swooned","swooner","swooners","swooning","swoons","swoop","swooped","swooper","swoopers","swooping","swoops","swoosh","swooshed","swooshes","swop","swopped","swopping","swops","sword","swordman","swordmen","swords","swore","sworn","swot","swots","swotted","swotter","swotters","swotting","swoun","swound","swounded","swounds","swouned","swouning","swouns","swum","swung","sybarite","sybo","syboes","sycamine","sycamore","syce","sycee","sycees","syces","sycomore","syconia","syconium","sycoses","sycosis","syenite","syenites","syenitic","syke","sykes","syli","sylis","syllabi","syllabic","syllable","syllabub","syllabus","sylph","sylphic","sylphid","sylphids","sylphish","sylphs","sylphy","sylva","sylvae","sylvan","sylvans","sylvas","sylvatic","sylvin","sylvine","sylvines","sylvins","sylvite","sylvites","symbion","symbions","symbiont","symbiot","symbiote","symbiots","symbol","symboled","symbolic","symbols","symmetry","sympathy","sympatry","symphony","sympodia","symposia","symptom","symptoms","syn","synagog","synagogs","synanon","synanons","synapse","synapsed","synapses","synapsis","synaptic","sync","syncarp","syncarps","syncarpy","synced","synch","synched","synching","synchro","synchros","synchs","syncing","syncline","syncom","syncoms","syncopal","syncope","syncopes","syncopic","syncs","syncytia","syndeses","syndesis","syndet","syndetic","syndets","syndic","syndical","syndics","syndrome","syne","synectic","synergia","synergic","synergid","synergy","synesis","synfuel","synfuels","syngamic","syngamy","syngas","syngases","synod","synodal","synodic","synods","synonym","synonyme","synonyms","synonymy","synopses","synopsis","synoptic","synovia","synovial","synovias","syntagma","syntax","syntaxes","synth","synths","syntonic","syntony","synura","synurae","sypher","syphered","syphers","syphilis","syphon","syphoned","syphons","syren","syrens","syringa","syringas","syringe","syringed","syringes","syrinx","syrinxes","syrphian","syrphid","syrphids","syrup","syrups","syrupy","system","systemic","systems","systole","systoles","systolic","syzygal","syzygial","syzygies","syzygy","tab","tabanid","tabanids","tabard","tabarded","tabards","tabaret","tabarets","tabbed","tabbied","tabbies","tabbing","tabbis","tabbises","tabby","tabbying","taber","tabered","tabering","tabers","tabes","tabetic","tabetics","tabid","tabla","tablas","table","tableau","tableaus","tableaux","tabled","tableful","tables","tablet","tableted","tabletop","tablets","tabling","tabloid","tabloids","taboo","tabooed","tabooing","tabooley","taboos","tabor","tabored","taborer","taborers","taboret","taborets","taborin","taborine","taboring","taborins","tabors","tabouli","taboulis","tabour","taboured","tabourer","tabouret","tabours","tabs","tabu","tabued","tabuing","tabular","tabulate","tabuli","tabulis","tabus","tace","taces","tacet","tach","tache","taches","tachinid","tachism","tachisme","tachisms","tachist","tachiste","tachists","tachs","tachyon","tachyons","tacit","tacitly","taciturn","tack","tacked","tacker","tackers","tacket","tackets","tackey","tackier","tackiest","tackify","tackily","tacking","tackle","tackled","tackler","tacklers","tackles","tackless","tackling","tacks","tacky","tacnode","tacnodes","taco","taconite","tacos","tact","tactful","tactic","tactical","tactics","tactile","taction","tactions","tactless","tacts","tactual","tad","tadpole","tadpoles","tads","tae","tael","taels","taenia","taeniae","taenias","taffarel","tafferel","taffeta","taffetas","taffia","taffias","taffies","taffrail","taffy","tafia","tafias","tag","tagalong","tagboard","tagged","tagger","taggers","tagging","taglike","tagmeme","tagmemes","tagmemic","tagrag","tagrags","tags","tahini","tahinis","tahr","tahrs","tahsil","tahsils","taiga","taigas","taiglach","tail","tailback","tailbone","tailcoat","tailed","tailer","tailers","tailfan","tailfans","tailgate","tailing","tailings","taillamp","taille","tailles","tailless","tailleur","taillike","tailor","tailored","tailors","tailpipe","tailrace","tails","tailskid","tailspin","tailwind","tain","tains","taint","tainted","tainting","taints","taipan","taipans","taj","tajes","taka","takable","takahe","takahes","take","takeable","takeaway","takedown","taken","takeoff","takeoffs","takeout","takeouts","takeover","taker","takers","takes","takeup","takeups","takin","taking","takingly","takings","takins","tala","talapoin","talar","talaria","talars","talas","talc","talced","talcing","talcked","talcking","talcky","talcose","talcous","talcs","talcum","talcums","tale","talent","talented","talents","taler","talers","tales","talesman","talesmen","taleysim","tali","talion","talions","taliped","talipeds","talipes","talipot","talipots","talisman","talk","talkable","talked","talker","talkers","talkie","talkier","talkies","talkiest","talking","talkings","talks","talky","tall","tallage","tallaged","tallages","tallboy","tallboys","taller","tallest","tallied","tallier","talliers","tallies","tallish","tallit","tallith","tallitim","tallness","tallol","tallols","tallow","tallowed","tallows","tallowy","tally","tallyho","tallyhos","tallying","tallyman","tallymen","talmudic","talon","taloned","talons","talooka","talookas","taluk","taluka","talukas","taluks","talus","taluses","tam","tamable","tamal","tamale","tamales","tamals","tamandu","tamandua","tamandus","tamarack","tamarao","tamaraos","tamarau","tamaraus","tamari","tamarin","tamarind","tamarins","tamaris","tamarisk","tamasha","tamashas","tambac","tambacs","tambak","tambaks","tambala","tambalas","tambour","tamboura","tambours","tambur","tambura","tamburas","tamburs","tame","tameable","tamed","tamein","tameins","tameless","tamely","tameness","tamer","tamers","tames","tamest","taming","tamis","tamises","tammie","tammies","tammy","tamp","tampala","tampalas","tampan","tampans","tamped","tamper","tampered","tamperer","tampers","tamping","tampion","tampions","tampon","tamponed","tampons","tamps","tams","tan","tanager","tanagers","tanbark","tanbarks","tandem","tandems","tandoor","tandoori","tang","tanged","tangelo","tangelos","tangence","tangency","tangent","tangents","tangible","tangibly","tangier","tangiest","tanging","tangle","tangled","tangler","tanglers","tangles","tanglier","tangling","tangly","tango","tangoed","tangoing","tangos","tangram","tangrams","tangs","tangy","tanist","tanistry","tanists","tank","tanka","tankage","tankages","tankard","tankards","tankas","tanked","tanker","tankers","tankful","tankfuls","tanking","tanks","tankship","tannable","tannage","tannages","tannate","tannates","tanned","tanner","tanners","tannery","tannest","tannic","tannin","tanning","tannings","tannins","tannish","tanrec","tanrecs","tans","tansies","tansy","tantalic","tantalum","tantalus","tantara","tantaras","tantivy","tanto","tantra","tantras","tantric","tantrum","tantrums","tanyard","tanyards","tao","taos","tap","tapa","tapadera","tapadero","tapalo","tapalos","tapas","tape","taped","tapeless","tapelike","tapeline","taper","tapered","taperer","taperers","tapering","tapers","tapes","tapestry","tapeta","tapetal","tapetum","tapeworm","taphole","tapholes","taphouse","taping","tapioca","tapiocas","tapir","tapirs","tapis","tapises","tapped","tapper","tappers","tappet","tappets","tapping","tappings","taproom","taprooms","taproot","taproots","taps","tapster","tapsters","tar","tarama","taramas","tarantas","tarboosh","tarbush","tardier","tardies","tardiest","tardily","tardo","tardy","tardyon","tardyons","tare","tared","tares","targe","targes","target","targeted","targets","tariff","tariffed","tariffs","taring","tarlatan","tarletan","tarmac","tarmacs","tarn","tarnal","tarnally","tarnish","tarns","taro","taroc","tarocs","tarok","taroks","taros","tarot","tarots","tarp","tarpan","tarpans","tarpaper","tarpon","tarpons","tarps","tarragon","tarre","tarred","tarres","tarried","tarrier","tarriers","tarries","tarriest","tarring","tarry","tarrying","tars","tarsal","tarsals","tarsi","tarsia","tarsias","tarsier","tarsiers","tarsus","tart","tartan","tartana","tartanas","tartans","tartar","tartaric","tartars","tarted","tarter","tartest","tarting","tartish","tartlet","tartlets","tartly","tartness","tartrate","tarts","tartufe","tartufes","tartuffe","tarty","tarweed","tarweeds","tarzan","tarzans","tas","task","tasked","tasking","tasks","taskwork","tass","tasse","tassel","tasseled","tassels","tasses","tasset","tassets","tassie","tassies","tastable","taste","tasted","tasteful","taster","tasters","tastes","tastier","tastiest","tastily","tasting","tasty","tat","tatami","tatamis","tatar","tatars","tate","tater","taters","tates","tatouay","tatouays","tats","tatted","tatter","tattered","tatters","tattier","tattiest","tattily","tatting","tattings","tattle","tattled","tattler","tattlers","tattles","tattling","tattoo","tattooed","tattooer","tattoos","tatty","tau","taught","taunt","taunted","taunter","taunters","taunting","taunts","taupe","taupes","taurine","taurines","taus","taut","tautaug","tautaugs","tauted","tauten","tautened","tautens","tauter","tautest","tauting","tautly","tautness","tautog","tautogs","tautomer","tautonym","tauts","tav","tavern","taverna","tavernas","taverner","taverns","tavs","taw","tawdrier","tawdries","tawdrily","tawdry","tawed","tawer","tawers","tawie","tawing","tawney","tawneys","tawnier","tawnies","tawniest","tawnily","tawny","tawpie","tawpies","taws","tawse","tawsed","tawses","tawsing","tax","taxa","taxable","taxables","taxably","taxation","taxed","taxeme","taxemes","taxemic","taxer","taxers","taxes","taxi","taxicab","taxicabs","taxied","taxies","taxiing","taximan","taximen","taxing","taxingly","taxis","taxite","taxites","taxitic","taxiway","taxiways","taxless","taxman","taxmen","taxon","taxonomy","taxons","taxpaid","taxpayer","taxus","taxwise","taxying","tazza","tazzas","tazze","tea","teaberry","teaboard","teabowl","teabowls","teabox","teaboxes","teacake","teacakes","teacart","teacarts","teach","teacher","teachers","teaches","teaching","teacup","teacups","teahouse","teak","teaks","teakwood","teal","tealike","teals","team","teamaker","teamed","teaming","teammate","teams","teamster","teamwork","teapot","teapots","teapoy","teapoys","tear","tearable","tearaway","teardown","teardrop","teared","tearer","tearers","tearful","teargas","tearier","teariest","tearily","tearing","tearless","tearoom","tearooms","tears","teary","teas","tease","teased","teasel","teaseled","teaseler","teasels","teaser","teasers","teases","teashop","teashops","teasing","teaspoon","teat","teated","teatime","teatimes","teats","teaware","teawares","teazel","teazeled","teazels","teazle","teazled","teazles","teazling","teched","techier","techiest","techily","technic","technics","techy","tecta","tectal","tectite","tectites","tectonic","tectrix","tectum","ted","tedded","tedder","tedders","teddies","tedding","teddy","tedious","tedium","tediums","teds","tee","teed","teeing","teel","teels","teem","teemed","teemer","teemers","teeming","teems","teen","teenage","teenaged","teenager","teener","teeners","teenful","teenier","teeniest","teens","teensier","teensy","teentsy","teeny","teenybop","teepee","teepees","tees","teeter","teetered","teeters","teeth","teethe","teethed","teether","teethers","teethes","teething","teetotal","teetotum","teff","teffs","tefillin","teg","tegmen","tegmenta","tegmina","tegminal","tegs","tegua","teguas","tegular","tegumen","tegument","tegumina","teiglach","teiid","teiids","teind","teinds","tektite","tektites","tektitic","tel","tela","telae","telamon","tele","telecast","teledu","teledus","telefilm","telega","telegas","telegony","telegram","teleman","telemark","telemen","teleost","teleosts","telepath","teleplay","teleport","teleran","telerans","teles","teleses","telesis","telestic","teletext","telethon","teleview","televise","telex","telexed","telexes","telexing","telfer","telfered","telfers","telford","telfords","telia","telial","telic","telium","tell","tellable","teller","tellers","tellies","telling","tells","telltale","telluric","telly","tellys","teloi","telome","telomere","telomes","telomic","telos","telpher","telphers","tels","telson","telsonic","telsons","temblor","temblors","temerity","temp","tempeh","tempehs","temper","tempera","temperas","tempered","temperer","tempers","tempest","tempests","tempi","templar","templars","template","temple","templed","temples","templet","templets","tempo","temporal","tempos","temps","tempt","tempted","tempter","tempters","tempting","tempts","tempura","tempuras","ten","tenable","tenably","tenace","tenaces","tenacity","tenacula","tenail","tenaille","tenails","tenancy","tenant","tenanted","tenantry","tenants","tench","tenches","tend","tendance","tended","tendence","tendency","tender","tendered","tenderer","tenderly","tenders","tending","tendon","tendons","tendril","tendrils","tends","tenebrae","tenement","tenesmic","tenesmus","tenet","tenets","tenfold","tenfolds","tenia","teniae","tenias","teniasis","tenner","tenners","tennis","tennises","tennist","tennists","tenon","tenoned","tenoner","tenoners","tenoning","tenons","tenor","tenorist","tenorite","tenors","tenotomy","tenour","tenours","tenpence","tenpenny","tenpin","tenpins","tenrec","tenrecs","tens","tense","tensed","tensely","tenser","tenses","tensest","tensible","tensibly","tensile","tensing","tension","tensions","tensity","tensive","tensor","tensors","tent","tentacle","tentage","tentages","tented","tenter","tentered","tenters","tenth","tenthly","tenths","tentie","tentier","tentiest","tenting","tentless","tentlike","tents","tenty","tenues","tenuis","tenuity","tenuous","tenure","tenured","tenures","tenurial","tenuti","tenuto","tenutos","teocalli","teopan","teopans","teosinte","tepa","tepal","tepals","tepas","tepee","tepees","tepefied","tepefies","tepefy","tephra","tephras","tephrite","tepid","tepidity","tepidly","tepoy","tepoys","tequila","tequilas","terai","terais","teraohm","teraohms","teraph","teraphim","teratism","teratoid","teratoma","terbia","terbias","terbic","terbium","terbiums","terce","tercel","tercelet","tercels","terces","tercet","tercets","terebene","terebic","teredo","teredos","terefah","terete","terga","tergal","tergite","tergites","tergum","teriyaki","term","termed","termer","termers","terminal","terming","termini","terminus","termite","termites","termitic","termless","termly","termor","termors","terms","termtime","tern","ternary","ternate","terne","ternes","ternion","ternions","terns","terpene","terpenes","terpenic","terpinol","terra","terrace","terraced","terraces","terrae","terrain","terrains","terrane","terranes","terrapin","terraria","terras","terrases","terrazzo","terreen","terreens","terrella","terrene","terrenes","terret","terrets","terrible","terribly","terrier","terriers","terries","terrific","terrify","terrine","terrines","territ","territs","terror","terrors","terry","terse","tersely","terser","tersest","tertial","tertials","tertian","tertians","tertiary","tesla","teslas","tessera","tesserae","test","testa","testable","testacy","testae","testate","testates","testator","tested","testee","testees","tester","testers","testes","testicle","testier","testiest","testify","testily","testing","testis","teston","testons","testoon","testoons","tests","testudo","testudos","testy","tet","tetanal","tetanic","tetanics","tetanies","tetanise","tetanize","tetanoid","tetanus","tetany","tetched","tetchier","tetchily","tetchy","teth","tether","tethered","tethers","teths","tetotum","tetotums","tetra","tetracid","tetrad","tetradic","tetrads","tetragon","tetramer","tetrapod","tetrarch","tetras","tetrode","tetrodes","tetroxid","tetryl","tetryls","tets","tetter","tetters","teuch","teugh","teughly","tew","tewed","tewing","tews","texas","texases","text","textbook","textile","textiles","textless","texts","textual","textuary","textural","texture","textured","textures","thack","thacked","thacking","thacks","thae","thairm","thairms","thalami","thalamic","thalamus","thaler","thalers","thalli","thallic","thallium","thalloid","thallous","thallus","than","thanage","thanages","thanatos","thane","thanes","thank","thanked","thanker","thankers","thankful","thanking","thanks","tharm","tharms","that","thataway","thatch","thatched","thatcher","thatches","thatchy","thaw","thawed","thawer","thawers","thawing","thawless","thaws","the","thearchy","theater","theaters","theatre","theatres","theatric","thebaine","thebe","theca","thecae","thecal","thecate","thee","theelin","theelins","theelol","theelols","theft","thefts","thegn","thegnly","thegns","thein","theine","theines","theins","their","theirs","theism","theisms","theist","theistic","theists","thelitis","them","thematic","theme","themed","themes","theming","then","thenage","thenages","thenal","thenar","thenars","thence","thens","theocrat","theodicy","theogony","theolog","theologs","theology","theonomy","theorbo","theorbos","theorem","theorems","theories","theorise","theorist","theorize","theory","therapy","there","thereat","thereby","therefor","therein","theremin","thereof","thereon","theres","thereto","theriac","theriaca","theriacs","therm","thermae","thermal","thermals","therme","thermel","thermels","thermes","thermic","thermion","thermite","thermos","therms","theroid","theropod","thesauri","these","theses","thesis","thespian","theta","thetas","thetic","thetical","theurgic","theurgy","thew","thewier","thewiest","thewless","thews","thewy","they","thiamin","thiamine","thiamins","thiazide","thiazin","thiazine","thiazins","thiazol","thiazole","thiazols","thick","thicken","thickens","thicker","thickest","thicket","thickets","thickety","thickish","thickly","thicks","thickset","thief","thieve","thieved","thievery","thieves","thieving","thievish","thigh","thighed","thighs","thill","thills","thimble","thimbles","thin","thinclad","thindown","thine","thing","things","think","thinker","thinkers","thinking","thinks","thinly","thinned","thinner","thinners","thinness","thinnest","thinning","thinnish","thins","thio","thiol","thiolic","thiols","thionate","thionic","thionin","thionine","thionins","thionyl","thionyls","thiophen","thiotepa","thiourea","thir","thiram","thirams","third","thirdly","thirds","thirl","thirlage","thirled","thirling","thirls","thirst","thirsted","thirster","thirsts","thirsty","thirteen","thirties","thirty","this","thistle","thistles","thistly","thither","tho","thole","tholed","tholepin","tholes","tholing","tholoi","tholos","thong","thonged","thongs","thoracal","thoraces","thoracic","thorax","thoraxes","thoria","thorias","thoric","thorite","thorites","thorium","thoriums","thorn","thorned","thornier","thornily","thorning","thorns","thorny","thoro","thoron","thorons","thorough","thorp","thorpe","thorpes","thorps","those","thou","thoued","though","thought","thoughts","thouing","thous","thousand","thowless","thraldom","thrall","thralled","thralls","thrash","thrashed","thrasher","thrashes","thrave","thraves","thraw","thrawart","thrawed","thrawing","thrawn","thrawnly","thraws","thread","threaded","threader","threads","thready","threap","threaped","threaper","threaps","threat","threated","threaten","threats","three","threep","threeped","threeps","threes","threnode","threnody","thresh","threshed","thresher","threshes","threw","thrice","thrift","thrifts","thrifty","thrill","thrilled","thriller","thrills","thrip","thrips","thrive","thrived","thriven","thriver","thrivers","thrives","thriving","thro","throat","throated","throats","throaty","throb","throbbed","throbber","throbs","throe","throes","thrombi","thrombin","thrombus","throne","throned","thrones","throng","thronged","throngs","throning","throstle","throttle","through","throve","throw","thrower","throwers","throwing","thrown","throws","thru","thrum","thrummed","thrummer","thrummy","thrums","thruput","thruputs","thrush","thrushes","thrust","thrusted","thruster","thrustor","thrusts","thruway","thruways","thud","thudded","thudding","thuds","thug","thuggee","thuggees","thuggery","thuggish","thugs","thuja","thujas","thulia","thulias","thulium","thuliums","thumb","thumbed","thumbing","thumbkin","thumbnut","thumbs","thump","thumped","thumper","thumpers","thumping","thumps","thunder","thunders","thundery","thunk","thunked","thunking","thunks","thurible","thurifer","thurl","thurls","thus","thusly","thuya","thuyas","thwack","thwacked","thwacker","thwacks","thwart","thwarted","thwarter","thwartly","thwarts","thy","thyme","thymes","thymey","thymi","thymic","thymier","thymiest","thymine","thymines","thymol","thymols","thymosin","thymus","thymuses","thymy","thyreoid","thyroid","thyroids","thyroxin","thyrse","thyrses","thyrsi","thyrsoid","thyrsus","thyself","tiara","tiaraed","tiaras","tibia","tibiae","tibial","tibias","tic","tical","ticals","tick","ticked","ticker","tickers","ticket","ticketed","tickets","ticking","tickings","tickle","tickled","tickler","ticklers","tickles","tickling","ticklish","ticks","tickseed","ticktack","ticktock","tics","tictac","tictacs","tictoc","tictocs","tidal","tidally","tidbit","tidbits","tiddly","tide","tided","tideland","tideless","tidelike","tidemark","tiderip","tiderips","tides","tideway","tideways","tidied","tidier","tidiers","tidies","tidiest","tidily","tidiness","tiding","tidings","tidy","tidying","tidytips","tie","tieback","tiebacks","tieclasp","tied","tieing","tieless","tiepin","tiepins","tier","tierce","tierced","tiercel","tiercels","tierces","tiered","tiering","tiers","ties","tiff","tiffany","tiffed","tiffin","tiffined","tiffing","tiffins","tiffs","tiger","tigereye","tigerish","tigers","tight","tighten","tightens","tighter","tightest","tightly","tights","tightwad","tiglon","tiglons","tigon","tigons","tigress","tigrish","tike","tikes","tiki","tikis","til","tilak","tilaks","tilapia","tilapias","tilbury","tilde","tildes","tile","tiled","tilefish","tilelike","tiler","tilers","tiles","tiling","tilings","till","tillable","tillage","tillages","tilled","tiller","tillered","tillers","tilling","tillite","tillites","tills","tils","tilt","tiltable","tilted","tilter","tilters","tilth","tilths","tilting","tilts","tiltyard","timarau","timaraus","timbal","timbale","timbales","timbals","timber","timbered","timbers","timbral","timbre","timbrel","timbrels","timbres","time","timecard","timed","timeless","timelier","timely","timeous","timeout","timeouts","timer","timers","times","timework","timeworn","timid","timider","timidest","timidity","timidly","timing","timings","timorous","timothy","timpana","timpani","timpano","timpanum","tin","tinamou","tinamous","tincal","tincals","tinct","tincted","tincting","tincts","tincture","tinder","tinders","tindery","tine","tinea","tineal","tineas","tined","tineid","tineids","tines","tinfoil","tinfoils","tinful","tinfuls","ting","tinge","tinged","tingeing","tinges","tinging","tingle","tingled","tingler","tinglers","tingles","tinglier","tingling","tingly","tings","tinhorn","tinhorns","tinier","tiniest","tinily","tininess","tining","tinker","tinkered","tinkerer","tinkers","tinkle","tinkled","tinkler","tinklers","tinkles","tinklier","tinkling","tinkly","tinlike","tinman","tinmen","tinned","tinner","tinners","tinnier","tinniest","tinnily","tinning","tinnitus","tinny","tinplate","tins","tinsel","tinseled","tinselly","tinsels","tinsmith","tinstone","tint","tinted","tinter","tinters","tinting","tintings","tintless","tints","tintype","tintypes","tinware","tinwares","tinwork","tinworks","tiny","tip","tipcart","tipcarts","tipcat","tipcats","tipi","tipis","tipless","tipoff","tipoffs","tippable","tipped","tipper","tippers","tippet","tippets","tippier","tippiest","tipping","tipple","tippled","tippler","tipplers","tipples","tippling","tippy","tippytoe","tips","tipsier","tipsiest","tipsily","tipstaff","tipster","tipsters","tipstock","tipsy","tiptoe","tiptoed","tiptoes","tiptop","tiptops","tirade","tirades","tire","tired","tireder","tiredest","tiredly","tireless","tires","tiresome","tiring","tirl","tirled","tirling","tirls","tiro","tiros","tirrivee","tis","tisane","tisanes","tissual","tissue","tissued","tissues","tissuey","tissuing","tissular","tit","titan","titanate","titaness","titania","titanias","titanic","titanism","titanite","titanium","titanous","titans","titbit","titbits","titer","titers","titfer","titfers","tithable","tithe","tithed","tither","tithers","tithes","tithing","tithings","tithonia","titi","titian","titians","titis","titivate","titlark","titlarks","title","titled","titles","titling","titlist","titlists","titman","titmen","titmice","titmouse","titrable","titrant","titrants","titrate","titrated","titrates","titrator","titre","titres","tits","titter","tittered","titterer","titters","tittie","titties","tittle","tittles","tittup","tittuped","tittuppy","tittups","titty","titular","titulars","titulary","tivy","tizzies","tizzy","tmeses","tmesis","toad","toadfish","toadflax","toadied","toadies","toadish","toadless","toadlike","toads","toady","toadying","toadyish","toadyism","toast","toasted","toaster","toasters","toastier","toasting","toasts","toasty","tobacco","tobaccos","tobies","toboggan","toby","toccata","toccatas","toccate","tocher","tochered","tochers","tocology","tocsin","tocsins","tod","today","todays","toddies","toddle","toddled","toddler","toddlers","toddles","toddling","toddy","todies","tods","tody","toe","toea","toecap","toecaps","toed","toehold","toeholds","toeing","toeless","toelike","toenail","toenails","toepiece","toeplate","toes","toeshoe","toeshoes","toff","toffee","toffees","toffies","toffs","toffy","toft","tofts","tofu","tofus","tog","toga","togae","togaed","togas","togate","togated","together","togged","toggery","togging","toggle","toggled","toggler","togglers","toggles","toggling","togs","togue","togues","toil","toile","toiled","toiler","toilers","toiles","toilet","toileted","toiletry","toilets","toilette","toilful","toiling","toils","toilsome","toilworn","toit","toited","toiting","toits","tokamak","tokamaks","tokay","tokays","toke","toked","token","tokened","tokening","tokenism","tokens","toker","tokers","tokes","toking","tokology","tokomak","tokomaks","tokonoma","tola","tolan","tolane","tolanes","tolans","tolas","tolbooth","told","tole","toled","toledo","toledos","tolerant","tolerate","toles","tolidin","tolidine","tolidins","toling","toll","tollage","tollages","tollbar","tollbars","tolled","toller","tollers","tollgate","tolling","tollman","tollmen","tolls","tollway","tollways","tolu","toluate","toluates","toluene","toluenes","toluic","toluid","toluide","toluides","toluidin","toluids","toluol","toluole","toluoles","toluols","tolus","toluyl","toluyls","tolyl","tolyls","tom","tomahawk","tomalley","toman","tomans","tomato","tomatoes","tomatoey","tomb","tombac","tomback","tombacks","tombacs","tombak","tombaks","tombal","tombed","tombing","tombless","tomblike","tombola","tombolas","tombolo","tombolos","tomboy","tomboys","tombs","tomcat","tomcats","tomcod","tomcods","tome","tomenta","tomentum","tomes","tomfool","tomfools","tommed","tommies","tomming","tommy","tommyrot","tomogram","tomorrow","tompion","tompions","toms","tomtit","tomtits","ton","tonal","tonality","tonally","tondi","tondo","tondos","tone","tonearm","tonearms","toned","toneless","toneme","tonemes","tonemic","toner","toners","tones","tonetic","tonetics","tonette","tonettes","toney","tong","tonga","tongas","tonged","tonger","tongers","tonging","tongman","tongmen","tongs","tongue","tongued","tongues","tonguing","tonic","tonicity","tonics","tonier","toniest","tonight","tonights","toning","tonish","tonishly","tonlet","tonlets","tonnage","tonnages","tonne","tonneau","tonneaus","tonneaux","tonner","tonners","tonnes","tonnish","tons","tonsil","tonsilar","tonsils","tonsure","tonsured","tonsures","tontine","tontines","tonus","tonuses","tony","too","took","tool","toolbox","tooled","tooler","toolers","toolhead","tooling","toolings","toolless","toolroom","tools","toolshed","toom","toon","toons","toot","tooted","tooter","tooters","tooth","toothed","toothier","toothily","toothing","tooths","toothy","tooting","tootle","tootled","tootler","tootlers","tootles","tootling","toots","tootses","tootsie","tootsies","tootsy","top","topaz","topazes","topazine","topcoat","topcoats","topcross","tope","toped","topee","topees","toper","topers","topes","topful","topfull","toph","tophe","tophes","tophi","tophs","tophus","topi","topiary","topic","topical","topics","toping","topis","topkick","topkicks","topknot","topknots","topless","toplofty","topmast","topmasts","topmost","topnotch","topoi","topology","toponym","toponyms","toponymy","topos","topotype","topped","topper","toppers","topping","toppings","topple","toppled","topples","toppling","tops","topsail","topsails","topside","topsider","topsides","topsoil","topsoils","topspin","topspins","topstone","topwork","topworks","toque","toques","toquet","toquets","tor","tora","torah","torahs","toras","torc","torch","torched","torchere","torches","torchier","torching","torchon","torchons","torcs","tore","toreador","torero","toreros","tores","toreutic","tori","toric","tories","torii","torment","torments","torn","tornadic","tornado","tornados","tornillo","toro","toroid","toroidal","toroids","toros","torose","torosity","torot","toroth","torous","torpedo","torpedos","torpid","torpidly","torpids","torpor","torpors","torquate","torque","torqued","torquer","torquers","torques","torquing","torr","torrefy","torrent","torrents","torrid","torrider","torridly","torrify","tors","torsade","torsades","torse","torses","torsi","torsion","torsions","torsk","torsks","torso","torsos","tort","torte","torten","tortes","tortile","tortilla","tortious","tortoise","tortoni","tortonis","tortrix","torts","tortuous","torture","tortured","torturer","tortures","torula","torulae","torulas","torus","tory","tosh","toshes","toss","tossed","tosser","tossers","tosses","tossing","tosspot","tosspots","tossup","tossups","tost","tostada","tostadas","tostado","tostados","tot","totable","total","totaled","totaling","totalise","totalism","totalist","totality","totalize","totalled","totally","totals","tote","toted","totem","totemic","totemism","totemist","totemite","totems","toter","toters","totes","tother","toting","tots","totted","totter","tottered","totterer","totters","tottery","totting","toucan","toucans","touch","touche","touched","toucher","touchers","touches","touchier","touchily","touching","touchup","touchups","touchy","tough","toughed","toughen","toughens","tougher","toughest","toughie","toughies","toughing","toughish","toughly","toughs","toughy","toupee","toupees","tour","touraco","touracos","toured","tourer","tourers","touring","tourings","tourism","tourisms","tourist","tourists","touristy","tourney","tourneys","tours","touse","toused","touses","tousing","tousle","tousled","tousles","tousling","tout","touted","touter","touters","touting","touts","touzle","touzled","touzles","touzling","tovarich","tovarish","tow","towage","towages","toward","towardly","towards","towaway","towaways","towboat","towboats","towed","towel","toweled","toweling","towelled","towels","tower","towered","towerier","towering","towers","towery","towhead","towheads","towhee","towhees","towie","towies","towing","towline","towlines","towmond","towmonds","towmont","towmonts","town","townee","townees","townfolk","townhome","townie","townies","townish","townless","townlet","townlets","towns","township","townsman","townsmen","townwear","towny","towpath","towpaths","towrope","towropes","tows","towy","toxaemia","toxaemic","toxemia","toxemias","toxemic","toxic","toxical","toxicant","toxicity","toxin","toxine","toxines","toxins","toxoid","toxoids","toy","toyed","toyer","toyers","toying","toyish","toyless","toylike","toyo","toyon","toyons","toyos","toys","toyshop","toyshops","trabeate","trace","traced","tracer","tracers","tracery","traces","trachea","tracheae","tracheal","tracheas","tracheid","trachle","trachled","trachles","trachoma","trachyte","tracing","tracings","track","trackage","tracked","tracker","trackers","tracking","trackman","trackmen","tracks","trackway","tract","tractate","tractile","traction","tractive","tractor","tractors","tracts","trad","tradable","trade","traded","tradeoff","trader","traders","trades","trading","traditor","traduce","traduced","traducer","traduces","traffic","traffics","tragedy","tragi","tragic","tragical","tragics","tragopan","tragus","traik","traiked","traiking","traiks","trail","trailed","trailer","trailers","trailing","trails","train","trained","trainee","trainees","trainer","trainers","trainful","training","trainman","trainmen","trains","trainway","traipse","traipsed","traipses","trait","traitor","traitors","traits","traject","trajects","tram","tramcar","tramcars","tramel","trameled","tramell","tramells","tramels","tramless","tramline","trammed","trammel","trammels","tramming","tramp","tramped","tramper","trampers","tramping","trampish","trample","trampled","trampler","tramples","tramps","tramroad","trams","tramway","tramways","trance","tranced","trances","tranche","tranches","trancing","trangam","trangams","trank","tranks","tranq","tranqs","tranquil","trans","transact","transect","transept","transfer","transfix","tranship","transit","transits","transmit","transom","transoms","transude","trap","trapan","trapans","trapball","trapdoor","trapes","trapesed","trapeses","trapeze","trapezes","trapezia","traplike","trapnest","trappean","trapped","trapper","trappers","trapping","trappose","trappous","traprock","traps","trapt","trapunto","trash","trashed","trashes","trashier","trashily","trashing","trashman","trashmen","trashy","trass","trasses","trauchle","trauma","traumas","traumata","travail","travails","trave","travel","traveled","traveler","travelog","travels","traverse","traves","travesty","travois","travoise","trawl","trawled","trawler","trawlers","trawley","trawleys","trawling","trawlnet","trawls","tray","trayful","trayfuls","trays","treacle","treacles","treacly","tread","treaded","treader","treaders","treading","treadle","treadled","treadler","treadles","treads","treason","treasons","treasure","treasury","treat","treated","treater","treaters","treaties","treating","treatise","treats","treaty","treble","trebled","trebles","trebling","trebly","trecento","treddle","treddled","treddles","tree","treed","treeing","treelawn","treeless","treelike","treen","treenail","treens","trees","treetop","treetops","tref","trefah","trefoil","trefoils","trehala","trehalas","trek","trekked","trekker","trekkers","trekking","treks","trellis","tremble","trembled","trembler","trembles","trembly","tremolo","tremolos","tremor","tremors","trenail","trenails","trench","trenched","trencher","trenches","trend","trended","trendier","trendies","trendily","trending","trends","trendy","trepan","trepang","trepangs","trepans","trephine","trepid","trespass","tress","tressed","tressel","tressels","tresses","tressier","tressour","tressure","tressy","trestle","trestles","tret","trets","trevet","trevets","trews","trey","treys","triable","triac","triacid","triacids","triacs","triad","triadic","triadics","triadism","triads","triage","triages","trial","trials","triangle","triarchy","triaxial","triazin","triazine","triazins","triazole","tribade","tribades","tribadic","tribal","tribally","tribasic","tribe","tribes","tribrach","tribunal","tribune","tribunes","tribute","tributes","trice","triced","triceps","trices","trichina","trichite","trichoid","trichome","tricing","trick","tricked","tricker","trickers","trickery","trickie","trickier","trickily","tricking","trickish","trickle","trickled","trickles","trickly","tricks","tricksy","tricky","triclad","triclads","tricolor","tricorn","tricorne","tricorns","tricot","tricots","trictrac","tricycle","trident","tridents","triduum","triduums","tried","triene","trienes","triennia","triens","trientes","trier","triers","tries","triethyl","trifecta","trifid","trifle","trifled","trifler","triflers","trifles","trifling","trifocal","trifold","triforia","triform","trig","trigged","trigger","triggers","triggest","trigging","trigly","triglyph","trigness","trigo","trigon","trigonal","trigons","trigos","trigram","trigrams","trigraph","trigs","trihedra","trijet","trijets","trike","trikes","trilbies","trilby","trill","trilled","triller","trillers","trilling","trillion","trillium","trills","trilobal","trilobed","trilogy","trim","trimaran","trimer","trimeric","trimers","trimeter","trimly","trimmed","trimmer","trimmers","trimmest","trimming","trimness","trimorph","trimotor","trims","trinal","trinary","trindle","trindled","trindles","trine","trined","trines","trining","trinity","trinket","trinkets","trinkums","trinodal","trio","triode","triodes","triol","triolet","triolets","triols","trios","triose","trioses","trioxid","trioxide","trioxids","trip","tripack","tripacks","tripart","tripe","tripedal","tripes","triphase","triplane","triple","tripled","triples","triplet","triplets","triplex","tripling","triplite","triploid","triply","tripod","tripodal","tripodic","tripods","tripody","tripoli","tripolis","tripos","triposes","tripped","tripper","trippers","trippet","trippets","tripping","trips","triptane","triptyca","triptych","tripwire","trireme","triremes","triscele","trisect","trisects","triseme","trisemes","trisemic","triskele","trismic","trismus","trisome","trisomes","trisomic","trisomy","tristate","triste","tristeza","tristful","tristich","trite","tritely","triter","tritest","trithing","triticum","tritium","tritiums","tritoma","tritomas","triton","tritone","tritones","tritons","triumph","triumphs","triumvir","triune","triunes","triunity","trivalve","trivet","trivets","trivia","trivial","trivium","troak","troaked","troaking","troaks","trocar","trocars","trochaic","trochal","trochar","trochars","troche","trochee","trochees","troches","trochil","trochili","trochils","trochlea","trochoid","trock","trocked","trocking","trocks","trod","trodden","trode","troffer","troffers","trogon","trogons","troika","troikas","troilism","troilite","troilus","trois","troke","troked","trokes","troking","troland","trolands","troll","trolled","troller","trollers","trolley","trolleys","trollied","trollies","trolling","trollop","trollops","trollopy","trolls","trolly","trombone","trommel","trommels","tromp","trompe","tromped","trompes","tromping","tromps","trona","tronas","trone","trones","troop","trooped","trooper","troopers","troopial","trooping","troops","trooz","trop","trope","tropes","trophic","trophied","trophies","trophy","tropic","tropical","tropics","tropin","tropine","tropines","tropins","tropism","tropisms","troponin","trot","troth","trothed","trothing","troths","trotline","trots","trotted","trotter","trotters","trotting","trotyl","trotyls","trouble","troubled","troubler","troubles","trough","troughs","trounce","trounced","trouncer","trounces","troupe","trouped","trouper","troupers","troupes","troupial","trouping","trouser","trousers","trout","troutier","trouts","trouty","trouvere","trouveur","trove","trover","trovers","troves","trow","trowed","trowel","troweled","troweler","trowels","trowing","trows","trowsers","trowth","trowths","troy","troys","truancy","truant","truanted","truantry","truants","truce","truced","truces","trucing","truck","truckage","trucked","trucker","truckers","trucking","truckle","truckled","truckler","truckles","truckman","truckmen","trucks","trudge","trudged","trudgen","trudgens","trudgeon","trudger","trudgers","trudges","trudging","true","trueblue","trueborn","truebred","trued","trueing","truelove","trueness","truer","trues","truest","truffe","truffes","truffle","truffled","truffles","trug","trugs","truing","truism","truisms","truistic","trull","trulls","truly","trumeau","trumeaux","trump","trumped","trumpery","trumpet","trumpets","trumping","trumps","truncate","trundle","trundled","trundler","trundles","trunk","trunked","trunkful","trunks","trunnel","trunnels","trunnion","truss","trussed","trusser","trussers","trusses","trussing","trust","trusted","trustee","trusteed","trustees","truster","trusters","trustful","trustier","trusties","trustily","trusting","trustor","trustors","trusts","trusty","truth","truthful","truths","try","trying","tryingly","tryma","trymata","tryout","tryouts","trypsin","trypsins","tryptic","trysail","trysails","tryst","tryste","trysted","tryster","trysters","trystes","trysting","trysts","tryworks","tsade","tsades","tsadi","tsadis","tsar","tsardom","tsardoms","tsarevna","tsarina","tsarinas","tsarism","tsarisms","tsarist","tsarists","tsaritza","tsars","tsetse","tsetses","tsimmes","tsk","tsked","tsking","tsks","tsktsk","tsktsked","tsktsks","tsooris","tsores","tsoris","tsorriss","tsuba","tsunami","tsunamic","tsunamis","tsuris","tuatara","tuataras","tuatera","tuateras","tub","tuba","tubae","tubaist","tubaists","tubal","tubas","tubate","tubbable","tubbed","tubber","tubbers","tubbier","tubbiest","tubbing","tubby","tube","tubed","tubeless","tubelike","tubenose","tuber","tubercle","tuberoid","tuberose","tuberous","tubers","tubes","tubework","tubful","tubfuls","tubifex","tubiform","tubing","tubings","tubist","tubists","tublike","tubs","tubular","tubulate","tubule","tubules","tubulin","tubulins","tubulose","tubulous","tubulure","tuchun","tuchuns","tuck","tuckahoe","tucked","tucker","tuckered","tuckers","tucket","tuckets","tucking","tucks","tufa","tufas","tuff","tuffet","tuffets","tuffs","tufoli","tuft","tufted","tufter","tufters","tuftier","tuftiest","tuftily","tufting","tufts","tufty","tug","tugboat","tugboats","tugged","tugger","tuggers","tugging","tughrik","tughriks","tugless","tugrik","tugriks","tugs","tui","tuille","tuilles","tuis","tuition","tuitions","tuladi","tuladis","tule","tules","tulip","tulips","tulle","tulles","tullibee","tumble","tumbled","tumbler","tumblers","tumbles","tumbling","tumbrel","tumbrels","tumbril","tumbrils","tumefied","tumefies","tumefy","tumid","tumidity","tumidly","tummies","tummler","tummlers","tummy","tumor","tumoral","tumorous","tumors","tumour","tumours","tump","tumpline","tumps","tumular","tumuli","tumulose","tumulous","tumult","tumults","tumulus","tun","tuna","tunable","tunably","tunas","tundish","tundra","tundras","tune","tuneable","tuneably","tuned","tuneful","tuneless","tuner","tuners","tunes","tuneup","tuneups","tung","tungs","tungsten","tungstic","tunic","tunica","tunicae","tunicate","tunicle","tunicles","tunics","tuning","tunnage","tunnages","tunned","tunnel","tunneled","tunneler","tunnels","tunnies","tunning","tunny","tuns","tup","tupelo","tupelos","tupik","tupiks","tupped","tuppence","tuppenny","tupping","tups","tuque","tuques","turaco","turacos","turacou","turacous","turban","turbaned","turbans","turbary","turbeth","turbeths","turbid","turbidly","turbinal","turbine","turbines","turbit","turbith","turbiths","turbits","turbo","turbocar","turbofan","turbojet","turbos","turbot","turbots","turd","turdine","turds","tureen","tureens","turf","turfed","turfier","turfiest","turfing","turfless","turflike","turfman","turfmen","turfs","turfski","turfskis","turfy","turgency","turgent","turgid","turgidly","turgite","turgites","turgor","turgors","turista","turistas","turkey","turkeys","turkois","turmeric","turmoil","turmoils","turn","turnable","turncoat","turndown","turned","turner","turners","turnery","turnhall","turning","turnings","turnip","turnips","turnkey","turnkeys","turnoff","turnoffs","turnout","turnouts","turnover","turnpike","turns","turnsole","turnspit","turnup","turnups","turpeth","turpeths","turps","turquois","turret","turreted","turrets","turrical","turtle","turtled","turtler","turtlers","turtles","turtling","turves","tusche","tusches","tush","tushed","tushes","tushie","tushies","tushing","tushy","tusk","tusked","tusker","tuskers","tusking","tuskless","tusklike","tusks","tussah","tussahs","tussal","tussar","tussars","tusseh","tussehs","tusser","tussers","tussis","tussises","tussive","tussle","tussled","tussles","tussling","tussock","tussocks","tussocky","tussor","tussore","tussores","tussors","tussuck","tussucks","tussur","tussurs","tut","tutee","tutees","tutelage","tutelar","tutelars","tutelary","tutor","tutorage","tutored","tutoress","tutorial","tutoring","tutors","tutoyed","tutoyer","tutoyers","tuts","tutted","tutti","tutties","tutting","tuttis","tutty","tutu","tutus","tux","tuxedo","tuxedoed","tuxedoes","tuxedos","tuxes","tuyer","tuyere","tuyeres","tuyers","twa","twaddle","twaddled","twaddler","twaddles","twae","twaes","twain","twains","twang","twanged","twanger","twangers","twangier","twanging","twangle","twangled","twangler","twangles","twangs","twangy","twankies","twanky","twas","twasome","twasomes","twat","twats","twattle","twattled","twattles","tweak","tweaked","tweakier","tweaking","tweaks","tweaky","twee","tweed","tweedier","tweedle","tweedled","tweedles","tweeds","tweedy","tween","tweenies","tweeny","tweet","tweeted","tweeter","tweeters","tweeting","tweets","tweeze","tweezed","tweezer","tweezers","tweezes","tweezing","twelfth","twelfths","twelve","twelvemo","twelves","twenties","twenty","twerp","twerps","twibil","twibill","twibills","twibils","twice","twiddle","twiddled","twiddler","twiddles","twiddly","twier","twiers","twig","twigged","twiggen","twiggier","twigging","twiggy","twigless","twiglike","twigs","twilight","twilit","twill","twilled","twilling","twills","twin","twinborn","twine","twined","twiner","twiners","twines","twinge","twinged","twinges","twinging","twinier","twiniest","twinight","twining","twinjet","twinjets","twinkle","twinkled","twinkler","twinkles","twinkly","twinned","twinning","twins","twinset","twinsets","twinship","twiny","twirl","twirled","twirler","twirlers","twirlier","twirling","twirls","twirly","twirp","twirps","twist","twisted","twister","twisters","twistier","twisting","twists","twisty","twit","twitch","twitched","twitcher","twitches","twitchy","twits","twitted","twitter","twitters","twittery","twitting","twixt","two","twofer","twofers","twofold","twofolds","twopence","twopenny","twos","twosome","twosomes","twyer","twyers","tycoon","tycoons","tye","tyee","tyees","tyes","tying","tyke","tykes","tylosin","tylosins","tymbal","tymbals","tympan","tympana","tympanal","tympani","tympanic","tympano","tympans","tympanum","tympany","tyne","tyned","tynes","tyning","typable","typal","type","typeable","typebar","typebars","typecase","typecast","typed","typeface","types","typeset","typesets","typey","typhoid","typhoids","typhon","typhonic","typhons","typhoon","typhoons","typhose","typhous","typhus","typhuses","typic","typical","typier","typiest","typified","typifier","typifies","typify","typing","typist","typists","typo","typology","typos","typp","typps","typy","tyramine","tyrannic","tyranny","tyrant","tyrants","tyre","tyred","tyres","tyring","tyro","tyronic","tyros","tyrosine","tythe","tythed","tythes","tything","tzaddik","tzar","tzardom","tzardoms","tzarevna","tzarina","tzarinas","tzarism","tzarisms","tzarist","tzarists","tzaritza","tzars","tzetze","tzetzes","tzigane","tziganes","tzimmes","tzitzis","tzitzit","tzitzith","tzuris","ubieties","ubiety","ubique","ubiquity","udder","udders","udo","udometer","udometry","udos","ufology","ugh","ughs","uglier","uglies","ugliest","uglified","uglifier","uglifies","uglify","uglily","ugliness","ugly","ugsome","uhlan","uhlans","uintaite","ukase","ukases","uke","ukelele","ukeleles","ukes","ukulele","ukuleles","ulama","ulamas","ulan","ulans","ulcer","ulcerate","ulcered","ulcering","ulcerous","ulcers","ulema","ulemas","ulexite","ulexites","ullage","ullaged","ullages","ulna","ulnad","ulnae","ulnar","ulnas","ulpan","ulpanim","ulster","ulsters","ulterior","ultima","ultimacy","ultimas","ultimata","ultimate","ultimo","ultra","ultradry","ultrahot","ultraism","ultraist","ultralow","ultrared","ultras","ulu","ululant","ululate","ululated","ululates","ulus","ulva","ulvas","umangite","umbel","umbeled","umbellar","umbelled","umbellet","umbels","umber","umbered","umbering","umbers","umbilici","umbles","umbo","umbonal","umbonate","umbones","umbonic","umbos","umbra","umbrae","umbrage","umbrages","umbral","umbras","umbrella","umbrette","umiac","umiack","umiacks","umiacs","umiak","umiaks","umiaq","umiaqs","umlaut","umlauted","umlauts","umm","ump","umped","umping","umpirage","umpire","umpired","umpires","umpiring","umps","umpteen","umteenth","unabated","unable","unabused","unacted","unadult","unafraid","unaged","unageing","unagile","unaging","unai","unaided","unaimed","unaired","unais","unakin","unakite","unakites","unalike","unallied","unamused","unanchor","unaneled","unapt","unaptly","unargued","unarm","unarmed","unarming","unarms","unartful","unary","unasked","unatoned","unau","unaus","unavowed","unawaked","unaware","unawares","unawed","unbacked","unbaked","unbanned","unbar","unbarbed","unbarred","unbars","unbased","unbated","unbathed","unbe","unbear","unbeared","unbears","unbeaten","unbelief","unbelt","unbelted","unbelts","unbend","unbended","unbends","unbenign","unbent","unbiased","unbid","unbidden","unbilled","unbind","unbinds","unbitted","unbitten","unbitter","unblamed","unblest","unblock","unblocks","unbloody","unbodied","unbolt","unbolted","unbolts","unboned","unbonnet","unborn","unbosom","unbosoms","unbought","unbouncy","unbound","unbowed","unbox","unboxed","unboxes","unboxing","unbrace","unbraced","unbraces","unbraid","unbraids","unbrake","unbraked","unbrakes","unbred","unbreech","unbridle","unbright","unbroke","unbroken","unbuckle","unbuild","unbuilds","unbuilt","unbulky","unbundle","unburden","unburied","unburned","unburnt","unbusted","unbusy","unbutton","uncage","uncaged","uncages","uncaging","uncake","uncaked","uncakes","uncaking","uncalled","uncandid","uncanny","uncap","uncapped","uncaps","uncaring","uncase","uncased","uncases","uncashed","uncasing","uncasked","uncatchy","uncaught","uncaused","unchain","unchains","unchancy","uncharge","unchary","unchaste","unchewed","unchic","unchicly","unchoke","unchoked","unchokes","unchosen","unchurch","unci","uncia","unciae","uncial","uncially","uncials","unciform","uncinal","uncinate","uncini","uncinus","uncivil","unclad","unclamp","unclamps","unclasp","unclasps","uncle","unclean","unclear","unclench","uncles","unclinch","unclip","unclips","uncloak","uncloaks","unclog","unclogs","unclose","unclosed","uncloses","unclothe","uncloud","unclouds","uncloyed","unco","uncoated","uncock","uncocked","uncocks","uncoded","uncoffin","uncoil","uncoiled","uncoils","uncoined","uncombed","uncomely","uncomic","uncommon","uncooked","uncool","uncooled","uncork","uncorked","uncorks","uncos","uncouple","uncouth","uncover","uncovers","uncoy","uncrate","uncrated","uncrates","uncrazy","uncreate","uncross","uncrown","uncrowns","unction","unctions","unctuous","uncuffed","uncurb","uncurbed","uncurbs","uncured","uncurl","uncurled","uncurls","uncursed","uncus","uncut","uncute","undamped","undaring","undated","unde","undecked","undee","undenied","under","underact","underage","underarm","underate","underbid","underbud","underbuy","undercut","underdid","underdo","underdog","undereat","underfed","underfur","undergo","undergod","underjaw","underlap","underlay","underlet","underlie","underlip","underlit","underpay","underpin","underran","underrun","undersea","underset","undertax","undertow","underway","undevout","undid","undies","undimmed","undine","undines","undo","undoable","undocile","undock","undocked","undocks","undoer","undoers","undoes","undoing","undoings","undone","undotted","undouble","undrape","undraped","undrapes","undraw","undrawn","undraws","undreamt","undress","undrest","undrew","undried","undrunk","undue","undulant","undular","undulate","undulled","unduly","undy","undyed","undying","uneager","unearned","unearth","unearths","unease","uneases","uneasier","uneasily","uneasy","uneaten","unedible","unedited","unended","unending","unenvied","unequal","unequals","unerased","unerotic","unerring","unevaded","uneven","unevener","unevenly","unexotic","unexpert","unfaded","unfading","unfair","unfairer","unfairly","unfaith","unfaiths","unfaked","unfallen","unfamous","unfancy","unfasten","unfazed","unfeared","unfed","unfelt","unfence","unfenced","unfences","unfetter","unfilial","unfilled","unfilmed","unfired","unfished","unfit","unfitly","unfits","unfitted","unfix","unfixed","unfixes","unfixing","unfixt","unflashy","unflexed","unfoiled","unfold","unfolded","unfolder","unfolds","unfond","unforced","unforged","unforgot","unforked","unformed","unfought","unfound","unframed","unfree","unfreed","unfrees","unfreeze","unfrock","unfrocks","unfroze","unfrozen","unfunded","unfunny","unfurl","unfurled","unfurls","unfused","unfussy","ungainly","ungalled","ungenial","ungentle","ungently","ungifted","ungird","ungirded","ungirds","ungirt","unglazed","unglove","ungloved","ungloves","unglue","unglued","unglues","ungluing","ungodly","ungot","ungotten","ungowned","ungraced","ungraded","ungreedy","ungual","unguard","unguards","unguent","unguenta","unguents","ungues","unguided","unguis","ungula","ungulae","ungular","ungulate","unhailed","unhair","unhaired","unhairs","unhallow","unhalved","unhand","unhanded","unhands","unhandy","unhang","unhanged","unhangs","unhappy","unharmed","unhasty","unhat","unhats","unhatted","unhealed","unheard","unheated","unhedged","unheeded","unhelm","unhelmed","unhelms","unhelped","unheroic","unhewn","unhinge","unhinged","unhinges","unhip","unhired","unhitch","unholier","unholily","unholy","unhood","unhooded","unhoods","unhook","unhooked","unhooks","unhoped","unhorse","unhorsed","unhorses","unhouse","unhoused","unhouses","unhuman","unhung","unhurt","unhusk","unhusked","unhusks","unialgal","uniaxial","unicolor","unicorn","unicorns","unicycle","unideaed","unideal","uniface","unifaces","unific","unified","unifier","unifiers","unifies","unifilar","uniform","uniforms","unify","unifying","unilobed","unimbued","union","unionise","unionism","unionist","unionize","unions","unipod","unipods","unipolar","unique","uniquely","uniquer","uniques","uniquest","unironed","unisex","unisexes","unison","unisonal","unisons","unissued","unit","unitage","unitages","unitard","unitards","unitary","unite","united","unitedly","uniter","uniters","unites","unities","uniting","unitive","unitize","unitized","unitizer","unitizes","unitrust","units","unity","univalve","universe","univocal","unjaded","unjoined","unjoint","unjoints","unjoyful","unjudged","unjust","unjustly","unkempt","unkend","unkenned","unkennel","unkent","unkept","unkind","unkinder","unkindly","unkingly","unkink","unkinked","unkinks","unkissed","unknit","unknits","unknot","unknots","unknown","unknowns","unkosher","unlace","unlaced","unlaces","unlacing","unlade","unladed","unladen","unlades","unlading","unlaid","unlash","unlashed","unlashes","unlatch","unlawful","unlay","unlaying","unlays","unlead","unleaded","unleads","unlearn","unlearns","unlearnt","unleased","unleash","unled","unless","unlet","unlethal","unletted","unlevel","unlevels","unlevied","unlicked","unlike","unlikely","unlimber","unlined","unlink","unlinked","unlinks","unlisted","unlit","unlive","unlived","unlively","unlives","unliving","unload","unloaded","unloader","unloads","unlobed","unlock","unlocked","unlocks","unloose","unloosed","unloosen","unlooses","unloved","unlovely","unloving","unlucky","unmacho","unmade","unmake","unmaker","unmakers","unmakes","unmaking","unman","unmanful","unmanly","unmanned","unmans","unmapped","unmarked","unmarred","unmask","unmasked","unmasker","unmasks","unmated","unmatted","unmeant","unmeet","unmeetly","unmellow","unmelted","unmended","unmerry","unmesh","unmeshed","unmeshes","unmet","unmew","unmewed","unmewing","unmews","unmilled","unmingle","unmiter","unmiters","unmitre","unmitred","unmitres","unmixed","unmixt","unmodish","unmold","unmolded","unmolds","unmolten","unmoor","unmoored","unmoors","unmoral","unmoved","unmoving","unmown","unmuffle","unmuzzle","unnail","unnailed","unnails","unnamed","unneeded","unnerve","unnerved","unnerves","unnoisy","unnoted","unoiled","unopen","unopened","unornate","unowned","unpack","unpacked","unpacker","unpacks","unpaged","unpaid","unpaired","unparted","unpaved","unpaying","unpeg","unpegged","unpegs","unpen","unpenned","unpens","unpent","unpeople","unperson","unpick","unpicked","unpicks","unpile","unpiled","unpiles","unpiling","unpin","unpinned","unpins","unpitied","unplaced","unplait","unplaits","unplayed","unpliant","unplowed","unplug","unplugs","unpoetic","unpoised","unpolite","unpolled","unposed","unposted","unpotted","unpretty","unpriced","unprimed","unprized","unprobed","unproved","unproven","unpruned","unpucker","unpure","unpurged","unpuzzle","unquiet","unquiets","unquote","unquoted","unquotes","unraised","unraked","unranked","unrated","unravel","unravels","unrazed","unread","unready","unreal","unreally","unreason","unreel","unreeled","unreeler","unreels","unreeve","unreeved","unreeves","unrent","unrented","unrepaid","unrepair","unrest","unrested","unrests","unrhymed","unriddle","unrifled","unrig","unrigged","unrigs","unrimed","unrinsed","unrip","unripe","unripely","unriper","unripest","unripped","unrips","unrisen","unrobe","unrobed","unrobes","unrobing","unroll","unrolled","unrolls","unroof","unroofed","unroofs","unroot","unrooted","unroots","unroped","unrough","unround","unrounds","unrove","unroven","unruled","unrulier","unruly","unrushed","unrusted","uns","unsaddle","unsafe","unsafely","unsafety","unsaid","unsalted","unsated","unsaved","unsavory","unsawed","unsawn","unsay","unsaying","unsays","unscaled","unscrew","unscrews","unseal","unsealed","unseals","unseam","unseamed","unseams","unseared","unseat","unseated","unseats","unseeded","unseeing","unseemly","unseen","unseized","unsent","unserved","unset","unsets","unsettle","unsew","unsewed","unsewing","unsewn","unsews","unsex","unsexed","unsexes","unsexing","unsexual","unsexy","unshaded","unshaken","unshamed","unshaped","unshapen","unshared","unsharp","unshaved","unshaven","unshed","unshell","unshells","unshift","unshifts","unship","unships","unshod","unshorn","unshowy","unshrunk","unshut","unsicker","unsifted","unsight","unsights","unsigned","unsilent","unsinful","unsized","unslaked","unsliced","unsling","unslings","unslung","unsmart","unsmoked","unsnap","unsnaps","unsnarl","unsnarls","unsoaked","unsober","unsocial","unsoiled","unsold","unsolder","unsolid","unsolved","unsoncy","unsonsie","unsonsy","unsorted","unsought","unsound","unsoured","unsowed","unsown","unspeak","unspeaks","unspent","unsphere","unspilt","unsplit","unspoilt","unspoke","unspoken","unsprung","unspun","unstable","unstably","unstack","unstacks","unstate","unstated","unstates","unsteady","unsteel","unsteels","unstep","unsteps","unstick","unsticks","unstitch","unstoned","unstop","unstops","unstrap","unstraps","unstress","unstring","unstrung","unstuck","unstuffy","unstung","unsubtle","unsubtly","unsuited","unsung","unsunk","unsure","unsurely","unswathe","unswayed","unswear","unswears","unswept","unswore","unsworn","untack","untacked","untacks","untagged","untaken","untame","untamed","untangle","untanned","untapped","untasted","untaught","untaxed","unteach","untended","untented","untested","untether","unthawed","unthink","unthinks","unthread","unthrone","untidied","untidier","untidies","untidily","untidy","untie","untied","unties","until","untilled","untilted","untimely","untinged","untipped","untired","untiring","untitled","unto","untold","untorn","untoward","untraced","untread","untreads","untrendy","untried","untrim","untrims","untrod","untrue","untruer","untruest","untruly","untruss","untrusty","untruth","untruths","untuck","untucked","untucks","untufted","untune","untuned","untunes","untuning","unturned","untwine","untwined","untwines","untwist","untwists","untying","ununited","unurged","unusable","unused","unusual","unvalued","unvaried","unveil","unveiled","unveils","unveined","unversed","unvexed","unvext","unviable","unvocal","unvoice","unvoiced","unvoices","unwalled","unwaning","unwanted","unwarier","unwarily","unwarmed","unwarned","unwarped","unwary","unwashed","unwasted","unwaxed","unweaned","unweary","unweave","unweaves","unwed","unwedded","unweeded","unweight","unwelded","unwell","unwept","unwetted","unwhite","unwieldy","unwifely","unwilled","unwind","unwinder","unwinds","unwisdom","unwise","unwisely","unwiser","unwisest","unwish","unwished","unwishes","unwit","unwits","unwitted","unwon","unwonted","unwooded","unwooed","unworked","unworn","unworthy","unwound","unwove","unwoven","unwrap","unwraps","unwrung","unyeaned","unyoke","unyoked","unyokes","unyoking","unyoung","unzip","unzipped","unzips","unzoned","upas","upases","upbear","upbearer","upbears","upbeat","upbeats","upbind","upbinds","upboil","upboiled","upboils","upbore","upborne","upbound","upbow","upbows","upbraid","upbraids","upbuild","upbuilds","upbuilt","upby","upbye","upcast","upcasts","upchuck","upchucks","upclimb","upclimbs","upcoil","upcoiled","upcoils","upcoming","upcurl","upcurled","upcurls","upcurve","upcurved","upcurves","updart","updarted","updarts","update","updated","updater","updaters","updates","updating","updive","updived","updives","updiving","updo","updos","updove","updraft","updrafts","updried","updries","updry","updrying","upend","upended","upending","upends","upfield","upfling","upflings","upflow","upflowed","upflows","upflung","upfold","upfolded","upfolds","upfront","upgather","upgaze","upgazed","upgazes","upgazing","upgird","upgirded","upgirds","upgirt","upgoing","upgrade","upgraded","upgrades","upgrew","upgrow","upgrown","upgrows","upgrowth","upheap","upheaped","upheaps","upheaval","upheave","upheaved","upheaver","upheaves","upheld","uphill","uphills","uphoard","uphoards","uphold","upholder","upholds","uphove","uphroe","uphroes","upkeep","upkeeps","upland","uplander","uplands","upleap","upleaped","upleaps","upleapt","uplift","uplifted","uplifter","uplifts","uplight","uplights","uplit","upmarket","upmost","upo","upon","upped","upper","uppercut","uppers","uppile","uppiled","uppiles","uppiling","upping","uppings","uppish","uppishly","uppity","upprop","upprops","upraise","upraised","upraiser","upraises","upreach","uprear","upreared","uprears","upright","uprights","uprise","uprisen","upriser","uprisers","uprises","uprising","upriver","uprivers","uproar","uproars","uproot","uprootal","uprooted","uprooter","uproots","uprose","uprouse","uproused","uprouses","uprush","uprushed","uprushes","ups","upscale","upsend","upsends","upsent","upset","upsets","upsetter","upshift","upshifts","upshoot","upshoots","upshot","upshots","upside","upsides","upsilon","upsilons","upsoar","upsoared","upsoars","upsprang","upspring","upsprung","upstage","upstaged","upstages","upstair","upstairs","upstand","upstands","upstare","upstared","upstares","upstart","upstarts","upstate","upstater","upstates","upstep","upsteps","upstir","upstirs","upstood","upstream","upstroke","upsurge","upsurged","upsurges","upsweep","upsweeps","upswell","upswells","upswept","upswing","upswings","upswung","uptake","uptakes","uptear","uptears","upthrew","upthrow","upthrown","upthrows","upthrust","uptick","upticks","uptight","uptilt","uptilted","uptilts","uptime","uptimes","uptore","uptorn","uptoss","uptossed","uptosses","uptown","uptowner","uptowns","uptrend","uptrends","upturn","upturned","upturns","upwaft","upwafted","upwafts","upward","upwardly","upwards","upwell","upwelled","upwells","upwind","upwinds","uracil","uracils","uraei","uraemia","uraemias","uraemic","uraeus","uraeuses","uralite","uralites","uralitic","urania","uranias","uranic","uranide","uranides","uranism","uranisms","uranite","uranites","uranitic","uranium","uraniums","uranous","uranyl","uranylic","uranyls","urare","urares","urari","uraris","urase","urases","urate","urates","uratic","urb","urban","urbane","urbanely","urbaner","urbanest","urbanise","urbanism","urbanist","urbanite","urbanity","urbanize","urbia","urbias","urbs","urchin","urchins","urd","urds","urea","ureal","ureas","urease","ureases","uredia","uredial","uredinia","uredium","uredo","uredos","ureic","ureide","ureides","uremia","uremias","uremic","ureter","ureteral","ureteric","ureters","urethan","urethane","urethans","urethra","urethrae","urethral","urethras","uretic","urge","urged","urgency","urgent","urgently","urger","urgers","urges","urging","urgingly","urial","urials","uric","uridine","uridines","urinal","urinals","urinary","urinate","urinated","urinates","urine","urinemia","urinemic","urines","urinose","urinous","urn","urnlike","urns","urochord","urodele","urodeles","urolith","uroliths","urologic","urology","uropod","uropodal","uropods","uropygia","uroscopy","urostyle","ursa","ursae","ursiform","ursine","urtext","urtexts","urticant","urticate","urus","uruses","urushiol","usable","usably","usage","usages","usance","usances","usaunce","usaunces","use","useable","useably","used","useful","usefully","useless","user","users","uses","usher","ushered","ushering","ushers","using","usnea","usneas","usquabae","usque","usquebae","usques","ustulate","usual","usually","usuals","usufruct","usurer","usurers","usuries","usurious","usurp","usurped","usurper","usurpers","usurping","usurps","usury","uta","utas","utensil","utensils","uteri","uterine","uterus","uteruses","utile","utilidor","utilise","utilised","utiliser","utilises","utility","utilize","utilized","utilizer","utilizes","utmost","utmosts","utopia","utopian","utopians","utopias","utopism","utopisms","utopist","utopists","utricle","utricles","utriculi","uts","utter","uttered","utterer","utterers","uttering","utterly","utters","uvea","uveal","uveas","uveitic","uveitis","uveous","uvula","uvulae","uvular","uvularly","uvulars","uvulas","uvulitis","uxorial","uxorious","vac","vacancy","vacant","vacantly","vacate","vacated","vacates","vacating","vacation","vaccina","vaccinal","vaccinas","vaccine","vaccinee","vaccines","vaccinia","vacs","vacua","vacuity","vacuolar","vacuole","vacuoles","vacuous","vacuum","vacuumed","vacuums","vadose","vagabond","vagal","vagally","vagaries","vagary","vagi","vagile","vagility","vagina","vaginae","vaginal","vaginas","vaginate","vagotomy","vagrancy","vagrant","vagrants","vagrom","vague","vaguely","vaguer","vaguest","vagus","vahine","vahines","vail","vailed","vailing","vails","vain","vainer","vainest","vainly","vainness","vair","vairs","vakeel","vakeels","vakil","vakils","valance","valanced","valances","vale","valence","valences","valencia","valency","valerate","valerian","valeric","vales","valet","valeted","valeting","valets","valgoid","valgus","valguses","valiance","valiancy","valiant","valiants","valid","validate","validity","validly","valine","valines","valise","valises","valkyr","valkyrie","valkyrs","vallate","valley","valleys","valonia","valonias","valor","valorise","valorize","valorous","valors","valour","valours","valse","valses","valuable","valuably","valuate","valuated","valuates","valuator","value","valued","valuer","valuers","values","valuing","valuta","valutas","valval","valvar","valvate","valve","valved","valvelet","valves","valving","valvula","valvulae","valvular","valvule","valvules","vambrace","vamoose","vamoosed","vamooses","vamose","vamosed","vamoses","vamosing","vamp","vamped","vamper","vampers","vamping","vampire","vampires","vampiric","vampish","vamps","van","vanadate","vanadic","vanadium","vanadous","vanda","vandal","vandalic","vandals","vandas","vandyke","vandyked","vandykes","vane","vaned","vanes","vang","vangs","vanguard","vanilla","vanillas","vanillic","vanillin","vanish","vanished","vanisher","vanishes","vanitied","vanities","vanitory","vanity","vanman","vanmen","vanned","vanner","vanners","vanning","vanpool","vanpools","vanquish","vans","vantage","vantages","vanward","vapid","vapidity","vapidly","vapor","vapored","vaporer","vaporers","vaporing","vaporise","vaporish","vaporize","vaporous","vapors","vapory","vapour","vapoured","vapourer","vapours","vapoury","vaquero","vaqueros","var","vara","varactor","varas","varia","variable","variably","variance","variant","variants","variate","variated","variates","varices","varicose","varied","variedly","varier","variers","varies","varietal","variety","variform","variola","variolar","variolas","variole","varioles","variorum","various","varistor","varix","varlet","varletry","varlets","varment","varments","varmint","varmints","varna","varnas","varnish","varnishy","varoom","varoomed","varooms","vars","varsity","varus","varuses","varve","varved","varves","vary","varying","vas","vasa","vasal","vascula","vascular","vasculum","vase","vaselike","vases","vasiform","vasotomy","vassal","vassals","vast","vaster","vastest","vastier","vastiest","vastity","vastly","vastness","vasts","vasty","vat","vatful","vatfuls","vatic","vatical","vaticide","vats","vatted","vatting","vatu","vatus","vau","vault","vaulted","vaulter","vaulters","vaultier","vaulting","vaults","vaulty","vaunt","vaunted","vaunter","vaunters","vauntful","vauntie","vaunting","vaunts","vaunty","vaus","vav","vavasor","vavasors","vavasour","vavassor","vavs","vaw","vaward","vawards","vawntie","vaws","veal","vealed","vealer","vealers","vealier","vealiest","vealing","veals","vealy","vector","vectored","vectors","vedalia","vedalias","vedette","vedettes","vee","veejay","veejays","veena","veenas","veep","veepee","veepees","veeps","veer","veered","veeries","veering","veers","veery","vees","veg","vegan","veganism","vegans","vegetal","vegetant","vegetate","vegete","vegetist","vegetive","veggie","veggies","vegie","vegies","vehement","vehicle","vehicles","veil","veiled","veiledly","veiler","veilers","veiling","veilings","veillike","veils","vein","veinal","veined","veiner","veiners","veinier","veiniest","veining","veinings","veinless","veinlet","veinlets","veinlike","veins","veinule","veinules","veinulet","veiny","vela","velamen","velamina","velar","velaria","velarium","velarize","velars","velate","veld","velds","veldt","veldts","veliger","veligers","velites","velleity","vellum","vellums","veloce","velocity","velour","velours","veloute","veloutes","velum","velure","velured","velures","veluring","velveret","velvet","velveted","velvets","velvety","vena","venae","venal","venality","venally","venatic","venation","vend","vendable","vendace","vendaces","vended","vendee","vendees","vender","venders","vendetta","vendeuse","vendible","vendibly","vending","vendor","vendors","vends","vendue","vendues","veneer","veneered","veneerer","veneers","venenate","venenose","venerate","venereal","veneries","venery","venetian","venge","venged","vengeful","venges","venging","venial","venially","venin","venine","venines","venins","venire","venires","venison","venisons","venogram","venom","venomed","venomer","venomers","venoming","venomous","venoms","venose","venosity","venous","venously","vent","ventage","ventages","ventail","ventails","vented","venter","venters","venting","ventless","ventral","ventrals","vents","venture","ventured","venturer","ventures","venturi","venturis","venue","venues","venular","venule","venules","venulose","venulous","vera","veracity","veranda","verandah","verandas","veratria","veratrin","veratrum","verb","verbal","verbally","verbals","verbatim","verbena","verbenas","verbiage","verbid","verbids","verbify","verbile","verbiles","verbless","verbose","verboten","verbs","verdancy","verdant","verderer","verderor","verdict","verdicts","verdin","verdins","verditer","verdure","verdured","verdures","verecund","verge","verged","vergence","verger","vergers","verges","verging","verglas","veridic","verier","veriest","verified","verifier","verifies","verify","verily","verism","verismo","verismos","verisms","verist","veristic","verists","veritas","verite","verites","verities","verity","verjuice","vermeil","vermeils","vermes","vermian","vermin","vermis","vermoulu","vermouth","vermuth","vermuths","vernacle","vernal","vernally","vernicle","vernier","verniers","vernix","vernixes","veronica","verruca","verrucae","versal","versant","versants","verse","versed","verseman","versemen","verser","versers","verses","verset","versets","versicle","versify","versine","versines","versing","version","versions","verso","versos","verst","verste","verstes","versts","versus","vert","vertebra","vertex","vertexes","vertical","vertices","verticil","vertigo","vertigos","verts","vertu","vertus","vervain","vervains","verve","verves","vervet","vervets","very","vesica","vesicae","vesical","vesicant","vesicate","vesicle","vesicles","vesicula","vesper","vesperal","vespers","vespiary","vespid","vespids","vespine","vessel","vesseled","vessels","vest","vesta","vestal","vestally","vestals","vestas","vested","vestee","vestees","vestiary","vestige","vestiges","vestigia","vesting","vestings","vestless","vestlike","vestment","vestral","vestries","vestry","vests","vestural","vesture","vestured","vestures","vesuvian","vet","vetch","vetches","veteran","veterans","vetiver","vetivers","vetivert","veto","vetoed","vetoer","vetoers","vetoes","vetoing","vets","vetted","vetting","vex","vexation","vexed","vexedly","vexer","vexers","vexes","vexil","vexilla","vexillar","vexillum","vexils","vexing","vexingly","vext","via","viable","viably","viaduct","viaducts","vial","vialed","vialing","vialled","vialling","vials","viand","viands","viatic","viatica","viatical","viaticum","viator","viatores","viators","vibe","vibes","vibist","vibists","vibrance","vibrancy","vibrant","vibrants","vibrate","vibrated","vibrates","vibrato","vibrator","vibratos","vibrio","vibrioid","vibrion","vibrions","vibrios","vibrissa","vibronic","viburnum","vicar","vicarage","vicarate","vicarial","vicarly","vicars","vice","viced","viceless","vicenary","viceroy","viceroys","vices","vichies","vichy","vicinage","vicinal","vicing","vicinity","vicious","vicomte","vicomtes","victim","victims","victor","victoria","victors","victory","victress","victual","victuals","vicugna","vicugnas","vicuna","vicunas","vide","video","videos","videotex","vidette","videttes","vidicon","vidicons","viduity","vie","vied","vier","viers","vies","view","viewable","viewdata","viewed","viewer","viewers","viewier","viewiest","viewing","viewings","viewless","views","viewy","vig","viga","vigas","vigil","vigilant","vigils","vigneron","vignette","vigor","vigorish","vigoroso","vigorous","vigors","vigour","vigours","vigs","viking","vikings","vilayet","vilayets","vile","vilely","vileness","viler","vilest","vilified","vilifier","vilifies","vilify","vilipend","vill","villa","villadom","villae","village","villager","villages","villain","villains","villainy","villas","villatic","villein","villeins","villi","villose","villous","vills","villus","vim","vimen","vimina","viminal","vims","vin","vina","vinal","vinals","vinas","vinasse","vinasses","vinca","vincas","vincible","vincibly","vincula","vinculum","vine","vineal","vined","vinegar","vinegars","vinegary","vineries","vinery","vines","vineyard","vinic","vinier","viniest","vinifera","vinified","vinifies","vinify","vining","vino","vinos","vinosity","vinous","vinously","vins","vintage","vintager","vintages","vintner","vintners","viny","vinyl","vinylic","vinyls","viol","viola","violable","violably","violas","violate","violated","violater","violates","violator","violence","violent","violet","violets","violin","violins","violist","violists","violone","violones","viols","viomycin","viper","viperine","viperish","viperous","vipers","virago","viragoes","viragos","viral","virally","virelai","virelais","virelay","virelays","viremia","viremias","viremic","vireo","vireos","vires","virga","virgas","virgate","virgates","virgin","virginal","virgins","virgule","virgules","viricide","virid","viridian","viridity","virile","virilely","virilism","virility","virion","virions","virl","virls","viroid","viroids","virology","viroses","virosis","virtu","virtual","virtue","virtues","virtuosa","virtuose","virtuosi","virtuoso","virtuous","virtus","virucide","virulent","virus","viruses","vis","visa","visaed","visage","visaged","visages","visaing","visard","visards","visas","viscacha","viscera","visceral","viscid","viscidly","viscoid","viscose","viscoses","viscount","viscous","viscus","vise","vised","viseed","viseing","viselike","vises","visible","visibly","vising","vision","visional","visioned","visions","visit","visitant","visited","visiter","visiters","visiting","visitor","visitors","visits","visive","visor","visored","visoring","visors","vista","vistaed","vistas","visual","visually","visuals","vita","vitae","vital","vitalise","vitalism","vitalist","vitality","vitalize","vitally","vitals","vitamer","vitamers","vitamin","vitamine","vitamins","vitellin","vitellus","vitesse","vitesses","vitiable","vitiate","vitiated","vitiates","vitiator","vitiligo","vitrain","vitrains","vitreous","vitric","vitrics","vitrify","vitrine","vitrines","vitriol","vitriols","vitta","vittae","vittate","vittle","vittled","vittles","vittling","vituline","viva","vivace","vivaces","vivacity","vivaria","vivaries","vivarium","vivary","vivas","vive","viverrid","vivers","vivid","vivider","vividest","vividly","vivific","vivified","vivifier","vivifies","vivify","vivipara","vivisect","vixen","vixenish","vixenly","vixens","vizard","vizarded","vizards","vizcacha","vizier","viziers","vizir","vizirate","vizirial","vizirs","vizor","vizored","vizoring","vizors","vizsla","vizslas","vocable","vocables","vocably","vocal","vocalic","vocalics","vocalise","vocalism","vocalist","vocality","vocalize","vocally","vocals","vocation","vocative","voces","vocoder","vocoders","vodka","vodkas","vodoun","vodouns","vodun","voduns","voe","voes","vogie","vogue","vogues","voguish","voice","voiced","voiceful","voicer","voicers","voices","voicing","void","voidable","voidance","voided","voider","voiders","voiding","voidness","voids","voila","voile","voiles","volant","volante","volar","volatile","volcanic","volcano","volcanos","vole","voled","voleries","volery","voles","voling","volitant","volition","volitive","volley","volleyed","volleyer","volleys","volost","volosts","volplane","volt","volta","voltage","voltages","voltaic","voltaism","volte","voltes","volti","volts","voluble","volubly","volume","volumed","volumes","voluming","volute","voluted","volutes","volutin","volutins","volution","volva","volvas","volvate","volvox","volvoxes","volvuli","volvulus","vomer","vomerine","vomers","vomica","vomicae","vomit","vomited","vomiter","vomiters","vomiting","vomitive","vomito","vomitory","vomitos","vomitous","vomits","vomitus","von","voodoo","voodooed","voodoos","voracity","vorlage","vorlages","vortex","vortexes","vortical","vortices","votable","votaress","votaries","votarist","votary","vote","voteable","voted","voteless","voter","voters","votes","voting","votive","votively","votress","vouch","vouched","vouchee","vouchees","voucher","vouchers","vouches","vouching","voussoir","vouvray","vouvrays","vow","vowed","vowel","vowelize","vowels","vower","vowers","vowing","vowless","vows","vox","voyage","voyaged","voyager","voyagers","voyages","voyageur","voyaging","voyeur","voyeurs","vroom","vroomed","vrooming","vrooms","vrouw","vrouws","vrow","vrows","vug","vugg","vuggier","vuggiest","vuggs","vuggy","vugh","vughs","vugs","vulcanic","vulgar","vulgarer","vulgarly","vulgars","vulgate","vulgates","vulgo","vulgus","vulguses","vulpine","vulture","vultures","vulva","vulvae","vulval","vulvar","vulvas","vulvate","vulvitis","vying","vyingly","wab","wabble","wabbled","wabbler","wabblers","wabbles","wabblier","wabbling","wabbly","wabs","wack","wacke","wackes","wackier","wackiest","wackily","wacko","wackos","wacks","wacky","wad","wadable","wadded","wadder","wadders","waddie","waddied","waddies","wadding","waddings","waddle","waddled","waddler","waddlers","waddles","waddling","waddly","waddy","waddying","wade","wadeable","waded","wader","waders","wades","wadi","wadies","wading","wadis","wadmaal","wadmaals","wadmal","wadmals","wadmel","wadmels","wadmol","wadmoll","wadmolls","wadmols","wads","wadset","wadsets","wady","wae","waeful","waeness","waes","waesuck","waesucks","wafer","wafered","wafering","wafers","wafery","waff","waffed","waffie","waffies","waffing","waffle","waffled","waffles","waffling","waffs","waft","waftage","waftages","wafted","wafter","wafters","wafting","wafts","wafture","waftures","wag","wage","waged","wageless","wager","wagered","wagerer","wagerers","wagering","wagers","wages","wagged","wagger","waggers","waggery","wagging","waggish","waggle","waggled","waggles","waggling","waggly","waggon","waggoned","waggoner","waggons","waging","wagon","wagonage","wagoned","wagoner","wagoners","wagoning","wagons","wags","wagsome","wagtail","wagtails","wahconda","wahine","wahines","wahoo","wahoos","waif","waifed","waifing","waifs","wail","wailed","wailer","wailers","wailful","wailing","wails","wailsome","wain","wains","wainscot","wair","waired","wairing","wairs","waist","waisted","waister","waisters","waisting","waists","wait","waited","waiter","waiters","waiting","waitings","waitress","waits","waive","waived","waiver","waivers","waives","waiving","wakanda","wakandas","wake","waked","wakeful","wakeless","waken","wakened","wakener","wakeners","wakening","wakens","waker","wakerife","wakers","wakes","wakiki","wakikis","waking","wale","waled","waler","walers","wales","walies","waling","walk","walkable","walkaway","walked","walker","walkers","walking","walkings","walkout","walkouts","walkover","walks","walkup","walkups","walkway","walkways","walkyrie","wall","walla","wallaby","wallah","wallahs","wallaroo","wallas","walled","wallet","wallets","walleye","walleyed","walleyes","wallie","wallies","walling","wallop","walloped","walloper","wallops","wallow","wallowed","wallower","wallows","walls","wally","walnut","walnuts","walrus","walruses","waltz","waltzed","waltzer","waltzers","waltzes","waltzing","waly","wamble","wambled","wambles","wamblier","wambling","wambly","wame","wamefou","wamefous","wameful","wamefuls","wames","wammus","wammuses","wampish","wampum","wampums","wampus","wampuses","wamus","wamuses","wan","wand","wander","wandered","wanderer","wanderoo","wanders","wandle","wands","wane","waned","wanes","waney","wangan","wangans","wangle","wangled","wangler","wanglers","wangles","wangling","wangun","wanguns","wanier","waniest","wanigan","wanigans","waning","wanion","wanions","wanly","wanned","wanner","wanness","wannest","wannigan","wanning","wans","want","wantage","wantages","wanted","wanter","wanters","wanting","wanton","wantoned","wantoner","wantonly","wantons","wants","wany","wap","wapiti","wapitis","wapped","wapping","waps","war","warble","warbled","warbler","warblers","warbles","warbling","warcraft","ward","warded","warden","wardenry","wardens","warder","warders","warding","wardress","wardrobe","wardroom","wards","wardship","ware","wared","wareroom","wares","warfare","warfares","warfarin","warhead","warheads","warhorse","warier","wariest","warily","wariness","waring","warison","warisons","wark","warked","warking","warks","warless","warlike","warlock","warlocks","warlord","warlords","warm","warmaker","warmed","warmer","warmers","warmest","warming","warmish","warmly","warmness","warmouth","warms","warmth","warmths","warmup","warmups","warn","warned","warner","warners","warning","warnings","warns","warp","warpage","warpages","warpath","warpaths","warped","warper","warpers","warping","warplane","warpower","warps","warpwise","warragal","warrant","warrants","warranty","warred","warren","warrener","warrens","warrigal","warring","warrior","warriors","wars","warsaw","warsaws","warship","warships","warsle","warsled","warsler","warslers","warsles","warsling","warstle","warstled","warstler","warstles","wart","warted","warthog","warthogs","wartier","wartiest","wartime","wartimes","wartless","wartlike","warts","warty","warwork","warworks","warworn","wary","was","wasabi","wasabis","wash","washable","washbowl","washday","washdays","washed","washer","washers","washes","washier","washiest","washing","washings","washout","washouts","washrag","washrags","washroom","washtub","washtubs","washup","washups","washy","wasp","waspier","waspiest","waspily","waspish","wasplike","wasps","waspy","wassail","wassails","wast","wastable","wastage","wastages","waste","wasted","wasteful","wastelot","waster","wasterie","wasters","wastery","wastes","wasteway","wasting","wastrel","wastrels","wastrie","wastries","wastry","wasts","wat","watap","watape","watapes","wataps","watch","watchcry","watchdog","watched","watcher","watchers","watches","watcheye","watchful","watching","watchman","watchmen","watchout","water","waterage","waterbed","waterdog","watered","waterer","waterers","waterier","waterily","watering","waterish","waterlog","waterloo","waterman","watermen","waters","waterway","watery","wats","watt","wattage","wattages","wattape","wattapes","watter","wattest","watthour","wattle","wattled","wattles","wattless","wattling","watts","waucht","wauchted","wauchts","waugh","waught","waughted","waughts","wauk","wauked","wauking","wauks","waul","wauled","wauling","wauls","waur","wave","waveband","waved","waveform","waveless","wavelet","wavelets","wavelike","waveoff","waveoffs","waver","wavered","waverer","waverers","wavering","wavers","wavery","waves","wavey","waveys","wavier","wavies","waviest","wavily","waviness","waving","wavy","waw","wawl","wawled","wawling","wawls","waws","wax","waxberry","waxbill","waxbills","waxed","waxen","waxer","waxers","waxes","waxier","waxiest","waxily","waxiness","waxing","waxings","waxlike","waxplant","waxweed","waxweeds","waxwing","waxwings","waxwork","waxworks","waxworm","waxworms","waxy","way","waybill","waybills","wayfarer","waygoing","waylaid","waylay","waylayer","waylays","wayless","ways","wayside","waysides","wayward","wayworn","weak","weaken","weakened","weakener","weakens","weaker","weakest","weakfish","weakish","weaklier","weakling","weakly","weakness","weakside","weal","weald","wealds","weals","wealth","wealths","wealthy","wean","weaned","weaner","weaners","weaning","weanling","weans","weapon","weaponed","weaponry","weapons","wear","wearable","wearer","wearers","wearied","wearier","wearies","weariest","weariful","wearily","wearing","wearish","wears","weary","wearying","weasand","weasands","weasel","weaseled","weaselly","weasels","weason","weasons","weather","weathers","weave","weaved","weaver","weavers","weaves","weaving","weazand","weazands","web","webbed","webbier","webbiest","webbing","webbings","webby","weber","webers","webfed","webfeet","webfoot","webless","weblike","webs","webster","websters","webworm","webworms","wecht","wechts","wed","wedded","wedder","wedders","wedding","weddings","wedel","wedeled","wedeling","wedeln","wedelns","wedels","wedge","wedged","wedges","wedgie","wedgier","wedgies","wedgiest","wedging","wedgy","wedlock","wedlocks","weds","wee","weed","weeded","weeder","weeders","weedier","weediest","weedily","weeding","weedless","weedlike","weeds","weedy","week","weekday","weekdays","weekend","weekends","weeklies","weeklong","weekly","weeks","weel","ween","weened","weenie","weenier","weenies","weeniest","weening","weens","weensier","weensy","weeny","weep","weeper","weepers","weepie","weepier","weepies","weepiest","weeping","weepings","weeps","weepy","weer","wees","weest","weet","weeted","weeting","weets","weever","weevers","weevil","weeviled","weevilly","weevils","weevily","weewee","weeweed","weewees","weft","wefts","weftwise","weigela","weigelas","weigelia","weigh","weighed","weigher","weighers","weighing","weighman","weighmen","weighs","weight","weighted","weighter","weights","weighty","weiner","weiners","weir","weird","weirder","weirdest","weirdie","weirdies","weirdly","weirdo","weirdoes","weirdos","weirds","weirdy","weirs","weka","wekas","welch","welched","welcher","welchers","welches","welching","welcome","welcomed","welcomer","welcomes","weld","weldable","welded","welder","welders","welding","weldless","weldment","weldor","weldors","welds","welfare","welfares","welkin","welkins","well","welladay","wellaway","wellborn","wellcurb","welldoer","welled","wellhead","wellhole","wellie","wellies","welling","wellness","wells","wellsite","welly","welsh","welshed","welsher","welshers","welshes","welshing","welt","welted","welter","weltered","welters","welting","weltings","welts","wen","wench","wenched","wencher","wenchers","wenches","wenching","wend","wended","wendigo","wendigos","wending","wends","wennier","wenniest","wennish","wenny","wens","went","wept","were","weregild","werewolf","wergeld","wergelds","wergelt","wergelts","wergild","wergilds","wert","werwolf","weskit","weskits","wessand","wessands","west","wester","westered","westerly","western","westerns","westers","westing","westings","westmost","wests","westward","wet","wetback","wetbacks","wether","wethers","wetland","wetlands","wetly","wetness","wetproof","wets","wettable","wetted","wetter","wetters","wettest","wetting","wettings","wettish","wha","whack","whacked","whacker","whackers","whackier","whacking","whacko","whackos","whacks","whacky","whale","whaled","whaleman","whalemen","whaler","whalers","whales","whaling","whalings","wham","whammed","whammies","whamming","whammo","whammy","whamo","whams","whang","whanged","whangee","whangees","whanging","whangs","whap","whapped","whapper","whappers","whapping","whaps","wharf","wharfage","wharfed","wharfing","wharfs","wharve","wharves","what","whatever","whatnot","whatnots","whats","whaup","whaups","wheal","wheals","wheat","wheatear","wheaten","wheatens","wheats","whee","wheedle","wheedled","wheedler","wheedles","wheel","wheeled","wheeler","wheelers","wheelie","wheelies","wheeling","wheelman","wheelmen","wheels","wheen","wheens","wheep","wheeped","wheeping","wheeple","wheepled","wheeples","wheeps","wheeze","wheezed","wheezer","wheezers","wheezes","wheezier","wheezily","wheezing","wheezy","whelk","whelkier","whelks","whelky","whelm","whelmed","whelming","whelms","whelp","whelped","whelping","whelps","when","whenas","whence","whenever","whens","where","whereas","whereat","whereby","wherein","whereof","whereon","wheres","whereto","wherever","wherried","wherries","wherry","wherve","wherves","whet","whether","whets","whetted","whetter","whetters","whetting","whew","whews","whey","wheyey","wheyface","wheyish","wheys","which","whicker","whickers","whid","whidah","whidahs","whidded","whidding","whids","whiff","whiffed","whiffer","whiffers","whiffet","whiffets","whiffing","whiffle","whiffled","whiffler","whiffles","whiffs","whig","whigs","while","whiled","whiles","whiling","whilom","whilst","whim","whimbrel","whimper","whimpers","whims","whimsey","whimseys","whimsied","whimsies","whimsy","whin","whinchat","whine","whined","whiner","whiners","whines","whiney","whinge","whinged","whinges","whinier","whiniest","whining","whinnied","whinnier","whinnies","whinny","whins","whiny","whip","whipcord","whiplash","whiplike","whipped","whipper","whippers","whippet","whippets","whippier","whipping","whippy","whipray","whiprays","whips","whipsaw","whipsawn","whipsaws","whipt","whiptail","whipworm","whir","whirl","whirled","whirler","whirlers","whirlier","whirlies","whirling","whirls","whirly","whirr","whirred","whirried","whirries","whirring","whirrs","whirry","whirs","whish","whished","whishes","whishing","whisht","whishted","whishts","whisk","whisked","whisker","whiskers","whiskery","whiskey","whiskeys","whiskies","whisking","whisks","whisky","whisper","whispers","whispery","whist","whisted","whisting","whistle","whistled","whistler","whistles","whists","whit","white","whitecap","whited","whitefly","whitely","whiten","whitened","whitener","whitens","whiteout","whiter","whites","whitest","whitey","whiteys","whither","whitier","whities","whitiest","whiting","whitings","whitish","whitlow","whitlows","whitrack","whits","whitter","whitters","whittle","whittled","whittler","whittles","whittret","whity","whiz","whizbang","whizz","whizzed","whizzer","whizzers","whizzes","whizzing","who","whoa","whodunit","whoever","whole","wholes","wholism","wholisms","wholly","whom","whomever","whomp","whomped","whomping","whomps","whomso","whoof","whoofed","whoofing","whoofs","whoop","whooped","whoopee","whoopees","whooper","whoopers","whooping","whoopla","whooplas","whoops","whoosh","whooshed","whooshes","whoosis","whop","whopped","whopper","whoppers","whopping","whops","whore","whored","whoredom","whores","whoreson","whoring","whorish","whorl","whorled","whorls","whort","whortle","whortles","whorts","whose","whosever","whosis","whosises","whoso","whump","whumped","whumping","whumps","why","whydah","whydahs","whys","wich","wiches","wick","wickape","wickapes","wicked","wickeder","wickedly","wicker","wickers","wicket","wickets","wicking","wickings","wickiup","wickiups","wicks","wickyup","wickyups","wicopies","wicopy","widder","widders","widdie","widdies","widdle","widdled","widdles","widdling","widdy","wide","wideband","widely","widen","widened","widener","wideners","wideness","widening","widens","wider","wides","widest","widgeon","widgeons","widget","widgets","widish","widow","widowed","widower","widowers","widowing","widows","width","widths","widthway","wield","wielded","wielder","wielders","wieldier","wielding","wields","wieldy","wiener","wieners","wienie","wienies","wife","wifed","wifedom","wifedoms","wifehood","wifeless","wifelier","wifelike","wifely","wifes","wifing","wig","wigan","wigans","wigeon","wigeons","wigged","wiggery","wiggier","wiggiest","wigging","wiggings","wiggle","wiggled","wiggler","wigglers","wiggles","wigglier","wiggling","wiggly","wiggy","wight","wights","wigless","wiglet","wiglets","wiglike","wigmaker","wigs","wigwag","wigwags","wigwam","wigwams","wikiup","wikiups","wilco","wild","wildcat","wildcats","wilder","wildered","wilders","wildest","wildfire","wildfowl","wilding","wildings","wildish","wildland","wildlife","wildling","wildly","wildness","wilds","wildwood","wile","wiled","wiles","wilful","wilfully","wilier","wiliest","wilily","wiliness","wiling","will","willable","willed","willer","willers","willet","willets","willful","willied","willies","willing","williwau","williwaw","willow","willowed","willower","willows","willowy","wills","willy","willyard","willyart","willying","willywaw","wilt","wilted","wilting","wilts","wily","wimble","wimbled","wimbles","wimbling","wimp","wimpish","wimple","wimpled","wimples","wimpling","wimps","wimpy","win","wince","winced","wincer","wincers","winces","wincey","winceys","winch","winched","wincher","winchers","winches","winching","wincing","wind","windable","windage","windages","windbag","windbags","windburn","winded","winder","winders","windfall","windflaw","windgall","windier","windiest","windigo","windigos","windily","winding","windings","windlass","windle","windled","windles","windless","windling","windmill","window","windowed","windows","windpipe","windrow","windrows","winds","windsock","windup","windups","windward","windway","windways","windy","wine","wined","wineless","wineries","winery","wines","wineshop","wineskin","winesop","winesops","winey","wing","wingback","wingbow","wingbows","wingding","winged","wingedly","winger","wingers","wingier","wingiest","winging","wingless","winglet","winglets","winglike","wingman","wingmen","wingover","wings","wingspan","wingtip","wingtips","wingy","winier","winiest","wining","winish","wink","winked","winker","winkers","winking","winkle","winkled","winkles","winkling","winks","winless","winnable","winned","winner","winners","winning","winnings","winnock","winnocks","winnow","winnowed","winnower","winnows","wino","winoes","winos","wins","winsome","winsomer","winter","wintered","winterer","winterly","winters","wintery","wintle","wintled","wintles","wintling","wintrier","wintrily","wintry","winy","winze","winzes","wipe","wiped","wipeout","wipeouts","wiper","wipers","wipes","wiping","wirable","wire","wired","wiredraw","wiredrew","wirehair","wireless","wirelike","wireman","wiremen","wirer","wirers","wires","wiretap","wiretaps","wireway","wireways","wirework","wireworm","wirier","wiriest","wirily","wiriness","wiring","wirings","wirra","wiry","wis","wisdom","wisdoms","wise","wiseacre","wiseass","wised","wiselier","wisely","wiseness","wisent","wisents","wiser","wises","wisest","wish","wisha","wishbone","wished","wisher","wishers","wishes","wishful","wishing","wishless","wising","wisp","wisped","wispier","wispiest","wispily","wisping","wispish","wisplike","wisps","wispy","wiss","wissed","wisses","wissing","wist","wistaria","wisted","wisteria","wistful","wisting","wists","wit","witan","witch","witched","witchery","witches","witchier","witching","witchy","wite","wited","wites","with","withal","withdraw","withdrew","withe","withed","wither","withered","witherer","withers","withes","withheld","withhold","withier","withies","withiest","within","withing","withins","without","withouts","withy","witing","witless","witling","witlings","witloof","witloofs","witness","witney","witneys","wits","witted","wittier","wittiest","wittily","witting","wittings","wittol","wittols","witty","wive","wived","wiver","wivern","wiverns","wivers","wives","wiving","wiz","wizard","wizardly","wizardry","wizards","wizen","wizened","wizening","wizens","wizes","wizzen","wizzens","woad","woaded","woads","woadwax","woald","woalds","wobble","wobbled","wobbler","wobblers","wobbles","wobblier","wobblies","wobbling","wobbly","wobegone","wodge","wodges","woe","woeful","woefully","woeness","woes","woesome","woful","wofully","wog","wogs","wok","woke","woken","woks","wold","wolds","wolf","wolfed","wolfer","wolfers","wolffish","wolfing","wolfish","wolflike","wolfram","wolframs","wolfs","wolver","wolvers","wolves","woman","womaned","womaning","womanise","womanish","womanize","womanly","womans","womb","wombat","wombats","wombed","wombier","wombiest","wombs","womby","women","womera","womeras","wommera","wommeras","won","wonder","wondered","wonderer","wonders","wondrous","wonk","wonkier","wonkiest","wonks","wonky","wonned","wonner","wonners","wonning","wons","wont","wonted","wontedly","wonting","wonton","wontons","wonts","woo","wood","woodbin","woodbind","woodbine","woodbins","woodbox","woodchat","woodcock","woodcut","woodcuts","wooded","wooden","woodener","woodenly","woodhen","woodhens","woodie","woodier","woodies","woodiest","wooding","woodland","woodlark","woodless","woodlore","woodlot","woodlots","woodman","woodmen","woodnote","woodpile","woodruff","woods","woodshed","woodsia","woodsias","woodsier","woodsman","woodsmen","woodsy","woodwax","woodwind","woodwork","woodworm","woody","wooed","wooer","wooers","woof","woofed","woofer","woofers","woofing","woofs","wooing","wooingly","wool","wooled","woolen","woolens","wooler","woolers","woolfell","woolhat","woolhats","woolie","woolier","woolies","wooliest","woollen","woollens","woollier","woollies","woollike","woolly","woolman","woolmen","woolpack","wools","woolsack","woolshed","woolskin","woolwork","wooly","woomera","woomeras","woops","woopsed","woopses","woopsing","woorali","wooralis","woorari","wooraris","woos","woosh","wooshed","wooshes","wooshing","woozier","wooziest","woozily","woozy","wop","wops","word","wordage","wordages","wordbook","worded","wordier","wordiest","wordily","wording","wordings","wordless","wordplay","words","wordy","wore","work","workable","workaday","workbag","workbags","workboat","workbook","workbox","workday","workdays","worked","worker","workers","workfare","workfolk","working","workings","workless","workload","workman","workmate","workmen","workout","workouts","workroom","works","workshop","workup","workups","workweek","world","worldly","worlds","worm","wormed","wormer","wormers","wormhole","wormier","wormiest","wormil","wormils","worming","wormish","wormlike","wormroot","worms","wormseed","wormwood","wormy","worn","wornness","worried","worrier","worriers","worries","worrit","worrited","worrits","worry","worrying","worse","worsen","worsened","worsens","worser","worses","worset","worsets","worship","worships","worst","worsted","worsteds","worsting","worsts","wort","worth","worthed","worthful","worthier","worthies","worthily","worthing","worths","worthy","worts","wos","wost","wot","wots","wotted","wotting","would","wouldest","wouldst","wound","wounded","wounding","wounds","wove","woven","wovens","wow","wowed","wowing","wows","wowser","wowsers","wrack","wracked","wrackful","wracking","wracks","wraith","wraiths","wrang","wrangle","wrangled","wrangler","wrangles","wrangs","wrap","wrapped","wrapper","wrappers","wrapping","wraps","wrapt","wrasse","wrasses","wrassle","wrassled","wrassles","wrastle","wrastled","wrastles","wrath","wrathed","wrathful","wrathier","wrathily","wrathing","wraths","wrathy","wreak","wreaked","wreaker","wreakers","wreaking","wreaks","wreath","wreathe","wreathed","wreathen","wreathes","wreaths","wreathy","wreck","wreckage","wrecked","wrecker","wreckers","wreckful","wrecking","wrecks","wren","wrench","wrenched","wrenches","wrens","wrest","wrested","wrester","wresters","wresting","wrestle","wrestled","wrestler","wrestles","wrests","wretch","wretched","wretches","wrick","wricked","wricking","wricks","wried","wrier","wries","wriest","wriggle","wriggled","wriggler","wriggles","wriggly","wright","wrights","wring","wringed","wringer","wringers","wringing","wrings","wrinkle","wrinkled","wrinkles","wrinkly","wrist","wristier","wristlet","wrists","wristy","writ","writable","write","writer","writerly","writers","writes","writhe","writhed","writhen","writher","writhers","writhes","writhing","writing","writings","writs","written","wrong","wronged","wronger","wrongers","wrongest","wrongful","wronging","wrongly","wrongs","wrote","wroth","wrothful","wrought","wrung","wry","wryer","wryest","wrying","wryly","wryneck","wrynecks","wryness","wud","wurst","wursts","wurzel","wurzels","wych","wyches","wye","wyes","wyle","wyled","wyles","wyling","wyn","wynd","wynds","wynn","wynns","wyns","wyte","wyted","wytes","wyting","wyvern","wyverns","xanthan","xanthans","xanthate","xanthein","xanthene","xanthic","xanthin","xanthine","xanthins","xanthoma","xanthone","xanthous","xebec","xebecs","xenia","xenial","xenias","xenic","xenogamy","xenogeny","xenolith","xenon","xenons","xerarch","xeric","xerosere","xeroses","xerosis","xerotic","xerus","xeruses","xiphoid","xiphoids","xis","xylan","xylans","xylem","xylems","xylene","xylenes","xylidin","xylidine","xylidins","xylitol","xylitols","xylocarp","xyloid","xylol","xylols","xylose","xyloses","xylotomy","xylyl","xylyls","xyst","xyster","xysters","xysti","xystoi","xystos","xysts","xystus","yabber","yabbered","yabbers","yacht","yachted","yachter","yachters","yachting","yachtman","yachtmen","yachts","yack","yacked","yacking","yacks","yaff","yaffed","yaffing","yaffs","yager","yagers","yagi","yagis","yah","yahoo","yahooism","yahoos","yahrzeit","yaird","yairds","yak","yakitori","yakked","yakker","yakkers","yakking","yaks","yald","yam","yamalka","yamalkas","yamen","yamens","yammer","yammered","yammerer","yammers","yams","yamulka","yamulkas","yamun","yamuns","yang","yangs","yank","yanked","yanking","yanks","yanqui","yanquis","yantra","yantras","yap","yapock","yapocks","yapok","yapoks","yapon","yapons","yapped","yapper","yappers","yapping","yaps","yar","yard","yardage","yardages","yardarm","yardarms","yardbird","yarded","yarding","yardland","yardman","yardmen","yards","yardwand","yardwork","yare","yarely","yarer","yarest","yarmelke","yarmulke","yarn","yarned","yarner","yarners","yarning","yarns","yarrow","yarrows","yashmac","yashmacs","yashmak","yashmaks","yasmak","yasmaks","yatagan","yatagans","yataghan","yatter","yattered","yatters","yaud","yauds","yauld","yaup","yauped","yauper","yaupers","yauping","yaupon","yaupons","yaups","yautia","yautias","yaw","yawed","yawing","yawl","yawled","yawling","yawls","yawmeter","yawn","yawned","yawner","yawners","yawning","yawns","yawp","yawped","yawper","yawpers","yawping","yawpings","yawps","yaws","yay","yays","ycleped","yclept","yea","yeah","yealing","yealings","yean","yeaned","yeaning","yeanling","yeans","year","yearbook","yearend","yearends","yearlies","yearling","yearlong","yearly","yearn","yearned","yearner","yearners","yearning","yearns","years","yeas","yeasayer","yeast","yeasted","yeastier","yeastily","yeasting","yeasts","yeasty","yecch","yecchs","yech","yechs","yechy","yeelin","yeelins","yegg","yeggman","yeggmen","yeggs","yeh","yeld","yelk","yelks","yell","yelled","yeller","yellers","yelling","yellow","yellowed","yellower","yellowly","yellows","yellowy","yells","yelp","yelped","yelper","yelpers","yelping","yelps","yen","yenned","yenning","yens","yenta","yentas","yente","yentes","yeoman","yeomanly","yeomanry","yeomen","yep","yerba","yerbas","yerk","yerked","yerking","yerks","yes","yeses","yeshiva","yeshivah","yeshivas","yeshivot","yessed","yesses","yessing","yester","yestern","yestreen","yet","yeti","yetis","yett","yetts","yeuk","yeuked","yeuking","yeuks","yeuky","yew","yews","yid","yids","yield","yielded","yielder","yielders","yielding","yields","yikes","yill","yills","yin","yince","yins","yip","yipe","yipes","yipped","yippee","yippie","yippies","yipping","yips","yird","yirds","yirr","yirred","yirring","yirrs","yirth","yirths","ylem","ylems","yob","yobbo","yobboes","yobbos","yobs","yock","yocked","yocking","yocks","yod","yodel","yodeled","yodeler","yodelers","yodeling","yodelled","yodeller","yodels","yodh","yodhs","yodle","yodled","yodler","yodlers","yodles","yodling","yods","yoga","yogas","yogee","yogees","yogh","yoghourt","yoghs","yoghurt","yoghurts","yogi","yogic","yogin","yogini","yoginis","yogins","yogis","yogurt","yogurts","yoicks","yok","yoke","yoked","yokel","yokeless","yokelish","yokels","yokemate","yokes","yoking","yokozuna","yoks","yolk","yolked","yolkier","yolkiest","yolks","yolky","yom","yomim","yon","yond","yonder","yoni","yonic","yonis","yonker","yonkers","yore","yores","you","young","younger","youngers","youngest","youngish","youngs","younker","younkers","youpon","youpons","your","yourn","yours","yourself","youse","youth","youthen","youthens","youthful","youths","yow","yowe","yowed","yowes","yowie","yowies","yowing","yowl","yowled","yowler","yowlers","yowling","yowls","yows","yperite","yperites","ytterbia","ytterbic","yttria","yttrias","yttric","yttrium","yttriums","yuan","yuans","yucca","yuccas","yucch","yuch","yuck","yucked","yuckier","yuckiest","yucking","yucks","yucky","yuga","yugas","yuk","yukked","yukking","yuks","yulan","yulans","yule","yules","yuletide","yum","yummier","yummies","yummiest","yummy","yup","yupon","yupons","yuppie","yuppies","yurt","yurta","yurts","ywis","zabaione","zabajone","zacaton","zacatons","zaddick","zaddik","zaddikim","zaffar","zaffars","zaffer","zaffers","zaffir","zaffirs","zaffre","zaffres","zaftig","zag","zagged","zagging","zags","zaibatsu","zaikai","zaikais","zaire","zaires","zamarra","zamarras","zamarro","zamarros","zamia","zamias","zamindar","zanana","zananas","zander","zanders","zanier","zanies","zaniest","zanily","zaniness","zany","zanyish","zanza","zanzas","zap","zapateo","zapateos","zapped","zapper","zappers","zappier","zappiest","zapping","zappy","zaps","zaptiah","zaptiahs","zaptieh","zaptiehs","zaratite","zareba","zarebas","zareeba","zareebas","zarf","zarfs","zariba","zaribas","zarzuela","zastruga","zastrugi","zax","zaxes","zayin","zayins","zazen","zazens","zeal","zealot","zealotry","zealots","zealous","zeals","zeatin","zeatins","zebec","zebeck","zebecks","zebecs","zebra","zebraic","zebras","zebrass","zebrine","zebroid","zebu","zebus","zecchin","zecchini","zecchino","zecchins","zechin","zechins","zed","zedoary","zeds","zee","zees","zein","zeins","zek","zeks","zelkova","zelkovas","zemindar","zemstva","zemstvo","zemstvos","zenaida","zenaidas","zenana","zenanas","zenith","zenithal","zeniths","zeolite","zeolites","zeolitic","zephyr","zephyrs","zeppelin","zero","zeroed","zeroes","zeroing","zeros","zeroth","zest","zested","zestful","zestier","zestiest","zesting","zests","zesty","zeta","zetas","zeugma","zeugmas","zibeline","zibet","zibeth","zibeths","zibets","zig","zigged","zigging","ziggurat","zigs","zigzag","zigzags","zikkurat","zikurat","zikurats","zilch","zilches","zill","zillah","zillahs","zillion","zillions","zills","zinc","zincate","zincates","zinced","zincic","zincify","zincing","zincite","zincites","zincked","zincking","zincky","zincoid","zincous","zincs","zincy","zineb","zinebs","zing","zingani","zingano","zingara","zingare","zingari","zingaro","zinged","zinger","zingers","zingier","zingiest","zinging","zings","zingy","zinkify","zinky","zinnia","zinnias","zip","zipless","zipped","zipper","zippered","zippers","zippier","zippiest","zipping","zippy","zips","ziram","zirams","zircon","zirconia","zirconic","zircons","zit","zither","zithern","zitherns","zithers","ziti","zitis","zits","zizit","zizith","zizzle","zizzled","zizzles","zizzling","zlote","zloties","zloty","zlotych","zlotys","zoa","zoaria","zoarial","zoarium","zodiac","zodiacal","zodiacs","zoea","zoeae","zoeal","zoeas","zoftig","zoic","zoisite","zoisites","zombi","zombie","zombies","zombiism","zombis","zonal","zonally","zonary","zonate","zonated","zonation","zone","zoned","zoneless","zoner","zoners","zones","zonetime","zoning","zonk","zonked","zonking","zonks","zonula","zonulae","zonular","zonulas","zonule","zonules","zoo","zoochore","zoogenic","zooglea","zoogleae","zoogleal","zoogleas","zoogloea","zooid","zooidal","zooids","zooks","zoolater","zoolatry","zoologic","zoology","zoom","zoomania","zoomed","zoometry","zooming","zoomorph","zooms","zoon","zoonal","zoonoses","zoonosis","zoonotic","zoons","zoophile","zoophily","zoophobe","zoophyte","zoos","zoosperm","zoospore","zootomic","zootomy","zori","zoril","zorilla","zorillas","zorille","zorilles","zorillo","zorillos","zorils","zoris","zoster","zosters","zouave","zouaves","zounds","zowie","zoysia","zoysias","zucchini","zwieback","zydeco","zydecos","zygoid","zygoma","zygomas","zygomata","zygose","zygoses","zygosis","zygosity","zygote","zygotene","zygotes","zygotic","zymase","zymases","zyme","zymes","zymogen","zymogene","zymogens","zymogram","zymology","zymosan","zymosans","zymoses","zymosis","zymotic","zymurgy","zyzzyva","zyzzyvas",""]}
},{}],13:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],14:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],15:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":14}],16:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
},{"./isTextNode":24}],17:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],18:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))
},{"_process":41}],19:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
},{}],20:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],21:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":20}],22:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":41}],23:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],24:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":23}],25:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],26:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))
},{"./emptyFunction":17,"_process":41}],27:[function(require,module,exports){
'use strict';

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try { // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

module.exports = hoistNonReactStatics;

},{}],28:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))
},{"_process":41}],29:[function(require,module,exports){
/* eslint-disable no-nested-ternary */
'use strict';
var arr = [];
var charCodeCache = [];

module.exports = function (a, b) {
	if (a === b) {
		return 0;
	}

	var swap = a;

	// Swapping the strings if `a` is longer than `b` so we know which one is the
	// shortest & which one is the longest
	if (a.length > b.length) {
		a = b;
		b = swap;
	}

	var aLen = a.length;
	var bLen = b.length;

	if (aLen === 0) {
		return bLen;
	}

	if (bLen === 0) {
		return aLen;
	}

	// Performing suffix trimming:
	// We can linearly drop suffix common to both strings since they
	// don't increase distance at all
	// Note: `~-` is the bitwise way to perform a `- 1` operation
	while (aLen > 0 && (a.charCodeAt(~-aLen) === b.charCodeAt(~-bLen))) {
		aLen--;
		bLen--;
	}

	if (aLen === 0) {
		return bLen;
	}

	// Performing prefix trimming
	// We can linearly drop prefix common to both strings since they
	// don't increase distance at all
	var start = 0;

	while (start < aLen && (a.charCodeAt(start) === b.charCodeAt(start))) {
		start++;
	}

	aLen -= start;
	bLen -= start;

	if (aLen === 0) {
		return bLen;
	}

	var bCharCode;
	var ret;
	var tmp;
	var tmp2;
	var i = 0;
	var j = 0;

	while (i < aLen) {
		charCodeCache[start + i] = a.charCodeAt(start + i);
		arr[i] = ++i;
	}

	while (j < bLen) {
		bCharCode = b.charCodeAt(start + j);
		tmp = j++;
		ret = j;

		for (i = 0; i < aLen; i++) {
			tmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;
			tmp = arr[i];
			ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
		}
	}

	return ret;
};

},{}],30:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":37}],31:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":30,"./_getRawTag":34,"./_objectToString":35}],32:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],33:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":36}],34:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":30}],35:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],36:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],37:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":32}],38:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],39:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":31,"./_getPrototype":33,"./isObjectLike":38}],40:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],41:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],42:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          )

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":46,"_process":41}],43:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

function emptyFunction() {}

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./lib/ReactPropTypesSecret":46}],44:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":42,"./lib/ReactPropTypesSecret":46,"_process":41,"object-assign":40}],45:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}

}).call(this,require('_process'))
},{"./factoryWithThrowingShims":43,"./factoryWithTypeCheckers":44,"_process":41}],46:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],47:[function(require,module,exports){
var always = /*#__PURE__*/require('./always');

/**
 * A function that always returns `false`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.T
 * @example
 *
 *      R.F(); //=> false
 */


var F = /*#__PURE__*/always(false);
module.exports = F;
},{"./always":55}],48:[function(require,module,exports){
var always = /*#__PURE__*/require('./always');

/**
 * A function that always returns `true`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.F
 * @example
 *
 *      R.T(); //=> true
 */


var T = /*#__PURE__*/always(true);
module.exports = T;
},{"./always":55}],49:[function(require,module,exports){
/**
 * A special placeholder value used to specify "gaps" within curried functions,
 * allowing partial application of any combination of arguments, regardless of
 * their positions.
 *
 * If `g` is a curried ternary function and `_` is `R.__`, the following are
 * equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2, _)(1, 3)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @constant
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @example
 *
 *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
 *      greet('Alice'); //=> 'Hello, Alice!'
 */
module.exports = { '@@functional/placeholder': true };
},{}],50:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Adds two values.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a
 * @param {Number} b
 * @return {Number}
 * @see R.subtract
 * @example
 *
 *      R.add(2, 3);       //=>  5
 *      R.add(7)(10);      //=> 17
 */


var add = /*#__PURE__*/_curry2(function add(a, b) {
  return Number(a) + Number(b);
});
module.exports = add;
},{"./internal/_curry2":152}],51:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var curryN = /*#__PURE__*/require('./curryN');

/**
 * Creates a new list iteration function from an existing one by adding two new
 * parameters to its callback function: the current index, and the entire list.
 *
 * This would turn, for instance, [`R.map`](#map) function into one that
 * more closely resembles `Array.prototype.map`. Note that this will only work
 * for functions in which the iteration callback function is the first
 * parameter, and where the list is the last parameter. (This latter might be
 * unimportant if the list parameter is not used.)
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Function
 * @category List
 * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
 * @param {Function} fn A list iteration function that does not pass index or list to its callback
 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
 * @example
 *
 *      var mapIndexed = R.addIndex(R.map);
 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
 */


var addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {
  return curryN(fn.length, function () {
    var idx = 0;
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = function () {
      var result = origFn.apply(this, _concat(arguments, [idx, list]));
      idx += 1;
      return result;
    };
    return fn.apply(this, args);
  });
});
module.exports = addIndex;
},{"./curryN":88,"./internal/_concat":147,"./internal/_curry1":151}],52:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Applies a function to the value at the given index of an array, returning a
 * new copy of the array with the element at the given index replaced with the
 * result of the function application.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig (a -> a) -> Number -> [a] -> [a]
 * @param {Function} fn The function to apply.
 * @param {Number} idx The index.
 * @param {Array|Arguments} list An array-like object whose value
 *        at the supplied index will be replaced.
 * @return {Array} A copy of the supplied array-like object with
 *         the element at index `idx` replaced with the value
 *         returned by applying `fn` to the existing element.
 * @see R.update
 * @example
 *
 *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]
 *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]
 * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]
 * @symb R.adjust(f, 0, [a, b]) = [f(a), b]
 */


var adjust = /*#__PURE__*/_curry3(function adjust(fn, idx, list) {
  if (idx >= list.length || idx < -list.length) {
    return list;
  }
  var start = idx < 0 ? list.length : 0;
  var _idx = start + idx;
  var _list = _concat(list);
  _list[_idx] = fn(list[_idx]);
  return _list;
});
module.exports = adjust;
},{"./internal/_concat":147,"./internal/_curry3":153}],53:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xall = /*#__PURE__*/require('./internal/_xall');

/**
 * Returns `true` if all elements of the list match the predicate, `false` if
 * there are any that don't.
 *
 * Dispatches to the `all` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
 *         otherwise.
 * @see R.any, R.none, R.transduce
 * @example
 *
 *      var equals3 = R.equals(3);
 *      R.all(equals3)([3, 3, 3, 3]); //=> true
 *      R.all(equals3)([3, 3, 1, 3]); //=> false
 */


var all = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['all'], _xall, function all(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (!fn(list[idx])) {
      return false;
    }
    idx += 1;
  }
  return true;
}));
module.exports = all;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xall":189}],54:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var curryN = /*#__PURE__*/require('./curryN');

var max = /*#__PURE__*/require('./max');

var pluck = /*#__PURE__*/require('./pluck');

var reduce = /*#__PURE__*/require('./reduce');

/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if every one of the provided predicates is satisfied
 * by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.anyPass
 * @example
 *
 *      var isQueen = R.propEq('rank', 'Q');
 *      var isSpade = R.propEq('suit', '♠︎');
 *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
 *
 *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
 *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
 */


var allPass = /*#__PURE__*/_curry1(function allPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }
      idx += 1;
    }
    return true;
  });
});
module.exports = allPass;
},{"./curryN":88,"./internal/_curry1":151,"./max":240,"./pluck":285,"./reduce":296}],55:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      var t = R.always('Tee');
 *      t(); //=> 'Tee'
 */


var always = /*#__PURE__*/_curry1(function always(val) {
  return function () {
    return val;
  };
});
module.exports = always;
},{"./internal/_curry1":151}],56:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns `true` if both arguments are `true`; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if it is falsy, otherwise the second argument.
 * @see R.both
 * @example
 *
 *      R.and(true, true); //=> true
 *      R.and(true, false); //=> false
 *      R.and(false, true); //=> false
 *      R.and(false, false); //=> false
 */


var and = /*#__PURE__*/_curry2(function and(a, b) {
  return a && b;
});
module.exports = and;
},{"./internal/_curry2":152}],57:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xany = /*#__PURE__*/require('./internal/_xany');

/**
 * Returns `true` if at least one of elements of the list match the predicate,
 * `false` otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
 *         otherwise.
 * @see R.all, R.none, R.transduce
 * @example
 *
 *      var lessThan0 = R.flip(R.lt)(0);
 *      var lessThan2 = R.flip(R.lt)(2);
 *      R.any(lessThan0)([1, 2]); //=> false
 *      R.any(lessThan2)([1, 2]); //=> true
 */


var any = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['any'], _xany, function any(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (fn(list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}));
module.exports = any;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xany":190}],58:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var curryN = /*#__PURE__*/require('./curryN');

var max = /*#__PURE__*/require('./max');

var pluck = /*#__PURE__*/require('./pluck');

var reduce = /*#__PURE__*/require('./reduce');

/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if at least one of the provided predicates is
 * satisfied by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.allPass
 * @example
 *
 *      var isClub = R.propEq('suit', '♣');
 *      var isSpade = R.propEq('suit', '♠');
 *      var isBlackCard = R.anyPass([isClub, isSpade]);
 *
 *      isBlackCard({rank: '10', suit: '♣'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
 */


var anyPass = /*#__PURE__*/_curry1(function anyPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }
      idx += 1;
    }
    return false;
  });
});
module.exports = anyPass;
},{"./curryN":88,"./internal/_curry1":151,"./max":240,"./pluck":285,"./reduce":296}],59:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var map = /*#__PURE__*/require('./map');

/**
 * ap applies a list of functions to a list of values.
 *
 * Dispatches to the `ap` method of the second argument, if present. Also
 * treats curried functions as applicatives.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig [a -> b] -> [a] -> [b]
 * @sig Apply f => f (a -> b) -> f a -> f b
 * @sig (a -> b -> c) -> (a -> b) -> (a -> c)
 * @param {*} applyF
 * @param {*} applyX
 * @return {*}
 * @example
 *
 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
 *
 *      // R.ap can also be used as S combinator
 *      // when only two functions are passed
 *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
 */


var ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {
  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
    return applyF(x)(applyX(x));
  } :
  // else
  _reduce(function (acc, f) {
    return _concat(acc, map(f, applyX));
  }, [], applyF);
});
module.exports = ap;
},{"./internal/_concat":147,"./internal/_curry2":152,"./internal/_reduce":184,"./map":234}],60:[function(require,module,exports){
var _aperture = /*#__PURE__*/require('./internal/_aperture');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xaperture = /*#__PURE__*/require('./internal/_xaperture');

/**
 * Returns a new list, composed of n-tuples of consecutive elements. If `n` is
 * greater than the length of the list, an empty list is returned.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @param {Number} n The size of the tuples to create
 * @param {Array} list The list to split into `n`-length tuples
 * @return {Array} The resulting list of `n`-length tuples
 * @see R.transduce
 * @example
 *
 *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
 *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
 *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
 */


var aperture = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xaperture, _aperture));
module.exports = aperture;
},{"./internal/_aperture":139,"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xaperture":191}],61:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a new list containing the contents of the given list, followed by
 * the given element.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The element to add to the end of the new list.
 * @param {Array} list The list of elements to add a new item to.
 *        list.
 * @return {Array} A new list containing the elements of the old list followed by `el`.
 * @see R.prepend
 * @example
 *
 *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
 *      R.append('tests', []); //=> ['tests']
 *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
 */


var append = /*#__PURE__*/_curry2(function append(el, list) {
  return _concat(list, [el]);
});
module.exports = append;
},{"./internal/_concat":147,"./internal/_curry2":152}],62:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Applies function `fn` to the argument list `args`. This is useful for
 * creating a fixed-arity function from a variadic function. `fn` should be a
 * bound function if context is significant.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> a) -> [*] -> a
 * @param {Function} fn The function which will be called with `args`
 * @param {Array} args The arguments to call `fn` with
 * @return {*} result The result, equivalent to `fn(...args)`
 * @see R.call, R.unapply
 * @example
 *
 *      var nums = [1, 2, 3, -99, 42, 6, 7];
 *      R.apply(Math.max, nums); //=> 42
 * @symb R.apply(f, [a, b, c]) = f(a, b, c)
 */


var apply = /*#__PURE__*/_curry2(function apply(fn, args) {
  return fn.apply(this, args);
});
module.exports = apply;
},{"./internal/_curry2":152}],63:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var apply = /*#__PURE__*/require('./apply');

var curryN = /*#__PURE__*/require('./curryN');

var map = /*#__PURE__*/require('./map');

var max = /*#__PURE__*/require('./max');

var pluck = /*#__PURE__*/require('./pluck');

var reduce = /*#__PURE__*/require('./reduce');

var values = /*#__PURE__*/require('./values');

/**
 * Given a spec object recursively mapping properties to functions, creates a
 * function producing an object of the same structure, by mapping each property
 * to the result of calling its associated function with the supplied arguments.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
 * @param {Object} spec an object recursively mapping properties to functions for
 *        producing the values for these properties.
 * @return {Function} A function that returns an object of the same structure
 * as `spec', with each property set to the value returned by calling its
 * associated function with the supplied arguments.
 * @see R.converge, R.juxt
 * @example
 *
 *      var getMetrics = R.applySpec({
 *        sum: R.add,
 *        nested: { mul: R.multiply }
 *      });
 *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
 * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
 */


var applySpec = /*#__PURE__*/_curry1(function applySpec(spec) {
  spec = map(function (v) {
    return typeof v == 'function' ? v : applySpec(v);
  }, spec);
  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {
    var args = arguments;
    return map(function (f) {
      return apply(f, args);
    }, spec);
  });
});
module.exports = applySpec;
},{"./apply":62,"./curryN":88,"./internal/_curry1":151,"./map":234,"./max":240,"./pluck":285,"./reduce":296,"./values":355}],64:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
* Takes a value and applies a function to it.
*
* This function is also known as the `thrush` combinator.
*
* @func
* @memberOf R
 * @since v0.25.0
* @category Function
* @sig a -> (a -> b) -> b
* @param {*} x The value
* @param {Function} f The function to apply
* @return {*} The result of applying `f` to `x`
* @example
*
*      var t42 = R.applyTo(42);
*      t42(R.identity); //=> 42
*      t42(R.add(1)); //=> 43
*/


var applyTo = /*#__PURE__*/_curry2(function applyTo(x, f) {
  return f(x);
});
module.exports = applyTo;
},{"./internal/_curry2":152}],65:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Makes an ascending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
 * @see R.descend
 * @example
 *
 *      var byAge = R.ascend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByYoungestFirst = R.sort(byAge, people);
 */


var ascend = /*#__PURE__*/_curry3(function ascend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa < bb ? -1 : aa > bb ? 1 : 0;
});
module.exports = ascend;
},{"./internal/_curry3":153}],66:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Makes a shallow clone of an object, setting or overriding the specified
 * property with the given value. Note that this copies and flattens prototype
 * properties onto the new object as well. All non-primitive properties are
 * copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig String -> a -> {k: v} -> {k: v}
 * @param {String} prop The property name to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except for the changed property.
 * @see R.dissoc
 * @example
 *
 *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
 */


var assoc = /*#__PURE__*/_curry3(function assoc(prop, val, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  result[prop] = val;
  return result;
});
module.exports = assoc;
},{"./internal/_curry3":153}],67:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var _has = /*#__PURE__*/require('./internal/_has');

var _isArray = /*#__PURE__*/require('./internal/_isArray');

var _isInteger = /*#__PURE__*/require('./internal/_isInteger');

var assoc = /*#__PURE__*/require('./assoc');

var isNil = /*#__PURE__*/require('./isNil');

/**
 * Makes a shallow clone of an object, setting or overriding the nodes required
 * to create the given path, and placing the specific value at the tail end of
 * that path. Note that this copies and flattens prototype properties onto the
 * new object as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> {a}
 * @param {Array} path the path to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except along the specified path.
 * @see R.dissocPath
 * @example
 *
 *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
 *
 *      // Any missing or non-object keys in path will be overridden
 *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
 */


var assocPath = /*#__PURE__*/_curry3(function assocPath(path, val, obj) {
  if (path.length === 0) {
    return val;
  }
  var idx = path[0];
  if (path.length > 1) {
    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};
    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
  }
  if (_isInteger(idx) && _isArray(obj)) {
    var arr = [].concat(obj);
    arr[idx] = val;
    return arr;
  } else {
    return assoc(idx, val, obj);
  }
});
module.exports = assocPath;
},{"./assoc":66,"./internal/_curry3":153,"./internal/_has":163,"./internal/_isArray":167,"./internal/_isInteger":170,"./isNil":218}],68:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var nAry = /*#__PURE__*/require('./nAry');

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 2 parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> c) -> (a, b -> c)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 2.
 * @see R.nAry, R.unary
 * @example
 *
 *      var takesThreeArgs = function(a, b, c) {
 *        return [a, b, c];
 *      };
 *      takesThreeArgs.length; //=> 3
 *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
 *
 *      var takesTwoArgs = R.binary(takesThreeArgs);
 *      takesTwoArgs.length; //=> 2
 *      // Only 2 arguments are passed to the wrapped function
 *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
 * @symb R.binary(f)(a, b, c) = f(a, b)
 */


var binary = /*#__PURE__*/_curry1(function binary(fn) {
  return nAry(2, fn);
});
module.exports = binary;
},{"./internal/_curry1":151,"./nAry":258}],69:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      var log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */


var bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {
  return _arity(fn.length, function () {
    return fn.apply(thisObj, arguments);
  });
});
module.exports = bind;
},{"./internal/_arity":140,"./internal/_curry2":152}],70:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isFunction = /*#__PURE__*/require('./internal/_isFunction');

var and = /*#__PURE__*/require('./and');

var lift = /*#__PURE__*/require('./lift');

/**
 * A function which calls the two provided functions and returns the `&&`
 * of the results.
 * It returns the result of the first function if it is false-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * false-y value.
 *
 * In addition to functions, `R.both` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f A predicate
 * @param {Function} g Another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
 * @see R.and
 * @example
 *
 *      var gt10 = R.gt(R.__, 10)
 *      var lt20 = R.lt(R.__, 20)
 *      var f = R.both(gt10, lt20);
 *      f(15); //=> true
 *      f(30); //=> false
 */


var both = /*#__PURE__*/_curry2(function both(f, g) {
  return _isFunction(f) ? function _both() {
    return f.apply(this, arguments) && g.apply(this, arguments);
  } : lift(and)(f, g);
});
module.exports = both;
},{"./and":56,"./internal/_curry2":152,"./internal/_isFunction":169,"./lift":230}],71:[function(require,module,exports){
var curry = /*#__PURE__*/require('./curry');

/**
 * Returns the result of calling its first argument with the remaining
 * arguments. This is occasionally useful as a converging function for
 * [`R.converge`](#converge): the first branch can produce a function while the
 * remaining branches produce values to be passed to that function as its
 * arguments.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig (*... -> a),*... -> a
 * @param {Function} fn The function to apply to the remaining arguments.
 * @param {...*} args Any number of positional arguments.
 * @return {*}
 * @see R.apply
 * @example
 *
 *      R.call(R.add, 1, 2); //=> 3
 *
 *      var indentN = R.pipe(R.repeat(' '),
 *                           R.join(''),
 *                           R.replace(/^(?!$)/gm));
 *
 *      var format = R.converge(R.call, [
 *                                  R.pipe(R.prop('indent'), indentN),
 *                                  R.prop('value')
 *                              ]);
 *
 *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
 * @symb R.call(f, a, b) = f(a, b)
 */


var call = /*#__PURE__*/curry(function call(fn) {
  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
});
module.exports = call;
},{"./curry":87}],72:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _makeFlat = /*#__PURE__*/require('./internal/_makeFlat');

var _xchain = /*#__PURE__*/require('./internal/_xchain');

var map = /*#__PURE__*/require('./map');

/**
 * `chain` maps a function over a list and concatenates the results. `chain`
 * is also known as `flatMap` in some libraries
 *
 * Dispatches to the `chain` method of the second argument, if present,
 * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain m => (a -> m b) -> m a -> m b
 * @param {Function} fn The function to map with
 * @param {Array} list The list to map over
 * @return {Array} The result of flat-mapping `list` with `fn`
 * @example
 *
 *      var duplicate = n => [n, n];
 *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
 *
 *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
 */


var chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {
  if (typeof monad === 'function') {
    return function (x) {
      return fn(monad(x))(x);
    };
  }
  return _makeFlat(false)(map(fn, monad));
}));
module.exports = chain;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_makeFlat":177,"./internal/_xchain":192,"./map":234}],73:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Restricts a number to be within a range.
 *
 * Also works for other ordered types such as Strings and Dates.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Relation
 * @sig Ord a => a -> a -> a -> a
 * @param {Number} minimum The lower limit of the clamp (inclusive)
 * @param {Number} maximum The upper limit of the clamp (inclusive)
 * @param {Number} value Value to be clamped
 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
 * @example
 *
 *      R.clamp(1, 10, -5) // => 1
 *      R.clamp(1, 10, 15) // => 10
 *      R.clamp(1, 10, 4)  // => 4
 */


var clamp = /*#__PURE__*/_curry3(function clamp(min, max, value) {
  if (min > max) {
    throw new Error('min must not be greater than max in clamp(min, max, value)');
  }
  return value < min ? min : value > max ? max : value;
});
module.exports = clamp;
},{"./internal/_curry3":153}],74:[function(require,module,exports){
var _clone = /*#__PURE__*/require('./internal/_clone');

var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Creates a deep copy of the value which may contain (nested) `Array`s and
 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
 * assigned by reference rather than copied
 *
 * Dispatches to a `clone` method if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {*} -> {*}
 * @param {*} value The object or array to clone
 * @return {*} A deeply cloned copy of `val`
 * @example
 *
 *      var objects = [{}, {}, {}];
 *      var objectsClone = R.clone(objects);
 *      objects === objectsClone; //=> false
 *      objects[0] === objectsClone[0]; //=> false
 */


var clone = /*#__PURE__*/_curry1(function clone(value) {
  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);
});
module.exports = clone;
},{"./internal/_clone":144,"./internal/_curry1":151}],75:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Makes a comparator function out of a function that reports whether the first
 * element is less than the second.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)
 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
 * is less than the second, `false` otherwise
 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
 * @example
 *
 *      var byAge = R.comparator((a, b) => a.age < b.age);
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByIncreasingAge = R.sort(byAge, people);
 */


var comparator = /*#__PURE__*/_curry1(function comparator(pred) {
  return function (a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});
module.exports = comparator;
},{"./internal/_curry1":151}],76:[function(require,module,exports){
var lift = /*#__PURE__*/require('./lift');

var not = /*#__PURE__*/require('./not');

/**
 * Takes a function `f` and returns a function `g` such that if called with the same arguments
 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
 *
 * `R.complement` may be applied to any functor
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> *) -> (*... -> Boolean)
 * @param {Function} f
 * @return {Function}
 * @see R.not
 * @example
 *
 *      var isNotNil = R.complement(R.isNil);
 *      isNil(null); //=> true
 *      isNotNil(null); //=> false
 *      isNil(7); //=> false
 *      isNotNil(7); //=> true
 */


var complement = /*#__PURE__*/lift(not);
module.exports = complement;
},{"./lift":230,"./not":261}],77:[function(require,module,exports){
var pipe = /*#__PURE__*/require('./pipe');

var reverse = /*#__PURE__*/require('./reverse');

/**
 * Performs right-to-left function composition. The rightmost function may have
 * any arity; the remaining functions must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipe
 * @example
 *
 *      var classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
 *      var yellGreeting = R.compose(R.toUpper, classyGreeting);
 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
 *
 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
 */


function compose() {
  if (arguments.length === 0) {
    throw new Error('compose requires at least one argument');
  }
  return pipe.apply(this, reverse(arguments));
}
module.exports = compose;
},{"./pipe":282,"./reverse":305}],78:[function(require,module,exports){
var chain = /*#__PURE__*/require('./chain');

var compose = /*#__PURE__*/require('./compose');

var map = /*#__PURE__*/require('./map');

/**
 * Returns the right-to-left Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipeK
 * @example
 *
 *       //  get :: String -> Object -> Maybe *
 *       var get = R.curry((propName, obj) => Maybe(obj[propName]))
 *
 *       //  getStateCode :: Maybe String -> Maybe String
 *       var getStateCode = R.composeK(
 *         R.compose(Maybe.of, R.toUpper),
 *         get('state'),
 *         get('address'),
 *         get('user'),
 *       );
 *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
 *       getStateCode({}); //=> Maybe.Nothing()
 * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
 */


function composeK() {
  if (arguments.length === 0) {
    throw new Error('composeK requires at least one argument');
  }
  var init = Array.prototype.slice.call(arguments);
  var last = init.pop();
  return compose(compose.apply(this, map(chain, init)), last);
}
module.exports = composeK;
},{"./chain":72,"./compose":77,"./map":234}],79:[function(require,module,exports){
var pipeP = /*#__PURE__*/require('./pipeP');

var reverse = /*#__PURE__*/require('./reverse');

/**
 * Performs right-to-left composition of one or more Promise-returning
 * functions. The rightmost function may have any arity; the remaining
 * functions must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
 * @param {...Function} functions The functions to compose
 * @return {Function}
 * @see R.pipeP
 * @example
 *
 *      var db = {
 *        users: {
 *          JOE: {
 *            name: 'Joe',
 *            followers: ['STEVE', 'SUZY']
 *          }
 *        }
 *      }
 *
 *      // We'll pretend to do a db lookup which returns a promise
 *      var lookupUser = (userId) => Promise.resolve(db.users[userId])
 *      var lookupFollowers = (user) => Promise.resolve(user.followers)
 *      lookupUser('JOE').then(lookupFollowers)
 *
 *      //  followersForUser :: String -> Promise [UserId]
 *      var followersForUser = R.composeP(lookupFollowers, lookupUser);
 *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
 *      // Followers: ["STEVE","SUZY"]
 */


function composeP() {
  if (arguments.length === 0) {
    throw new Error('composeP requires at least one argument');
  }
  return pipeP.apply(this, reverse(arguments));
}
module.exports = composeP;
},{"./pipeP":284,"./reverse":305}],80:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isArray = /*#__PURE__*/require('./internal/_isArray');

var _isFunction = /*#__PURE__*/require('./internal/_isFunction');

var _isString = /*#__PURE__*/require('./internal/_isString');

var toString = /*#__PURE__*/require('./toString');

/**
 * Returns the result of concatenating the given lists or strings.
 *
 * Note: `R.concat` expects both arguments to be of the same type,
 * unlike the native `Array.prototype.concat` method. It will throw
 * an error if you `concat` an Array with a non-Array value.
 *
 * Dispatches to the `concat` method of the first argument, if present.
 * Can also concatenate two members of a [fantasy-land
 * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @sig String -> String -> String
 * @param {Array|String} firstList The first list
 * @param {Array|String} secondList The second list
 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
 * `secondList`.
 *
 * @example
 *
 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 *      R.concat([], []); //=> []
 */


var concat = /*#__PURE__*/_curry2(function concat(a, b) {
  if (_isArray(a)) {
    if (_isArray(b)) {
      return a.concat(b);
    }
    throw new TypeError(toString(b) + ' is not an array');
  }
  if (_isString(a)) {
    if (_isString(b)) {
      return a + b;
    }
    throw new TypeError(toString(b) + ' is not a string');
  }
  if (a != null && _isFunction(a['fantasy-land/concat'])) {
    return a['fantasy-land/concat'](b);
  }
  if (a != null && _isFunction(a.concat)) {
    return a.concat(b);
  }
  throw new TypeError(toString(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
});
module.exports = concat;
},{"./internal/_curry2":152,"./internal/_isArray":167,"./internal/_isFunction":169,"./internal/_isString":175,"./toString":333}],81:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var map = /*#__PURE__*/require('./map');

var max = /*#__PURE__*/require('./max');

var reduce = /*#__PURE__*/require('./reduce');

/**
 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
 * to `fn` are applied to each of the predicates in turn until one returns a
 * "truthy" value, at which point `fn` returns the result of applying its
 * arguments to the corresponding transformer. If none of the predicates
 * matches, `fn` returns undefined.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Logic
 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
 * @param {Array} pairs A list of [predicate, transformer]
 * @return {Function}
 * @example
 *
 *      var fn = R.cond([
 *        [R.equals(0),   R.always('water freezes at 0°C')],
 *        [R.equals(100), R.always('water boils at 100°C')],
 *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
 *      ]);
 *      fn(0); //=> 'water freezes at 0°C'
 *      fn(50); //=> 'nothing special happens at 50°C'
 *      fn(100); //=> 'water boils at 100°C'
 */


var cond = /*#__PURE__*/_curry1(function cond(pairs) {
  var arity = reduce(max, 0, map(function (pair) {
    return pair[0].length;
  }, pairs));
  return _arity(arity, function () {
    var idx = 0;
    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }
      idx += 1;
    }
  });
});
module.exports = cond;
},{"./internal/_arity":140,"./internal/_curry1":151,"./map":234,"./max":240,"./reduce":296}],82:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var constructN = /*#__PURE__*/require('./constructN');

/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> {*}) -> (* -> {*})
 * @param {Function} fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @see R.invoker
 * @example
 *
 *      // Constructor function
 *      function Animal(kind) {
 *        this.kind = kind;
 *      };
 *      Animal.prototype.sighting = function() {
 *        return "It's a " + this.kind + "!";
 *      }
 *
 *      var AnimalConstructor = R.construct(Animal)
 *
 *      // Notice we no longer need the 'new' keyword:
 *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
 *
 *      var animalTypes = ["Lion", "Tiger", "Bear"];
 *      var animalSighting = R.invoker(0, 'sighting');
 *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
 *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
 */


var construct = /*#__PURE__*/_curry1(function construct(Fn) {
  return constructN(Fn.length, Fn);
});
module.exports = construct;
},{"./constructN":83,"./internal/_curry1":151}],83:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var curry = /*#__PURE__*/require('./curry');

var nAry = /*#__PURE__*/require('./nAry');

/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type. The arity of the function
 * returned is specified to allow using variadic constructor functions.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Function
 * @sig Number -> (* -> {*}) -> (* -> {*})
 * @param {Number} n The arity of the constructor function.
 * @param {Function} Fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Variadic Constructor function
 *      function Salad() {
 *        this.ingredients = arguments;
 *      }
 *
 *      Salad.prototype.recipe = function() {
 *        var instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);
 *        return R.join('\n', instructions);
 *      };
 *
 *      var ThreeLayerSalad = R.constructN(3, Salad);
 *
 *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
 *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');
 *
 *      console.log(salad.recipe());
 *      // Add a dollop of Mayonnaise
 *      // Add a dollop of Potato Chips
 *      // Add a dollop of Ketchup
 */


var constructN = /*#__PURE__*/_curry2(function constructN(n, Fn) {
  if (n > 10) {
    throw new Error('Constructor with greater than ten arguments');
  }
  if (n === 0) {
    return function () {
      return new Fn();
    };
  }
  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
    switch (arguments.length) {
      case 1:
        return new Fn($0);
      case 2:
        return new Fn($0, $1);
      case 3:
        return new Fn($0, $1, $2);
      case 4:
        return new Fn($0, $1, $2, $3);
      case 5:
        return new Fn($0, $1, $2, $3, $4);
      case 6:
        return new Fn($0, $1, $2, $3, $4, $5);
      case 7:
        return new Fn($0, $1, $2, $3, $4, $5, $6);
      case 8:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
      case 9:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
      case 10:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
    }
  }));
});
module.exports = constructN;
},{"./curry":87,"./internal/_curry2":152,"./nAry":258}],84:[function(require,module,exports){
var _contains = /*#__PURE__*/require('./internal/_contains');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
 * terms, to at least one element of the given list; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.any
 * @example
 *
 *      R.contains(3, [1, 2, 3]); //=> true
 *      R.contains(4, [1, 2, 3]); //=> false
 *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.contains([42], [[42]]); //=> true
 */


var contains = /*#__PURE__*/_curry2(_contains);
module.exports = contains;
},{"./internal/_contains":148,"./internal/_curry2":152}],85:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _map = /*#__PURE__*/require('./internal/_map');

var curryN = /*#__PURE__*/require('./curryN');

var max = /*#__PURE__*/require('./max');

var pluck = /*#__PURE__*/require('./pluck');

var reduce = /*#__PURE__*/require('./reduce');

/**
 * Accepts a converging function and a list of branching functions and returns
 * a new function. When invoked, this new function is applied to some
 * arguments, each branching function is applied to those same arguments. The
 * results of each branching function are passed as arguments to the converging
 * function to produce the return value.
 *
 * @func
 * @memberOf R
 * @since v0.4.2
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} after A function. `after` will be invoked with the return values of
 *        `fn1` and `fn2` as its arguments.
 * @param {Array} functions A list of functions.
 * @return {Function} A new function.
 * @see R.useWith
 * @example
 *
 *      var average = R.converge(R.divide, [R.sum, R.length])
 *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
 *
 *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
 *      strangeConcat("Yodel") //=> "YODELyodel"
 *
 * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
 */


var converge = /*#__PURE__*/_curry2(function converge(after, fns) {
  return curryN(reduce(max, 0, pluck('length', fns)), function () {
    var args = arguments;
    var context = this;
    return after.apply(context, _map(function (fn) {
      return fn.apply(context, args);
    }, fns));
  });
});
module.exports = converge;
},{"./curryN":88,"./internal/_curry2":152,"./internal/_map":178,"./max":240,"./pluck":285,"./reduce":296}],86:[function(require,module,exports){
var reduceBy = /*#__PURE__*/require('./reduceBy');

/**
 * Counts the elements of a list according to how many match each value of a
 * key generated by the supplied function. Returns an object mapping the keys
 * produced by `fn` to the number of occurrences in the list. Note that all
 * keys are coerced to strings because of how JavaScript objects work.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> String) -> [a] -> {*}
 * @param {Function} fn The function used to map values to keys.
 * @param {Array} list The list to count elements from.
 * @return {Object} An object mapping keys to number of occurrences in the list.
 * @example
 *
 *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
 *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
 *
 *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];
 *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
 */


var countBy = /*#__PURE__*/reduceBy(function (acc, elem) {
  return acc + 1;
}, 0);
module.exports = countBy;
},{"./reduceBy":297}],87:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var curryN = /*#__PURE__*/require('./curryN');

/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN
 * @example
 *
 *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      var curriedAddFourNumbers = R.curry(addFourNumbers);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */


var curry = /*#__PURE__*/_curry1(function curry(fn) {
  return curryN(fn.length, fn);
});
module.exports = curry;
},{"./curryN":88,"./internal/_curry1":151}],88:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _curryN = /*#__PURE__*/require('./internal/_curryN');

/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      var sumArgs = (...args) => R.sum(args);
 *
 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */


var curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }
  return _arity(length, _curryN(length, [], fn));
});
module.exports = curryN;
},{"./internal/_arity":140,"./internal/_curry1":151,"./internal/_curry2":152,"./internal/_curryN":154}],89:[function(require,module,exports){
var add = /*#__PURE__*/require('./add');

/**
 * Decrements its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n - 1
 * @see R.inc
 * @example
 *
 *      R.dec(42); //=> 41
 */


var dec = /*#__PURE__*/add(-1);
module.exports = dec;
},{"./add":50}],90:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`;
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      var defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */


var defaultTo = /*#__PURE__*/_curry2(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});
module.exports = defaultTo;
},{"./internal/_curry2":152}],91:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Makes a descending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
 * @see R.ascend
 * @example
 *
 *      var byAge = R.descend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByOldestFirst = R.sort(byAge, people);
 */


var descend = /*#__PURE__*/_curry3(function descend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa > bb ? -1 : aa < bb ? 1 : 0;
});
module.exports = descend;
},{"./internal/_curry3":153}],92:[function(require,module,exports){
var _contains = /*#__PURE__*/require('./internal/_contains');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Objects and Arrays are compared in terms of
 * value equality, not reference equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without
 * @example
 *
 *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
 *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
 *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
 */


var difference = /*#__PURE__*/_curry2(function difference(first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
      out[out.length] = first[idx];
    }
    idx += 1;
  }
  return out;
});
module.exports = difference;
},{"./internal/_contains":148,"./internal/_curry2":152}],93:[function(require,module,exports){
var _containsWith = /*#__PURE__*/require('./internal/_containsWith');

var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      var cmp = (x, y) => x.a === y.a;
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
 *      var l2 = [{a: 3}, {a: 4}];
 *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
 */


var differenceWith = /*#__PURE__*/_curry3(function differenceWith(pred, first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {
      out.push(first[idx]);
    }
    idx += 1;
  }
  return out;
});
module.exports = differenceWith;
},{"./internal/_containsWith":149,"./internal/_curry3":153}],94:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a new object that does not contain a `prop` property.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Object
 * @sig String -> {k: v} -> {k: v}
 * @param {String} prop The name of the property to dissociate
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original but without the specified property
 * @see R.assoc
 * @example
 *
 *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
 */


var dissoc = /*#__PURE__*/_curry2(function dissoc(prop, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  delete result[prop];
  return result;
});
module.exports = dissoc;
},{"./internal/_curry2":152}],95:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isInteger = /*#__PURE__*/require('./internal/_isInteger');

var assoc = /*#__PURE__*/require('./assoc');

var dissoc = /*#__PURE__*/require('./dissoc');

var remove = /*#__PURE__*/require('./remove');

var update = /*#__PURE__*/require('./update');

/**
 * Makes a shallow clone of an object, omitting the property at the given path.
 * Note that this copies and flattens prototype properties onto the new object
 * as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.11.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {k: v} -> {k: v}
 * @param {Array} path The path to the value to omit
 * @param {Object} obj The object to clone
 * @return {Object} A new object without the property at path
 * @see R.assocPath
 * @example
 *
 *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
 */


var dissocPath = /*#__PURE__*/_curry2(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;
    case 1:
      return _isInteger(path[0]) ? remove(path[0], 1, obj) : dissoc(path[0], obj);
    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);
      if (obj[head] == null) {
        return obj;
      } else if (_isInteger(path[0])) {
        return update(head, dissocPath(tail, obj[head]), obj);
      } else {
        return assoc(head, dissocPath(tail, obj[head]), obj);
      }
  }
});
module.exports = dissocPath;
},{"./assoc":66,"./dissoc":94,"./internal/_curry2":152,"./internal/_isInteger":170,"./remove":302,"./update":353}],96:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Divides two numbers. Equivalent to `a / b`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a / b`.
 * @see R.multiply
 * @example
 *
 *      R.divide(71, 100); //=> 0.71
 *
 *      var half = R.divide(R.__, 2);
 *      half(42); //=> 21
 *
 *      var reciprocal = R.divide(1);
 *      reciprocal(4);   //=> 0.25
 */


var divide = /*#__PURE__*/_curry2(function divide(a, b) {
  return a / b;
});
module.exports = divide;
},{"./internal/_curry2":152}],97:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xdrop = /*#__PURE__*/require('./internal/_xdrop');

var slice = /*#__PURE__*/require('./slice');

/**
 * Returns all but the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `drop` method).
 *
 * Dispatches to the `drop` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*} A copy of list without the first `n` elements
 * @see R.take, R.transduce, R.dropLast, R.dropWhile
 * @example
 *
 *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(3, 'ramda');               //=> 'da'
 */


var drop = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['drop'], _xdrop, function drop(n, xs) {
  return slice(Math.max(0, n), Infinity, xs);
}));
module.exports = drop;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xdrop":193,"./slice":309}],98:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _dropLast = /*#__PURE__*/require('./internal/_dropLast');

var _xdropLast = /*#__PURE__*/require('./internal/_xdropLast');

/**
 * Returns a list containing all but the last `n` elements of the given `list`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements of `list` to skip.
 * @param {Array} list The list of elements to consider.
 * @return {Array} A copy of the list with only the first `list.length - n` elements
 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
 * @example
 *
 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(3, 'ramda');               //=> 'ra'
 */


var dropLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLast, _dropLast));
module.exports = dropLast;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_dropLast":156,"./internal/_xdropLast":194}],99:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _dropLastWhile = /*#__PURE__*/require('./internal/_dropLastWhile');

var _xdropLastWhile = /*#__PURE__*/require('./internal/_xdropLastWhile');

/**
 * Returns a new list excluding all the tailing elements of a given list which
 * satisfy the supplied predicate function. It passes each value from the right
 * to the supplied predicate function, skipping elements until the predicate
 * function returns a `falsy` value. The predicate function is applied to one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} predicate The function to be called on each element
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
 * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
 * @example
 *
 *      var lteThree = x => x <= 3;
 *
 *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
 *
 *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'
 */


var dropLastWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLastWhile, _dropLastWhile));
module.exports = dropLastWhile;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_dropLastWhile":157,"./internal/_xdropLastWhile":195}],100:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xdropRepeatsWith = /*#__PURE__*/require('./internal/_xdropRepeatsWith');

var dropRepeatsWith = /*#__PURE__*/require('./dropRepeatsWith');

var equals = /*#__PURE__*/require('./equals');

/**
 * Returns a new list without any consecutively repeating elements.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
 */


var dropRepeats = /*#__PURE__*/_curry1( /*#__PURE__*/_dispatchable([], /*#__PURE__*/_xdropRepeatsWith(equals), /*#__PURE__*/dropRepeatsWith(equals)));
module.exports = dropRepeats;
},{"./dropRepeatsWith":101,"./equals":108,"./internal/_curry1":151,"./internal/_dispatchable":155,"./internal/_xdropRepeatsWith":196}],101:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xdropRepeatsWith = /*#__PURE__*/require('./internal/_xdropRepeatsWith');

var last = /*#__PURE__*/require('./last');

/**
 * Returns a new list without any consecutively repeating elements. Equality is
 * determined by applying the supplied predicate to each pair of consecutive elements. The
 * first element in a series of equal elements will be preserved.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
 *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
 */


var dropRepeatsWith = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
  var result = [];
  var idx = 1;
  var len = list.length;
  if (len !== 0) {
    result[0] = list[0];
    while (idx < len) {
      if (!pred(last(result), list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
  }
  return result;
}));
module.exports = dropRepeatsWith;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xdropRepeatsWith":196,"./last":223}],102:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xdropWhile = /*#__PURE__*/require('./internal/_xdropWhile');

var slice = /*#__PURE__*/require('./slice');

/**
 * Returns a new list excluding the leading elements of a given list which
 * satisfy the supplied predicate function. It passes each value to the supplied
 * predicate function, skipping elements while the predicate function returns
 * `true`. The predicate function is applied to one argument: *(value)*.
 *
 * Dispatches to the `dropWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.takeWhile, R.transduce, R.addIndex
 * @example
 *
 *      var lteTwo = x => x <= 2;
 *
 *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
 *
 *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'
 */


var dropWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && pred(xs[idx])) {
    idx += 1;
  }
  return slice(idx, Infinity, xs);
}));
module.exports = dropWhile;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xdropWhile":197,"./slice":309}],103:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isFunction = /*#__PURE__*/require('./internal/_isFunction');

var lift = /*#__PURE__*/require('./lift');

var or = /*#__PURE__*/require('./or');

/**
 * A function wrapping calls to the two functions in an `||` operation,
 * returning the result of the first function if it is truth-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * truth-y value.
 *
 * In addition to functions, `R.either` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f a predicate
 * @param {Function} g another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
 * @see R.or
 * @example
 *
 *      var gt10 = x => x > 10;
 *      var even = x => x % 2 === 0;
 *      var f = R.either(gt10, even);
 *      f(101); //=> true
 *      f(8); //=> true
 */


var either = /*#__PURE__*/_curry2(function either(f, g) {
  return _isFunction(f) ? function _either() {
    return f.apply(this, arguments) || g.apply(this, arguments);
  } : lift(or)(f, g);
});
module.exports = either;
},{"./internal/_curry2":152,"./internal/_isFunction":169,"./lift":230,"./or":269}],104:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _isArguments = /*#__PURE__*/require('./internal/_isArguments');

var _isArray = /*#__PURE__*/require('./internal/_isArray');

var _isObject = /*#__PURE__*/require('./internal/_isObject');

var _isString = /*#__PURE__*/require('./internal/_isString');

/**
 * Returns the empty value of its argument's type. Ramda defines the empty
 * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
 * types are supported if they define `<Type>.empty`,
 * `<Type>.prototype.empty` or implement the
 * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).
 *
 * Dispatches to the `empty` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> a
 * @param {*} x
 * @return {*}
 * @example
 *
 *      R.empty(Just(42));      //=> Nothing()
 *      R.empty([1, 2, 3]);     //=> []
 *      R.empty('unicorns');    //=> ''
 *      R.empty({x: 1, y: 2});  //=> {}
 */


var empty = /*#__PURE__*/_curry1(function empty(x) {
  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
    return arguments;
  }() :
  // else
  void 0;
});
module.exports = empty;
},{"./internal/_curry1":151,"./internal/_isArguments":166,"./internal/_isArray":167,"./internal/_isObject":172,"./internal/_isString":175}],105:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var equals = /*#__PURE__*/require('./equals');

var takeLast = /*#__PURE__*/require('./takeLast');

/**
 * Checks if a list ends with the provided values
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> Boolean
 * @sig String -> Boolean
 * @param {*} suffix
 * @param {*} list
 * @return {Boolean}
 * @example
 *
 *      R.endsWith('c', 'abc')                //=> true
 *      R.endsWith('b', 'abc')                //=> false
 *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true
 *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false
 */


var endsWith = /*#__PURE__*/_curry2(function (suffix, list) {
  return equals(takeLast(suffix.length, list), suffix);
});
module.exports = endsWith;
},{"./equals":108,"./internal/_curry2":152,"./takeLast":324}],106:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var equals = /*#__PURE__*/require('./equals');

/**
 * Takes a function and two values in its domain and returns `true` if the
 * values map to the same value in the codomain; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Relation
 * @sig (a -> b) -> a -> a -> Boolean
 * @param {Function} f
 * @param {*} x
 * @param {*} y
 * @return {Boolean}
 * @example
 *
 *      R.eqBy(Math.abs, 5, -5); //=> true
 */


var eqBy = /*#__PURE__*/_curry3(function eqBy(f, x, y) {
  return equals(f(x), f(y));
});
module.exports = eqBy;
},{"./equals":108,"./internal/_curry3":153}],107:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var equals = /*#__PURE__*/require('./equals');

/**
 * Reports whether two objects have the same value, in [`R.equals`](#equals)
 * terms, for the specified property. Useful as a curried predicate.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig k -> {k: v} -> {k: v} -> Boolean
 * @param {String} prop The name of the property to compare
 * @param {Object} obj1
 * @param {Object} obj2
 * @return {Boolean}
 *
 * @example
 *
 *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
 *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
 *      R.eqProps('a', o1, o2); //=> false
 *      R.eqProps('c', o1, o2); //=> true
 */


var eqProps = /*#__PURE__*/_curry3(function eqProps(prop, obj1, obj2) {
  return equals(obj1[prop], obj2[prop]);
});
module.exports = eqProps;
},{"./equals":108,"./internal/_curry3":153}],108:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _equals = /*#__PURE__*/require('./internal/_equals');

/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      var a = {}; a.v = a;
 *      var b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */


var equals = /*#__PURE__*/_curry2(function equals(a, b) {
  return _equals(a, b, [], []);
});
module.exports = equals;
},{"./internal/_curry2":152,"./internal/_equals":158}],109:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Creates a new object by recursively evolving a shallow copy of `object`,
 * according to the `transformation` functions. All non-primitive properties
 * are copied by reference.
 *
 * A `transformation` function will not be invoked if its corresponding key
 * does not exist in the evolved object.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {k: (v -> v)} -> {k: v} -> {k: v}
 * @param {Object} transformations The object specifying transformation functions to apply
 *        to the object.
 * @param {Object} object The object to be transformed.
 * @return {Object} The transformed object.
 * @example
 *
 *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
 *      var transformations = {
 *        firstName: R.trim,
 *        lastName: R.trim, // Will not get invoked.
 *        data: {elapsed: R.add(1), remaining: R.add(-1)}
 *      };
 *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
 */


var evolve = /*#__PURE__*/_curry2(function evolve(transformations, object) {
  var result = {};
  var transformation, key, type;
  for (key in object) {
    transformation = transformations[key];
    type = typeof transformation;
    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];
  }
  return result;
});
module.exports = evolve;
},{"./internal/_curry2":152}],110:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _filter = /*#__PURE__*/require('./internal/_filter');

var _isObject = /*#__PURE__*/require('./internal/_isObject');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var _xfilter = /*#__PURE__*/require('./internal/_xfilter');

var keys = /*#__PURE__*/require('./keys');

/**
 * Takes a predicate and a `Filterable`, and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array} Filterable
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */


var filter = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['filter'], _xfilter, function (pred, filterable) {
  return _isObject(filterable) ? _reduce(function (acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }
    return acc;
  }, {}, keys(filterable)) :
  // else
  _filter(pred, filterable);
}));
module.exports = filter;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_filter":159,"./internal/_isObject":172,"./internal/_reduce":184,"./internal/_xfilter":199,"./keys":221}],111:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xfind = /*#__PURE__*/require('./internal/_xfind');

/**
 * Returns the first element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Dispatches to the `find` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 *        desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
 *      R.find(R.propEq('a', 4))(xs); //=> undefined
 */


var find = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['find'], _xfind, function find(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx += 1;
  }
}));
module.exports = find;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xfind":200}],112:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xfindIndex = /*#__PURE__*/require('./internal/_xfindIndex');

/**
 * Returns the index of the first element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
 */


var findIndex = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindIndex, function findIndex(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}));
module.exports = findIndex;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xfindIndex":201}],113:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xfindLast = /*#__PURE__*/require('./internal/_xfindLast');

/**
 * Returns the last element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
 *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
 */


var findLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindLast, function findLast(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx -= 1;
  }
}));
module.exports = findLast;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xfindLast":202}],114:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xfindLastIndex = /*#__PURE__*/require('./internal/_xfindLastIndex');

/**
 * Returns the index of the last element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
 *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
 */


var findLastIndex = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return idx;
    }
    idx -= 1;
  }
  return -1;
}));
module.exports = findLastIndex;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xfindLastIndex":203}],115:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _makeFlat = /*#__PURE__*/require('./internal/_makeFlat');

/**
 * Returns a new list by pulling every item out of it (and all its sub-arrays)
 * and putting them in a new array, depth-first.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b]
 * @param {Array} list The array to consider.
 * @return {Array} The flattened list.
 * @see R.unnest
 * @example
 *
 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 */


var flatten = /*#__PURE__*/_curry1( /*#__PURE__*/_makeFlat(true));
module.exports = flatten;
},{"./internal/_curry1":151,"./internal/_makeFlat":177}],116:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var curryN = /*#__PURE__*/require('./curryN');

/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      var mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */


var flip = /*#__PURE__*/_curry1(function flip(fn) {
  return curryN(fn.length, function (a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});
module.exports = flip;
},{"./curryN":88,"./internal/_curry1":151}],117:[function(require,module,exports){
var _checkForMethod = /*#__PURE__*/require('./internal/_checkForMethod');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Iterate over an input `list`, calling a provided function `fn` for each
 * element in the list.
 *
 * `fn` receives one argument: *(value)*.
 *
 * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.forEach` method. For more
 * details on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
 *
 * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
 * the original array. In some libraries this function is named `each`.
 *
 * Dispatches to the `forEach` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> *) -> [a] -> [a]
 * @param {Function} fn The function to invoke. Receives one argument, `value`.
 * @param {Array} list The list to iterate over.
 * @return {Array} The original list.
 * @see R.addIndex
 * @example
 *
 *      var printXPlusFive = x => console.log(x + 5);
 *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
 *      // logs 6
 *      // logs 7
 *      // logs 8
 * @symb R.forEach(f, [a, b, c]) = [a, b, c]
 */


var forEach = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('forEach', function forEach(fn, list) {
  var len = list.length;
  var idx = 0;
  while (idx < len) {
    fn(list[idx]);
    idx += 1;
  }
  return list;
}));
module.exports = forEach;
},{"./internal/_checkForMethod":143,"./internal/_curry2":152}],118:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var keys = /*#__PURE__*/require('./keys');

/**
 * Iterate over an input `object`, calling a provided function `fn` for each
 * key and value in the object.
 *
 * `fn` receives three argument: *(value, key, obj)*.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Object
 * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
 * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
 * @param {Object} obj The object to iterate over.
 * @return {Object} The original object.
 * @example
 *
 *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);
 *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
 *      // logs x:1
 *      // logs y:2
 * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
 */


var forEachObjIndexed = /*#__PURE__*/_curry2(function forEachObjIndexed(fn, obj) {
  var keyList = keys(obj);
  var idx = 0;
  while (idx < keyList.length) {
    var key = keyList[idx];
    fn(obj[key], key, obj);
    idx += 1;
  }
  return obj;
});
module.exports = forEachObjIndexed;
},{"./internal/_curry2":152,"./keys":221}],119:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Creates a new object from a list key-value pairs. If a key appears in
 * multiple pairs, the rightmost pair is included in the object.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [[k,v]] -> {k: v}
 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
 * @return {Object} The object made by pairing up `keys` and `values`.
 * @see R.toPairs, R.pair
 * @example
 *
 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
 */


var fromPairs = /*#__PURE__*/_curry1(function fromPairs(pairs) {
  var result = {};
  var idx = 0;
  while (idx < pairs.length) {
    result[pairs[idx][0]] = pairs[idx][1];
    idx += 1;
  }
  return result;
});
module.exports = fromPairs;
},{"./internal/_curry1":151}],120:[function(require,module,exports){
var _checkForMethod = /*#__PURE__*/require('./internal/_checkForMethod');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var reduceBy = /*#__PURE__*/require('./reduceBy');

/**
 * Splits a list into sub-lists stored in an object, based on the result of
 * calling a String-returning function on each element, and grouping the
 * results according to values returned.
 *
 * Dispatches to the `groupBy` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> String) -> [a] -> {String: [a]}
 * @param {Function} fn Function :: a -> String
 * @param {Array} list The array to group
 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
 *         that produced that key when passed to `fn`.
 * @see R.transduce
 * @example
 *
 *      var byGrade = R.groupBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Abby', score: 84},
 *                      {name: 'Eddy', score: 58},
 *                      // ...
 *                      {name: 'Jack', score: 69}];
 *      byGrade(students);
 *      // {
 *      //   'A': [{name: 'Dianne', score: 99}],
 *      //   'B': [{name: 'Abby', score: 84}]
 *      //   // ...,
 *      //   'F': [{name: 'Eddy', score: 58}]
 *      // }
 */


var groupBy = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('groupBy', /*#__PURE__*/reduceBy(function (acc, item) {
  if (acc == null) {
    acc = [];
  }
  acc.push(item);
  return acc;
}, null)));
module.exports = groupBy;
},{"./internal/_checkForMethod":143,"./internal/_curry2":152,"./reduceBy":297}],121:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Takes a list and returns a list of lists where each sublist's elements are
 * all satisfied pairwise comparison according to the provided function.
 * Only adjacent elements are passed to the comparison function.
 *
 * @func
 * @memberOf R
 * @since v0.21.0
 * @category List
 * @sig ((a, a) → Boolean) → [a] → [[a]]
 * @param {Function} fn Function for determining whether two given (adjacent)
 *        elements should be in the same group
 * @param {Array} list The array to group. Also accepts a string, which will be
 *        treated as a list of characters.
 * @return {List} A list that contains sublists of elements,
 *         whose concatenations are equal to the original list.
 * @example
 *
 * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
 *
 * R.groupWith(R.eqBy(isVowel), 'aestiou')
 * //=> ['ae', 'st', 'iou']
 */


var groupWith = /*#__PURE__*/_curry2(function (fn, list) {
  var res = [];
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    var nextidx = idx + 1;
    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
      nextidx += 1;
    }
    res.push(list.slice(idx, nextidx));
    idx = nextidx;
  }
  return res;
});
module.exports = groupWith;
},{"./internal/_curry2":152}],122:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns `true` if the first argument is greater than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.lt
 * @example
 *
 *      R.gt(2, 1); //=> true
 *      R.gt(2, 2); //=> false
 *      R.gt(2, 3); //=> false
 *      R.gt('a', 'z'); //=> false
 *      R.gt('z', 'a'); //=> true
 */


var gt = /*#__PURE__*/_curry2(function gt(a, b) {
  return a > b;
});
module.exports = gt;
},{"./internal/_curry2":152}],123:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns `true` if the first argument is greater than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.lte
 * @example
 *
 *      R.gte(2, 1); //=> true
 *      R.gte(2, 2); //=> true
 *      R.gte(2, 3); //=> false
 *      R.gte('a', 'z'); //=> false
 *      R.gte('z', 'a'); //=> true
 */


var gte = /*#__PURE__*/_curry2(function gte(a, b) {
  return a >= b;
});
module.exports = gte;
},{"./internal/_curry2":152}],124:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _has = /*#__PURE__*/require('./internal/_has');

/**
 * Returns whether or not an object has an own property with the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      var hasName = R.has('name');
 *      hasName({name: 'alice'});   //=> true
 *      hasName({name: 'bob'});     //=> true
 *      hasName({});                //=> false
 *
 *      var point = {x: 0, y: 0};
 *      var pointHas = R.has(R.__, point);
 *      pointHas('x');  //=> true
 *      pointHas('y');  //=> true
 *      pointHas('z');  //=> false
 */


var has = /*#__PURE__*/_curry2(_has);
module.exports = has;
},{"./internal/_curry2":152,"./internal/_has":163}],125:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns whether or not an object or its prototype chain has a property with
 * the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      function Rectangle(width, height) {
 *        this.width = width;
 *        this.height = height;
 *      }
 *      Rectangle.prototype.area = function() {
 *        return this.width * this.height;
 *      };
 *
 *      var square = new Rectangle(2, 2);
 *      R.hasIn('width', square);  //=> true
 *      R.hasIn('area', square);  //=> true
 */


var hasIn = /*#__PURE__*/_curry2(function hasIn(prop, obj) {
  return prop in obj;
});
module.exports = hasIn;
},{"./internal/_curry2":152}],126:[function(require,module,exports){
var nth = /*#__PURE__*/require('./nth');

/**
 * Returns the first element of the given list or string. In some libraries
 * this function is named `first`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {Array|String} list
 * @return {*}
 * @see R.tail, R.init, R.last
 * @example
 *
 *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
 *      R.head([]); //=> undefined
 *
 *      R.head('abc'); //=> 'a'
 *      R.head(''); //=> ''
 */


var head = /*#__PURE__*/nth(0);
module.exports = head;
},{"./nth":262}],127:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns true if its arguments are identical, false otherwise. Values are
 * identical if they reference the same memory. `NaN` is identical to `NaN`;
 * `0` and `-0` are not identical.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      var o = {};
 *      R.identical(o, o); //=> true
 *      R.identical(1, 1); //=> true
 *      R.identical(1, '1'); //=> false
 *      R.identical([], []); //=> false
 *      R.identical(0, -0); //=> false
 *      R.identical(NaN, NaN); //=> true
 */


var identical = /*#__PURE__*/_curry2(function identical(a, b) {
  // SameValue algorithm
  if (a === b) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
});
module.exports = identical;
},{"./internal/_curry2":152}],128:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _identity = /*#__PURE__*/require('./internal/_identity');

/**
 * A function that does nothing but return the parameter supplied to it. Good
 * as a default or placeholder function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> a
 * @param {*} x The value to return.
 * @return {*} The input value, `x`.
 * @example
 *
 *      R.identity(1); //=> 1
 *
 *      var obj = {};
 *      R.identity(obj) === obj; //=> true
 * @symb R.identity(a) = a
 */


var identity = /*#__PURE__*/_curry1(_identity);
module.exports = identity;
},{"./internal/_curry1":151,"./internal/_identity":164}],129:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var curryN = /*#__PURE__*/require('./curryN');

/**
 * Creates a function that will process either the `onTrue` or the `onFalse`
 * function depending upon the result of the `condition` predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
 * @param {Function} condition A predicate function
 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
 * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
 *                    function depending upon the result of the `condition` predicate.
 * @see R.unless, R.when
 * @example
 *
 *      var incCount = R.ifElse(
 *        R.has('count'),
 *        R.over(R.lensProp('count'), R.inc),
 *        R.assoc('count', 1)
 *      );
 *      incCount({});           //=> { count: 1 }
 *      incCount({ count: 1 }); //=> { count: 2 }
 */


var ifElse = /*#__PURE__*/_curry3(function ifElse(condition, onTrue, onFalse) {
  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});
module.exports = ifElse;
},{"./curryN":88,"./internal/_curry3":153}],130:[function(require,module,exports){
var add = /*#__PURE__*/require('./add');

/**
 * Increments its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n + 1
 * @see R.dec
 * @example
 *
 *      R.inc(42); //=> 43
 */


var inc = /*#__PURE__*/add(1);
module.exports = inc;
},{"./add":50}],131:[function(require,module,exports){
module.exports = {};
module.exports.F = /*#__PURE__*/require('./F');
module.exports.T = /*#__PURE__*/require('./T');
module.exports.__ = /*#__PURE__*/require('./__');
module.exports.add = /*#__PURE__*/require('./add');
module.exports.addIndex = /*#__PURE__*/require('./addIndex');
module.exports.adjust = /*#__PURE__*/require('./adjust');
module.exports.all = /*#__PURE__*/require('./all');
module.exports.allPass = /*#__PURE__*/require('./allPass');
module.exports.always = /*#__PURE__*/require('./always');
module.exports.and = /*#__PURE__*/require('./and');
module.exports.any = /*#__PURE__*/require('./any');
module.exports.anyPass = /*#__PURE__*/require('./anyPass');
module.exports.ap = /*#__PURE__*/require('./ap');
module.exports.aperture = /*#__PURE__*/require('./aperture');
module.exports.append = /*#__PURE__*/require('./append');
module.exports.apply = /*#__PURE__*/require('./apply');
module.exports.applySpec = /*#__PURE__*/require('./applySpec');
module.exports.applyTo = /*#__PURE__*/require('./applyTo');
module.exports.ascend = /*#__PURE__*/require('./ascend');
module.exports.assoc = /*#__PURE__*/require('./assoc');
module.exports.assocPath = /*#__PURE__*/require('./assocPath');
module.exports.binary = /*#__PURE__*/require('./binary');
module.exports.bind = /*#__PURE__*/require('./bind');
module.exports.both = /*#__PURE__*/require('./both');
module.exports.call = /*#__PURE__*/require('./call');
module.exports.chain = /*#__PURE__*/require('./chain');
module.exports.clamp = /*#__PURE__*/require('./clamp');
module.exports.clone = /*#__PURE__*/require('./clone');
module.exports.comparator = /*#__PURE__*/require('./comparator');
module.exports.complement = /*#__PURE__*/require('./complement');
module.exports.compose = /*#__PURE__*/require('./compose');
module.exports.composeK = /*#__PURE__*/require('./composeK');
module.exports.composeP = /*#__PURE__*/require('./composeP');
module.exports.concat = /*#__PURE__*/require('./concat');
module.exports.cond = /*#__PURE__*/require('./cond');
module.exports.construct = /*#__PURE__*/require('./construct');
module.exports.constructN = /*#__PURE__*/require('./constructN');
module.exports.contains = /*#__PURE__*/require('./contains');
module.exports.converge = /*#__PURE__*/require('./converge');
module.exports.countBy = /*#__PURE__*/require('./countBy');
module.exports.curry = /*#__PURE__*/require('./curry');
module.exports.curryN = /*#__PURE__*/require('./curryN');
module.exports.dec = /*#__PURE__*/require('./dec');
module.exports.defaultTo = /*#__PURE__*/require('./defaultTo');
module.exports.descend = /*#__PURE__*/require('./descend');
module.exports.difference = /*#__PURE__*/require('./difference');
module.exports.differenceWith = /*#__PURE__*/require('./differenceWith');
module.exports.dissoc = /*#__PURE__*/require('./dissoc');
module.exports.dissocPath = /*#__PURE__*/require('./dissocPath');
module.exports.divide = /*#__PURE__*/require('./divide');
module.exports.drop = /*#__PURE__*/require('./drop');
module.exports.dropLast = /*#__PURE__*/require('./dropLast');
module.exports.dropLastWhile = /*#__PURE__*/require('./dropLastWhile');
module.exports.dropRepeats = /*#__PURE__*/require('./dropRepeats');
module.exports.dropRepeatsWith = /*#__PURE__*/require('./dropRepeatsWith');
module.exports.dropWhile = /*#__PURE__*/require('./dropWhile');
module.exports.either = /*#__PURE__*/require('./either');
module.exports.empty = /*#__PURE__*/require('./empty');
module.exports.endsWith = /*#__PURE__*/require('./endsWith');
module.exports.eqBy = /*#__PURE__*/require('./eqBy');
module.exports.eqProps = /*#__PURE__*/require('./eqProps');
module.exports.equals = /*#__PURE__*/require('./equals');
module.exports.evolve = /*#__PURE__*/require('./evolve');
module.exports.filter = /*#__PURE__*/require('./filter');
module.exports.find = /*#__PURE__*/require('./find');
module.exports.findIndex = /*#__PURE__*/require('./findIndex');
module.exports.findLast = /*#__PURE__*/require('./findLast');
module.exports.findLastIndex = /*#__PURE__*/require('./findLastIndex');
module.exports.flatten = /*#__PURE__*/require('./flatten');
module.exports.flip = /*#__PURE__*/require('./flip');
module.exports.forEach = /*#__PURE__*/require('./forEach');
module.exports.forEachObjIndexed = /*#__PURE__*/require('./forEachObjIndexed');
module.exports.fromPairs = /*#__PURE__*/require('./fromPairs');
module.exports.groupBy = /*#__PURE__*/require('./groupBy');
module.exports.groupWith = /*#__PURE__*/require('./groupWith');
module.exports.gt = /*#__PURE__*/require('./gt');
module.exports.gte = /*#__PURE__*/require('./gte');
module.exports.has = /*#__PURE__*/require('./has');
module.exports.hasIn = /*#__PURE__*/require('./hasIn');
module.exports.head = /*#__PURE__*/require('./head');
module.exports.identical = /*#__PURE__*/require('./identical');
module.exports.identity = /*#__PURE__*/require('./identity');
module.exports.ifElse = /*#__PURE__*/require('./ifElse');
module.exports.inc = /*#__PURE__*/require('./inc');
module.exports.indexBy = /*#__PURE__*/require('./indexBy');
module.exports.indexOf = /*#__PURE__*/require('./indexOf');
module.exports.init = /*#__PURE__*/require('./init');
module.exports.innerJoin = /*#__PURE__*/require('./innerJoin');
module.exports.insert = /*#__PURE__*/require('./insert');
module.exports.insertAll = /*#__PURE__*/require('./insertAll');
module.exports.intersection = /*#__PURE__*/require('./intersection');
module.exports.intersperse = /*#__PURE__*/require('./intersperse');
module.exports.into = /*#__PURE__*/require('./into');
module.exports.invert = /*#__PURE__*/require('./invert');
module.exports.invertObj = /*#__PURE__*/require('./invertObj');
module.exports.invoker = /*#__PURE__*/require('./invoker');
module.exports.is = /*#__PURE__*/require('./is');
module.exports.isEmpty = /*#__PURE__*/require('./isEmpty');
module.exports.isNil = /*#__PURE__*/require('./isNil');
module.exports.join = /*#__PURE__*/require('./join');
module.exports.juxt = /*#__PURE__*/require('./juxt');
module.exports.keys = /*#__PURE__*/require('./keys');
module.exports.keysIn = /*#__PURE__*/require('./keysIn');
module.exports.last = /*#__PURE__*/require('./last');
module.exports.lastIndexOf = /*#__PURE__*/require('./lastIndexOf');
module.exports.length = /*#__PURE__*/require('./length');
module.exports.lens = /*#__PURE__*/require('./lens');
module.exports.lensIndex = /*#__PURE__*/require('./lensIndex');
module.exports.lensPath = /*#__PURE__*/require('./lensPath');
module.exports.lensProp = /*#__PURE__*/require('./lensProp');
module.exports.lift = /*#__PURE__*/require('./lift');
module.exports.liftN = /*#__PURE__*/require('./liftN');
module.exports.lt = /*#__PURE__*/require('./lt');
module.exports.lte = /*#__PURE__*/require('./lte');
module.exports.map = /*#__PURE__*/require('./map');
module.exports.mapAccum = /*#__PURE__*/require('./mapAccum');
module.exports.mapAccumRight = /*#__PURE__*/require('./mapAccumRight');
module.exports.mapObjIndexed = /*#__PURE__*/require('./mapObjIndexed');
module.exports.match = /*#__PURE__*/require('./match');
module.exports.mathMod = /*#__PURE__*/require('./mathMod');
module.exports.max = /*#__PURE__*/require('./max');
module.exports.maxBy = /*#__PURE__*/require('./maxBy');
module.exports.mean = /*#__PURE__*/require('./mean');
module.exports.median = /*#__PURE__*/require('./median');
module.exports.memoize = /*#__PURE__*/require('./memoize');
module.exports.memoizeWith = /*#__PURE__*/require('./memoizeWith');
module.exports.merge = /*#__PURE__*/require('./merge');
module.exports.mergeAll = /*#__PURE__*/require('./mergeAll');
module.exports.mergeDeepLeft = /*#__PURE__*/require('./mergeDeepLeft');
module.exports.mergeDeepRight = /*#__PURE__*/require('./mergeDeepRight');
module.exports.mergeDeepWith = /*#__PURE__*/require('./mergeDeepWith');
module.exports.mergeDeepWithKey = /*#__PURE__*/require('./mergeDeepWithKey');
module.exports.mergeWith = /*#__PURE__*/require('./mergeWith');
module.exports.mergeWithKey = /*#__PURE__*/require('./mergeWithKey');
module.exports.min = /*#__PURE__*/require('./min');
module.exports.minBy = /*#__PURE__*/require('./minBy');
module.exports.modulo = /*#__PURE__*/require('./modulo');
module.exports.multiply = /*#__PURE__*/require('./multiply');
module.exports.nAry = /*#__PURE__*/require('./nAry');
module.exports.negate = /*#__PURE__*/require('./negate');
module.exports.none = /*#__PURE__*/require('./none');
module.exports.not = /*#__PURE__*/require('./not');
module.exports.nth = /*#__PURE__*/require('./nth');
module.exports.nthArg = /*#__PURE__*/require('./nthArg');
module.exports.o = /*#__PURE__*/require('./o');
module.exports.objOf = /*#__PURE__*/require('./objOf');
module.exports.of = /*#__PURE__*/require('./of');
module.exports.omit = /*#__PURE__*/require('./omit');
module.exports.once = /*#__PURE__*/require('./once');
module.exports.or = /*#__PURE__*/require('./or');
module.exports.over = /*#__PURE__*/require('./over');
module.exports.pair = /*#__PURE__*/require('./pair');
module.exports.partial = /*#__PURE__*/require('./partial');
module.exports.partialRight = /*#__PURE__*/require('./partialRight');
module.exports.partition = /*#__PURE__*/require('./partition');
module.exports.path = /*#__PURE__*/require('./path');
module.exports.pathEq = /*#__PURE__*/require('./pathEq');
module.exports.pathOr = /*#__PURE__*/require('./pathOr');
module.exports.pathSatisfies = /*#__PURE__*/require('./pathSatisfies');
module.exports.pick = /*#__PURE__*/require('./pick');
module.exports.pickAll = /*#__PURE__*/require('./pickAll');
module.exports.pickBy = /*#__PURE__*/require('./pickBy');
module.exports.pipe = /*#__PURE__*/require('./pipe');
module.exports.pipeK = /*#__PURE__*/require('./pipeK');
module.exports.pipeP = /*#__PURE__*/require('./pipeP');
module.exports.pluck = /*#__PURE__*/require('./pluck');
module.exports.prepend = /*#__PURE__*/require('./prepend');
module.exports.product = /*#__PURE__*/require('./product');
module.exports.project = /*#__PURE__*/require('./project');
module.exports.prop = /*#__PURE__*/require('./prop');
module.exports.propEq = /*#__PURE__*/require('./propEq');
module.exports.propIs = /*#__PURE__*/require('./propIs');
module.exports.propOr = /*#__PURE__*/require('./propOr');
module.exports.propSatisfies = /*#__PURE__*/require('./propSatisfies');
module.exports.props = /*#__PURE__*/require('./props');
module.exports.range = /*#__PURE__*/require('./range');
module.exports.reduce = /*#__PURE__*/require('./reduce');
module.exports.reduceBy = /*#__PURE__*/require('./reduceBy');
module.exports.reduceRight = /*#__PURE__*/require('./reduceRight');
module.exports.reduceWhile = /*#__PURE__*/require('./reduceWhile');
module.exports.reduced = /*#__PURE__*/require('./reduced');
module.exports.reject = /*#__PURE__*/require('./reject');
module.exports.remove = /*#__PURE__*/require('./remove');
module.exports.repeat = /*#__PURE__*/require('./repeat');
module.exports.replace = /*#__PURE__*/require('./replace');
module.exports.reverse = /*#__PURE__*/require('./reverse');
module.exports.scan = /*#__PURE__*/require('./scan');
module.exports.sequence = /*#__PURE__*/require('./sequence');
module.exports.set = /*#__PURE__*/require('./set');
module.exports.slice = /*#__PURE__*/require('./slice');
module.exports.sort = /*#__PURE__*/require('./sort');
module.exports.sortBy = /*#__PURE__*/require('./sortBy');
module.exports.sortWith = /*#__PURE__*/require('./sortWith');
module.exports.split = /*#__PURE__*/require('./split');
module.exports.splitAt = /*#__PURE__*/require('./splitAt');
module.exports.splitEvery = /*#__PURE__*/require('./splitEvery');
module.exports.splitWhen = /*#__PURE__*/require('./splitWhen');
module.exports.startsWith = /*#__PURE__*/require('./startsWith');
module.exports.subtract = /*#__PURE__*/require('./subtract');
module.exports.sum = /*#__PURE__*/require('./sum');
module.exports.symmetricDifference = /*#__PURE__*/require('./symmetricDifference');
module.exports.symmetricDifferenceWith = /*#__PURE__*/require('./symmetricDifferenceWith');
module.exports.tail = /*#__PURE__*/require('./tail');
module.exports.take = /*#__PURE__*/require('./take');
module.exports.takeLast = /*#__PURE__*/require('./takeLast');
module.exports.takeLastWhile = /*#__PURE__*/require('./takeLastWhile');
module.exports.takeWhile = /*#__PURE__*/require('./takeWhile');
module.exports.tap = /*#__PURE__*/require('./tap');
module.exports.test = /*#__PURE__*/require('./test');
module.exports.times = /*#__PURE__*/require('./times');
module.exports.toLower = /*#__PURE__*/require('./toLower');
module.exports.toPairs = /*#__PURE__*/require('./toPairs');
module.exports.toPairsIn = /*#__PURE__*/require('./toPairsIn');
module.exports.toString = /*#__PURE__*/require('./toString');
module.exports.toUpper = /*#__PURE__*/require('./toUpper');
module.exports.transduce = /*#__PURE__*/require('./transduce');
module.exports.transpose = /*#__PURE__*/require('./transpose');
module.exports.traverse = /*#__PURE__*/require('./traverse');
module.exports.trim = /*#__PURE__*/require('./trim');
module.exports.tryCatch = /*#__PURE__*/require('./tryCatch');
module.exports.type = /*#__PURE__*/require('./type');
module.exports.unapply = /*#__PURE__*/require('./unapply');
module.exports.unary = /*#__PURE__*/require('./unary');
module.exports.uncurryN = /*#__PURE__*/require('./uncurryN');
module.exports.unfold = /*#__PURE__*/require('./unfold');
module.exports.union = /*#__PURE__*/require('./union');
module.exports.unionWith = /*#__PURE__*/require('./unionWith');
module.exports.uniq = /*#__PURE__*/require('./uniq');
module.exports.uniqBy = /*#__PURE__*/require('./uniqBy');
module.exports.uniqWith = /*#__PURE__*/require('./uniqWith');
module.exports.unless = /*#__PURE__*/require('./unless');
module.exports.unnest = /*#__PURE__*/require('./unnest');
module.exports.until = /*#__PURE__*/require('./until');
module.exports.update = /*#__PURE__*/require('./update');
module.exports.useWith = /*#__PURE__*/require('./useWith');
module.exports.values = /*#__PURE__*/require('./values');
module.exports.valuesIn = /*#__PURE__*/require('./valuesIn');
module.exports.view = /*#__PURE__*/require('./view');
module.exports.when = /*#__PURE__*/require('./when');
module.exports.where = /*#__PURE__*/require('./where');
module.exports.whereEq = /*#__PURE__*/require('./whereEq');
module.exports.without = /*#__PURE__*/require('./without');
module.exports.xprod = /*#__PURE__*/require('./xprod');
module.exports.zip = /*#__PURE__*/require('./zip');
module.exports.zipObj = /*#__PURE__*/require('./zipObj');
module.exports.zipWith = /*#__PURE__*/require('./zipWith');
},{"./F":47,"./T":48,"./__":49,"./add":50,"./addIndex":51,"./adjust":52,"./all":53,"./allPass":54,"./always":55,"./and":56,"./any":57,"./anyPass":58,"./ap":59,"./aperture":60,"./append":61,"./apply":62,"./applySpec":63,"./applyTo":64,"./ascend":65,"./assoc":66,"./assocPath":67,"./binary":68,"./bind":69,"./both":70,"./call":71,"./chain":72,"./clamp":73,"./clone":74,"./comparator":75,"./complement":76,"./compose":77,"./composeK":78,"./composeP":79,"./concat":80,"./cond":81,"./construct":82,"./constructN":83,"./contains":84,"./converge":85,"./countBy":86,"./curry":87,"./curryN":88,"./dec":89,"./defaultTo":90,"./descend":91,"./difference":92,"./differenceWith":93,"./dissoc":94,"./dissocPath":95,"./divide":96,"./drop":97,"./dropLast":98,"./dropLastWhile":99,"./dropRepeats":100,"./dropRepeatsWith":101,"./dropWhile":102,"./either":103,"./empty":104,"./endsWith":105,"./eqBy":106,"./eqProps":107,"./equals":108,"./evolve":109,"./filter":110,"./find":111,"./findIndex":112,"./findLast":113,"./findLastIndex":114,"./flatten":115,"./flip":116,"./forEach":117,"./forEachObjIndexed":118,"./fromPairs":119,"./groupBy":120,"./groupWith":121,"./gt":122,"./gte":123,"./has":124,"./hasIn":125,"./head":126,"./identical":127,"./identity":128,"./ifElse":129,"./inc":130,"./indexBy":132,"./indexOf":133,"./init":134,"./innerJoin":135,"./insert":136,"./insertAll":137,"./intersection":210,"./intersperse":211,"./into":212,"./invert":213,"./invertObj":214,"./invoker":215,"./is":216,"./isEmpty":217,"./isNil":218,"./join":219,"./juxt":220,"./keys":221,"./keysIn":222,"./last":223,"./lastIndexOf":224,"./length":225,"./lens":226,"./lensIndex":227,"./lensPath":228,"./lensProp":229,"./lift":230,"./liftN":231,"./lt":232,"./lte":233,"./map":234,"./mapAccum":235,"./mapAccumRight":236,"./mapObjIndexed":237,"./match":238,"./mathMod":239,"./max":240,"./maxBy":241,"./mean":242,"./median":243,"./memoize":244,"./memoizeWith":245,"./merge":246,"./mergeAll":247,"./mergeDeepLeft":248,"./mergeDeepRight":249,"./mergeDeepWith":250,"./mergeDeepWithKey":251,"./mergeWith":252,"./mergeWithKey":253,"./min":254,"./minBy":255,"./modulo":256,"./multiply":257,"./nAry":258,"./negate":259,"./none":260,"./not":261,"./nth":262,"./nthArg":263,"./o":264,"./objOf":265,"./of":266,"./omit":267,"./once":268,"./or":269,"./over":270,"./pair":271,"./partial":272,"./partialRight":273,"./partition":274,"./path":275,"./pathEq":276,"./pathOr":277,"./pathSatisfies":278,"./pick":279,"./pickAll":280,"./pickBy":281,"./pipe":282,"./pipeK":283,"./pipeP":284,"./pluck":285,"./prepend":286,"./product":287,"./project":288,"./prop":289,"./propEq":290,"./propIs":291,"./propOr":292,"./propSatisfies":293,"./props":294,"./range":295,"./reduce":296,"./reduceBy":297,"./reduceRight":298,"./reduceWhile":299,"./reduced":300,"./reject":301,"./remove":302,"./repeat":303,"./replace":304,"./reverse":305,"./scan":306,"./sequence":307,"./set":308,"./slice":309,"./sort":310,"./sortBy":311,"./sortWith":312,"./split":313,"./splitAt":314,"./splitEvery":315,"./splitWhen":316,"./startsWith":317,"./subtract":318,"./sum":319,"./symmetricDifference":320,"./symmetricDifferenceWith":321,"./tail":322,"./take":323,"./takeLast":324,"./takeLastWhile":325,"./takeWhile":326,"./tap":327,"./test":328,"./times":329,"./toLower":330,"./toPairs":331,"./toPairsIn":332,"./toString":333,"./toUpper":334,"./transduce":335,"./transpose":336,"./traverse":337,"./trim":338,"./tryCatch":339,"./type":340,"./unapply":341,"./unary":342,"./uncurryN":343,"./unfold":344,"./union":345,"./unionWith":346,"./uniq":347,"./uniqBy":348,"./uniqWith":349,"./unless":350,"./unnest":351,"./until":352,"./update":353,"./useWith":354,"./values":355,"./valuesIn":356,"./view":357,"./when":358,"./where":359,"./whereEq":360,"./without":361,"./xprod":362,"./zip":363,"./zipObj":364,"./zipWith":365}],132:[function(require,module,exports){
var reduceBy = /*#__PURE__*/require('./reduceBy');

/**
 * Given a function that generates a key, turns a list of objects into an
 * object indexing the objects by the given key. Note that if multiple
 * objects generate the same value for the indexing key only the last value
 * will be included in the generated object.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
 * @param {Function} fn Function :: a -> String
 * @param {Array} array The array of objects to index
 * @return {Object} An object indexing each array element by the given property.
 * @example
 *
 *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
 *      R.indexBy(R.prop('id'), list);
 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
 */


var indexBy = /*#__PURE__*/reduceBy(function (acc, elem) {
  return elem;
}, null);
module.exports = indexBy;
},{"./reduceBy":297}],133:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _indexOf = /*#__PURE__*/require('./internal/_indexOf');

var _isArray = /*#__PURE__*/require('./internal/_isArray');

/**
 * Returns the position of the first occurrence of an item in an array, or -1
 * if the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.lastIndexOf
 * @example
 *
 *      R.indexOf(3, [1,2,3,4]); //=> 2
 *      R.indexOf(10, [1,2,3,4]); //=> -1
 */


var indexOf = /*#__PURE__*/_curry2(function indexOf(target, xs) {
  return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
});
module.exports = indexOf;
},{"./internal/_curry2":152,"./internal/_indexOf":165,"./internal/_isArray":167}],134:[function(require,module,exports){
var slice = /*#__PURE__*/require('./slice');

/**
 * Returns all but the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.last, R.head, R.tail
 * @example
 *
 *      R.init([1, 2, 3]);  //=> [1, 2]
 *      R.init([1, 2]);     //=> [1]
 *      R.init([1]);        //=> []
 *      R.init([]);         //=> []
 *
 *      R.init('abc');  //=> 'ab'
 *      R.init('ab');   //=> 'a'
 *      R.init('a');    //=> ''
 *      R.init('');     //=> ''
 */


var init = /*#__PURE__*/slice(0, -1);
module.exports = init;
},{"./slice":309}],135:[function(require,module,exports){
var _containsWith = /*#__PURE__*/require('./internal/_containsWith');

var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var _filter = /*#__PURE__*/require('./internal/_filter');

/**
 * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list
 * `xs'` comprising each of the elements of `xs` which is equal to one or more
 * elements of `ys` according to `pred`.
 *
 * `pred` must be a binary function expecting an element from each list.
 *
 * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should
 * not be significant, but since `xs'` is ordered the implementation guarantees
 * that its values are in the same order as they appear in `xs`. Duplicates are
 * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Relation
 * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]
 * @param {Function} pred
 * @param {Array} xs
 * @param {Array} ys
 * @return {Array}
 * @see R.intersection
 * @example
 *
 *      R.innerJoin(
 *        (record, id) => record.id === id,
 *        [{id: 824, name: 'Richie Furay'},
 *         {id: 956, name: 'Dewey Martin'},
 *         {id: 313, name: 'Bruce Palmer'},
 *         {id: 456, name: 'Stephen Stills'},
 *         {id: 177, name: 'Neil Young'}],
 *        [177, 456, 999]
 *      );
 *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
 */


var innerJoin = /*#__PURE__*/_curry3(function innerJoin(pred, xs, ys) {
  return _filter(function (x) {
    return _containsWith(pred, x, ys);
  }, xs);
});
module.exports = innerJoin;
},{"./internal/_containsWith":149,"./internal/_curry3":153,"./internal/_filter":159}],136:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Inserts the supplied element into the list, at the specified `index`. _Note that

 * this is not destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} index The position to insert the element
 * @param {*} elt The element to insert into the Array
 * @param {Array} list The list to insert into
 * @return {Array} A new Array with `elt` inserted at `index`.
 * @example
 *
 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
 */


var insert = /*#__PURE__*/_curry3(function insert(idx, elt, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  var result = Array.prototype.slice.call(list, 0);
  result.splice(idx, 0, elt);
  return result;
});
module.exports = insert;
},{"./internal/_curry3":153}],137:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Inserts the sub-list into the list, at the specified `index`. _Note that this is not
 * destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig Number -> [a] -> [a] -> [a]
 * @param {Number} index The position to insert the sub-list
 * @param {Array} elts The sub-list to insert into the Array
 * @param {Array} list The list to insert the sub-list into
 * @return {Array} A new Array with `elts` inserted starting at `index`.
 * @example
 *
 *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
 */


var insertAll = /*#__PURE__*/_curry3(function insertAll(idx, elts, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
});
module.exports = insertAll;
},{"./internal/_curry3":153}],138:[function(require,module,exports){
var _contains = /*#__PURE__*/require('./_contains');

var _Set = /*#__PURE__*/function () {

  function _Set() {
    /* globals Set */
    this._nativeSet = typeof Set === 'function' ? new Set() : null;
    this._items = {};
  }

  // until we figure out why jsdoc chokes on this
  // @param item The item to add to the Set
  // @returns {boolean} true if the item did not exist prior, otherwise false
  //
  _Set.prototype.add = function (item) {
    return !hasOrAdd(item, true, this);
  };

  //
  // @param item The item to check for existence in the Set
  // @returns {boolean} true if the item exists in the Set, otherwise false
  //
  _Set.prototype.has = function (item) {
    return hasOrAdd(item, false, this);
  };

  //
  // Combines the logic for checking whether an item is a member of the set and
  // for adding a new item to the set.
  //
  // @param item       The item to check or add to the Set instance.
  // @param shouldAdd  If true, the item will be added to the set if it doesn't
  //                   already exist.
  // @param set        The set instance to check or add to.
  // @return {boolean} true if the item already existed, otherwise false.
  //
  return _Set;
}();

function hasOrAdd(item, shouldAdd, set) {
  var type = typeof item;
  var prevSize, newSize;
  switch (type) {
    case 'string':
    case 'number':
      // distinguish between +0 and -0
      if (item === 0 && 1 / item === -Infinity) {
        if (set._items['-0']) {
          return true;
        } else {
          if (shouldAdd) {
            set._items['-0'] = true;
          }
          return false;
        }
      }
      // these types can all utilise the native Set
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = {};
            set._items[type][item] = true;
          }
          return false;
        } else if (item in set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][item] = true;
          }
          return false;
        }
      }

    case 'boolean':
      // set._items['boolean'] holds a two element array
      // representing [ falseExists, trueExists ]
      if (type in set._items) {
        var bIdx = item ? 1 : 0;
        if (set._items[type][bIdx]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][bIdx] = true;
          }
          return false;
        }
      } else {
        if (shouldAdd) {
          set._items[type] = item ? [false, true] : [true, false];
        }
        return false;
      }

    case 'function':
      // compare functions for reference equality
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }
          return false;
        }
        if (!_contains(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }
          return false;
        }
        return true;
      }

    case 'undefined':
      if (set._items[type]) {
        return true;
      } else {
        if (shouldAdd) {
          set._items[type] = true;
        }
        return false;
      }

    case 'object':
      if (item === null) {
        if (!set._items['null']) {
          if (shouldAdd) {
            set._items['null'] = true;
          }
          return false;
        }
        return true;
      }
    /* falls through */
    default:
      // reduce the search size of heterogeneous sets by creating buckets
      // for each type.
      type = Object.prototype.toString.call(item);
      if (!(type in set._items)) {
        if (shouldAdd) {
          set._items[type] = [item];
        }
        return false;
      }
      // scan through all previously applied items
      if (!_contains(item, set._items[type])) {
        if (shouldAdd) {
          set._items[type].push(item);
        }
        return false;
      }
      return true;
  }
}

// A simple Set type that honours R.equals semantics
module.exports = _Set;
},{"./_contains":148}],139:[function(require,module,exports){
function _aperture(n, list) {
  var idx = 0;
  var limit = list.length - (n - 1);
  var acc = new Array(limit >= 0 ? limit : 0);
  while (idx < limit) {
    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
    idx += 1;
  }
  return acc;
}
module.exports = _aperture;
},{}],140:[function(require,module,exports){
function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0:
      return function () {
        return fn.apply(this, arguments);
      };
    case 1:
      return function (a0) {
        return fn.apply(this, arguments);
      };
    case 2:
      return function (a0, a1) {
        return fn.apply(this, arguments);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.apply(this, arguments);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };
    default:
      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
}
module.exports = _arity;
},{}],141:[function(require,module,exports){
function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
}
module.exports = _arrayFromIterator;
},{}],142:[function(require,module,exports){
var _objectAssign = /*#__PURE__*/require('./_objectAssign');

module.exports = typeof Object.assign === 'function' ? Object.assign : _objectAssign;
},{"./_objectAssign":179}],143:[function(require,module,exports){
var _isArray = /*#__PURE__*/require('./_isArray');

/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */


function _checkForMethod(methodname, fn) {
  return function () {
    var length = arguments.length;
    if (length === 0) {
      return fn();
    }
    var obj = arguments[length - 1];
    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}
module.exports = _checkForMethod;
},{"./_isArray":167}],144:[function(require,module,exports){
var _cloneRegExp = /*#__PURE__*/require('./_cloneRegExp');

var type = /*#__PURE__*/require('../type');

/**
 * Copies an object.
 *
 * @private
 * @param {*} value The value to be copied
 * @param {Array} refFrom Array containing the source references
 * @param {Array} refTo Array containing the copied source references
 * @param {Boolean} deep Whether or not to perform deep cloning.
 * @return {*} The copied value.
 */


function _clone(value, refFrom, refTo, deep) {
  var copy = function copy(copiedValue) {
    var len = refFrom.length;
    var idx = 0;
    while (idx < len) {
      if (value === refFrom[idx]) {
        return refTo[idx];
      }
      idx += 1;
    }
    refFrom[idx + 1] = value;
    refTo[idx + 1] = copiedValue;
    for (var key in value) {
      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
    }
    return copiedValue;
  };
  switch (type(value)) {
    case 'Object':
      return copy({});
    case 'Array':
      return copy([]);
    case 'Date':
      return new Date(value.valueOf());
    case 'RegExp':
      return _cloneRegExp(value);
    default:
      return value;
  }
}
module.exports = _clone;
},{"../type":340,"./_cloneRegExp":145}],145:[function(require,module,exports){
function _cloneRegExp(pattern) {
                                  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
}
module.exports = _cloneRegExp;
},{}],146:[function(require,module,exports){
function _complement(f) {
  return function () {
    return !f.apply(this, arguments);
  };
}
module.exports = _complement;
},{}],147:[function(require,module,exports){
/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];

  idx = 0;
  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }
  idx = 0;
  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }
  return result;
}
module.exports = _concat;
},{}],148:[function(require,module,exports){
var _indexOf = /*#__PURE__*/require('./_indexOf');

function _contains(a, list) {
  return _indexOf(list, a, 0) >= 0;
}
module.exports = _contains;
},{"./_indexOf":165}],149:[function(require,module,exports){
function _containsWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}
module.exports = _containsWith;
},{}],150:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./_arity');

var _curry2 = /*#__PURE__*/require('./_curry2');

function _createPartialApplicator(concat) {
  return _curry2(function (fn, args) {
    return _arity(Math.max(0, fn.length - args.length), function () {
      return fn.apply(this, concat(args, arguments));
    });
  });
}
module.exports = _createPartialApplicator;
},{"./_arity":140,"./_curry2":152}],151:[function(require,module,exports){
var _isPlaceholder = /*#__PURE__*/require('./_isPlaceholder');

/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}
module.exports = _curry1;
},{"./_isPlaceholder":173}],152:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./_curry1');

var _isPlaceholder = /*#__PURE__*/require('./_isPlaceholder');

/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
          return fn(a, _b);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}
module.exports = _curry2;
},{"./_curry1":151,"./_isPlaceholder":173}],153:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./_curry1');

var _curry2 = /*#__PURE__*/require('./_curry2');

var _isPlaceholder = /*#__PURE__*/require('./_isPlaceholder');

/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        });
      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _curry1(function (_c) {
          return fn(a, b, _c);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
          return fn(_a, _b, c);
        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b, c);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b, c);
        }) : _isPlaceholder(c) ? _curry1(function (_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}
module.exports = _curry3;
},{"./_curry1":151,"./_curry2":152,"./_isPlaceholder":173}],154:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./_arity');

var _isPlaceholder = /*#__PURE__*/require('./_isPlaceholder');

/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curryN(length, received, fn) {
  return function () {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!_isPlaceholder(result)) {
        left -= 1;
      }
      combinedIdx += 1;
    }
    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
  };
}
module.exports = _curryN;
},{"./_arity":140,"./_isPlaceholder":173}],155:[function(require,module,exports){
var _isArray = /*#__PURE__*/require('./_isArray');

var _isTransformer = /*#__PURE__*/require('./_isTransformer');

/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */


function _dispatchable(methodNames, xf, fn) {
  return function () {
    if (arguments.length === 0) {
      return fn();
    }
    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();
    if (!_isArray(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
}
module.exports = _dispatchable;
},{"./_isArray":167,"./_isTransformer":176}],156:[function(require,module,exports){
var take = /*#__PURE__*/require('../take');

function dropLast(n, xs) {
  return take(n < xs.length ? xs.length - n : 0, xs);
}
module.exports = dropLast;
},{"../take":323}],157:[function(require,module,exports){
var slice = /*#__PURE__*/require('../slice');

function dropLastWhile(pred, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && pred(xs[idx])) {
    idx -= 1;
  }
  return slice(0, idx + 1, xs);
}
module.exports = dropLastWhile;
},{"../slice":309}],158:[function(require,module,exports){
var _arrayFromIterator = /*#__PURE__*/require('./_arrayFromIterator');

var _containsWith = /*#__PURE__*/require('./_containsWith');

var _functionName = /*#__PURE__*/require('./_functionName');

var _has = /*#__PURE__*/require('./_has');

var identical = /*#__PURE__*/require('../identical');

var keys = /*#__PURE__*/require('../keys');

var type = /*#__PURE__*/require('../type');

/**
 * private _uniqContentEquals function.
 * That function is checking equality of 2 iterator contents with 2 assumptions
 * - iterators lengths are the same
 * - iterators values are unique
 *
 * false-positive result will be returned for comparision of, e.g.
 * - [1,2,3] and [1,2,3,4]
 * - [1,1,1] and [1,2,3]
 * */

function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = _arrayFromIterator(aIterator);
  var b = _arrayFromIterator(bIterator);

  function eq(_a, _b) {
    return _equals(_a, _b, stackA.slice(), stackB.slice());
  }

  // if *a* array contains any element that is not included in *b*
  return !_containsWith(function (b, aItem) {
    return !_containsWith(eq, aItem, b);
  }, b, a);
}

function _equals(a, b, stackA, stackB) {
  if (identical(a, b)) {
    return true;
  }

  var typeA = type(a);

  if (typeA !== type(b)) {
    return false;
  }

  if (a == null || b == null) {
    return false;
  }

  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
  }

  switch (typeA) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
        return a === b;
      }
      break;
    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {
        return false;
      }
      break;
    case 'Date':
      if (!identical(a.valueOf(), b.valueOf())) {
        return false;
      }
      break;
    case 'Error':
      return a.name === b.name && a.message === b.message;
    case 'RegExp':
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }
      break;
  }

  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }
    idx -= 1;
  }

  switch (typeA) {
    case 'Map':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
    case 'Set':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
    case 'Arguments':
    case 'Array':
    case 'Object':
    case 'Boolean':
    case 'Number':
    case 'String':
    case 'Date':
    case 'Error':
    case 'RegExp':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'ArrayBuffer':
      break;
    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = keys(a);
  if (keysA.length !== keys(b).length) {
    return false;
  }

  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b]);

  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }
    idx -= 1;
  }
  return true;
}
module.exports = _equals;
},{"../identical":127,"../keys":221,"../type":340,"./_arrayFromIterator":141,"./_containsWith":149,"./_functionName":162,"./_has":163}],159:[function(require,module,exports){
function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
}
module.exports = _filter;
},{}],160:[function(require,module,exports){
var _forceReduced = /*#__PURE__*/require('./_forceReduced');

var _isArrayLike = /*#__PURE__*/require('./_isArrayLike');

var _reduce = /*#__PURE__*/require('./_reduce');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var preservingReduced = function (xf) {
  return {
    '@@transducer/init': _xfBase.init,
    '@@transducer/result': function (result) {
      return xf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      var ret = xf['@@transducer/step'](result, input);
      return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
    }
  };
};

var _flatCat = function _xcat(xf) {
  var rxf = preservingReduced(xf);
  return {
    '@@transducer/init': _xfBase.init,
    '@@transducer/result': function (result) {
      return rxf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
    }
  };
};

module.exports = _flatCat;
},{"./_forceReduced":161,"./_isArrayLike":168,"./_reduce":184,"./_xfBase":198}],161:[function(require,module,exports){
function _forceReduced(x) {
  return {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}
module.exports = _forceReduced;
},{}],162:[function(require,module,exports){
function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
}
module.exports = _functionName;
},{}],163:[function(require,module,exports){
function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = _has;
},{}],164:[function(require,module,exports){
function _identity(x) {
  return x;
}
module.exports = _identity;
},{}],165:[function(require,module,exports){
var equals = /*#__PURE__*/require('../equals');

function _indexOf(list, a, idx) {
  var inf, item;
  // Array.prototype.indexOf doesn't exist below IE9
  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === 'number' && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        // non-zero numbers can utilise Set
        return list.indexOf(a, idx);

      // all these types can utilise Set
      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }
    }
  }
  // anything else not covered above, defer to R.equals
  while (idx < list.length) {
    if (equals(list[idx], a)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}
module.exports = _indexOf;
},{"../equals":108}],166:[function(require,module,exports){
var _has = /*#__PURE__*/require('./_has');

var toString = Object.prototype.toString;
var _isArguments = function () {
  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
    return toString.call(x) === '[object Arguments]';
  } : function _isArguments(x) {
    return _has('callee', x);
  };
};

module.exports = _isArguments;
},{"./_has":163}],167:[function(require,module,exports){
/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
module.exports = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
};
},{}],168:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./_curry1');

var _isArray = /*#__PURE__*/require('./_isArray');

var _isString = /*#__PURE__*/require('./_isString');

/**
 * Tests whether or not an object is similar to an array.
 *
 * @private
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @example
 *
 *      _isArrayLike([]); //=> true
 *      _isArrayLike(true); //=> false
 *      _isArrayLike({}); //=> false
 *      _isArrayLike({length: 10}); //=> false
 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */


var _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {
  if (_isArray(x)) {
    return true;
  }
  if (!x) {
    return false;
  }
  if (typeof x !== 'object') {
    return false;
  }
  if (_isString(x)) {
    return false;
  }
  if (x.nodeType === 1) {
    return !!x.length;
  }
  if (x.length === 0) {
    return true;
  }
  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }
  return false;
});
module.exports = _isArrayLike;
},{"./_curry1":151,"./_isArray":167,"./_isString":175}],169:[function(require,module,exports){
function _isFunction(x) {
  return Object.prototype.toString.call(x) === '[object Function]';
}
module.exports = _isFunction;
},{}],170:[function(require,module,exports){
/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
module.exports = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};
},{}],171:[function(require,module,exports){
function _isNumber(x) {
  return Object.prototype.toString.call(x) === '[object Number]';
}
module.exports = _isNumber;
},{}],172:[function(require,module,exports){
function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
}
module.exports = _isObject;
},{}],173:[function(require,module,exports){
function _isPlaceholder(a) {
       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
}
module.exports = _isPlaceholder;
},{}],174:[function(require,module,exports){
function _isRegExp(x) {
  return Object.prototype.toString.call(x) === '[object RegExp]';
}
module.exports = _isRegExp;
},{}],175:[function(require,module,exports){
function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
}
module.exports = _isString;
},{}],176:[function(require,module,exports){
function _isTransformer(obj) {
  return typeof obj['@@transducer/step'] === 'function';
}
module.exports = _isTransformer;
},{}],177:[function(require,module,exports){
var _isArrayLike = /*#__PURE__*/require('./_isArrayLike');

/**
 * `_makeFlat` is a helper function that returns a one-level or fully recursive
 * function based on the flag passed in.
 *
 * @private
 */


function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j;
    var result = [];
    var idx = 0;
    var ilen = list.length;

    while (idx < ilen) {
      if (_isArrayLike(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j = 0;
        jlen = value.length;
        while (j < jlen) {
          result[result.length] = value[j];
          j += 1;
        }
      } else {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  };
}
module.exports = _makeFlat;
},{"./_isArrayLike":168}],178:[function(require,module,exports){
function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);
  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }
  return result;
}
module.exports = _map;
},{}],179:[function(require,module,exports){
var _has = /*#__PURE__*/require('./_has');

// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign


function _objectAssign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  var idx = 1;
  var length = arguments.length;
  while (idx < length) {
    var source = arguments[idx];
    if (source != null) {
      for (var nextKey in source) {
        if (_has(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }
    idx += 1;
  }
  return output;
}
module.exports = _objectAssign;
},{"./_has":163}],180:[function(require,module,exports){
function _of(x) {
  return [x];
}
module.exports = _of;
},{}],181:[function(require,module,exports){
function _pipe(f, g) {
  return function () {
    return g.call(this, f.apply(this, arguments));
  };
}
module.exports = _pipe;
},{}],182:[function(require,module,exports){
function _pipeP(f, g) {
  return function () {
    var ctx = this;
    return f.apply(ctx, arguments).then(function (x) {
      return g.call(ctx, x);
    });
  };
}
module.exports = _pipeP;
},{}],183:[function(require,module,exports){
function _quote(s) {
  var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
  .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');

  return '"' + escaped.replace(/"/g, '\\"') + '"';
}
module.exports = _quote;
},{}],184:[function(require,module,exports){
var _isArrayLike = /*#__PURE__*/require('./_isArrayLike');

var _xwrap = /*#__PURE__*/require('./_xwrap');

var bind = /*#__PURE__*/require('../bind');

function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);
    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }
    idx += 1;
  }
  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);
    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }
    step = iter.next();
  }
  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = _xwrap(fn);
  }
  if (_isArrayLike(list)) {
    return _arrayReduce(fn, acc, list);
  }
  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }
  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }
  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }
  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}
module.exports = _reduce;
},{"../bind":69,"./_isArrayLike":168,"./_xwrap":209}],185:[function(require,module,exports){
function _reduced(x) {
  return x && x['@@transducer/reduced'] ? x : {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}
module.exports = _reduced;
},{}],186:[function(require,module,exports){
var _assign = /*#__PURE__*/require('./_assign');

var _identity = /*#__PURE__*/require('./_identity');

var _isArrayLike = /*#__PURE__*/require('./_isArrayLike');

var _isTransformer = /*#__PURE__*/require('./_isTransformer');

var objOf = /*#__PURE__*/require('../objOf');

var _stepCatArray = {
  '@@transducer/init': Array,
  '@@transducer/step': function (xs, x) {
    xs.push(x);
    return xs;
  },
  '@@transducer/result': _identity
};
var _stepCatString = {
  '@@transducer/init': String,
  '@@transducer/step': function (a, b) {
    return a + b;
  },
  '@@transducer/result': _identity
};
var _stepCatObject = {
  '@@transducer/init': Object,
  '@@transducer/step': function (result, input) {
    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);
  },
  '@@transducer/result': _identity
};

function _stepCat(obj) {
  if (_isTransformer(obj)) {
    return obj;
  }
  if (_isArrayLike(obj)) {
    return _stepCatArray;
  }
  if (typeof obj === 'string') {
    return _stepCatString;
  }
  if (typeof obj === 'object') {
    return _stepCatObject;
  }
  throw new Error('Cannot create transformer for ' + obj);
}
module.exports = _stepCat;
},{"../objOf":265,"./_assign":142,"./_identity":164,"./_isArrayLike":168,"./_isTransformer":176}],187:[function(require,module,exports){
/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */
var pad = function pad(n) {
  return (n < 10 ? '0' : '') + n;
};

var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
  return d.toISOString();
} : function _toISOString(d) {
  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
};

module.exports = _toISOString;
},{}],188:[function(require,module,exports){
var _contains = /*#__PURE__*/require('./_contains');

var _map = /*#__PURE__*/require('./_map');

var _quote = /*#__PURE__*/require('./_quote');

var _toISOString = /*#__PURE__*/require('./_toISOString');

var keys = /*#__PURE__*/require('../keys');

var reject = /*#__PURE__*/require('../reject');

function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  //  mapPairs :: (Object, [String]) -> [String]
  var mapPairs = function (obj, keys) {
    return _map(function (k) {
      return _quote(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';
    case '[object Array]':
      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
        return (/^\d+$/.test(k)
        );
      }, keys(x)))).join(', ') + ']';
    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';
    case '[object Null]':
      return 'null';
    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);
    case '[object Undefined]':
      return 'undefined';
    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();
        if (repr !== '[object Object]') {
          return repr;
        }
      }
      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
  }
}
module.exports = _toString;
},{"../keys":221,"../reject":301,"./_contains":148,"./_map":178,"./_quote":183,"./_toISOString":187}],189:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _reduced = /*#__PURE__*/require('./_reduced');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XAll = /*#__PURE__*/function () {

  function XAll(f, xf) {
    this.xf = xf;
    this.f = f;
    this.all = true;
  }
  XAll.prototype['@@transducer/init'] = _xfBase.init;
  XAll.prototype['@@transducer/result'] = function (result) {
    if (this.all) {
      result = this.xf['@@transducer/step'](result, true);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAll.prototype['@@transducer/step'] = function (result, input) {
    if (!this.f(input)) {
      this.all = false;
      result = _reduced(this.xf['@@transducer/step'](result, false));
    }
    return result;
  };

  return XAll;
}();

var _xall = /*#__PURE__*/_curry2(function _xall(f, xf) {
  return new XAll(f, xf);
});
module.exports = _xall;
},{"./_curry2":152,"./_reduced":185,"./_xfBase":198}],190:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _reduced = /*#__PURE__*/require('./_reduced');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XAny = /*#__PURE__*/function () {

  function XAny(f, xf) {
    this.xf = xf;
    this.f = f;
    this.any = false;
  }
  XAny.prototype['@@transducer/init'] = _xfBase.init;
  XAny.prototype['@@transducer/result'] = function (result) {
    if (!this.any) {
      result = this.xf['@@transducer/step'](result, false);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAny.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.any = true;
      result = _reduced(this.xf['@@transducer/step'](result, true));
    }
    return result;
  };

  return XAny;
}();

var _xany = /*#__PURE__*/_curry2(function _xany(f, xf) {
  return new XAny(f, xf);
});
module.exports = _xany;
},{"./_curry2":152,"./_reduced":185,"./_xfBase":198}],191:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./_concat');

var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XAperture = /*#__PURE__*/function () {

  function XAperture(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XAperture.prototype['@@transducer/init'] = _xfBase.init;
  XAperture.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XAperture.prototype['@@transducer/step'] = function (result, input) {
    this.store(input);
    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
  };
  XAperture.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };
  XAperture.prototype.getCopy = function () {
    return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
  };

  return XAperture;
}();

var _xaperture = /*#__PURE__*/_curry2(function _xaperture(n, xf) {
  return new XAperture(n, xf);
});
module.exports = _xaperture;
},{"./_concat":147,"./_curry2":152,"./_xfBase":198}],192:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _flatCat = /*#__PURE__*/require('./_flatCat');

var map = /*#__PURE__*/require('../map');

var _xchain = /*#__PURE__*/_curry2(function _xchain(f, xf) {
  return map(f, _flatCat(xf));
});
module.exports = _xchain;
},{"../map":234,"./_curry2":152,"./_flatCat":160}],193:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XDrop = /*#__PURE__*/function () {

  function XDrop(n, xf) {
    this.xf = xf;
    this.n = n;
  }
  XDrop.prototype['@@transducer/init'] = _xfBase.init;
  XDrop.prototype['@@transducer/result'] = _xfBase.result;
  XDrop.prototype['@@transducer/step'] = function (result, input) {
    if (this.n > 0) {
      this.n -= 1;
      return result;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return XDrop;
}();

var _xdrop = /*#__PURE__*/_curry2(function _xdrop(n, xf) {
  return new XDrop(n, xf);
});
module.exports = _xdrop;
},{"./_curry2":152,"./_xfBase":198}],194:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XDropLast = /*#__PURE__*/function () {

  function XDropLast(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XDropLast.prototype['@@transducer/init'] = _xfBase.init;
  XDropLast.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.full) {
      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
    }
    this.store(input);
    return result;
  };
  XDropLast.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };

  return XDropLast;
}();

var _xdropLast = /*#__PURE__*/_curry2(function _xdropLast(n, xf) {
  return new XDropLast(n, xf);
});
module.exports = _xdropLast;
},{"./_curry2":152,"./_xfBase":198}],195:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _reduce = /*#__PURE__*/require('./_reduce');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XDropLastWhile = /*#__PURE__*/function () {

  function XDropLastWhile(fn, xf) {
    this.f = fn;
    this.retained = [];
    this.xf = xf;
  }
  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;
  XDropLastWhile.prototype['@@transducer/result'] = function (result) {
    this.retained = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.retain(result, input) : this.flush(result, input);
  };
  XDropLastWhile.prototype.flush = function (result, input) {
    result = _reduce(this.xf['@@transducer/step'], result, this.retained);
    this.retained = [];
    return this.xf['@@transducer/step'](result, input);
  };
  XDropLastWhile.prototype.retain = function (result, input) {
    this.retained.push(input);
    return result;
  };

  return XDropLastWhile;
}();

var _xdropLastWhile = /*#__PURE__*/_curry2(function _xdropLastWhile(fn, xf) {
  return new XDropLastWhile(fn, xf);
});
module.exports = _xdropLastWhile;
},{"./_curry2":152,"./_reduce":184,"./_xfBase":198}],196:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XDropRepeatsWith = /*#__PURE__*/function () {

  function XDropRepeatsWith(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.lastValue = undefined;
    this.seenFirstValue = false;
  }

  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;
  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;
  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
    var sameAsLast = false;
    if (!this.seenFirstValue) {
      this.seenFirstValue = true;
    } else if (this.pred(this.lastValue, input)) {
      sameAsLast = true;
    }
    this.lastValue = input;
    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
  };

  return XDropRepeatsWith;
}();

var _xdropRepeatsWith = /*#__PURE__*/_curry2(function _xdropRepeatsWith(pred, xf) {
  return new XDropRepeatsWith(pred, xf);
});
module.exports = _xdropRepeatsWith;
},{"./_curry2":152,"./_xfBase":198}],197:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XDropWhile = /*#__PURE__*/function () {

  function XDropWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;
  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;
  XDropWhile.prototype['@@transducer/step'] = function (result, input) {
    if (this.f) {
      if (this.f(input)) {
        return result;
      }
      this.f = null;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return XDropWhile;
}();

var _xdropWhile = /*#__PURE__*/_curry2(function _xdropWhile(f, xf) {
  return new XDropWhile(f, xf);
});
module.exports = _xdropWhile;
},{"./_curry2":152,"./_xfBase":198}],198:[function(require,module,exports){
module.exports = {
  init: function () {
    return this.xf['@@transducer/init']();
  },
  result: function (result) {
    return this.xf['@@transducer/result'](result);
  }
};
},{}],199:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XFilter = /*#__PURE__*/function () {

  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFilter.prototype['@@transducer/init'] = _xfBase.init;
  XFilter.prototype['@@transducer/result'] = _xfBase.result;
  XFilter.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return XFilter;
}();

var _xfilter = /*#__PURE__*/_curry2(function _xfilter(f, xf) {
  return new XFilter(f, xf);
});
module.exports = _xfilter;
},{"./_curry2":152,"./_xfBase":198}],200:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _reduced = /*#__PURE__*/require('./_reduced');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XFind = /*#__PURE__*/function () {

  function XFind(f, xf) {
    this.xf = xf;
    this.f = f;
    this.found = false;
  }
  XFind.prototype['@@transducer/init'] = _xfBase.init;
  XFind.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, void 0);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFind.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, input));
    }
    return result;
  };

  return XFind;
}();

var _xfind = /*#__PURE__*/_curry2(function _xfind(f, xf) {
  return new XFind(f, xf);
});
module.exports = _xfind;
},{"./_curry2":152,"./_reduced":185,"./_xfBase":198}],201:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _reduced = /*#__PURE__*/require('./_reduced');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XFindIndex = /*#__PURE__*/function () {

  function XFindIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.found = false;
  }
  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;
  XFindIndex.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, -1);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFindIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, this.idx));
    }
    return result;
  };

  return XFindIndex;
}();

var _xfindIndex = /*#__PURE__*/_curry2(function _xfindIndex(f, xf) {
  return new XFindIndex(f, xf);
});
module.exports = _xfindIndex;
},{"./_curry2":152,"./_reduced":185,"./_xfBase":198}],202:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XFindLast = /*#__PURE__*/function () {

  function XFindLast(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFindLast.prototype['@@transducer/init'] = _xfBase.init;
  XFindLast.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
  };
  XFindLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.last = input;
    }
    return result;
  };

  return XFindLast;
}();

var _xfindLast = /*#__PURE__*/_curry2(function _xfindLast(f, xf) {
  return new XFindLast(f, xf);
});
module.exports = _xfindLast;
},{"./_curry2":152,"./_xfBase":198}],203:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XFindLastIndex = /*#__PURE__*/function () {

  function XFindLastIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.lastIdx = -1;
  }
  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;
  XFindLastIndex.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
  };
  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.lastIdx = this.idx;
    }
    return result;
  };

  return XFindLastIndex;
}();

var _xfindLastIndex = /*#__PURE__*/_curry2(function _xfindLastIndex(f, xf) {
  return new XFindLastIndex(f, xf);
});
module.exports = _xfindLastIndex;
},{"./_curry2":152,"./_xfBase":198}],204:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XMap = /*#__PURE__*/function () {

  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XMap.prototype['@@transducer/init'] = _xfBase.init;
  XMap.prototype['@@transducer/result'] = _xfBase.result;
  XMap.prototype['@@transducer/step'] = function (result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return XMap;
}();

var _xmap = /*#__PURE__*/_curry2(function _xmap(f, xf) {
  return new XMap(f, xf);
});
module.exports = _xmap;
},{"./_curry2":152,"./_xfBase":198}],205:[function(require,module,exports){
var _curryN = /*#__PURE__*/require('./_curryN');

var _has = /*#__PURE__*/require('./_has');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XReduceBy = /*#__PURE__*/function () {

  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
    this.valueFn = valueFn;
    this.valueAcc = valueAcc;
    this.keyFn = keyFn;
    this.xf = xf;
    this.inputs = {};
  }
  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;
  XReduceBy.prototype['@@transducer/result'] = function (result) {
    var key;
    for (key in this.inputs) {
      if (_has(key, this.inputs)) {
        result = this.xf['@@transducer/step'](result, this.inputs[key]);
        if (result['@@transducer/reduced']) {
          result = result['@@transducer/value'];
          break;
        }
      }
    }
    this.inputs = null;
    return this.xf['@@transducer/result'](result);
  };
  XReduceBy.prototype['@@transducer/step'] = function (result, input) {
    var key = this.keyFn(input);
    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
    return result;
  };

  return XReduceBy;
}();

var _xreduceBy = /*#__PURE__*/_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
  return new XReduceBy(valueFn, valueAcc, keyFn, xf);
});
module.exports = _xreduceBy;
},{"./_curryN":154,"./_has":163,"./_xfBase":198}],206:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _reduced = /*#__PURE__*/require('./_reduced');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XTake = /*#__PURE__*/function () {

  function XTake(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }
  XTake.prototype['@@transducer/init'] = _xfBase.init;
  XTake.prototype['@@transducer/result'] = _xfBase.result;
  XTake.prototype['@@transducer/step'] = function (result, input) {
    this.i += 1;
    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
  };

  return XTake;
}();

var _xtake = /*#__PURE__*/_curry2(function _xtake(n, xf) {
  return new XTake(n, xf);
});
module.exports = _xtake;
},{"./_curry2":152,"./_reduced":185,"./_xfBase":198}],207:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _reduced = /*#__PURE__*/require('./_reduced');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XTakeWhile = /*#__PURE__*/function () {

  function XTakeWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;
  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;
  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);
  };

  return XTakeWhile;
}();

var _xtakeWhile = /*#__PURE__*/_curry2(function _xtakeWhile(f, xf) {
  return new XTakeWhile(f, xf);
});
module.exports = _xtakeWhile;
},{"./_curry2":152,"./_reduced":185,"./_xfBase":198}],208:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./_curry2');

var _xfBase = /*#__PURE__*/require('./_xfBase');

var XTap = /*#__PURE__*/function () {

  function XTap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTap.prototype['@@transducer/init'] = _xfBase.init;
  XTap.prototype['@@transducer/result'] = _xfBase.result;
  XTap.prototype['@@transducer/step'] = function (result, input) {
    this.f(input);
    return this.xf['@@transducer/step'](result, input);
  };

  return XTap;
}();

var _xtap = /*#__PURE__*/_curry2(function _xtap(f, xf) {
  return new XTap(f, xf);
});
module.exports = _xtap;
},{"./_curry2":152,"./_xfBase":198}],209:[function(require,module,exports){
var XWrap = /*#__PURE__*/function () {
  function XWrap(fn) {
    this.f = fn;
  }
  XWrap.prototype['@@transducer/init'] = function () {
    throw new Error('init not implemented on XWrap');
  };
  XWrap.prototype['@@transducer/result'] = function (acc) {
    return acc;
  };
  XWrap.prototype['@@transducer/step'] = function (acc, x) {
    return this.f(acc, x);
  };

  return XWrap;
}();

function _xwrap(fn) {
  return new XWrap(fn);
}
module.exports = _xwrap;
},{}],210:[function(require,module,exports){
var _contains = /*#__PURE__*/require('./internal/_contains');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _filter = /*#__PURE__*/require('./internal/_filter');

var flip = /*#__PURE__*/require('./flip');

var uniq = /*#__PURE__*/require('./uniq');

/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The list of elements found in both `list1` and `list2`.
 * @see R.innerJoin
 * @example
 *
 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
 */


var intersection = /*#__PURE__*/_curry2(function intersection(list1, list2) {
  var lookupList, filteredList;
  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }
  return uniq(_filter(flip(_contains)(lookupList), filteredList));
});
module.exports = intersection;
},{"./flip":116,"./internal/_contains":148,"./internal/_curry2":152,"./internal/_filter":159,"./uniq":347}],211:[function(require,module,exports){
var _checkForMethod = /*#__PURE__*/require('./internal/_checkForMethod');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Creates a new list with the separator interposed between elements.
 *
 * Dispatches to the `intersperse` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} separator The element to add to the list.
 * @param {Array} list The list to be interposed.
 * @return {Array} The new list.
 * @example
 *
 *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']
 */


var intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function intersperse(separator, list) {
  var out = [];
  var idx = 0;
  var length = list.length;
  while (idx < length) {
    if (idx === length - 1) {
      out.push(list[idx]);
    } else {
      out.push(list[idx], separator);
    }
    idx += 1;
  }
  return out;
}));
module.exports = intersperse;
},{"./internal/_checkForMethod":143,"./internal/_curry2":152}],212:[function(require,module,exports){
var _clone = /*#__PURE__*/require('./internal/_clone');

var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var _isTransformer = /*#__PURE__*/require('./internal/_isTransformer');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var _stepCat = /*#__PURE__*/require('./internal/_stepCat');

/**
 * Transforms the items of the list with the transducer and appends the
 * transformed items to the accumulator using an appropriate iterator function
 * based on the accumulator type.
 *
 * The accumulator can be an array, string, object or a transformer. Iterated
 * items will be appended to arrays and concatenated to strings. Objects will
 * be merged directly or 2-item arrays will be merged as key, value pairs.
 *
 * The accumulator can also be a transformer object that provides a 2-arity
 * reducing iterator function, step, 0-arity initial value function, init, and
 * 1-arity result extraction function result. The step function is used as the
 * iterator function in reduce. The result function is used to convert the
 * final accumulator into the return type and in most cases is R.identity. The
 * init function is used to provide the initial accumulator.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the
 * transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig a -> (b -> b) -> [c] -> a
 * @param {*} acc The initial accumulator value.
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.into([], transducer, numbers); //=> [2, 3]
 *
 *      var intoArray = R.into([]);
 *      intoArray(transducer, numbers); //=> [2, 3]
 */


var into = /*#__PURE__*/_curry3(function into(acc, xf, list) {
  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
});
module.exports = into;
},{"./internal/_clone":144,"./internal/_curry3":153,"./internal/_isTransformer":176,"./internal/_reduce":184,"./internal/_stepCat":186}],213:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _has = /*#__PURE__*/require('./internal/_has');

var keys = /*#__PURE__*/require('./keys');

/**
 * Same as [`R.invertObj`](#invertObj), however this accounts for objects with
 * duplicate values by putting the values into an array.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: [ s, ... ]}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object with keys in an array.
 * @see R.invertObj
 * @example
 *
 *      var raceResultsByFirstName = {
 *        first: 'alice',
 *        second: 'jake',
 *        third: 'alice',
 *      };
 *      R.invert(raceResultsByFirstName);
 *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
 */


var invert = /*#__PURE__*/_curry1(function invert(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    var val = obj[key];
    var list = _has(val, out) ? out[val] : out[val] = [];
    list[list.length] = key;
    idx += 1;
  }
  return out;
});
module.exports = invert;
},{"./internal/_curry1":151,"./internal/_has":163,"./keys":221}],214:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var keys = /*#__PURE__*/require('./keys');

/**
 * Returns a new object with the keys of the given object as values, and the
 * values of the given object, which are coerced to strings, as keys. Note
 * that the last key found is preferred when handling the same value.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: s}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object
 * @see R.invert
 * @example
 *
 *      var raceResults = {
 *        first: 'alice',
 *        second: 'jake'
 *      };
 *      R.invertObj(raceResults);
 *      //=> { 'alice': 'first', 'jake':'second' }
 *
 *      // Alternatively:
 *      var raceResults = ['alice', 'jake'];
 *      R.invertObj(raceResults);
 *      //=> { 'alice': '0', 'jake':'1' }
 */


var invertObj = /*#__PURE__*/_curry1(function invertObj(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    out[obj[key]] = key;
    idx += 1;
  }
  return out;
});
module.exports = invertObj;
},{"./internal/_curry1":151,"./keys":221}],215:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isFunction = /*#__PURE__*/require('./internal/_isFunction');

var curryN = /*#__PURE__*/require('./curryN');

var toString = /*#__PURE__*/require('./toString');

/**
 * Turns a named method with a specified arity into a function that can be
 * called directly supplied with arguments and a target object.
 *
 * The returned function is curried and accepts `arity + 1` parameters where
 * the final parameter is the target object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
 * @param {Number} arity Number of arguments the returned function should take
 *        before the target object.
 * @param {String} method Name of the method to call.
 * @return {Function} A new curried function.
 * @see R.construct
 * @example
 *
 *      var sliceFrom = R.invoker(1, 'slice');
 *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
 *      var sliceFrom6 = R.invoker(2, 'slice')(6);
 *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
 * @symb R.invoker(0, 'method')(o) = o['method']()
 * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
 * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
 */


var invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {
  return curryN(arity + 1, function () {
    var target = arguments[arity];
    if (target != null && _isFunction(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }
    throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
  });
});
module.exports = invoker;
},{"./curryN":88,"./internal/_curry2":152,"./internal/_isFunction":169,"./toString":333}],216:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * See if an object (`val`) is an instance of the supplied constructor. This
 * function will check up the inheritance chain, if any.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Type
 * @sig (* -> {*}) -> a -> Boolean
 * @param {Object} ctor A constructor
 * @param {*} val The value to test
 * @return {Boolean}
 * @example
 *
 *      R.is(Object, {}); //=> true
 *      R.is(Number, 1); //=> true
 *      R.is(Object, 1); //=> false
 *      R.is(String, 's'); //=> true
 *      R.is(String, new String('')); //=> true
 *      R.is(Object, new String('')); //=> true
 *      R.is(Object, 's'); //=> false
 *      R.is(Number, {}); //=> false
 */


var is = /*#__PURE__*/_curry2(function is(Ctor, val) {
  return val != null && val.constructor === Ctor || val instanceof Ctor;
});
module.exports = is;
},{"./internal/_curry2":152}],217:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var empty = /*#__PURE__*/require('./empty');

var equals = /*#__PURE__*/require('./equals');

/**
 * Returns `true` if the given value is its type's empty value; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> Boolean
 * @param {*} x
 * @return {Boolean}
 * @see R.empty
 * @example
 *
 *      R.isEmpty([1, 2, 3]);   //=> false
 *      R.isEmpty([]);          //=> true
 *      R.isEmpty('');          //=> true
 *      R.isEmpty(null);        //=> false
 *      R.isEmpty({});          //=> true
 *      R.isEmpty({length: 0}); //=> false
 */


var isEmpty = /*#__PURE__*/_curry1(function isEmpty(x) {
  return x != null && equals(x, empty(x));
});
module.exports = isEmpty;
},{"./empty":104,"./equals":108,"./internal/_curry1":151}],218:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */


var isNil = /*#__PURE__*/_curry1(function isNil(x) {
  return x == null;
});
module.exports = isNil;
},{"./internal/_curry1":151}],219:[function(require,module,exports){
var invoker = /*#__PURE__*/require('./invoker');

/**
 * Returns a string made by inserting the `separator` between each element and
 * concatenating all the elements into a single string.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig String -> [a] -> String
 * @param {Number|String} separator The string used to separate the elements.
 * @param {Array} xs The elements to join into a string.
 * @return {String} str The string made by concatenating `xs` with `separator`.
 * @see R.split
 * @example
 *
 *      var spacer = R.join(' ');
 *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
 *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
 */


var join = /*#__PURE__*/invoker(1, 'join');
module.exports = join;
},{"./invoker":215}],220:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var converge = /*#__PURE__*/require('./converge');

/**
 * juxt applies a list of functions to a list of values.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Function
 * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
 * @param {Array} fns An array of functions
 * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
 * @see R.applySpec
 * @example
 *
 *      var getRange = R.juxt([Math.min, Math.max]);
 *      getRange(3, 4, 9, -3); //=> [-3, 9]
 * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
 */


var juxt = /*#__PURE__*/_curry1(function juxt(fns) {
  return converge(function () {
    return Array.prototype.slice.call(arguments, 0);
  }, fns);
});
module.exports = juxt;
},{"./converge":85,"./internal/_curry1":151}],221:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _has = /*#__PURE__*/require('./internal/_has');

var _isArguments = /*#__PURE__*/require('./internal/_isArguments');

// cover IE < 9 keys issues


var hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');
var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
// Safari bug
var hasArgsEnumBug = /*#__PURE__*/function () {
  'use strict';

  return arguments.propertyIsEnumerable('length');
}();

var contains = function contains(list, item) {
  var idx = 0;
  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }
    idx += 1;
  }
  return false;
};

/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @see R.keysIn, R.values
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */
var _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
} : function keys(obj) {
  if (Object(obj) !== obj) {
    return [];
  }
  var prop, nIdx;
  var ks = [];
  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
  for (prop in obj) {
    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
      ks[ks.length] = prop;
    }
  }
  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;
    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];
      if (_has(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }
      nIdx -= 1;
    }
  }
  return ks;
};
var keys = /*#__PURE__*/_curry1(_keys);
module.exports = keys;
},{"./internal/_curry1":151,"./internal/_has":163,"./internal/_isArguments":166}],222:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Returns a list containing the names of all the properties of the supplied
 * object, including prototype properties.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own and prototype properties.
 * @see R.keys, R.valuesIn
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.keysIn(f); //=> ['x', 'y']
 */


var keysIn = /*#__PURE__*/_curry1(function keysIn(obj) {
  var prop;
  var ks = [];
  for (prop in obj) {
    ks[ks.length] = prop;
  }
  return ks;
});
module.exports = keysIn;
},{"./internal/_curry1":151}],223:[function(require,module,exports){
var nth = /*#__PURE__*/require('./nth');

/**
 * Returns the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.init, R.head, R.tail
 * @example
 *
 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
 *      R.last([]); //=> undefined
 *
 *      R.last('abc'); //=> 'c'
 *      R.last(''); //=> ''
 */


var last = /*#__PURE__*/nth(-1);
module.exports = last;
},{"./nth":262}],224:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isArray = /*#__PURE__*/require('./internal/_isArray');

var equals = /*#__PURE__*/require('./equals');

/**
 * Returns the position of the last occurrence of an item in an array, or -1 if
 * the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.indexOf
 * @example
 *
 *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
 *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
 */


var lastIndexOf = /*#__PURE__*/_curry2(function lastIndexOf(target, xs) {
  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {
    return xs.lastIndexOf(target);
  } else {
    var idx = xs.length - 1;
    while (idx >= 0) {
      if (equals(xs[idx], target)) {
        return idx;
      }
      idx -= 1;
    }
    return -1;
  }
});
module.exports = lastIndexOf;
},{"./equals":108,"./internal/_curry2":152,"./internal/_isArray":167}],225:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _isNumber = /*#__PURE__*/require('./internal/_isNumber');

/**
 * Returns the number of elements in the array by returning `list.length`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [a] -> Number
 * @param {Array} list The array to inspect.
 * @return {Number} The length of the array.
 * @example
 *
 *      R.length([]); //=> 0
 *      R.length([1, 2, 3]); //=> 3
 */


var length = /*#__PURE__*/_curry1(function length(list) {
  return list != null && _isNumber(list.length) ? list.length : NaN;
});
module.exports = length;
},{"./internal/_curry1":151,"./internal/_isNumber":171}],226:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var map = /*#__PURE__*/require('./map');

/**
 * Returns a lens for the given getter and setter functions. The getter "gets"
 * the value of the focus; the setter "sets" the value of the focus. The setter
 * should not mutate the data structure.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
 * @param {Function} getter
 * @param {Function} setter
 * @return {Lens}
 * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lens(R.prop('x'), R.assoc('x'));
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */


var lens = /*#__PURE__*/_curry2(function lens(getter, setter) {
  return function (toFunctorFn) {
    return function (target) {
      return map(function (focus) {
        return setter(focus, target);
      }, toFunctorFn(getter(target)));
    };
  };
});
module.exports = lens;
},{"./internal/_curry2":152,"./map":234}],227:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var lens = /*#__PURE__*/require('./lens');

var nth = /*#__PURE__*/require('./nth');

var update = /*#__PURE__*/require('./update');

/**
 * Returns a lens whose focus is the specified index.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Number -> Lens s a
 * @param {Number} n
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
 *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
 *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
 */


var lensIndex = /*#__PURE__*/_curry1(function lensIndex(n) {
  return lens(nth(n), update(n));
});
module.exports = lensIndex;
},{"./internal/_curry1":151,"./lens":226,"./nth":262,"./update":353}],228:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var assocPath = /*#__PURE__*/require('./assocPath');

var lens = /*#__PURE__*/require('./lens');

var path = /*#__PURE__*/require('./path');

/**
 * Returns a lens whose focus is the specified path.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @typedefn Idx = String | Int
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig [Idx] -> Lens s a
 * @param {Array} path The path to use.
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xHeadYLens = R.lensPath(['x', 0, 'y']);
 *
 *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> 2
 *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
 *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
 */


var lensPath = /*#__PURE__*/_curry1(function lensPath(p) {
  return lens(path(p), assocPath(p));
});
module.exports = lensPath;
},{"./assocPath":67,"./internal/_curry1":151,"./lens":226,"./path":275}],229:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var assoc = /*#__PURE__*/require('./assoc');

var lens = /*#__PURE__*/require('./lens');

var prop = /*#__PURE__*/require('./prop');

/**
 * Returns a lens whose focus is the specified property.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig String -> Lens s a
 * @param {String} k
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */


var lensProp = /*#__PURE__*/_curry1(function lensProp(k) {
  return lens(prop(k), assoc(k));
});
module.exports = lensProp;
},{"./assoc":66,"./internal/_curry1":151,"./lens":226,"./prop":289}],230:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var liftN = /*#__PURE__*/require('./liftN');

/**
 * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.liftN
 * @example
 *
 *      var madd3 = R.lift((a, b, c) => a + b + c);
 *
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 *
 *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
 *
 *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
 */


var lift = /*#__PURE__*/_curry1(function lift(fn) {
  return liftN(fn.length, fn);
});
module.exports = lift;
},{"./internal/_curry1":151,"./liftN":231}],231:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var ap = /*#__PURE__*/require('./ap');

var curryN = /*#__PURE__*/require('./curryN');

var map = /*#__PURE__*/require('./map');

/**
 * "lifts" a function to be the specified arity, so that it may "map over" that
 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig Number -> (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.lift, R.ap
 * @example
 *
 *      var madd3 = R.liftN(3, (...args) => R.sum(args));
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 */


var liftN = /*#__PURE__*/_curry2(function liftN(arity, fn) {
  var lifted = curryN(arity, fn);
  return curryN(arity, function () {
    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});
module.exports = liftN;
},{"./ap":59,"./curryN":88,"./internal/_curry2":152,"./internal/_reduce":184,"./map":234}],232:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns `true` if the first argument is less than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.gt
 * @example
 *
 *      R.lt(2, 1); //=> false
 *      R.lt(2, 2); //=> false
 *      R.lt(2, 3); //=> true
 *      R.lt('a', 'z'); //=> true
 *      R.lt('z', 'a'); //=> false
 */


var lt = /*#__PURE__*/_curry2(function lt(a, b) {
  return a < b;
});
module.exports = lt;
},{"./internal/_curry2":152}],233:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns `true` if the first argument is less than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.gte
 * @example
 *
 *      R.lte(2, 1); //=> false
 *      R.lte(2, 2); //=> true
 *      R.lte(2, 3); //=> true
 *      R.lte('a', 'z'); //=> true
 *      R.lte('z', 'a'); //=> false
 */


var lte = /*#__PURE__*/_curry2(function lte(a, b) {
  return a <= b;
});
module.exports = lte;
},{"./internal/_curry2":152}],234:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _map = /*#__PURE__*/require('./internal/_map');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var _xmap = /*#__PURE__*/require('./internal/_xmap');

var curryN = /*#__PURE__*/require('./curryN');

var keys = /*#__PURE__*/require('./keys');

/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex
 * @example
 *
 *      var double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */


var map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return curryN(functor.length, function () {
        return fn.call(this, functor.apply(this, arguments));
      });
    case '[object Object]':
      return _reduce(function (acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, keys(functor));
    default:
      return _map(fn, functor);
  }
}));
module.exports = map;
},{"./curryN":88,"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_map":178,"./internal/_reduce":184,"./internal/_xmap":204,"./keys":221}],235:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * The `mapAccum` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from left to right, and returning a final value of this
 * accumulator together with the new list.
 *
 * The iterator function receives two arguments, *acc* and *value*, and should
 * return a tuple *[acc, value]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccumRight
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var appender = (a, b) => [a + b, a + b];
 *
 *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
 * @symb R.mapAccum(f, a, [b, c, d]) = [
 *   f(f(f(a, b)[0], c)[0], d)[0],
 *   [
 *     f(a, b)[1],
 *     f(f(a, b)[0], c)[1],
 *     f(f(f(a, b)[0], c)[0], d)[1]
 *   ]
 * ]
 */


var mapAccum = /*#__PURE__*/_curry3(function mapAccum(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var tuple = [acc];
  while (idx < len) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx += 1;
  }
  return [tuple[0], result];
});
module.exports = mapAccum;
},{"./internal/_curry3":153}],236:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * The `mapAccumRight` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from right to left, and returning a final value of this
 * accumulator together with the new list.
 *
 * Similar to [`mapAccum`](#mapAccum), except moves through the input list from
 * the right to the left.
 *
 * The iterator function receives two arguments, *value* and *acc*, and should
 * return a tuple *[value, acc]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccum
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var append = (a, b) => [a + b, a + b];
 *
 *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']
 * @symb R.mapAccumRight(f, a, [b, c, d]) = [
 *   [
 *     f(b, f(c, f(d, a)[0])[0])[1],
 *     f(c, f(d, a)[0])[1],
 *     f(d, a)[1],
 *   ]
 *   f(b, f(c, f(d, a)[0])[0])[0],
 * ]
 */


var mapAccumRight = /*#__PURE__*/_curry3(function mapAccumRight(fn, acc, list) {
  var idx = list.length - 1;
  var result = [];
  var tuple = [acc];
  while (idx >= 0) {
    tuple = fn(list[idx], tuple[0]);
    result[idx] = tuple[1];
    idx -= 1;
  }
  return [result, tuple[0]];
});
module.exports = mapAccumRight;
},{"./internal/_curry3":153}],237:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var keys = /*#__PURE__*/require('./keys');

/**
 * An Object-specific version of [`map`](#map). The function is applied to three
 * arguments: *(value, key, obj)*. If only the value is significant, use
 * [`map`](#map) instead.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig ((*, String, Object) -> *) -> Object -> Object
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @see R.map
 * @example
 *
 *      var values = { x: 1, y: 2, z: 3 };
 *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);
 *
 *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
 */


var mapObjIndexed = /*#__PURE__*/_curry2(function mapObjIndexed(fn, obj) {
  return _reduce(function (acc, key) {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {}, keys(obj));
});
module.exports = mapObjIndexed;
},{"./internal/_curry2":152,"./internal/_reduce":184,"./keys":221}],238:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Tests a regular expression against a String. Note that this function will
 * return an empty array when there are no matches. This differs from
 * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
 * which returns `null` when there are no matches.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig RegExp -> String -> [String | Undefined]
 * @param {RegExp} rx A regular expression.
 * @param {String} str The string to match against
 * @return {Array} The list of matches or empty array.
 * @see R.test
 * @example
 *
 *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
 *      R.match(/a/, 'b'); //=> []
 *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
 */


var match = /*#__PURE__*/_curry2(function match(rx, str) {
  return str.match(rx) || [];
});
module.exports = match;
},{"./internal/_curry2":152}],239:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isInteger = /*#__PURE__*/require('./internal/_isInteger');

/**
 * `mathMod` behaves like the modulo operator should mathematically, unlike the
 * `%` operator (and by extension, [`R.modulo`](#modulo)). So while
 * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer
 * arguments, and returns NaN when the modulus is zero or negative.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} m The dividend.
 * @param {Number} p the modulus.
 * @return {Number} The result of `b mod a`.
 * @see R.modulo
 * @example
 *
 *      R.mathMod(-17, 5);  //=> 3
 *      R.mathMod(17, 5);   //=> 2
 *      R.mathMod(17, -5);  //=> NaN
 *      R.mathMod(17, 0);   //=> NaN
 *      R.mathMod(17.2, 5); //=> NaN
 *      R.mathMod(17, 5.3); //=> NaN
 *
 *      var clock = R.mathMod(R.__, 12);
 *      clock(15); //=> 3
 *      clock(24); //=> 0
 *
 *      var seventeenMod = R.mathMod(17);
 *      seventeenMod(3);  //=> 2
 *      seventeenMod(4);  //=> 1
 *      seventeenMod(10); //=> 7
 */


var mathMod = /*#__PURE__*/_curry2(function mathMod(m, p) {
  if (!_isInteger(m)) {
    return NaN;
  }
  if (!_isInteger(p) || p < 1) {
    return NaN;
  }
  return (m % p + p) % p;
});
module.exports = mathMod;
},{"./internal/_curry2":152,"./internal/_isInteger":170}],240:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns the larger of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.maxBy, R.min
 * @example
 *
 *      R.max(789, 123); //=> 789
 *      R.max('a', 'b'); //=> 'b'
 */


var max = /*#__PURE__*/_curry2(function max(a, b) {
  return b > a ? b : a;
});
module.exports = max;
},{"./internal/_curry2":152}],241:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Takes a function and two values, and returns whichever value produces the
 * larger result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.max, R.minBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.maxBy(square, -3, 2); //=> -3
 *
 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
 *      R.reduce(R.maxBy(square), 0, []); //=> 0
 */


var maxBy = /*#__PURE__*/_curry3(function maxBy(f, a, b) {
  return f(b) > f(a) ? b : a;
});
module.exports = maxBy;
},{"./internal/_curry3":153}],242:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var sum = /*#__PURE__*/require('./sum');

/**
 * Returns the mean of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.median
 * @example
 *
 *      R.mean([2, 7, 9]); //=> 6
 *      R.mean([]); //=> NaN
 */


var mean = /*#__PURE__*/_curry1(function mean(list) {
  return sum(list) / list.length;
});
module.exports = mean;
},{"./internal/_curry1":151,"./sum":319}],243:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var mean = /*#__PURE__*/require('./mean');

/**
 * Returns the median of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.mean
 * @example
 *
 *      R.median([2, 9, 7]); //=> 7
 *      R.median([7, 2, 10, 9]); //=> 8
 *      R.median([]); //=> NaN
 */


var median = /*#__PURE__*/_curry1(function median(list) {
  var len = list.length;
  if (len === 0) {
    return NaN;
  }
  var width = 2 - len % 2;
  var idx = (len - width) / 2;
  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }).slice(idx, idx + width));
});
module.exports = median;
},{"./internal/_curry1":151,"./mean":242}],244:[function(require,module,exports){
var memoizeWith = /*#__PURE__*/require('./memoizeWith');

var toString = /*#__PURE__*/require('./toString');

/**
 * Creates a new function that, when invoked, caches the result of calling `fn`
 * for a given argument set and returns the result. Subsequent calls to the
 * memoized `fn` with the same argument set will not result in an additional
 * call to `fn`; instead, the cached result for that set of arguments will be
 * returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @see R.memoizeWith
 * @deprecated since v0.25.0
 * @example
 *
 *      let count = 0;
 *      const factorial = R.memoize(n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */


var memoize = /*#__PURE__*/memoizeWith(function () {
  return toString(arguments);
});
module.exports = memoize;
},{"./memoizeWith":245,"./toString":333}],245:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _has = /*#__PURE__*/require('./internal/_has');

/**
 * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an
 * additional function that will be applied to a given argument set and used to
 * create the cache key under which the results of the function to be memoized
 * will be stored. Care must be taken when implementing key generation to avoid
 * clashes that may overwrite previous entries erroneously.
 *
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (*... -> String) -> (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to generate the cache key.
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @see R.memoize
 * @example
 *
 *      let count = 0;
 *      const factorial = R.memoizeWith(R.identity, n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */


var memoizeWith = /*#__PURE__*/_curry2(function memoizeWith(mFn, fn) {
  var cache = {};
  return _arity(fn.length, function () {
    var key = mFn.apply(this, arguments);
    if (!_has(key, cache)) {
      cache[key] = fn.apply(this, arguments);
    }
    return cache[key];
  });
});
module.exports = memoizeWith;
},{"./internal/_arity":140,"./internal/_curry2":152,"./internal/_has":163}],246:[function(require,module,exports){
var _assign = /*#__PURE__*/require('./internal/_assign');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      var resetToDefault = R.merge(R.__, {x: 0});
 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
 * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }
 */


var merge = /*#__PURE__*/_curry2(function merge(l, r) {
  return _assign({}, l, r);
});
module.exports = merge;
},{"./internal/_assign":142,"./internal/_curry2":152}],247:[function(require,module,exports){
var _assign = /*#__PURE__*/require('./internal/_assign');

var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Merges a list of objects together into one object.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig [{k: v}] -> {k: v}
 * @param {Array} list An array of objects
 * @return {Object} A merged object.
 * @see R.reduce
 * @example
 *
 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
 */


var mergeAll = /*#__PURE__*/_curry1(function mergeAll(list) {
  return _assign.apply(null, [{}].concat(list));
});
module.exports = mergeAll;
},{"./internal/_assign":142,"./internal/_curry1":151}],248:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var mergeDeepWithKey = /*#__PURE__*/require('./mergeDeepWithKey');

/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the first object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                      { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}
 */


var mergeDeepLeft = /*#__PURE__*/_curry2(function mergeDeepLeft(lObj, rObj) {
  return mergeDeepWithKey(function (k, lVal, rVal) {
    return lVal;
  }, lObj, rObj);
});
module.exports = mergeDeepLeft;
},{"./internal/_curry2":152,"./mergeDeepWithKey":251}],249:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var mergeDeepWithKey = /*#__PURE__*/require('./mergeDeepWithKey');

/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                       { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}
 */


var mergeDeepRight = /*#__PURE__*/_curry2(function mergeDeepRight(lObj, rObj) {
  return mergeDeepWithKey(function (k, lVal, rVal) {
    return rVal;
  }, lObj, rObj);
});
module.exports = mergeDeepRight;
},{"./internal/_curry2":152,"./mergeDeepWithKey":251}],250:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var mergeDeepWithKey = /*#__PURE__*/require('./mergeDeepWithKey');

/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to associated values using the
 *   resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepWith(R.concat,
 *                      { a: true, c: { values: [10, 20] }},
 *                      { b: true, c: { values: [15, 35] }});
 *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}
 */


var mergeDeepWith = /*#__PURE__*/_curry3(function mergeDeepWith(fn, lObj, rObj) {
  return mergeDeepWithKey(function (k, lVal, rVal) {
    return fn(lVal, rVal);
  }, lObj, rObj);
});
module.exports = mergeDeepWith;
},{"./internal/_curry3":153,"./mergeDeepWithKey":251}],251:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var _isObject = /*#__PURE__*/require('./internal/_isObject');

var mergeWithKey = /*#__PURE__*/require('./mergeWithKey');

/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to the key and associated values
 *   using the resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeDeepWithKey(concatValues,
 *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
 *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
 *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
 */


var mergeDeepWithKey = /*#__PURE__*/_curry3(function mergeDeepWithKey(fn, lObj, rObj) {
  return mergeWithKey(function (k, lVal, rVal) {
    if (_isObject(lVal) && _isObject(rVal)) {
      return mergeDeepWithKey(fn, lVal, rVal);
    } else {
      return fn(k, lVal, rVal);
    }
  }, lObj, rObj);
});
module.exports = mergeDeepWithKey;
},{"./internal/_curry3":153,"./internal/_isObject":172,"./mergeWithKey":253}],252:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var mergeWithKey = /*#__PURE__*/require('./mergeWithKey');

/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the values
 * associated with the key in each object, with the result being used as the
 * value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWith, R.merge, R.mergeWithKey
 * @example
 *
 *      R.mergeWith(R.concat,
 *                  { a: true, values: [10, 20] },
 *                  { b: true, values: [15, 35] });
 *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
 */


var mergeWith = /*#__PURE__*/_curry3(function mergeWith(fn, l, r) {
  return mergeWithKey(function (_, _l, _r) {
    return fn(_l, _r);
  }, l, r);
});
module.exports = mergeWith;
},{"./internal/_curry3":153,"./mergeWithKey":253}],253:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var _has = /*#__PURE__*/require('./internal/_has');

/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the key
 * and the values associated with the key in each object, with the result being
 * used as the value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWithKey, R.merge, R.mergeWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeWithKey(concatValues,
 *                     { a: true, thing: 'foo', values: [10, 20] },
 *                     { b: true, thing: 'bar', values: [15, 35] });
 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
 */


var mergeWithKey = /*#__PURE__*/_curry3(function mergeWithKey(fn, l, r) {
  var result = {};
  var k;

  for (k in l) {
    if (_has(k, l)) {
      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }

  for (k in r) {
    if (_has(k, r) && !_has(k, result)) {
      result[k] = r[k];
    }
  }

  return result;
});
module.exports = mergeWithKey;
},{"./internal/_curry3":153,"./internal/_has":163}],254:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns the smaller of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.minBy, R.max
 * @example
 *
 *      R.min(789, 123); //=> 123
 *      R.min('a', 'b'); //=> 'a'
 */


var min = /*#__PURE__*/_curry2(function min(a, b) {
  return b < a ? b : a;
});
module.exports = min;
},{"./internal/_curry2":152}],255:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Takes a function and two values, and returns whichever value produces the
 * smaller result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.min, R.maxBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.minBy(square, -3, 2); //=> 2
 *
 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
 */


var minBy = /*#__PURE__*/_curry3(function minBy(f, a, b) {
  return f(b) < f(a) ? b : a;
});
module.exports = minBy;
},{"./internal/_curry3":153}],256:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Divides the first parameter by the second and returns the remainder. Note
 * that this function preserves the JavaScript-style behavior for modulo. For
 * mathematical modulo see [`mathMod`](#mathMod).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The value to the divide.
 * @param {Number} b The pseudo-modulus
 * @return {Number} The result of `b % a`.
 * @see R.mathMod
 * @example
 *
 *      R.modulo(17, 3); //=> 2
 *      // JS behavior:
 *      R.modulo(-17, 3); //=> -2
 *      R.modulo(17, -3); //=> 2
 *
 *      var isOdd = R.modulo(R.__, 2);
 *      isOdd(42); //=> 0
 *      isOdd(21); //=> 1
 */


var modulo = /*#__PURE__*/_curry2(function modulo(a, b) {
  return a % b;
});
module.exports = modulo;
},{"./internal/_curry2":152}],257:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Multiplies two numbers. Equivalent to `a * b` but curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a * b`.
 * @see R.divide
 * @example
 *
 *      var double = R.multiply(2);
 *      var triple = R.multiply(3);
 *      double(3);       //=>  6
 *      triple(4);       //=> 12
 *      R.multiply(2, 5);  //=> 10
 */


var multiply = /*#__PURE__*/_curry2(function multiply(a, b) {
  return a * b;
});
module.exports = multiply;
},{"./internal/_curry2":152}],258:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly `n` parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} n The desired arity of the new function.
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity `n`.
 * @see R.binary, R.unary
 * @example
 *
 *      var takesTwoArgs = (a, b) => [a, b];
 *
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.nAry(1, takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only `n` arguments are passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.nAry(0, f)(a, b) = f()
 * @symb R.nAry(1, f)(a, b) = f(a)
 * @symb R.nAry(2, f)(a, b) = f(a, b)
 */


var nAry = /*#__PURE__*/_curry2(function nAry(n, fn) {
  switch (n) {
    case 0:
      return function () {
        return fn.call(this);
      };
    case 1:
      return function (a0) {
        return fn.call(this, a0);
      };
    case 2:
      return function (a0, a1) {
        return fn.call(this, a0, a1);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.call(this, a0, a1, a2);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.call(this, a0, a1, a2, a3);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.call(this, a0, a1, a2, a3, a4);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.call(this, a0, a1, a2, a3, a4, a5);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      };
    default:
      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
  }
});
module.exports = nAry;
},{"./internal/_curry2":152}],259:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Negates its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number}
 * @example
 *
 *      R.negate(42); //=> -42
 */


var negate = /*#__PURE__*/_curry1(function negate(n) {
  return -n;
});
module.exports = negate;
},{"./internal/_curry1":151}],260:[function(require,module,exports){
var _complement = /*#__PURE__*/require('./internal/_complement');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xany = /*#__PURE__*/require('./internal/_xany');

var any = /*#__PURE__*/require('./any');

/**
 * Returns `true` if no elements of the list match the predicate, `false`
 * otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
 * @see R.all, R.any
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *      var isOdd = n => n % 2 === 1;
 *
 *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
 *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false
 */


var none = /*#__PURE__*/_curry2( /*#__PURE__*/_complement( /*#__PURE__*/_dispatchable(['any'], _xany, any)));
module.exports = none;
},{"./any":57,"./internal/_complement":146,"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xany":190}],261:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */


var not = /*#__PURE__*/_curry1(function not(a) {
  return !a;
});
module.exports = not;
},{"./internal/_curry1":151}],262:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isString = /*#__PURE__*/require('./internal/_isString');

/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      var list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */


var nth = /*#__PURE__*/_curry2(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
});
module.exports = nth;
},{"./internal/_curry2":152,"./internal/_isString":175}],263:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var curryN = /*#__PURE__*/require('./curryN');

var nth = /*#__PURE__*/require('./nth');

/**
 * Returns a function which returns its nth argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig Number -> *... -> *
 * @param {Number} n
 * @return {Function}
 * @example
 *
 *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
 *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
 * @symb R.nthArg(-1)(a, b, c) = c
 * @symb R.nthArg(0)(a, b, c) = a
 * @symb R.nthArg(1)(a, b, c) = b
 */


var nthArg = /*#__PURE__*/_curry1(function nthArg(n) {
  var arity = n < 0 ? 1 : n + 1;
  return curryN(arity, function () {
    return nth(n, arguments);
  });
});
module.exports = nthArg;
},{"./curryN":88,"./internal/_curry1":151,"./nth":262}],264:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * `o` is a curried composition function that returns a unary function.
 * Like [`compose`](#compose), `o` performs right-to-left function composition.
 * Unlike [`compose`](#compose), the rightmost function passed to `o` will be
 * invoked with only one argument.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (b -> c) -> (a -> b) -> a -> c
 * @param {Function} f
 * @param {Function} g
 * @return {Function}
 * @see R.compose, R.pipe
 * @example
 *
 *      var classyGreeting = name => "The name's " + name.last + ", " + name.first + " " + name.last
 *      var yellGreeting = R.o(R.toUpper, classyGreeting);
 *      yellGreeting({first: 'James', last: 'Bond'}); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.o(R.multiply(10), R.add(10))(-4) //=> 60
 *
 * @symb R.o(f, g, x) = f(g(x))
 */


var o = /*#__PURE__*/_curry3(function o(f, g, x) {
  return f(g(x));
});
module.exports = o;
},{"./internal/_curry3":153}],265:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Creates an object containing a single key:value pair.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @sig String -> a -> {String:a}
 * @param {String} key
 * @param {*} val
 * @return {Object}
 * @see R.pair
 * @example
 *
 *      var matchPhrases = R.compose(
 *        R.objOf('must'),
 *        R.map(R.objOf('match_phrase'))
 *      );
 *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
 */


var objOf = /*#__PURE__*/_curry2(function objOf(key, val) {
  var obj = {};
  obj[key] = val;
  return obj;
});
module.exports = objOf;
},{"./internal/_curry2":152}],266:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _of = /*#__PURE__*/require('./internal/_of');

/**
 * Returns a singleton array containing the value provided.
 *
 * Note this `of` is different from the ES6 `of`; See
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> [a]
 * @param {*} x any value
 * @return {Array} An array wrapping `x`.
 * @example
 *
 *      R.of(null); //=> [null]
 *      R.of([42]); //=> [[42]]
 */


var of = /*#__PURE__*/_curry1(_of);
module.exports = of;
},{"./internal/_curry1":151,"./internal/_of":180}],267:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a partial copy of an object omitting the keys specified.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [String] -> {String: *} -> {String: *}
 * @param {Array} names an array of String property names to omit from the new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with properties from `names` not on it.
 * @see R.pick
 * @example
 *
 *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
 */


var omit = /*#__PURE__*/_curry2(function omit(names, obj) {
  var result = {};
  var index = {};
  var idx = 0;
  var len = names.length;

  while (idx < len) {
    index[names[idx]] = 1;
    idx += 1;
  }

  for (var prop in obj) {
    if (!index.hasOwnProperty(prop)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});
module.exports = omit;
},{"./internal/_curry2":152}],268:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Accepts a function `fn` and returns a function that guards invocation of
 * `fn` such that `fn` can only ever be called once, no matter how many times
 * the returned function is invoked. The first value calculated is returned in
 * subsequent invocations.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a... -> b) -> (a... -> b)
 * @param {Function} fn The function to wrap in a call-only-once wrapper.
 * @return {Function} The wrapped function.
 * @example
 *
 *      var addOneOnce = R.once(x => x + 1);
 *      addOneOnce(10); //=> 11
 *      addOneOnce(addOneOnce(50)); //=> 11
 */


var once = /*#__PURE__*/_curry1(function once(fn) {
  var called = false;
  var result;
  return _arity(fn.length, function () {
    if (called) {
      return result;
    }
    called = true;
    result = fn.apply(this, arguments);
    return result;
  });
});
module.exports = once;
},{"./internal/_arity":140,"./internal/_curry1":151}],269:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns `true` if one or both of its arguments are `true`. Returns `false`
 * if both arguments are `false`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if truthy, otherwise the second argument.
 * @see R.either
 * @example
 *
 *      R.or(true, true); //=> true
 *      R.or(true, false); //=> true
 *      R.or(false, true); //=> true
 *      R.or(false, false); //=> false
 */


var or = /*#__PURE__*/_curry2(function or(a, b) {
  return a || b;
});
module.exports = or;
},{"./internal/_curry2":152}],270:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

// `Identity` is a functor that holds a single value, where `map` simply
// transforms the held value with the provided function.


var Identity = function (x) {
  return { value: x, map: function (f) {
      return Identity(f(x));
    } };
};

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the result of applying the given function to
 * the focused value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> (a -> a) -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
 */
var over = /*#__PURE__*/_curry3(function over(lens, f, x) {
  // The value returned by the getter function is first transformed with `f`,
  // then set as the value of an `Identity`. This is then mapped over with the
  // setter function of the lens.
  return lens(function (y) {
    return Identity(f(y));
  })(x).value;
});
module.exports = over;
},{"./internal/_curry3":153}],271:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category List
 * @sig a -> b -> (a,b)
 * @param {*} fst
 * @param {*} snd
 * @return {Array}
 * @see R.objOf, R.of
 * @example
 *
 *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
 */


var pair = /*#__PURE__*/_curry2(function pair(fst, snd) {
  return [fst, snd];
});
module.exports = pair;
},{"./internal/_curry2":152}],272:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _createPartialApplicator = /*#__PURE__*/require('./internal/_createPartialApplicator');

/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided initially followed by the arguments provided to `g`.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partialRight
 * @example
 *
 *      var multiply2 = (a, b) => a * b;
 *      var double = R.partial(multiply2, [2]);
 *      double(2); //=> 4
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var sayHello = R.partial(greet, ['Hello']);
 *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);
 *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
 */


var partial = /*#__PURE__*/_createPartialApplicator(_concat);
module.exports = partial;
},{"./internal/_concat":147,"./internal/_createPartialApplicator":150}],273:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _createPartialApplicator = /*#__PURE__*/require('./internal/_createPartialApplicator');

var flip = /*#__PURE__*/require('./flip');

/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided to `g` followed by the arguments provided initially.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partial
 * @example
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
 *
 *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
 */


var partialRight = /*#__PURE__*/_createPartialApplicator( /*#__PURE__*/flip(_concat));
module.exports = partialRight;
},{"./flip":116,"./internal/_concat":147,"./internal/_createPartialApplicator":150}],274:[function(require,module,exports){
var filter = /*#__PURE__*/require('./filter');

var juxt = /*#__PURE__*/require('./juxt');

var reject = /*#__PURE__*/require('./reject');

/**
 * Takes a predicate and a list or other `Filterable` object and returns the
 * pair of filterable objects of the same type of elements which do and do not
 * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
 * @param {Function} pred A predicate to determine which side the element belongs to.
 * @param {Array} filterable the list (or other filterable) to partition.
 * @return {Array} An array, containing first the subset of elements that satisfy the
 *         predicate, and second the subset of elements that do not satisfy.
 * @see R.filter, R.reject
 * @example
 *
 *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
 *
 *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
 *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
 */


var partition = /*#__PURE__*/juxt([filter, reject]);
module.exports = partition;
},{"./filter":110,"./juxt":220,"./reject":301}],275:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Retrieve the value at a given path.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> a | Undefined
 * @param {Array} path The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path`.
 * @see R.prop
 * @example
 *
 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
 */


var path = /*#__PURE__*/_curry2(function path(paths, obj) {
  var val = obj;
  var idx = 0;
  while (idx < paths.length) {
    if (val == null) {
      return;
    }
    val = val[paths[idx]];
    idx += 1;
  }
  return val;
});
module.exports = path;
},{"./internal/_curry2":152}],276:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var equals = /*#__PURE__*/require('./equals');

var path = /*#__PURE__*/require('./path');

/**
 * Determines whether a nested path on an object has a specific value, in
 * [`R.equals`](#equals) terms. Most likely used to filter a list.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Relation
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> Boolean
 * @param {Array} path The path of the nested property to use
 * @param {*} val The value to compare the nested property with
 * @param {Object} obj The object to check the nested property in
 * @return {Boolean} `true` if the value equals the nested object property,
 *         `false` otherwise.
 * @example
 *
 *      var user1 = { address: { zipCode: 90210 } };
 *      var user2 = { address: { zipCode: 55555 } };
 *      var user3 = { name: 'Bob' };
 *      var users = [ user1, user2, user3 ];
 *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);
 *      R.filter(isFamous, users); //=> [ user1 ]
 */


var pathEq = /*#__PURE__*/_curry3(function pathEq(_path, val, obj) {
  return equals(path(_path, obj), val);
});
module.exports = pathEq;
},{"./equals":108,"./internal/_curry3":153,"./path":275}],277:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var defaultTo = /*#__PURE__*/require('./defaultTo');

var path = /*#__PURE__*/require('./path');

/**
 * If the given, non-null object has a value at the given path, returns the
 * value at that path. Otherwise returns the provided default value.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig a -> [Idx] -> {a} -> a
 * @param {*} d The default value.
 * @param {Array} p The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path` of the supplied object or the default value.
 * @example
 *
 *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
 */


var pathOr = /*#__PURE__*/_curry3(function pathOr(d, p, obj) {
  return defaultTo(d, path(p, obj));
});
module.exports = pathOr;
},{"./defaultTo":90,"./internal/_curry3":153,"./path":275}],278:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var path = /*#__PURE__*/require('./path');

/**
 * Returns `true` if the specified object property at given path satisfies the
 * given predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Logic
 * @typedefn Idx = String | Int
 * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
 * @param {Function} pred
 * @param {Array} propPath
 * @param {*} obj
 * @return {Boolean}
 * @see R.propSatisfies, R.path
 * @example
 *
 *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
 */


var pathSatisfies = /*#__PURE__*/_curry3(function pathSatisfies(pred, propPath, obj) {
  return propPath.length > 0 && pred(path(propPath, obj));
});
module.exports = pathSatisfies;
},{"./internal/_curry3":153,"./path":275}],279:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a partial copy of an object containing only the keys specified. If
 * the key does not exist, the property is ignored.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.omit, R.props
 * @example
 *
 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
 */


var pick = /*#__PURE__*/_curry2(function pick(names, obj) {
  var result = {};
  var idx = 0;
  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }
    idx += 1;
  }
  return result;
});
module.exports = pick;
},{"./internal/_curry2":152}],280:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Similar to `pick` except that this one includes a `key: undefined` pair for
 * properties that don't exist.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.pick
 * @example
 *
 *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
 */


var pickAll = /*#__PURE__*/_curry2(function pickAll(names, obj) {
  var result = {};
  var idx = 0;
  var len = names.length;
  while (idx < len) {
    var name = names[idx];
    result[name] = obj[name];
    idx += 1;
  }
  return result;
});
module.exports = pickAll;
},{"./internal/_curry2":152}],281:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a partial copy of an object containing only the keys that satisfy
 * the supplied predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}
 * @param {Function} pred A predicate to determine whether or not a key
 *        should be included on the output object.
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties that satisfy `pred`
 *         on it.
 * @see R.pick, R.filter
 * @example
 *
 *      var isUpperCase = (val, key) => key.toUpperCase() === key;
 *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
 */


var pickBy = /*#__PURE__*/_curry2(function pickBy(test, obj) {
  var result = {};
  for (var prop in obj) {
    if (test(obj[prop], prop, obj)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});
module.exports = pickBy;
},{"./internal/_curry2":152}],282:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _pipe = /*#__PURE__*/require('./internal/_pipe');

var reduce = /*#__PURE__*/require('./reduce');

var tail = /*#__PURE__*/require('./tail');

/**
 * Performs left-to-right function composition. The leftmost function may have
 * any arity; the remaining functions must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      var f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */


function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }
  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
}
module.exports = pipe;
},{"./internal/_arity":140,"./internal/_pipe":181,"./reduce":296,"./tail":322}],283:[function(require,module,exports){
var composeK = /*#__PURE__*/require('./composeK');

var reverse = /*#__PURE__*/require('./reverse');

/**
 * Returns the left-to-right Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
 * @param {...Function}
 * @return {Function}
 * @see R.composeK
 * @example
 *
 *      //  parseJson :: String -> Maybe *
 *      //  get :: String -> Object -> Maybe *
 *
 *      //  getStateCode :: Maybe String -> Maybe String
 *      var getStateCode = R.pipeK(
 *        parseJson,
 *        get('user'),
 *        get('address'),
 *        get('state'),
 *        R.compose(Maybe.of, R.toUpper)
 *      );
 *
 *      getStateCode('{"user":{"address":{"state":"ny"}}}');
 *      //=> Just('NY')
 *      getStateCode('[Invalid JSON]');
 *      //=> Nothing()
 * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
 */


function pipeK() {
  if (arguments.length === 0) {
    throw new Error('pipeK requires at least one argument');
  }
  return composeK.apply(this, reverse(arguments));
}
module.exports = pipeK;
},{"./composeK":78,"./reverse":305}],284:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _pipeP = /*#__PURE__*/require('./internal/_pipeP');

var reduce = /*#__PURE__*/require('./reduce');

var tail = /*#__PURE__*/require('./tail');

/**
 * Performs left-to-right composition of one or more Promise-returning
 * functions. The leftmost function may have any arity; the remaining functions
 * must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.composeP
 * @example
 *
 *      //  followersForUser :: String -> Promise [User]
 *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);
 */


function pipeP() {
  if (arguments.length === 0) {
    throw new Error('pipeP requires at least one argument');
  }
  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));
}
module.exports = pipeP;
},{"./internal/_arity":140,"./internal/_pipeP":182,"./reduce":296,"./tail":322}],285:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var map = /*#__PURE__*/require('./map');

var prop = /*#__PURE__*/require('./prop');

/**
 * Returns a new list by plucking the same named property off all objects in
 * the list supplied.
 *
 * `pluck` will work on
 * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
 * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => k -> f {k: v} -> f v
 * @param {Number|String} key The key name to pluck off of each object.
 * @param {Array} f The array or functor to consider.
 * @return {Array} The list of values for the given key.
 * @see R.props
 * @example
 *
 *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
 *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
 *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
 */


var pluck = /*#__PURE__*/_curry2(function pluck(p, list) {
  return map(prop(p), list);
});
module.exports = pluck;
},{"./internal/_curry2":152,"./map":234,"./prop":289}],286:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a new list with the given element at the front, followed by the
 * contents of the list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The item to add to the head of the output list.
 * @param {Array} list The array to add to the tail of the output list.
 * @return {Array} A new array.
 * @see R.append
 * @example
 *
 *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
 */


var prepend = /*#__PURE__*/_curry2(function prepend(el, list) {
  return _concat([el], list);
});
module.exports = prepend;
},{"./internal/_concat":147,"./internal/_curry2":152}],287:[function(require,module,exports){
var multiply = /*#__PURE__*/require('./multiply');

var reduce = /*#__PURE__*/require('./reduce');

/**
 * Multiplies together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The product of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.product([2,4,6,8,100,1]); //=> 38400
 */


var product = /*#__PURE__*/reduce(multiply, 1);
module.exports = product;
},{"./multiply":257,"./reduce":296}],288:[function(require,module,exports){
var _map = /*#__PURE__*/require('./internal/_map');

var identity = /*#__PURE__*/require('./identity');

var pickAll = /*#__PURE__*/require('./pickAll');

var useWith = /*#__PURE__*/require('./useWith');

/**
 * Reasonable analog to SQL `select` statement.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @category Relation
 * @sig [k] -> [{k: v}] -> [{k: v}]
 * @param {Array} props The property names to project
 * @param {Array} objs The objects to query
 * @return {Array} An array of objects with just the `props` properties.
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
 *      var kids = [abby, fred];
 *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
 */


var project = /*#__PURE__*/useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity
module.exports = project;
},{"./identity":128,"./internal/_map":178,"./pickAll":280,"./useWith":354}],289:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var path = /*#__PURE__*/require('./path');

/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig s -> {s: a} -> a | Undefined
 * @param {String} p The property name
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 */

var prop = /*#__PURE__*/_curry2(function prop(p, obj) {
  return path([p], obj);
});
module.exports = prop;
},{"./internal/_curry2":152,"./path":275}],290:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var equals = /*#__PURE__*/require('./equals');

/**
 * Returns `true` if the specified object property is equal, in
 * [`R.equals`](#equals) terms, to the given value; `false` otherwise.
 * You can test multiple properties with [`R.where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig String -> a -> Object -> Boolean
 * @param {String} name
 * @param {*} val
 * @param {*} obj
 * @return {Boolean}
 * @see R.whereEq, R.propSatisfies, R.equals
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
 *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
 *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
 *      var kids = [abby, fred, rusty, alois];
 *      var hasBrownHair = R.propEq('hair', 'brown');
 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
 */


var propEq = /*#__PURE__*/_curry3(function propEq(name, val, obj) {
  return equals(val, obj[name]);
});
module.exports = propEq;
},{"./equals":108,"./internal/_curry3":153}],291:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var is = /*#__PURE__*/require('./is');

/**
 * Returns `true` if the specified object property is of the given type;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Type
 * @sig Type -> String -> Object -> Boolean
 * @param {Function} type
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.is, R.propSatisfies
 * @example
 *
 *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
 *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
 *      R.propIs(Number, 'x', {});            //=> false
 */


var propIs = /*#__PURE__*/_curry3(function propIs(type, name, obj) {
  return is(type, obj[name]);
});
module.exports = propIs;
},{"./internal/_curry3":153,"./is":216}],292:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var _has = /*#__PURE__*/require('./internal/_has');

/**
 * If the given, non-null object has an own property with the specified name,
 * returns the value of that property. Otherwise returns the provided default
 * value.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Object
 * @sig a -> String -> Object -> a
 * @param {*} val The default value.
 * @param {String} p The name of the property to return.
 * @param {Object} obj The object to query.
 * @return {*} The value of given property of the supplied object or the default value.
 * @example
 *
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var favorite = R.prop('favoriteLibrary');
 *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
 *
 *      favorite(alice);  //=> undefined
 *      favoriteWithDefault(alice);  //=> 'Ramda'
 */


var propOr = /*#__PURE__*/_curry3(function propOr(val, p, obj) {
  return obj != null && _has(p, obj) ? obj[p] : val;
});
module.exports = propOr;
},{"./internal/_curry3":153,"./internal/_has":163}],293:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Returns `true` if the specified object property satisfies the given
 * predicate; `false` otherwise. You can test multiple properties with
 * [`R.where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Logic
 * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
 * @param {Function} pred
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.where, R.propEq, R.propIs
 * @example
 *
 *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
 */


var propSatisfies = /*#__PURE__*/_curry3(function propSatisfies(pred, name, obj) {
  return pred(obj[name]);
});
module.exports = propSatisfies;
},{"./internal/_curry3":153}],294:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Acts as multiple `prop`: array of keys in, array of values out. Preserves
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> [v]
 * @param {Array} ps The property names to fetch
 * @param {Object} obj The object to query
 * @return {Array} The corresponding values or partially applied function.
 * @example
 *
 *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
 *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
 *
 *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
 *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
 */


var props = /*#__PURE__*/_curry2(function props(ps, obj) {
  var len = ps.length;
  var out = [];
  var idx = 0;

  while (idx < len) {
    out[idx] = obj[ps[idx]];
    idx += 1;
  }

  return out;
});
module.exports = props;
},{"./internal/_curry2":152}],295:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isNumber = /*#__PURE__*/require('./internal/_isNumber');

/**
 * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> Number -> [Number]
 * @param {Number} from The first number in the list.
 * @param {Number} to One more than the last number in the list.
 * @return {Array} The list of numbers in tthe set `[a, b)`.
 * @example
 *
 *      R.range(1, 5);    //=> [1, 2, 3, 4]
 *      R.range(50, 53);  //=> [50, 51, 52]
 */


var range = /*#__PURE__*/_curry2(function range(from, to) {
  if (!(_isNumber(from) && _isNumber(to))) {
    throw new TypeError('Both arguments to range must be numbers');
  }
  var result = [];
  var n = from;
  while (n < to) {
    result.push(n);
    n += 1;
  }
  return result;
});
module.exports = range;
},{"./internal/_curry2":152,"./internal/_isNumber":171}],296:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * [`R.reduced`](#reduced) to shortcut the iteration.
 *
 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
 * is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present. When
 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
 * shortcuting, as this is not implemented by `reduce`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *      //          -               -10
 *      //         / \              / \
 *      //        -   4           -6   4
 *      //       / \              / \
 *      //      -   3   ==>     -3   3
 *      //     / \              / \
 *      //    -   2           -1   2
 *      //   / \              / \
 *      //  0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */


var reduce = /*#__PURE__*/_curry3(_reduce);
module.exports = reduce;
},{"./internal/_curry3":153,"./internal/_reduce":184}],297:[function(require,module,exports){
var _curryN = /*#__PURE__*/require('./internal/_curryN');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _has = /*#__PURE__*/require('./internal/_has');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var _xreduceBy = /*#__PURE__*/require('./internal/_xreduceBy');

/**
 * Groups the elements of the list according to the result of calling
 * the String-returning function `keyFn` on each element and reduces the elements
 * of each group to a single value via the reducer function `valueFn`.
 *
 * This function is basically a more general [`groupBy`](#groupBy) function.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category List
 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
 * @param {Function} valueFn The function that reduces the elements of each group to a single
 *        value. Receives two values, accumulator for a particular group and the current element.
 * @param {*} acc The (initial) accumulator value for each group.
 * @param {Function} keyFn The function that maps the list's element into a key.
 * @param {Array} list The array to group.
 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
 *         `valueFn` for elements which produced that key when passed to `keyFn`.
 * @see R.groupBy, R.reduce
 * @example
 *
 *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
 *      var namesByGrade = reduceToNamesBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Lucy', score: 92},
 *                      {name: 'Drew', score: 85},
 *                      // ...
 *                      {name: 'Bart', score: 62}];
 *      namesByGrade(students);
 *      // {
 *      //   'A': ['Lucy'],
 *      //   'B': ['Drew']
 *      //   // ...,
 *      //   'F': ['Bart']
 *      // }
 */


var reduceBy = /*#__PURE__*/_curryN(4, [], /*#__PURE__*/_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
  return _reduce(function (acc, elt) {
    var key = keyFn(elt);
    acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);
    return acc;
  }, {}, list);
}));
module.exports = reduceBy;
},{"./internal/_curryN":154,"./internal/_dispatchable":155,"./internal/_has":163,"./internal/_reduce":184,"./internal/_xreduceBy":205}],298:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * Similar to [`reduce`](#reduce), except moves through the input list from the
 * right to the left.
 *
 * The iterator function receives two values: *(value, acc)*, while the arguments'
 * order of `reduce`'s iterator function is *(acc, value)*.
 *
 * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduceRight` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> b) -> b -> [a] -> b
 * @param {Function} fn The iterator function. Receives two values, the current element from the array
 *        and the accumulator.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.addIndex
 * @example
 *
 *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
 *      //    -               -2
 *      //   / \              / \
 *      //  1   -            1   3
 *      //     / \              / \
 *      //    2   -     ==>    2  -1
 *      //       / \              / \
 *      //      3   -            3   4
 *      //         / \              / \
 *      //        4   0            4   0
 *
 * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
 */


var reduceRight = /*#__PURE__*/_curry3(function reduceRight(fn, acc, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    acc = fn(list[idx], acc);
    idx -= 1;
  }
  return acc;
});
module.exports = reduceRight;
},{"./internal/_curry3":153}],299:[function(require,module,exports){
var _curryN = /*#__PURE__*/require('./internal/_curryN');

var _reduce = /*#__PURE__*/require('./internal/_reduce');

var _reduced = /*#__PURE__*/require('./internal/_reduced');

/**
 * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating
 * through the list, successively calling the iterator function. `reduceWhile`
 * also takes a predicate that is evaluated before each step. If the predicate
 * returns `false`, it "short-circuits" the iteration and returns the current
 * value of the accumulator.
 *
 * @func
 * @memberOf R
 * @since v0.22.0
 * @category List
 * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} pred The predicate. It is passed the accumulator and the
 *        current element.
 * @param {Function} fn The iterator function. Receives two values, the
 *        accumulator and the current element.
 * @param {*} a The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced
 * @example
 *
 *      var isOdd = (acc, x) => x % 2 === 1;
 *      var xs = [1, 3, 5, 60, 777, 800];
 *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
 *
 *      var ys = [2, 4, 6]
 *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
 */


var reduceWhile = /*#__PURE__*/_curryN(4, [], function _reduceWhile(pred, fn, a, list) {
  return _reduce(function (acc, x) {
    return pred(acc, x) ? fn(acc, x) : _reduced(acc);
  }, a, list);
});
module.exports = reduceWhile;
},{"./internal/_curryN":154,"./internal/_reduce":184,"./internal/_reduced":185}],300:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _reduced = /*#__PURE__*/require('./internal/_reduced');

/**
 * Returns a value wrapped to indicate that it is the final value of the reduce
 * and transduce functions. The returned value should be considered a black
 * box: the internal structure is not guaranteed to be stable.
 *
 * Note: this optimization is unavailable to functions not explicitly listed
 * above. For instance, it is not currently supported by
 * [`reduceRight`](#reduceRight).
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category List
 * @sig a -> *
 * @param {*} x The final value of the reduce.
 * @return {*} The wrapped value.
 * @see R.reduce, R.transduce
 * @example
 *
 *     R.reduce(
 *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),
 *       [],
 *       [1, 2, 3, 4, 5]) // [1, 2, 3]
 */


var reduced = /*#__PURE__*/_curry1(_reduced);
module.exports = reduced;
},{"./internal/_curry1":151,"./internal/_reduced":185}],301:[function(require,module,exports){
var _complement = /*#__PURE__*/require('./internal/_complement');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var filter = /*#__PURE__*/require('./filter');

/**
 * The complement of [`filter`](#filter).
 *
 * Acts as a transducer if a transformer is given in list position. Filterable
 * objects include plain objects or any object that has a filter method such
 * as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.filter, R.transduce, R.addIndex
 * @example
 *
 *      var isOdd = (n) => n % 2 === 1;
 *
 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */


var reject = /*#__PURE__*/_curry2(function reject(pred, filterable) {
  return filter(_complement(pred), filterable);
});
module.exports = reject;
},{"./filter":110,"./internal/_complement":146,"./internal/_curry2":152}],302:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Removes the sub-list of `list` starting at index `start` and containing
 * `count` elements. _Note that this is not destructive_: it returns a copy of
 * the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @param {Number} start The position to start removing elements
 * @param {Number} count The number of elements to remove
 * @param {Array} list The list to remove from
 * @return {Array} A new Array with `count` elements from `start` removed.
 * @example
 *
 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
 */


var remove = /*#__PURE__*/_curry3(function remove(start, count, list) {
  var result = Array.prototype.slice.call(list, 0);
  result.splice(start, count);
  return result;
});
module.exports = remove;
},{"./internal/_curry3":153}],303:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var always = /*#__PURE__*/require('./always');

var times = /*#__PURE__*/require('./times');

/**
 * Returns a fixed list of size `n` containing a specified identical value.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig a -> n -> [a]
 * @param {*} value The value to repeat.
 * @param {Number} n The desired size of the output list.
 * @return {Array} A new array containing `n` `value`s.
 * @see R.times
 * @example
 *
 *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
 *
 *      var obj = {};
 *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
 *      repeatedObjs[0] === repeatedObjs[1]; //=> true
 * @symb R.repeat(a, 0) = []
 * @symb R.repeat(a, 1) = [a]
 * @symb R.repeat(a, 2) = [a, a]
 */


var repeat = /*#__PURE__*/_curry2(function repeat(value, n) {
  return times(always(value), n);
});
module.exports = repeat;
},{"./always":55,"./internal/_curry2":152,"./times":329}],304:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Replace a substring or regex match in a string with a replacement.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category String
 * @sig RegExp|String -> String -> String -> String
 * @param {RegExp|String} pattern A regular expression or a substring to match.
 * @param {String} replacement The string to replace the matches with.
 * @param {String} str The String to do the search and replacement in.
 * @return {String} The result.
 * @example
 *
 *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *
 *      // Use the "g" (global) flag to replace all occurrences:
 *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
 */


var replace = /*#__PURE__*/_curry3(function replace(regex, replacement, str) {
  return str.replace(regex, replacement);
});
module.exports = replace;
},{"./internal/_curry3":153}],305:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _isString = /*#__PURE__*/require('./internal/_isString');

/**
 * Returns a new list or string with the elements or characters in reverse
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {Array|String} list
 * @return {Array|String}
 * @example
 *
 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
 *      R.reverse([1, 2]);     //=> [2, 1]
 *      R.reverse([1]);        //=> [1]
 *      R.reverse([]);         //=> []
 *
 *      R.reverse('abc');      //=> 'cba'
 *      R.reverse('ab');       //=> 'ba'
 *      R.reverse('a');        //=> 'a'
 *      R.reverse('');         //=> ''
 */


var reverse = /*#__PURE__*/_curry1(function reverse(list) {
  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
});
module.exports = reverse;
},{"./internal/_curry1":151,"./internal/_isString":175}],306:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Scan is similar to [`reduce`](#reduce), but returns a list of successively
 * reduced values from the left
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> [a]
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {Array} A list of all intermediately reduced values.
 * @see R.reduce
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
 * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
 */


var scan = /*#__PURE__*/_curry3(function scan(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [acc];
  while (idx < len) {
    acc = fn(acc, list[idx]);
    result[idx + 1] = acc;
    idx += 1;
  }
  return result;
});
module.exports = scan;
},{"./internal/_curry3":153}],307:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var ap = /*#__PURE__*/require('./ap');

var map = /*#__PURE__*/require('./map');

var prepend = /*#__PURE__*/require('./prepend');

var reduceRight = /*#__PURE__*/require('./reduceRight');

/**
 * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
 * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
 * Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
 * @param {Function} of
 * @param {*} traversable
 * @return {*}
 * @see R.traverse
 * @example
 *
 *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
 *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
 *
 *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
 *      R.sequence(R.of, Nothing());       //=> [Nothing()]
 */


var sequence = /*#__PURE__*/_curry2(function sequence(of, traversable) {
  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {
    return ap(map(prepend, x), acc);
  }, of([]), traversable);
});
module.exports = sequence;
},{"./ap":59,"./internal/_curry2":152,"./map":234,"./prepend":286,"./reduceRight":298}],308:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var always = /*#__PURE__*/require('./always');

var over = /*#__PURE__*/require('./over');

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the given value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> a -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
 *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
 */


var set = /*#__PURE__*/_curry3(function set(lens, v, x) {
  return over(lens, always(v), x);
});
module.exports = set;
},{"./always":55,"./internal/_curry3":153,"./over":270}],309:[function(require,module,exports){
var _checkForMethod = /*#__PURE__*/require('./internal/_checkForMethod');

var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */


var slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));
module.exports = slice;
},{"./internal/_checkForMethod":143,"./internal/_curry3":153}],310:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a copy of the list, sorted according to the comparator function,
 * which should accept two values at a time and return a negative number if the
 * first value is smaller, a positive number if it's larger, and zero if they
 * are equal. Please note that this is a **copy** of the list. It does not
 * modify the original.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, a) -> Number) -> [a] -> [a]
 * @param {Function} comparator A sorting function :: a -> b -> Int
 * @param {Array} list The list to sort
 * @return {Array} a new array with its elements sorted by the comparator function.
 * @example
 *
 *      var diff = function(a, b) { return a - b; };
 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
 */


var sort = /*#__PURE__*/_curry2(function sort(comparator, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator);
});
module.exports = sort;
},{"./internal/_curry2":152}],311:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Sorts the list according to the supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord b => (a -> b) -> [a] -> [a]
 * @param {Function} fn
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `fn`.
 * @example
 *
 *      var sortByFirstItem = R.sortBy(R.prop(0));
 *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
 *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var bob = {
 *        name: 'Bob',
 *        age: -10
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 314.159
 *      };
 *      var people = [clara, bob, alice];
 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
 */


var sortBy = /*#__PURE__*/_curry2(function sortBy(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});
module.exports = sortBy;
},{"./internal/_curry2":152}],312:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Sorts a list according to a list of comparators.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Relation
 * @sig [(a, a) -> Number] -> [a] -> [a]
 * @param {Array} functions A list of comparator functions.
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted according to the comarator functions.
 * @example
 *
 *      var alice = {
 *        name: 'alice',
 *        age: 40
 *      };
 *      var bob = {
 *        name: 'bob',
 *        age: 30
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 40
 *      };
 *      var people = [clara, bob, alice];
 *      var ageNameSort = R.sortWith([
 *        R.descend(R.prop('age')),
 *        R.ascend(R.prop('name'))
 *      ]);
 *      ageNameSort(people); //=> [alice, clara, bob]
 */


var sortWith = /*#__PURE__*/_curry2(function sortWith(fns, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var result = 0;
    var i = 0;
    while (result === 0 && i < fns.length) {
      result = fns[i](a, b);
      i += 1;
    }
    return result;
  });
});
module.exports = sortWith;
},{"./internal/_curry2":152}],313:[function(require,module,exports){
var invoker = /*#__PURE__*/require('./invoker');

/**
 * Splits a string into an array of strings based on the given
 * separator.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig (String | RegExp) -> String -> [String]
 * @param {String|RegExp} sep The pattern.
 * @param {String} str The string to separate into an array.
 * @return {Array} The array of strings from `str` separated by `str`.
 * @see R.join
 * @example
 *
 *      var pathComponents = R.split('/');
 *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
 *
 *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
 */


var split = /*#__PURE__*/invoker(1, 'split');
module.exports = split;
},{"./invoker":215}],314:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var length = /*#__PURE__*/require('./length');

var slice = /*#__PURE__*/require('./slice');

/**
 * Splits a given list or string at a given index.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig Number -> [a] -> [[a], [a]]
 * @sig Number -> String -> [String, String]
 * @param {Number} index The index where the array/string is split.
 * @param {Array|String} array The array/string to be split.
 * @return {Array}
 * @example
 *
 *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
 *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
 *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
 */


var splitAt = /*#__PURE__*/_curry2(function splitAt(index, array) {
  return [slice(0, index, array), slice(index, length(array), array)];
});
module.exports = splitAt;
},{"./internal/_curry2":152,"./length":225,"./slice":309}],315:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var slice = /*#__PURE__*/require('./slice');

/**
 * Splits a collection into slices of the specified length.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @sig Number -> String -> [String]
 * @param {Number} n
 * @param {Array} list
 * @return {Array}
 * @example
 *
 *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
 *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
 */


var splitEvery = /*#__PURE__*/_curry2(function splitEvery(n, list) {
  if (n <= 0) {
    throw new Error('First argument to splitEvery must be a positive integer');
  }
  var result = [];
  var idx = 0;
  while (idx < list.length) {
    result.push(slice(idx, idx += n, list));
  }
  return result;
});
module.exports = splitEvery;
},{"./internal/_curry2":152,"./slice":309}],316:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Takes a list and a predicate and returns a pair of lists with the following properties:
 *
 *  - the result of concatenating the two output lists is equivalent to the input list;
 *  - none of the elements of the first output list satisfies the predicate; and
 *  - if the second output list is non-empty, its first element satisfies the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [[a], [a]]
 * @param {Function} pred The predicate that determines where the array is split.
 * @param {Array} list The array to be split.
 * @return {Array}
 * @example
 *
 *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
 */


var splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {
  var idx = 0;
  var len = list.length;
  var prefix = [];

  while (idx < len && !pred(list[idx])) {
    prefix.push(list[idx]);
    idx += 1;
  }

  return [prefix, Array.prototype.slice.call(list, idx)];
});
module.exports = splitWhen;
},{"./internal/_curry2":152}],317:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var equals = /*#__PURE__*/require('./equals');

var take = /*#__PURE__*/require('./take');

/**
 * Checks if a list starts with the provided values
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> Boolean
 * @sig String -> Boolean
 * @param {*} prefix
 * @param {*} list
 * @return {Boolean}
 * @example
 *
 *      R.startsWith('a', 'abc')                //=> true
 *      R.startsWith('b', 'abc')                //=> false
 *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
 *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
 */


var startsWith = /*#__PURE__*/_curry2(function (prefix, list) {
  return equals(take(prefix.length, list), prefix);
});
module.exports = startsWith;
},{"./equals":108,"./internal/_curry2":152,"./take":323}],318:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Subtracts its second argument from its first argument.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a - b`.
 * @see R.add
 * @example
 *
 *      R.subtract(10, 8); //=> 2
 *
 *      var minus5 = R.subtract(R.__, 5);
 *      minus5(17); //=> 12
 *
 *      var complementaryAngle = R.subtract(90);
 *      complementaryAngle(30); //=> 60
 *      complementaryAngle(72); //=> 18
 */


var subtract = /*#__PURE__*/_curry2(function subtract(a, b) {
  return Number(a) - Number(b);
});
module.exports = subtract;
},{"./internal/_curry2":152}],319:[function(require,module,exports){
var add = /*#__PURE__*/require('./add');

var reduce = /*#__PURE__*/require('./reduce');

/**
 * Adds together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The sum of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.sum([2,4,6,8,100,1]); //=> 121
 */


var sum = /*#__PURE__*/reduce(add, 0);
module.exports = sum;
},{"./add":50,"./reduce":296}],320:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var concat = /*#__PURE__*/require('./concat');

var difference = /*#__PURE__*/require('./difference');

/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
 * @example
 *
 *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
 *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
 */


var symmetricDifference = /*#__PURE__*/_curry2(function symmetricDifference(list1, list2) {
  return concat(difference(list1, list2), difference(list2, list1));
});
module.exports = symmetricDifference;
},{"./concat":80,"./difference":92,"./internal/_curry2":152}],321:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var concat = /*#__PURE__*/require('./concat');

var differenceWith = /*#__PURE__*/require('./differenceWith');

/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both. Duplication is determined according to the value
 * returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifference, R.difference, R.differenceWith
 * @example
 *
 *      var eqA = R.eqBy(R.prop('a'));
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
 *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
 *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
 */


var symmetricDifferenceWith = /*#__PURE__*/_curry3(function symmetricDifferenceWith(pred, list1, list2) {
  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
});
module.exports = symmetricDifferenceWith;
},{"./concat":80,"./differenceWith":93,"./internal/_curry3":153}],322:[function(require,module,exports){
var _checkForMethod = /*#__PURE__*/require('./internal/_checkForMethod');

var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var slice = /*#__PURE__*/require('./slice');

/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */


var tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));
module.exports = tail;
},{"./internal/_checkForMethod":143,"./internal/_curry1":151,"./slice":309}],323:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xtake = /*#__PURE__*/require('./internal/_xtake');

var slice = /*#__PURE__*/require('./slice');

/**
 * Returns the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `take` method).
 *
 * Dispatches to the `take` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*}
 * @see R.drop
 * @example
 *
 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(3, 'ramda');               //=> 'ram'
 *
 *      var personnel = [
 *        'Dave Brubeck',
 *        'Paul Desmond',
 *        'Eugene Wright',
 *        'Joe Morello',
 *        'Gerry Mulligan',
 *        'Bob Bates',
 *        'Joe Dodge',
 *        'Ron Crotty'
 *      ];
 *
 *      var takeFive = R.take(5);
 *      takeFive(personnel);
 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
 * @symb R.take(-1, [a, b]) = [a, b]
 * @symb R.take(0, [a, b]) = []
 * @symb R.take(1, [a, b]) = [a]
 * @symb R.take(2, [a, b]) = [a, b]
 */


var take = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {
  return slice(0, n < 0 ? Infinity : n, xs);
}));
module.exports = take;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xtake":206,"./slice":309}],324:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var drop = /*#__PURE__*/require('./drop');

/**
 * Returns a new list containing the last `n` elements of the given list.
 * If `n > list.length`, returns a list of `list.length` elements.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements to return.
 * @param {Array} xs The collection to consider.
 * @return {Array}
 * @see R.dropLast
 * @example
 *
 *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(3, 'ramda');               //=> 'mda'
 */


var takeLast = /*#__PURE__*/_curry2(function takeLast(n, xs) {
  return drop(n >= 0 ? xs.length - n : 0, xs);
});
module.exports = takeLast;
},{"./drop":97,"./internal/_curry2":152}],325:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var slice = /*#__PURE__*/require('./slice');

/**
 * Returns a new list containing the last `n` elements of a given list, passing
 * each value to the supplied predicate function, and terminating when the
 * predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropLastWhile, R.addIndex
 * @example
 *
 *      var isNotOne = x => x !== 1;
 *
 *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
 *
 *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'
 */


var takeLastWhile = /*#__PURE__*/_curry2(function takeLastWhile(fn, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && fn(xs[idx])) {
    idx -= 1;
  }
  return slice(idx + 1, Infinity, xs);
});
module.exports = takeLastWhile;
},{"./internal/_curry2":152,"./slice":309}],326:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xtakeWhile = /*#__PURE__*/require('./internal/_xtakeWhile');

var slice = /*#__PURE__*/require('./slice');

/**
 * Returns a new list containing the first `n` elements of a given list,
 * passing each value to the supplied predicate function, and terminating when
 * the predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * Dispatches to the `takeWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropWhile, R.transduce, R.addIndex
 * @example
 *
 *      var isNotFour = x => x !== 4;
 *
 *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
 *
 *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'
 */


var takeWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && fn(xs[idx])) {
    idx += 1;
  }
  return slice(0, idx, xs);
}));
module.exports = takeWhile;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xtakeWhile":207,"./slice":309}],327:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');

var _xtap = /*#__PURE__*/require('./internal/_xtap');

/**
 * Runs the given function with the supplied object, then returns the object.
 *
 * Acts as a transducer if a transformer is given as second parameter.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> *) -> a -> a
 * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
 * @param {*} x
 * @return {*} `x`.
 * @example
 *
 *      var sayX = x => console.log('x is ' + x);
 *      R.tap(sayX, 100); //=> 100
 *      // logs 'x is 100'
 * @symb R.tap(f, a) = a
 */


var tap = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xtap, function tap(fn, x) {
  fn(x);
  return x;
}));
module.exports = tap;
},{"./internal/_curry2":152,"./internal/_dispatchable":155,"./internal/_xtap":208}],328:[function(require,module,exports){
var _cloneRegExp = /*#__PURE__*/require('./internal/_cloneRegExp');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _isRegExp = /*#__PURE__*/require('./internal/_isRegExp');

var toString = /*#__PURE__*/require('./toString');

/**
 * Determines whether a given string matches a given regular expression.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category String
 * @sig RegExp -> String -> Boolean
 * @param {RegExp} pattern
 * @param {String} str
 * @return {Boolean}
 * @see R.match
 * @example
 *
 *      R.test(/^x/, 'xyz'); //=> true
 *      R.test(/^y/, 'xyz'); //=> false
 */


var test = /*#__PURE__*/_curry2(function test(pattern, str) {
  if (!_isRegExp(pattern)) {
    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));
  }
  return _cloneRegExp(pattern).test(str);
});
module.exports = test;
},{"./internal/_cloneRegExp":145,"./internal/_curry2":152,"./internal/_isRegExp":174,"./toString":333}],329:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Calls an input function `n` times, returning an array containing the results
 * of those function calls.
 *
 * `fn` is passed one argument: The current value of `n`, which begins at `0`
 * and is gradually incremented to `n - 1`.
 *
 * @func
 * @memberOf R
 * @since v0.2.3
 * @category List
 * @sig (Number -> a) -> Number -> [a]
 * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
 * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
 * @return {Array} An array containing the return values of all calls to `fn`.
 * @see R.repeat
 * @example
 *
 *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
 * @symb R.times(f, 0) = []
 * @symb R.times(f, 1) = [f(0)]
 * @symb R.times(f, 2) = [f(0), f(1)]
 */


var times = /*#__PURE__*/_curry2(function times(fn, n) {
  var len = Number(n);
  var idx = 0;
  var list;

  if (len < 0 || isNaN(len)) {
    throw new RangeError('n must be a non-negative number');
  }
  list = new Array(len);
  while (idx < len) {
    list[idx] = fn(idx);
    idx += 1;
  }
  return list;
});
module.exports = times;
},{"./internal/_curry2":152}],330:[function(require,module,exports){
var invoker = /*#__PURE__*/require('./invoker');

/**
 * The lower case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to lower case.
 * @return {String} The lower case version of `str`.
 * @see R.toUpper
 * @example
 *
 *      R.toLower('XYZ'); //=> 'xyz'
 */


var toLower = /*#__PURE__*/invoker(0, 'toLowerCase');
module.exports = toLower;
},{"./invoker":215}],331:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _has = /*#__PURE__*/require('./internal/_has');

/**
 * Converts an object into an array of key, value arrays. Only the object's
 * own properties are used.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own properties.
 * @see R.fromPairs
 * @example
 *
 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
 */


var toPairs = /*#__PURE__*/_curry1(function toPairs(obj) {
  var pairs = [];
  for (var prop in obj) {
    if (_has(prop, obj)) {
      pairs[pairs.length] = [prop, obj[prop]];
    }
  }
  return pairs;
});
module.exports = toPairs;
},{"./internal/_curry1":151,"./internal/_has":163}],332:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Converts an object into an array of key, value arrays. The object's own
 * properties and prototype properties are used. Note that the order of the
 * output array is not guaranteed to be consistent across different JS
 * platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own
 *         and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
 */


var toPairsIn = /*#__PURE__*/_curry1(function toPairsIn(obj) {
  var pairs = [];
  for (var prop in obj) {
    pairs[pairs.length] = [prop, obj[prop]];
  }
  return pairs;
});
module.exports = toPairsIn;
},{"./internal/_curry1":151}],333:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var _toString = /*#__PURE__*/require('./internal/_toString');

/**
 * Returns the string representation of the given value. `eval`'ing the output
 * should result in a value equivalent to the input value. Many of the built-in
 * `toString` methods do not satisfy this requirement.
 *
 * If the given value is an `[object Object]` with a `toString` method other
 * than `Object.prototype.toString`, this method is invoked with no arguments
 * to produce the return value. This means user-defined constructor functions
 * can provide a suitable `toString` method. For example:
 *
 *     function Point(x, y) {
 *       this.x = x;
 *       this.y = y;
 *     }
 *
 *     Point.prototype.toString = function() {
 *       return 'new Point(' + this.x + ', ' + this.y + ')';
 *     };
 *
 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category String
 * @sig * -> String
 * @param {*} val
 * @return {String}
 * @example
 *
 *      R.toString(42); //=> '42'
 *      R.toString('abc'); //=> '"abc"'
 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
 */


var toString = /*#__PURE__*/_curry1(function toString(val) {
  return _toString(val, []);
});
module.exports = toString;
},{"./internal/_curry1":151,"./internal/_toString":188}],334:[function(require,module,exports){
var invoker = /*#__PURE__*/require('./invoker');

/**
 * The upper case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to upper case.
 * @return {String} The upper case version of `str`.
 * @see R.toLower
 * @example
 *
 *      R.toUpper('abc'); //=> 'ABC'
 */


var toUpper = /*#__PURE__*/invoker(0, 'toUpperCase');
module.exports = toUpper;
},{"./invoker":215}],335:[function(require,module,exports){
var _reduce = /*#__PURE__*/require('./internal/_reduce');

var _xwrap = /*#__PURE__*/require('./internal/_xwrap');

var curryN = /*#__PURE__*/require('./curryN');

/**
 * Initializes a transducer using supplied iterator function. Returns a single
 * item by iterating through the list, successively calling the transformed
 * iterator function and passing it an accumulator value and the current value
 * from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It will be
 * wrapped as a transformer to initialize the transducer. A transformer can be
 * passed directly in place of an iterator function. In both cases, iteration
 * may be stopped early with the [`R.reduced`](#reduced) function.
 *
 * A transducer is a function that accepts a transformer and returns a
 * transformer and can be composed directly.
 *
 * A transformer is an an object that provides a 2-arity reducing iterator
 * function, step, 0-arity initial value function, init, and 1-arity result
 * extraction function, result. The step function is used as the iterator
 * function in reduce. The result function is used to convert the final
 * accumulator into the return type and in most cases is
 * [`R.identity`](#identity). The init function can be used to provide an
 * initial accumulator, but is ignored by transduce.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array. Wrapped as transformer, if necessary, and used to
 *        initialize the transducer
 * @param {*} acc The initial accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced, R.into
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
 *
 *      var isOdd = (x) => x % 2 === 1;
 *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
 *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
 */


var transduce = /*#__PURE__*/curryN(4, function transduce(xf, fn, acc, list) {
  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
});
module.exports = transduce;
},{"./curryN":88,"./internal/_reduce":184,"./internal/_xwrap":209}],336:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Transposes the rows and columns of a 2D list.
 * When passed a list of `n` lists of length `x`,
 * returns a list of `x` lists of length `n`.
 *
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [[a]] -> [[a]]
 * @param {Array} list A 2D list
 * @return {Array} A 2D list
 * @example
 *
 *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
 *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 *
 *      // If some of the rows are shorter than the following rows, their elements are skipped:
 *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
 * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
 * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
 * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
 */


var transpose = /*#__PURE__*/_curry1(function transpose(outerlist) {
  var i = 0;
  var result = [];
  while (i < outerlist.length) {
    var innerlist = outerlist[i];
    var j = 0;
    while (j < innerlist.length) {
      if (typeof result[j] === 'undefined') {
        result[j] = [];
      }
      result[j].push(innerlist[j]);
      j += 1;
    }
    i += 1;
  }
  return result;
});
module.exports = transpose;
},{"./internal/_curry1":151}],337:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var map = /*#__PURE__*/require('./map');

var sequence = /*#__PURE__*/require('./sequence');

/**
 * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
 * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
 * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
 * into an Applicative of Traversable.
 *
 * Dispatches to the `traverse` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
 * @param {Function} of
 * @param {Function} f
 * @param {*} traversable
 * @return {*}
 * @see R.sequence
 * @example
 *
 *      // Returns `Nothing` if the given divisor is `0`
 *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)
 *
 *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])
 *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing
 */


var traverse = /*#__PURE__*/_curry3(function traverse(of, f, traversable) {
  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : sequence(of, map(f, traversable));
});
module.exports = traverse;
},{"./internal/_curry3":153,"./map":234,"./sequence":307}],338:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
var zeroWidth = '\u200b';
var hasProtoTrim = typeof String.prototype.trim === 'function';
/**
 * Removes (strips) whitespace from both ends of the string.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to trim.
 * @return {String} Trimmed version of `str`.
 * @example
 *
 *      R.trim('   xyz  '); //=> 'xyz'
 *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
 */
var _trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? function trim(str) {
  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
  return str.replace(beginRx, '').replace(endRx, '');
} : function trim(str) {
  return str.trim();
};
var trim = /*#__PURE__*/_curry1(_trim);
module.exports = trim;
},{"./internal/_curry1":151}],339:[function(require,module,exports){
var _arity = /*#__PURE__*/require('./internal/_arity');

var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false
 */


var tryCatch = /*#__PURE__*/_curry2(function _tryCatch(tryer, catcher) {
  return _arity(tryer.length, function () {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, _concat([e], arguments));
    }
  });
});
module.exports = tryCatch;
},{"./internal/_arity":140,"./internal/_concat":147,"./internal/_curry2":152}],340:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 *      R.type(() => {}); //=> "Function"
 *      R.type(undefined); //=> "Undefined"
 */


var type = /*#__PURE__*/_curry1(function type(val) {
  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
});
module.exports = type;
},{"./internal/_curry1":151}],341:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Takes a function `fn`, which takes a single array argument, and returns a
 * function which:
 *
 *   - takes any number of positional arguments;
 *   - passes these arguments to `fn` as an array; and
 *   - returns the result.
 *
 * In other words, `R.unapply` derives a variadic function from a function which
 * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Function
 * @sig ([*...] -> a) -> (*... -> a)
 * @param {Function} fn
 * @return {Function}
 * @see R.apply
 * @example
 *
 *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
 * @symb R.unapply(f)(a, b) = f([a, b])
 */


var unapply = /*#__PURE__*/_curry1(function unapply(fn) {
  return function () {
    return fn(Array.prototype.slice.call(arguments, 0));
  };
});
module.exports = unapply;
},{"./internal/_curry1":151}],342:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var nAry = /*#__PURE__*/require('./nAry');

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 1 parameter. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> b) -> (a -> b)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 1.
 * @see R.binary, R.nAry
 * @example
 *
 *      var takesTwoArgs = function(a, b) {
 *        return [a, b];
 *      };
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.unary(takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only 1 argument is passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.unary(f)(a, b, c) = f(a)
 */


var unary = /*#__PURE__*/_curry1(function unary(fn) {
  return nAry(1, fn);
});
module.exports = unary;
},{"./internal/_curry1":151,"./nAry":258}],343:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var curryN = /*#__PURE__*/require('./curryN');

/**
 * Returns a function of arity `n` from a (manually) curried function.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Function
 * @sig Number -> (a -> b) -> (a -> c)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to uncurry.
 * @return {Function} A new function.
 * @see R.curry
 * @example
 *
 *      var addFour = a => b => c => d => a + b + c + d;
 *
 *      var uncurriedAddFour = R.uncurryN(4, addFour);
 *      uncurriedAddFour(1, 2, 3, 4); //=> 10
 */


var uncurryN = /*#__PURE__*/_curry2(function uncurryN(depth, fn) {
  return curryN(depth, function () {
    var currentDepth = 1;
    var value = fn;
    var idx = 0;
    var endIdx;
    while (currentDepth <= depth && typeof value === 'function') {
      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
      currentDepth += 1;
      idx = endIdx;
    }
    return value;
  });
});
module.exports = uncurryN;
},{"./curryN":88,"./internal/_curry2":152}],344:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Builds a list from a seed value. Accepts an iterator function, which returns
 * either false to stop iteration or an array of length 2 containing the value
 * to add to the resulting list and the seed to be used in the next call to the
 * iterator function.
 *
 * The iterator function receives one argument: *(seed)*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a -> [b]) -> * -> [b]
 * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
 *        either false to quit iteration or an array of length two to proceed. The element
 *        at index 0 of this array will be added to the resulting array, and the element
 *        at index 1 will be passed to the next call to `fn`.
 * @param {*} seed The seed value.
 * @return {Array} The final list.
 * @example
 *
 *      var f = n => n > 50 ? false : [-n, n + 10];
 *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
 * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
 */


var unfold = /*#__PURE__*/_curry2(function unfold(fn, seed) {
  var pair = fn(seed);
  var result = [];
  while (pair && pair.length) {
    result[result.length] = pair[0];
    pair = fn(pair[1]);
  }
  return result;
});
module.exports = unfold;
},{"./internal/_curry2":152}],345:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var compose = /*#__PURE__*/require('./compose');

var uniq = /*#__PURE__*/require('./uniq');

/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @example
 *
 *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
 */


var union = /*#__PURE__*/_curry2( /*#__PURE__*/compose(uniq, _concat));
module.exports = union;
},{"./compose":77,"./internal/_concat":147,"./internal/_curry2":152,"./uniq":347}],346:[function(require,module,exports){
var _concat = /*#__PURE__*/require('./internal/_concat');

var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var uniqWith = /*#__PURE__*/require('./uniqWith');

/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list. Duplication is determined according to the value returned by
 * applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @see R.union
 * @example
 *
 *      var l1 = [{a: 1}, {a: 2}];
 *      var l2 = [{a: 1}, {a: 4}];
 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
 */


var unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {
  return uniqWith(pred, _concat(list1, list2));
});
module.exports = unionWith;
},{"./internal/_concat":147,"./internal/_curry3":153,"./uniqWith":349}],347:[function(require,module,exports){
var identity = /*#__PURE__*/require('./identity');

var uniqBy = /*#__PURE__*/require('./uniqBy');

/**
 * Returns a new list containing only one copy of each element in the original
 * list. [`R.equals`](#equals) is used to determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
 *      R.uniq([1, '1']);     //=> [1, '1']
 *      R.uniq([[42], [42]]); //=> [[42]]
 */


var uniq = /*#__PURE__*/uniqBy(identity);
module.exports = uniq;
},{"./identity":128,"./uniqBy":348}],348:[function(require,module,exports){
var _Set = /*#__PURE__*/require('./internal/_Set');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied function to
 * each list element. Prefers the first item if the supplied function produces
 * the same value on two items. [`R.equals`](#equals) is used for comparison.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> b) -> [a] -> [a]
 * @param {Function} fn A function used to produce a value to use during comparisons.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
 */


var uniqBy = /*#__PURE__*/_curry2(function uniqBy(fn, list) {
  var set = new _Set();
  var result = [];
  var idx = 0;
  var appliedItem, item;

  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);
    if (set.add(appliedItem)) {
      result.push(item);
    }
    idx += 1;
  }
  return result;
});
module.exports = uniqBy;
},{"./internal/_Set":138,"./internal/_curry2":152}],349:[function(require,module,exports){
var _containsWith = /*#__PURE__*/require('./internal/_containsWith');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied predicate to
 * two list elements. Prefers the first item if two items compare equal based
 * on the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      var strEq = R.eqBy(String);
 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
 */


var uniqWith = /*#__PURE__*/_curry2(function uniqWith(pred, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var item;
  while (idx < len) {
    item = list[idx];
    if (!_containsWith(pred, item, result)) {
      result[result.length] = item;
    }
    idx += 1;
  }
  return result;
});
module.exports = uniqWith;
},{"./internal/_containsWith":149,"./internal/_curry2":152}],350:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is not satisfied, the function will return the result of
 * calling the `whenFalseFn` function with the same argument. If the predicate
 * is satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred        A predicate function
 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
 *                               to a falsy value.
 * @param {*}        x           An object to test with the `pred` function and
 *                               pass to `whenFalseFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
 * @see R.ifElse, R.when
 * @example
 *
 *      let safeInc = R.unless(R.isNil, R.inc);
 *      safeInc(null); //=> null
 *      safeInc(1); //=> 2
 */


var unless = /*#__PURE__*/_curry3(function unless(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});
module.exports = unless;
},{"./internal/_curry3":153}],351:[function(require,module,exports){
var _identity = /*#__PURE__*/require('./internal/_identity');

var chain = /*#__PURE__*/require('./chain');

/**
 * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
 * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain c => c (c a) -> c a
 * @param {*} list
 * @return {*}
 * @see R.flatten, R.chain
 * @example
 *
 *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
 *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
 */


var unnest = /*#__PURE__*/chain(_identity);
module.exports = unnest;
},{"./chain":72,"./internal/_identity":164}],352:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Takes a predicate, a transformation function, and an initial value,
 * and returns a value of the same type as the initial value.
 * It does so by applying the transformation until the predicate is satisfied,
 * at which point it returns the satisfactory value.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred A predicate function
 * @param {Function} fn The iterator function
 * @param {*} init Initial value
 * @return {*} Final value that satisfies predicate
 * @example
 *
 *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
 */


var until = /*#__PURE__*/_curry3(function until(pred, fn, init) {
  var val = init;
  while (!pred(val)) {
    val = fn(val);
  }
  return val;
});
module.exports = until;
},{"./internal/_curry3":153}],353:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

var adjust = /*#__PURE__*/require('./adjust');

var always = /*#__PURE__*/require('./always');

/**
 * Returns a new copy of the array with the element at the provided index
 * replaced with the given value.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} idx The index to update.
 * @param {*} x The value to exist at the given index of the returned array.
 * @param {Array|Arguments} list The source array-like object to be updated.
 * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
 * @see R.adjust
 * @example
 *
 *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]
 *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]
 * @symb R.update(-1, a, [b, c]) = [b, a]
 * @symb R.update(0, a, [b, c]) = [a, c]
 * @symb R.update(1, a, [b, c]) = [b, a]
 */


var update = /*#__PURE__*/_curry3(function update(idx, x, list) {
  return adjust(always(x), idx, list);
});
module.exports = update;
},{"./adjust":52,"./always":55,"./internal/_curry3":153}],354:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var curryN = /*#__PURE__*/require('./curryN');

/**
 * Accepts a function `fn` and a list of transformer functions and returns a
 * new curried function. When the new function is invoked, it calls the
 * function `fn` with parameters consisting of the result of calling each
 * supplied handler on successive arguments to the new function.
 *
 * If more arguments are passed to the returned function than transformer
 * functions, those arguments are passed directly to `fn` as additional
 * parameters. If you expect additional arguments that don't need to be
 * transformed, although you can ignore them, it's best to pass an identity
 * function so that the new function reports the correct arity.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} fn The function to wrap.
 * @param {Array} transformers A list of transformer functions
 * @return {Function} The wrapped function.
 * @see R.converge
 * @example
 *
 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
 * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
 */


var useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {
  return curryN(transformers.length, function () {
    var args = [];
    var idx = 0;
    while (idx < transformers.length) {
      args.push(transformers[idx].call(this, arguments[idx]));
      idx += 1;
    }
    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
  });
});
module.exports = useWith;
},{"./curryN":88,"./internal/_curry2":152}],355:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

var keys = /*#__PURE__*/require('./keys');

/**
 * Returns a list of all the enumerable own properties of the supplied object.
 * Note that the order of the output array is not guaranteed across different
 * JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own properties.
 * @see R.valuesIn, R.keys
 * @example
 *
 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
 */


var values = /*#__PURE__*/_curry1(function values(obj) {
  var props = keys(obj);
  var len = props.length;
  var vals = [];
  var idx = 0;
  while (idx < len) {
    vals[idx] = obj[props[idx]];
    idx += 1;
  }
  return vals;
});
module.exports = values;
},{"./internal/_curry1":151,"./keys":221}],356:[function(require,module,exports){
var _curry1 = /*#__PURE__*/require('./internal/_curry1');

/**
 * Returns a list of all the properties, including prototype properties, of the
 * supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own and prototype properties.
 * @see R.values, R.keysIn
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.valuesIn(f); //=> ['X', 'Y']
 */


var valuesIn = /*#__PURE__*/_curry1(function valuesIn(obj) {
  var prop;
  var vs = [];
  for (prop in obj) {
    vs[vs.length] = obj[prop];
  }
  return vs;
});
module.exports = valuesIn;
},{"./internal/_curry1":151}],357:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

// `Const` is a functor that effectively ignores the function given to `map`.


var Const = function (x) {
  return { value: x, 'fantasy-land/map': function () {
      return this;
    } };
};

/**
 * Returns a "view" of the given data structure, determined by the given lens.
 * The lens's focus determines which portion of the data structure is visible.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> s -> a
 * @param {Lens} lens
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});  //=> 1
 *      R.view(xLens, {x: 4, y: 2});  //=> 4
 */
var view = /*#__PURE__*/_curry2(function view(lens, x) {
  // Using `Const` effectively ignores the setter function of the `lens`,
  // leaving the value returned by the getter function unmodified.
  return lens(Const)(x).value;
});
module.exports = view;
},{"./internal/_curry2":152}],358:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is satisfied, the function will return the result of calling
 * the `whenTrueFn` function with the same argument. If the predicate is not
 * satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred       A predicate function
 * @param {Function} whenTrueFn A function to invoke when the `condition`
 *                              evaluates to a truthy value.
 * @param {*}        x          An object to test with the `pred` function and
 *                              pass to `whenTrueFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
 * @see R.ifElse, R.unless
 * @example
 *
 *      // truncate :: String -> String
 *      var truncate = R.when(
 *        R.propSatisfies(R.gt(R.__, 10), 'length'),
 *        R.pipe(R.take(10), R.append('…'), R.join(''))
 *      );
 *      truncate('12345');         //=> '12345'
 *      truncate('0123456789ABC'); //=> '0123456789…'
 */


var when = /*#__PURE__*/_curry3(function when(pred, whenTrueFn, x) {
  return pred(x) ? whenTrueFn(x) : x;
});
module.exports = when;
},{"./internal/_curry3":153}],359:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var _has = /*#__PURE__*/require('./internal/_has');

/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec. Each of the spec's own properties must be a predicate function.
 * Each predicate is applied to the value of the corresponding property of the
 * test object. `where` returns true if all the predicates return true, false
 * otherwise.
 *
 * `where` is well suited to declaratively expressing constraints for other
 * functions such as [`filter`](#filter) and [`find`](#find).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Object
 * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propSatisfies, R.whereEq
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.where({
 *        a: R.equals('foo'),
 *        b: R.complement(R.equals('bar')),
 *        x: R.gt(R.__, 10),
 *        y: R.lt(R.__, 20)
 *      });
 *
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
 *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
 */


var where = /*#__PURE__*/_curry2(function where(spec, testObj) {
  for (var prop in spec) {
    if (_has(prop, spec) && !spec[prop](testObj[prop])) {
      return false;
    }
  }
  return true;
});
module.exports = where;
},{"./internal/_curry2":152,"./internal/_has":163}],360:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var equals = /*#__PURE__*/require('./equals');

var map = /*#__PURE__*/require('./map');

var where = /*#__PURE__*/require('./where');

/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec, false otherwise. An object satisfies the spec if, for each of the
 * spec's own properties, accessing that property of the object gives the same
 * value (in [`R.equals`](#equals) terms) as accessing that property of the
 * spec.
 *
 * `whereEq` is a specialization of [`where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @sig {String: *} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propEq, R.where
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.whereEq({a: 1, b: 2});
 *
 *      pred({a: 1});              //=> false
 *      pred({a: 1, b: 2});        //=> true
 *      pred({a: 1, b: 2, c: 3});  //=> true
 *      pred({a: 1, b: 1});        //=> false
 */


var whereEq = /*#__PURE__*/_curry2(function whereEq(spec, testObj) {
  return where(map(equals, spec), testObj);
});
module.exports = whereEq;
},{"./equals":108,"./internal/_curry2":152,"./map":234,"./where":359}],361:[function(require,module,exports){
var _contains = /*#__PURE__*/require('./internal/_contains');

var _curry2 = /*#__PURE__*/require('./internal/_curry2');

var flip = /*#__PURE__*/require('./flip');

var reject = /*#__PURE__*/require('./reject');

/**
 * Returns a new list without values in the first argument.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @param {Array} list1 The values to be removed from `list2`.
 * @param {Array} list2 The array to remove values from.
 * @return {Array} The new array without values in `list1`.
 * @see R.transduce, R.difference
 * @example
 *
 *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
 */


var without = /*#__PURE__*/_curry2(function (xs, list) {
  return reject(flip(_contains)(xs), list);
});
module.exports = without;
},{"./flip":116,"./internal/_contains":148,"./internal/_curry2":152,"./reject":301}],362:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Creates a new list out of the two supplied by creating each possible pair
 * from the lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The list made by combining each possible pair from
 *         `as` and `bs` into pairs (`[a, b]`).
 * @example
 *
 *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
 * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
 */


var xprod = /*#__PURE__*/_curry2(function xprod(a, b) {
  // = xprodWith(prepend); (takes about 3 times as long...)
  var idx = 0;
  var ilen = a.length;
  var j;
  var jlen = b.length;
  var result = [];
  while (idx < ilen) {
    j = 0;
    while (j < jlen) {
      result[result.length] = [a[idx], b[j]];
      j += 1;
    }
    idx += 1;
  }
  return result;
});
module.exports = xprod;
},{"./internal/_curry2":152}],363:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Creates a new list out of the two supplied by pairing up equally-positioned
 * items from both lists. The returned list is truncated to the length of the
 * shorter of the two input lists.
 * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
 * @example
 *
 *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
 */


var zip = /*#__PURE__*/_curry2(function zip(a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = [a[idx], b[idx]];
    idx += 1;
  }
  return rv;
});
module.exports = zip;
},{"./internal/_curry2":152}],364:[function(require,module,exports){
var _curry2 = /*#__PURE__*/require('./internal/_curry2');

/**
 * Creates a new object out of a list of keys and a list of values.
 * Key/value pairing is truncated to the length of the shorter of the two lists.
 * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [String] -> [*] -> {String: *}
 * @param {Array} keys The array that will be properties on the output object.
 * @param {Array} values The list of values on the output object.
 * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
 * @example
 *
 *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
 */


var zipObj = /*#__PURE__*/_curry2(function zipObj(keys, values) {
  var idx = 0;
  var len = Math.min(keys.length, values.length);
  var out = {};
  while (idx < len) {
    out[keys[idx]] = values[idx];
    idx += 1;
  }
  return out;
});
module.exports = zipObj;
},{"./internal/_curry2":152}],365:[function(require,module,exports){
var _curry3 = /*#__PURE__*/require('./internal/_curry3');

/**
 * Creates a new list out of the two supplied by applying the function to each
 * equally-positioned pair in the lists. The returned list is truncated to the
 * length of the shorter of the two input lists.
 *
 * @function
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> c) -> [a] -> [b] -> [c]
 * @param {Function} fn The function used to combine the two elements into one value.
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
 *         using `fn`.
 * @example
 *
 *      var f = (x, y) => {
 *        // ...
 *      };
 *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
 *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
 * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
 */


var zipWith = /*#__PURE__*/_curry3(function zipWith(fn, a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = fn(a[idx], b[idx]);
    idx += 1;
  }
  return rv;
});
module.exports = zipWith;
},{"./internal/_curry3":153}],366:[function(require,module,exports){
(function (process){
/** @license React v16.4.2
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var invariant = require('fbjs/lib/invariant');
var React = require('react');
var warning = require('fbjs/lib/warning');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var _assign = require('object-assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var checkPropTypes = require('prop-types/checkPropTypes');
var getActiveElement = require('fbjs/lib/getActiveElement');
var shallowEqual = require('fbjs/lib/shallowEqual');
var containsNode = require('fbjs/lib/containsNode');
var emptyObject = require('fbjs/lib/emptyObject');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var camelizeStyleName = require('fbjs/lib/camelizeStyleName');

// Relying on the `invariant()` implementation lets us
// have preserve the format and params in the www builds.

!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
  this._hasCaughtError = false;
  this._caughtError = null;
  var funcArgs = Array.prototype.slice.call(arguments, 3);
  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this._caughtError = error;
    this._hasCaughtError = true;
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // untintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!

  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
      var evt = document.createEvent('Event');

      // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.
      var didError = true;

      // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false);
        func.apply(context, funcArgs);
        didError = false;
      }

      // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.
      var error = void 0;
      // Use this to track whether the error event is ever called.
      var didSetError = false;
      var isCrossOriginError = false;

      function onError(event) {
        error = event.error;
        didSetError = true;
        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }
      }

      // Create a fake event type.
      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

      // Attach our event handlers
      window.addEventListener('error', onError);
      fakeNode.addEventListener(evtType, callCallback, false);

      // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }
        this._hasCaughtError = true;
        this._caughtError = error;
      } else {
        this._hasCaughtError = false;
        this._caughtError = null;
      }

      // Remove our event listeners
      window.removeEventListener('error', onError);
    };

    invokeGuardedCallback = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallback$1 = invokeGuardedCallback;

var ReactErrorUtils = {
  // Used by Fiber to simulate a try-catch.
  _caughtError: null,
  _hasCaughtError: false,

  // Used by event system to capture/rethrow the first error.
  _rethrowError: null,
  _hasRethrowError: false,

  /**
   * Call a function while guarding against errors that happens within it.
   * Returns an error if it throws, otherwise null.
   *
   * In production, this is implemented using a try-catch. The reason we don't
   * use a try-catch directly is so that we can swap out a different
   * implementation in DEV mode.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback$1.apply(ReactErrorUtils, arguments);
  },

  /**
   * Same as invokeGuardedCallback, but instead of returning an error, it stores
   * it in a global so it can be rethrown by `rethrowCaughtError` later.
   * TODO: See if _caughtError and _rethrowError can be unified.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
    if (ReactErrorUtils.hasCaughtError()) {
      var error = ReactErrorUtils.clearCaughtError();
      if (!ReactErrorUtils._hasRethrowError) {
        ReactErrorUtils._hasRethrowError = true;
        ReactErrorUtils._rethrowError = error;
      }
    }
  },

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    return rethrowCaughtError.apply(ReactErrorUtils, arguments);
  },

  hasCaughtError: function () {
    return ReactErrorUtils._hasCaughtError;
  },

  clearCaughtError: function () {
    if (ReactErrorUtils._hasCaughtError) {
      var error = ReactErrorUtils._caughtError;
      ReactErrorUtils._caughtError = null;
      ReactErrorUtils._hasCaughtError = false;
      return error;
    } else {
      invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
    }
  }
};

var rethrowCaughtError = function () {
  if (ReactErrorUtils._hasRethrowError) {
    var error = ReactErrorUtils._rethrowError;
    ReactErrorUtils._rethrowError = null;
    ReactErrorUtils._hasRethrowError = false;
    throw error;
  }
};

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
  eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */
var plugins = [];

/**
 * Mapping from event name to dispatch config
 */
var eventNameDispatchConfigs = {};

/**
 * Mapping from registration name to plugin module
 */
var registrationNameModules = {};

/**
 * Mapping from registration name to event name
 */
var registrationNameDependencies = {};

/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */
var possibleRegistrationNames = {};
// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */
function injectEventPluginOrder(injectedEventPluginOrder) {
  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
  // Clone the ordering so it cannot be dynamically mutated.
  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */
function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;
  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }
    var pluginModule = injectedNamesToPlugins[pluginName];
    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }
  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var EventPluginRegistry = Object.freeze({
	plugins: plugins,
	eventNameDispatchConfigs: eventNameDispatchConfigs,
	registrationNameModules: registrationNameModules,
	registrationNameDependencies: registrationNameDependencies,
	possibleRegistrationNames: possibleRegistrationNames,
	injectEventPluginOrder: injectEventPluginOrder,
	injectEventPluginsByName: injectEventPluginsByName
});

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;

var injection$1 = {
  injectComponentTree: function (Injected) {
    getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
    getInstanceFromNode = Injected.getInstanceFromNode;
    getNodeFromInstance = Injected.getNodeFromInstance;

    {
      !(getNodeFromInstance && getInstanceFromNode) ? warning(false, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  }
};

var validateEventDispatches = void 0;
{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warning(false, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */
var injection = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */
function getListener(inst, registrationName) {
  var listener = void 0;

  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon
  var stateNode = inst.stateNode;
  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }
  var props = getFiberCurrentPropsFromNode(stateNode);
  if (!props) {
    // Work in progress.
    return null;
  }
  listener = props[registrationName];
  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }
  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
  return listener;
}

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */
function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = null;
  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];
    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }
  return events;
}

function runEventsInBatch(events, simulated) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  }

  // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.
  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  if (simulated) {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
  } else {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
  }
  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
  // This would be a good time to rethrow if any of the event handlers threw.
  ReactErrorUtils.rethrowCaughtError();
}

function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  runEventsInBatch(events, false);
}

var EventPluginHub = Object.freeze({
	injection: injection,
	getListener: getListener,
	runEventsInBatch: runEventsInBatch,
	runExtractedEventsInBatch: runExtractedEventsInBatch
});

var IndeterminateComponent = 0; // Before we know whether it is functional or class
var FunctionalComponent = 1;
var ClassComponent = 2;
var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
var HostComponent = 5;
var HostText = 6;



var Fragment = 10;
var Mode = 11;
var ContextConsumer = 12;
var ContextProvider = 13;
var ForwardRef = 14;
var Profiler = 15;
var TimeoutComponent = 16;

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  while (!node[internalInstanceKey]) {
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var inst = node[internalInstanceKey];
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber, this will always be the deepest root.
    return inst;
  }

  return null;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey];
  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst;
    } else {
      return null;
    }
  }
  return null;
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  }

  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant(false, 'getNodeFromInstance: Invalid argument.');
}

function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}

function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

var ReactDOMComponentTree = Object.freeze({
	precacheFiberNode: precacheFiberNode,
	getClosestInstanceFromNode: getClosestInstanceFromNode,
	getInstanceFromNode: getInstanceFromNode$1,
	getNodeFromInstance: getNodeFromInstance$1,
	getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
	updateFiberProps: updateFiberProps
});

function getParent(inst) {
  do {
    inst = inst.return;
    // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);
  if (inst) {
    return inst;
  }
  return null;
}

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }
    instA = getParent(instA);
    instB = getParent(instB);
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  return getParent(inst);
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }
  var i = void 0;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (true) {
    if (!from) {
      break;
    }
    if (from === common) {
      break;
    }
    var alternate = from.alternate;
    if (alternate !== null && alternate === common) {
      break;
    }
    pathFrom.push(from);
    from = getParent(from);
  }
  var pathTo = [];
  while (true) {
    if (!to) {
      break;
    }
    if (to === common) {
      break;
    }
    var _alternate = to.alternate;
    if (_alternate !== null && _alternate === common) {
      break;
    }
    pathTo.push(to);
    to = getParent(to);
  }
  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  {
    !inst ? warning(false, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? getParentInstance(targetInst) : null;
    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = Object.freeze({
	accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
	accumulateDirectDispatches: accumulateDirectDispatches
});

// Do not uses the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)

function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}

function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */
var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

// List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

/**
 * This helper object stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var compositionState = {
  _root: null,
  _startText: null,
  _fallbackText: null
};

function initialize(nativeEventTarget) {
  compositionState._root = nativeEventTarget;
  compositionState._startText = getText();
  return true;
}

function reset() {
  compositionState._root = null;
  compositionState._startText = null;
  compositionState._fallbackText = null;
}

function getData() {
  if (compositionState._fallbackText) {
    return compositionState._fallbackText;
  }

  var start = void 0;
  var startValue = compositionState._startText;
  var startLength = startValue.length;
  var end = void 0;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;
  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  compositionState._fallbackText = endValue.slice(start, sliceTail);
  return compositionState._fallbackText;
}

function getText() {
  if ('value' in compositionState._root) {
    return compositionState._root.value;
  }
  return compositionState._root[getTextContentAccessor()];
}

/* eslint valid-typeof: 0 */

var didWarnForAddedNewProperty = false;
var EVENT_POOL_SIZE = 10;

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 */
SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }
  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);

  return Class;
};

/** Proxying after everything set on SyntheticEvent
 * to resolve Proxy issue on some WebKit browsers
 * in which some Event properties are set to undefined (GH#10010)
 */
{
  var isProxySupported = typeof Proxy === 'function' &&
  // https://github.com/facebook/react/issues/12011
  !Object.isSealed(new Proxy({}, {}));

  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              !(didWarnForAddedNewProperty || target.isPersistent()) ? warning(false, "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}

addEventPoolingTo(SyntheticEvent);

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    !warningCondition ? warning(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;
  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }
  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;
  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
  event.destructor();
  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

var SyntheticEvent$1 = SyntheticEvent;

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var SyntheticCompositionEvent = SyntheticEvent$1.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var SyntheticInputEvent = SyntheticEvent$1.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;
    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;
    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition status, if any.
var isComposing = false;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType = void 0;
  var fallbackData = void 0;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);
    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }
      return null;
    case TOP_COMPOSITION_END:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars = void 0;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

// Use to restore controlled state after a change event has fired.

var fiberHostComponent = null;

var ReactControlledComponentInjection = {
  injectFiberControlledHostComponent: function (hostComponentImpl) {
    // The fiber implementation doesn't use dynamic dispatch so we need to
    // inject the implementation.
    fiberHostComponent = hostComponentImpl;
  }
};

var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);
  if (!internalInstance) {
    // Unmounted
    return;
  }
  !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
}

var injection$2 = ReactControlledComponentInjection;

function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}

function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}

function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }
  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;

  restoreStateOfTarget(target);
  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var ReactControlledComponent = Object.freeze({
	injection: injection$2,
	enqueueStateRestore: enqueueStateRestore,
	needsStateRestore: needsStateRestore,
	restoreStateIfNeeded: restoreStateIfNeeded
});

// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.

// Defaults
var _batchedUpdates = function (fn, bookkeeping) {
  return fn(bookkeeping);
};
var _interactiveUpdates = function (fn, a, b) {
  return fn(a, b);
};
var _flushInteractiveUpdates = function () {};

var isBatching = false;
function batchedUpdates(fn, bookkeeping) {
  if (isBatching) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }
  isBatching = true;
  try {
    return _batchedUpdates(fn, bookkeeping);
  } finally {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    isBatching = false;
    var controlledComponentsHavePendingUpdates = needsStateRestore();
    if (controlledComponentsHavePendingUpdates) {
      // If a controlled event was fired, we may need to restore the state of
      // the DOM node back to the controlled value. This is necessary when React
      // bails out of the update without touching the DOM.
      _flushInteractiveUpdates();
      restoreStateIfNeeded();
    }
  }
}

function interactiveUpdates(fn, a, b) {
  return _interactiveUpdates(fn, a, b);
}



var injection$3 = {
  injectRenderer: function (renderer) {
    _batchedUpdates = renderer.batchedUpdates;
    _interactiveUpdates = renderer.interactiveUpdates;
    _flushInteractiveUpdates = renderer.flushInteractiveUpdates;
  }
};

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * HTML nodeType values that represent the type of the node
 */

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';
  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  var currentValue = '' + node[valueField];

  // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)
  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }
  var get = descriptor.get,
      set = descriptor.set;

  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  });
  // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768
  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });

  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  }

  // TODO: Once it's just Fiber we can move this to node._wrapperState
  node._valueTracker = trackValueOnNode(node);
}

function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node);
  // if there is no tracker at this point it's unlikely
  // that trying again will succeed
  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);
  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }
  return false;
}

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

var describeComponentFrame = function (name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_TIMEOUT_TYPE = hasSymbol ? Symbol.for('react.timeout') : 0xead1;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

function getComponentName(fiber) {
  var type = fiber.type;

  if (typeof type === 'function') {
    return type.displayName || type.name;
  }
  if (typeof type === 'string') {
    return type;
  }
  switch (type) {
    case REACT_ASYNC_MODE_TYPE:
      return 'AsyncMode';
    case REACT_CONTEXT_TYPE:
      return 'Context.Consumer';
    case REACT_FRAGMENT_TYPE:
      return 'ReactFragment';
    case REACT_PORTAL_TYPE:
      return 'ReactPortal';
    case REACT_PROFILER_TYPE:
      return 'Profiler(' + fiber.pendingProps.id + ')';
    case REACT_PROVIDER_TYPE:
      return 'Context.Provider';
    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';
    case REACT_TIMEOUT_TYPE:
      return 'Timeout';
  }
  if (typeof type === 'object' && type !== null) {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        var functionName = type.render.displayName || type.render.name || '';
        return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
    }
  }
  return null;
}

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case ClassComponent:
    case HostComponent:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName(owner);
      }
      return describeComponentFrame(name, source, ownerName);
    default:
      return '';
  }
}

// This function can only be called with a work-in-progress fiber and
// only during begin or complete phase. Do not call it under any other
// circumstances.
function getStackAddendumByWorkInProgressFiber(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);
    // Otherwise this return pointer might point to the wrong tree:
    node = node.return;
  } while (node);
  return info;
}

function getCurrentFiberOwnerName$1() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    var owner = fiber._debugOwner;
    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner);
    }
  }
  return null;
}

function getCurrentFiberStackAddendum$1() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.
    return getStackAddendumByWorkInProgressFiber(fiber);
  }
  return null;
}

function resetCurrentFiber() {
  ReactDebugCurrentFrame.getCurrentStack = null;
  ReactDebugCurrentFiber.current = null;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentFiber(fiber) {
  ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum$1;
  ReactDebugCurrentFiber.current = fiber;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentPhase(phase) {
  ReactDebugCurrentFiber.phase = phase;
}

var ReactDebugCurrentFiber = {
  current: null,
  phase: null,
  resetCurrentFiber: resetCurrentFiber,
  setCurrentFiber: setCurrentFiber,
  setCurrentPhase: setCurrentPhase,
  getCurrentFiberOwnerName: getCurrentFiberOwnerName$1,
  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum$1
};

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0;

// A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.
var STRING = 1;

// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING = 2;

// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN = 3;

// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN = 4;

// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC = 5;

// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }
  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  {
    warning(false, 'Invalid attribute name: `%s`', attributeName);
  }
  return false;
}

function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }
  return false;
}

function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }
  switch (typeof value) {
    case 'function':
    // $FlowIssue symbol is perfectly valid here
    case 'symbol':
      // eslint-disable-line
      return true;
    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }
    default:
      return false;
  }
}

function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }
  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;
      case OVERLOADED_BOOLEAN:
        return value === false;
      case NUMERIC:
        return isNaN(value);
      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }
  return false;
}

function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
}

// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties = {};

// These props are reserved by React. They shouldn't be written to the DOM.
['children', 'dangerouslySetInnerHTML',
// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];

  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse', 'externalResourcesRequired', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML boolean attributes.
['allowFullScreen', 'async',
// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
// Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',
// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture', 'download'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be positive numbers.
['cols', 'rows', 'size', 'span'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be numbers.
['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

var CAMELIZE = /[\-\:]([a-z])/g;
var capitalize = function (token) {
  return token[1].toUpperCase();
};

// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.
['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null);
} // attributeNamespace
);

// String SVG attributes with the xlink namespace.
['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink');
});

// String SVG attributes with the xml namespace.
['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace');
});

// Special case: this attribute exists both in HTML and SVG.
// Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
// its React `tabIndex` name, like we do for attributes that exist only in HTML.
properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
'tabindex', // attributeName
null);

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;

      return node[propertyName];
    } else {
      var attributeName = propertyInfo.attributeName;

      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);
          if (value === '') {
            return true;
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }
          if (value === '' + expected) {
            return expected;
          }
          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }
        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        }
        // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.
        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */
function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }
    var value = node.getAttribute(name);
    if (value === '' + expected) {
      return expected;
    }
    return value;
  }
}

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */
function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);
  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }
  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  }
  // If the prop isn't in the special list, treat it as a simple attribute.
  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;
      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName, '' + value);
      }
    }
    return;
  }
  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;

      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }
    return;
  }
  // The rest are treated as attributes with special cases.
  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;

    var attributeValue = void 0;
    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      attributeValue = '' + value;
    }
    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };

  var propTypes = {
    value: function (props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
    checkPropTypes(propTypes, props, 'prop', tagName, getStack);
  };
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}

function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getSafeValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}

function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;
  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}

function updateWrapper(element, props) {
  var node = element;
  {
    var _controlled = isControlled(props);

    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
      warning(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum());
      didWarnUncontrolledToControlled = true;
    }
    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
      warning(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum());
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);

  var value = getSafeValue(props.value);

  if (value != null) {
    if (props.type === 'number') {
      if (value === 0 && node.value === '' ||
      // eslint-disable-next-line
      node.value != value) {
        node.value = '' + value;
      }
    } else if (node.value !== '' + value) {
      node.value = '' + value;
    }
  }

  if (props.hasOwnProperty('value')) {
    setDefaultValue(node, props.type, value);
  } else if (props.hasOwnProperty('defaultValue')) {
    setDefaultValue(node, props.type, getSafeValue(props.defaultValue));
  }

  if (props.checked == null && props.defaultChecked != null) {
    node.defaultChecked = !!props.defaultChecked;
  }
}

function postMountWrapper(element, props, isHydrating) {
  var node = element;

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var _initialValue = '' + node._wrapperState.initialValue;
    var currentValue = node.value;

    // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.
    if (!isHydrating) {
      // Do not re-assign the value property if there is no change. This
      // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
      // prematurely marking required inputs as invalid
      if (_initialValue !== currentValue) {
        node.value = _initialValue;
      }
    }

    // value must be assigned before defaultValue. This fixes an issue where the
    // visually displayed value of date inputs disappears on mobile Safari and Chrome:
    // https://github.com/facebook/react/issues/7233
    node.defaultValue = _initialValue;
  }

  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.
  var name = node.name;
  if (name !== '') {
    node.name = '';
  }
  node.defaultChecked = !node.defaultChecked;
  node.defaultChecked = !node.defaultChecked;
  if (name !== '') {
    node.name = name;
  }
}

function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

      // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set
      updateValueIfChanged(otherNode);

      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      updateWrapper(otherNode, otherProps);
    }
  }
}

// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node, type, value) {
  if (
  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = '' + node._wrapperState.initialValue;
    } else if (node.defaultValue !== '' + value) {
      node.defaultValue = '' + value;
    }
  }
}

function getSafeValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;
    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change';
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event, false);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);
  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  setDefaultValue(node, 'number', node.value);
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes$1,

  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    var getTargetInstFunc = void 0,
        handleEventFunc = void 0;
    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

var SyntheticUIEvent = SyntheticEvent$1.extend({
  view: null,
  detail: null
});

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */
var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tiltX: null,
  tiltY: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win = void 0;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from = void 0;
    var to = void 0;
    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface = void 0,
        leaveEventType = void 0,
        enterEventType = void 0,
        eventTypePrefix = void 0;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);

    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */


function get(key) {
  return key._reactInternalFiber;
}

function has(key) {
  return key._reactInternalFiber !== undefined;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect = /*              */0;
var PerformedWork = /*         */1;

// You can change the rest (and add more).
var Placement = /*             */2;
var Update = /*                */4;
var PlacementAndUpdate = /*    */6;
var Deletion = /*              */8;
var ContentReset = /*          */16;
var Callback = /*              */32;
var DidCapture = /*            */64;
var Ref = /*                   */128;
var Snapshot = /*              */256;

// Union of all host effects
var HostEffectMask = /*        */511;

var Incomplete = /*            */512;
var ShouldCapture = /*         */1024;

var MOUNTING = 1;
var MOUNTED = 2;
var UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
  var node = fiber;
  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    if ((node.effectTag & Placement) !== NoEffect) {
      return MOUNTING;
    }
    while (node.return) {
      node = node.return;
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
    }
  } else {
    while (node.return) {
      node = node.return;
    }
  }
  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return MOUNTED;
  }
  // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.
  return UNMOUNTED;
}

function isFiberMounted(fiber) {
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;
    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      !instance._warnedAboutRefsInRender ? warning(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component') : void 0;
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);
  if (!fiber) {
    return false;
  }
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var state = isFiberMountedImpl(fiber);
    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    if (state === MOUNTING) {
      return null;
    }
    return fiber;
  }
  // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.
  var a = fiber;
  var b = alternate;
  while (true) {
    var parentA = a.return;
    var parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      // We're at the root.
      break;
    }

    // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.
    if (parentA.child === parentB.child) {
      var child = parentA.child;
      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }
        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }
        child = child.sibling;
      }
      // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.
      invariant(false, 'Unable to find node on an unmounted component.');
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;
      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        _child = _child.sibling;
      }
      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          _child = _child.sibling;
        }
        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
      }
    }

    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  }
  // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.
  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  }
  // Otherwise B has to be current branch.
  return alternate;
}

function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}

function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var SyntheticAnimationEvent = SyntheticEvent$1.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var SyntheticClipboardEvent = SyntheticEvent$1.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode = void 0;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.
  if (charCode === 10) {
    charCode = 13;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var SyntheticTransitionEvent = SyntheticEvent$1.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },

  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

var eventTypes$4 = {};
var topLevelEventsToDispatchConfig = {};

function addEventTypeNameToConfig(_ref, isInteractive) {
  var topEvent = _ref[0],
      event = _ref[1];

  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent],
    isInteractive: isInteractive
  };
  eventTypes$4[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
}

interactiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, true);
});
nonInteractiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, false);
});

// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

var SimpleEventPlugin = {
  eventTypes: eventTypes$4,

  isInteractiveTopLevelEventType: function (topLevelType) {
    var config = topLevelEventsToDispatchConfig[topLevelType];
    return config !== undefined && config.isInteractive === true;
  },


  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor = void 0;
    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;
      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP:
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;
      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;
      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;
      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;
      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;
      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;
      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;
      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;
      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;
      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warning(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        }
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent$1;
        break;
    }
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst.return) {
    inst = inst.return;
  }
  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }
  return inst.stateNode.containerInfo;
}

// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }
  return {
    topLevelType: topLevelType,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;
  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    if (!ancestor) {
      bookKeeping.ancestors.push(ancestor);
      break;
    }
    var root = findRootContainerNode(ancestor);
    if (!root) {
      break;
    }
    bookKeeping.ancestors.push(ancestor);
    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// TODO: can we stop exporting these?
var _enabled = true;

function setEnabled(enabled) {
  _enabled = !!enabled;
}

function isEnabled() {
  return _enabled;
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventBubbleListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventCaptureListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

function dispatchInteractiveEvent(topLevelType, nativeEvent) {
  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
}

function dispatchEvent(topLevelType, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
    // If we get an event (ex: img onload) before committing that
    // component's mount, ignore it for now (that is, treat it as if it was an
    // event on a non-React tree). We might also consider queueing events and
    // dispatching them after the mount.
    targetInst = null;
  }

  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

var ReactDOMEventListener = Object.freeze({
	get _enabled () { return _enabled; },
	setEnabled: setEnabled,
	isEnabled: isEnabled,
	trapBubbledEvent: trapBubbledEvent,
	trapCapturedEvent: trapCapturedEvent,
	dispatchEvent: dispatchEvent
});

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var reactTopListenersCounter = 0;

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */
function listenTo(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      switch (dependency) {
        case TOP_SCROLL:
          trapCapturedEvent(TOP_SCROLL, mountAt);
          break;
        case TOP_FOCUS:
        case TOP_BLUR:
          trapCapturedEvent(TOP_FOCUS, mountAt);
          trapCapturedEvent(TOP_BLUR, mountAt);
          // We set the flag for a single dependency later in this function,
          // but this ensures we mark both as attached rather than just one.
          isListening[TOP_BLUR] = true;
          isListening[TOP_FOCUS] = true;
          break;
        case TOP_CANCEL:
        case TOP_CLOSE:
          if (isEventSupported(getRawEventName(dependency), true)) {
            trapCapturedEvent(dependency, mountAt);
          }
          break;
        case TOP_INVALID:
        case TOP_SUBMIT:
        case TOP_RESET:
          // We listen to them on the target DOM elements.
          // Some of them bubble so we don't want them to fire twice.
          break;
        default:
          // By default, listen on the top level to all non-media events.
          // Media events don't bubble so adding the listener wouldn't do anything.
          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
          if (!isMediaEvent) {
            trapBubbledEvent(dependency, mountAt);
          }
          break;
      }
      isListening[dependency] = true;
    }
  }
}

function isListeningToAllDependencies(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];
  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      return false;
    }
  }
  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */
function getOffsets(outerNode) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset;

  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */
function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }
      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      }
      // Moving from `node` to its first child `next`.
      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }
      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }
      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }
      if ((next = node.nextSibling) !== null) {
        break;
      }
      node = parentNode;
      parentNode = node.parentNode;
    }

    // Moving from `node` to its next sibling `next`.
    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */
function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}

function getSelectionInformation() {
  var focusedElem = getActiveElement();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
  };
}

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */
function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElement();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    }

    // Focusing a node can change the scroll position, which is undesirable
    var ancestors = [];
    var ancestor = priorFocusedElem;
    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */
function getSelection$1(input) {
  var selection = void 0;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || { start: 0, end: 0 };
}

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */
function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement$1);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;

    accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes$3,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;
    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }
        break;
      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;
      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */
injection.injectEventPluginOrder(DOMEventPluginOrder);
injection$1.injectComponentTree(ReactDOMComponentTree);

/**
 * Some important event plugins included by default (without having to require
 * them).
 */
injection.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

// We capture a local reference to any global, in case it gets polyfilled after
// this module is initially evaluated.
// We want to be using a consistent implementation.

var localRequestAnimationFrame$1 = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;

/**
 * A scheduling library to allow scheduling work with more granular priority and
 * control than requestAnimationFrame and requestIdleCallback.
 * Current TODO items:
 * X- Pull out the scheduleWork polyfill built into React
 * X- Initial test coverage
 * X- Support for multiple callbacks
 * - Support for two priorities; serial and deferred
 * - Better test coverage
 * - Better docblock
 * - Polish documentation, API
 */

// This is a built-in polyfill for requestIdleCallback. It works by scheduling
// a requestAnimationFrame, storing the time for the start of the frame, then
// scheduling a postMessage which gets scheduled after paint. Within the
// postMessage handler do as much work as possible until time + frame rate.
// By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

// We capture a local reference to any global, in case it gets polyfilled after
// this module is initially evaluated.
// We want to be using a consistent implementation.
var localDate = Date;
var localSetTimeout = setTimeout;
var localClearTimeout = clearTimeout;

var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

var now$1 = void 0;
if (hasNativePerformanceNow) {
  var Performance = performance;
  now$1 = function () {
    return Performance.now();
  };
} else {
  now$1 = function () {
    return localDate.now();
  };
}

var scheduleWork = void 0;
var cancelScheduledWork = void 0;

if (!ExecutionEnvironment.canUseDOM) {
  var timeoutIds = new Map();

  scheduleWork = function (callback, options) {
    // keeping return type consistent
    var callbackConfig = {
      scheduledCallback: callback,
      timeoutTime: 0,
      next: null,
      prev: null
    };
    var timeoutId = localSetTimeout(function () {
      callback({
        timeRemaining: function () {
          return Infinity;
        },

        didTimeout: false
      });
    });
    timeoutIds.set(callback, timeoutId);
    return callbackConfig;
  };
  cancelScheduledWork = function (callbackId) {
    var callback = callbackId.scheduledCallback;
    var timeoutId = timeoutIds.get(callback);
    timeoutIds.delete(callbackId);
    localClearTimeout(timeoutId);
  };
} else {
  {
    if (typeof localRequestAnimationFrame$1 !== 'function') {
      warning(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  var localRequestAnimationFrame = typeof localRequestAnimationFrame$1 === 'function' ? localRequestAnimationFrame$1 : function (callback) {
    invariant(false, 'React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills');
  };

  var headOfPendingCallbacksLinkedList = null;
  var tailOfPendingCallbacksLinkedList = null;

  // We track what the next soonest timeoutTime is, to be able to quickly tell
  // if none of the scheduled callbacks have timed out.
  var nextSoonestTimeoutTime = -1;

  var isIdleScheduled = false;
  var isAnimationFrameScheduled = false;

  var frameDeadline = 0;
  // We start out assuming that we run at 30fps but then the heuristic tracking
  // will adjust this value to a faster fps if we get more frequent animation
  // frames.
  var previousFrameTime = 33;
  var activeFrameTime = 33;

  var frameDeadlineObject = {
    didTimeout: false,
    timeRemaining: function () {
      var remaining = frameDeadline - now$1();
      return remaining > 0 ? remaining : 0;
    }
  };

  /**
   * Handles the case where a callback errors:
   * - don't catch the error, because this changes debugging behavior
   * - do start a new postMessage callback, to call any remaining callbacks,
   * - but only if there is an error, so there is not extra overhead.
   */
  var callUnsafely = function (callbackConfig, arg) {
    var callback = callbackConfig.scheduledCallback;
    var finishedCalling = false;
    try {
      callback(arg);
      finishedCalling = true;
    } finally {
      // always remove it from linked list
      cancelScheduledWork(callbackConfig);

      if (!finishedCalling) {
        // an error must have been thrown
        isIdleScheduled = true;
        window.postMessage(messageKey, '*');
      }
    }
  };

  /**
   * Checks for timed out callbacks, runs them, and then checks again to see if
   * any more have timed out.
   * Keeps doing this until there are none which have currently timed out.
   */
  var callTimedOutCallbacks = function () {
    if (headOfPendingCallbacksLinkedList === null) {
      return;
    }

    var currentTime = now$1();
    // TODO: this would be more efficient if deferred callbacks are stored in
    // min heap.
    // Or in a linked list with links for both timeoutTime order and insertion
    // order.
    // For now an easy compromise is the current approach:
    // Keep a pointer to the soonest timeoutTime, and check that first.
    // If it has not expired, we can skip traversing the whole list.
    // If it has expired, then we step through all the callbacks.
    if (nextSoonestTimeoutTime === -1 || nextSoonestTimeoutTime > currentTime) {
      // We know that none of them have timed out yet.
      return;
    }
    // NOTE: we intentionally wait to update the nextSoonestTimeoutTime until
    // after successfully calling any timed out callbacks.
    // If a timed out callback throws an error, we could get stuck in a state
    // where the nextSoonestTimeoutTime was set wrong.
    var updatedNextSoonestTimeoutTime = -1; // we will update nextSoonestTimeoutTime below
    var timedOutCallbacks = [];

    // iterate once to find timed out callbacks and find nextSoonestTimeoutTime
    var currentCallbackConfig = headOfPendingCallbacksLinkedList;
    while (currentCallbackConfig !== null) {
      var _timeoutTime = currentCallbackConfig.timeoutTime;
      if (_timeoutTime !== -1 && _timeoutTime <= currentTime) {
        // it has timed out!
        timedOutCallbacks.push(currentCallbackConfig);
      } else {
        if (_timeoutTime !== -1 && (updatedNextSoonestTimeoutTime === -1 || _timeoutTime < updatedNextSoonestTimeoutTime)) {
          updatedNextSoonestTimeoutTime = _timeoutTime;
        }
      }
      currentCallbackConfig = currentCallbackConfig.next;
    }

    if (timedOutCallbacks.length > 0) {
      frameDeadlineObject.didTimeout = true;
      for (var i = 0, len = timedOutCallbacks.length; i < len; i++) {
        callUnsafely(timedOutCallbacks[i], frameDeadlineObject);
      }
    }

    // NOTE: we intentionally wait to update the nextSoonestTimeoutTime until
    // after successfully calling any timed out callbacks.
    nextSoonestTimeoutTime = updatedNextSoonestTimeoutTime;
  };

  // We use the postMessage trick to defer idle work until after the repaint.
  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
  var idleTick = function (event) {
    if (event.source !== window || event.data !== messageKey) {
      return;
    }
    isIdleScheduled = false;

    if (headOfPendingCallbacksLinkedList === null) {
      return;
    }

    // First call anything which has timed out, until we have caught up.
    callTimedOutCallbacks();

    var currentTime = now$1();
    // Next, as long as we have idle time, try calling more callbacks.
    while (frameDeadline - currentTime > 0 && headOfPendingCallbacksLinkedList !== null) {
      var latestCallbackConfig = headOfPendingCallbacksLinkedList;
      frameDeadlineObject.didTimeout = false;
      // callUnsafely will remove it from the head of the linked list
      callUnsafely(latestCallbackConfig, frameDeadlineObject);
      currentTime = now$1();
    }
    if (headOfPendingCallbacksLinkedList !== null) {
      if (!isAnimationFrameScheduled) {
        // Schedule another animation callback so we retry later.
        isAnimationFrameScheduled = true;
        localRequestAnimationFrame(animationTick);
      }
    }
  };
  // Assumes that we have addEventListener in this environment. Might need
  // something better for old IE.
  window.addEventListener('message', idleTick, false);

  var animationTick = function (rafTime) {
    isAnimationFrameScheduled = false;
    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
      if (nextFrameTime < 8) {
        // Defensive coding. We don't support higher frame rates than 120hz.
        // If we get lower than that, it is probably a bug.
        nextFrameTime = 8;
      }
      // If one frame goes long, then the next one can be short to catch up.
      // If two frames are short in a row, then that's an indication that we
      // actually have a higher frame rate than what we're currently optimizing.
      // We adjust our heuristic dynamically accordingly. For example, if we're
      // running on 120hz display or 90hz VR display.
      // Take the max of the two in case one of them was an anomaly due to
      // missed frame deadlines.
      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
    } else {
      previousFrameTime = nextFrameTime;
    }
    frameDeadline = rafTime + activeFrameTime;
    if (!isIdleScheduled) {
      isIdleScheduled = true;
      window.postMessage(messageKey, '*');
    }
  };

  scheduleWork = function (callback, options) /* CallbackConfigType */{
    var timeoutTime = -1;
    if (options != null && typeof options.timeout === 'number') {
      timeoutTime = now$1() + options.timeout;
    }
    if (nextSoonestTimeoutTime === -1 || timeoutTime !== -1 && timeoutTime < nextSoonestTimeoutTime) {
      nextSoonestTimeoutTime = timeoutTime;
    }

    var scheduledCallbackConfig = {
      scheduledCallback: callback,
      timeoutTime: timeoutTime,
      prev: null,
      next: null
    };
    if (headOfPendingCallbacksLinkedList === null) {
      // Make this callback the head and tail of our list
      headOfPendingCallbacksLinkedList = scheduledCallbackConfig;
      tailOfPendingCallbacksLinkedList = scheduledCallbackConfig;
    } else {
      // Add latest callback as the new tail of the list
      scheduledCallbackConfig.prev = tailOfPendingCallbacksLinkedList;
      // renaming for clarity
      var oldTailOfPendingCallbacksLinkedList = tailOfPendingCallbacksLinkedList;
      if (oldTailOfPendingCallbacksLinkedList !== null) {
        oldTailOfPendingCallbacksLinkedList.next = scheduledCallbackConfig;
      }
      tailOfPendingCallbacksLinkedList = scheduledCallbackConfig;
    }

    if (!isAnimationFrameScheduled) {
      // If rAF didn't already schedule one, we need to schedule a frame.
      // TODO: If this rAF doesn't materialize because the browser throttles, we
      // might want to still have setTimeout trigger scheduleWork as a backup to ensure
      // that we keep performing work.
      isAnimationFrameScheduled = true;
      localRequestAnimationFrame(animationTick);
    }
    return scheduledCallbackConfig;
  };

  cancelScheduledWork = function (callbackConfig /* CallbackConfigType */
  ) {
    if (callbackConfig.prev === null && headOfPendingCallbacksLinkedList !== callbackConfig) {
      // this callbackConfig has already been cancelled.
      // cancelScheduledWork should be idempotent, a no-op after first call.
      return;
    }

    /**
     * There are four possible cases:
     * - Head/nodeToRemove/Tail -> null
     *   In this case we set Head and Tail to null.
     * - Head -> ... middle nodes... -> Tail/nodeToRemove
     *   In this case we point the middle.next to null and put middle as the new
     *   Tail.
     * - Head/nodeToRemove -> ...middle nodes... -> Tail
     *   In this case we point the middle.prev at null and move the Head to
     *   middle.
     * - Head -> ... ?some nodes ... -> nodeToRemove -> ... ?some nodes ... -> Tail
     *   In this case we point the Head.next to the Tail and the Tail.prev to
     *   the Head.
     */
    var next = callbackConfig.next;
    var prev = callbackConfig.prev;
    callbackConfig.next = null;
    callbackConfig.prev = null;
    if (next !== null) {
      // we have a next

      if (prev !== null) {
        // we have a prev

        // callbackConfig is somewhere in the middle of a list of 3 or more nodes.
        prev.next = next;
        next.prev = prev;
        return;
      } else {
        // there is a next but not a previous one;
        // callbackConfig is the head of a list of 2 or more other nodes.
        next.prev = null;
        headOfPendingCallbacksLinkedList = next;
        return;
      }
    } else {
      // there is no next callback config; this must the tail of the list

      if (prev !== null) {
        // we have a prev

        // callbackConfig is the tail of a list of 2 or more other nodes.
        prev.next = null;
        tailOfPendingCallbacksLinkedList = prev;
        return;
      } else {
        // there is no previous callback config;
        // callbackConfig is the only thing in the linked list,
        // so both head and tail point to it.
        headOfPendingCallbacksLinkedList = null;
        tailOfPendingCallbacksLinkedList = null;
        return;
      }
    }
  };
}

var didWarnSelectedSetOnOption = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  // We can silently skip them because invalid DOM nesting warning
  // catches these cases in Fiber.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  // TODO (yungsters): Remove support for `selected` in <option>.
  {
    if (props.selected != null && !didWarnSelectedSetOnOption) {
      warning(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
      didWarnSelectedSetOnOption = true;
    }
  }
}

function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', props.value);
  }
}

function getHostProps$1(element, props) {
  var hostProps = _assign({ children: undefined }, props);
  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


var didWarnValueDefaultValue$1 = void 0;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerName$3();
  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 */
function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$3);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};
    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }
    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }
      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = '' + propValue;
    var defaultSelected = null;
    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;
        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }
        return;
      }
      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }
    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}

function initWrapperState$1(element, props) {
  var node = element;
  {
    checkSelectPropTypes(props);
  }

  var value = props.value;
  node._wrapperState = {
    initialValue: value != null ? value : props.defaultValue,
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}

function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}

function postUpdateWrapper(element, props) {
  var node = element;
  // After the initial mount, we control selected-ness manually so don't pass
  // this value down
  node._wrapperState.initialValue = undefined;

  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;

  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}

function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

function getHostProps$3(element, props) {
  var node = element;
  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

  // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.
  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: '' + node._wrapperState.initialValue
  });

  return hostProps;
}

function initWrapperState$2(element, props) {
  var node = element;
  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$4);
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value;

  // Only bother fetching default value if we're going to use it
  if (initialValue == null) {
    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      {
        warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }
      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: '' + initialValue
  };
}

function updateWrapper$1(element, props) {
  var node = element;
  var value = props.value;
  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = '' + value;

    // To avoid side effects (such as losing text selection), only set value if changed
    if (newValue !== node.value) {
      node.value = newValue;
    }
    if (props.defaultValue == null) {
      node.defaultValue = newValue;
    }
  }
  if (props.defaultValue != null) {
    node.defaultValue = props.defaultValue;
  }
}

function postMountWrapper$3(element, props) {
  var node = element;
  // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.
  var textContent = node.textContent;

  // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
  if (textContent === node._wrapperState.initialValue) {
    node.value = textContent;
  }
}

function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
};

// Assumes there is no parent namespace.
function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;
    case 'math':
      return MATH_NAMESPACE;
    default:
      return HTML_NAMESPACE$1;
  }
}

function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }
  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  }
  // By default, pass namespace below.
  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer = void 0;

/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node

  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var warnValidStyle = emptyFunction;

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var warnHyphenatedStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), getStack());
  };

  var warnBadVendoredStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());
  };

  var warnStyleValueWithSemicolon = function (name, value, getStack) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());
  };

  var warnStyleValueIsNaN = function (name, value, getStack) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  var warnStyleValueIsInfinity = function (name, value, getStack) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  warnValidStyle = function (name, value, getStack) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, getStack);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, getStack);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, getStack);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value, getStack);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value, getStack);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */
function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + hyphenateStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

        delimiter = ';';
      }
    }
    return serialized || null;
  }
}

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */
function setValueForStyles(node, styles, getStack) {
  var style = node.style;
  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf('--') === 0;
    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName], getStack);
      }
    }
    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML$1 = '__html';

function assertValidProps(tag, props, getStack) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
  }
  {
    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack()) : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getStack()) : void 0;
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }
  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;
    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',

  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0, // state
  'aria-details': 0,
  'aria-disabled': 0, // state
  'aria-hidden': 0, // state
  'aria-invalid': 0, // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function getStackAddendum() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperty(tagName, name) {
  if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (correctName == null) {
      warning(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== correctName) {
      warning(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      warning(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  } else if (invalidProps.length > 1) {
    warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;

function getStackAddendum$1() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;
    if (type === 'select' && props.multiple) {
      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());
    } else {
      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());
    }
  }
}

function getStackAddendum$2() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();
    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    }

    // We can't rely on the event system being injected on the server.
    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }
      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
      if (registrationName != null) {
        warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
      if (EVENT_NAME_REGEX.test(name)) {
        warning(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.%s', name, getStackAddendum$2());
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Let the ARIA attribute hook validate ARIA attributes
    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

    // Known attributes should match the casing specified in the property config.
    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];
      if (standardName !== name) {
        warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());
      } else {
        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Now that we've validated casing, do not validate
    // data types for reserved props
    if (isReserved) {
      return true;
    }

    // Warn when a known attribute is a bad type
    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];
  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');
  if (unknownProps.length === 1) {
    warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  } else if (unknownProps.length > 1) {
    warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;

var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML = '__html';

var HTML_NAMESPACE = Namespaces.html;


var getStack = emptyFunction.thatReturns('');

var warnedUnknownTags = void 0;
var suppressHydrationWarning = void 0;

var validatePropertiesInDevelopment = void 0;
var warnForTextDifference = void 0;
var warnForPropDifference = void 0;
var warnForExtraAttributes = void 0;
var warnForInvalidEventListener = void 0;

var normalizeMarkupForTextOrAttribute = void 0;
var normalizeHTML = void 0;

{
  getStack = getCurrentFiberStackAddendum$2;

  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, /* canUseEventSystem */true);
  };

  // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
    if (normalizedServerText === normalizedClientText) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
    if (normalizedServerValue === normalizedClientValue) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warning(false, 'Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());
    } else {
      warning(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());
    }
  };

  // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.
  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = emptyFunction;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = nextProps[propKey];
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      // Relies on `updateStylesByID` not mutating `styleUpdates`.
      setValueForStyles(domElement, nextProp, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // We polyfill it separately on the client during commit.
      // We blacklist it here rather than in the property list because we emit it in SSR.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];
    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement$1(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag = void 0;

  // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.
  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement = void 0;
  var namespaceURI = parentNamespace;
  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }
  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props);
      // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.
      !(isCustomComponentTag || type === type.toLowerCase()) ? warning(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');
      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.
      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, { is: props.is });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type);
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}

function createTextNode$1(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}

function setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);
  {
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$2() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  var props = void 0;
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      props = rawProps;
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    default:
      props = rawProps;
  }

  assertValidProps(tag, props, getStack);

  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;
    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;
    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }
}

// Calculate the diff between the two objects.
function diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;

  var lastProps = void 0;
  var nextProps = void 0;
  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;
    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;
      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  assertValidProps(tag, nextProps, getStack);

  var propKey = void 0;
  var styleName = void 0;
  var styleUpdates = null;
  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }
    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];
      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }
          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
      // Noop. This is handled by the clear text mechanism.
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }
  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
        // Update styles that changed since `lastProp`.
        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }
          updatePayload.push(propKey, styleUpdates);
        }
        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;
      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
        }
      } else {
        // TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }
  if (styleUpdates) {
    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }
  return updatePayload;
}

// Apply the diff.
function updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
  // Apply the diff.
  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

  // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.
  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;
    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;
    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();
    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }
    return possibleStandardNames[lowerCasedName] || null;
  }
  return null;
}

function diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag = void 0;
  var extraAttributeNames = void 0;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$2() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps, getStack);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;
    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();
      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;
        case 'checked':
          break;
        case 'selected':
          break;
        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;
  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = rawProps[propKey];
    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (true &&
    // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);
      if (suppressHydrationWarning) {
        // Don't bother comparing. We're ignoring all these warnings.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
      // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
        // Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var rawHtml = nextProp ? nextProp[HTML] || '' : '';
        var serverHTML = domElement.innerHTML;
        var expectedHTML = normalizeHTML(domElement, rawHtml);
        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);
        var expectedStyle = createDangerousStringForStyles(nextProp);
        serverValue = domElement.getAttribute('style');
        if (expectedStyle !== serverValue) {
          warnForPropDifference(propKey, serverValue, expectedStyle);
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;
        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;
          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }
          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);
            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true;
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(standardName);
            }
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);
          }
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;
    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  return updatePayload;
}

function diffHydratedText$1(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}

function warnForUnmatchedText$1(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}

function warnForDeletedHydratableElement$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}

function warnForDeletedHydratableText$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedElement$1(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedText$1(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}

function restoreControlledState$1(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;
    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;
    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}

var ReactDOMFiberComponent = Object.freeze({
	createElement: createElement$1,
	createTextNode: createTextNode$1,
	setInitialProperties: setInitialProperties$1,
	diffProperties: diffProperties$1,
	updateProperties: updateProperties$1,
	diffHydratedProperties: diffHydratedProperties$1,
	diffHydratedText: diffHydratedText$1,
	warnForUnmatchedText: warnForUnmatchedText$1,
	warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
	warnForDeletedHydratableText: warnForDeletedHydratableText$1,
	warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
	warnForInsertedHydratedText: warnForInsertedHydratedText$1,
	restoreControlledState: restoreControlledState$1
});

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var validateDOMNesting = emptyFunction;

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      !(childTag == null) ? warning(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;
    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackAddendum$5();

    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
    if (didWarn[warnKey]) {
      return;
    }
    didWarn[warnKey] = true;

    var tagDisplayName = childTag;
    var whitespaceInfo = '';
    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';
      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
      }
      warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };

  // TODO: turn this into a named export
  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;
}

var validateDOMNesting$1 = validateDOMNesting;

// Renderers that don't support persistence
// can re-export everything from this module.

function shim() {
  invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
}

// Persistence (when unsupported)
var supportsPersistence = false;
var cloneInstance = shim;
var createContainerChildSet = shim;
var appendChildToContainerChildSet = shim;
var finalizeContainerChildren = shim;
var replaceContainerChildren = shim;

// Unused

var createElement = createElement$1;
var createTextNode = createTextNode$1;
var setInitialProperties = setInitialProperties$1;
var diffProperties = diffProperties$1;
var updateProperties = updateProperties$1;
var diffHydratedProperties = diffHydratedProperties$1;
var diffHydratedText = diffHydratedText$1;
var warnForUnmatchedText = warnForUnmatchedText$1;
var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;
var warnForDeletedHydratableText = warnForDeletedHydratableText$1;
var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;
var warnForInsertedHydratedText = warnForInsertedHydratedText$1;
var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;
var precacheFiberNode$1 = precacheFiberNode;
var updateFiberProps$1 = updateFiberProps;


var SUPPRESS_HYDRATION_WARNING = void 0;
{
  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
}

var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }
  return false;
}

function getRootHostContext(rootContainerInstance) {
  var type = void 0;
  var namespace = void 0;
  var nodeType = rootContainerInstance.nodeType;
  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }
    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }
  {
    var validatedTag = type.toLowerCase();
    var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
    return { namespace: namespace, ancestorInfo: _ancestorInfo };
  }
  return namespace;
}

function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
  }
  var parentNamespace = parentHostContext;
  return getChildNamespace(parentNamespace, type);
}

function getPublicInstance(instance) {
  return instance;
}

function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}

function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  selectionInformation = null;
  setEnabled(eventsEnabled);
  eventsEnabled = null;
}

function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace = void 0;
  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);
    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
      validateDOMNesting$1(null, string, ownAncestorInfo);
    }
    parentNamespace = hostContextDev.namespace;
  }
  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode$1(internalInstanceHandle, domElement);
  updateFiberProps$1(domElement, props);
  return domElement;
}

function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}

function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;
    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
      validateDOMNesting$1(null, string, ownAncestorInfo);
    }
  }
  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}

function shouldSetTextContent(type, props) {
  return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
}

function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}

function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);
  }
  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode$1(internalInstanceHandle, textNode);
  return textNode;
}

var now = now$1;
var isPrimaryRenderer = true;
var scheduleDeferredCallback = scheduleWork;
var cancelDeferredCallback = cancelScheduledWork;

// -------------------
//     Mutation
// -------------------

var supportsMutation = true;

function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}

function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps$1(domElement, newProps);
  // Apply the diff to the DOM node.
  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}

function resetTextContent(domElement) {
  setTextContent(domElement, '');
}

function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}

function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function appendChildToContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, container);
  } else {
    container.appendChild(child);
  }
}

function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}

function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}

function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

// -------------------
//     Hydration
// -------------------

var supportsHydration = true;

function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  }
  // This has now been refined to an element node.
  return instance;
}

function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  }
  // This has now been refined to a text node.
  return instance;
}

function getNextHydratableSibling(instance) {
  var node = instance.nextSibling;
  // Skip non-hydratable nodes.
  while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
    node = node.nextSibling;
  }
  return node;
}

function getFirstHydratableChild(parentInstance) {
  var next = parentInstance.firstChild;
  // Skip non-hydratable nodes.
  while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
    next = next.nextSibling;
  }
  return next;
}

function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode$1(internalInstanceHandle, instance);
  // TODO: Possibly defer this until the commit phase where all the events
  // get attached.
  updateFiberProps$1(instance, props);
  var parentNamespace = void 0;
  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }
  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}

function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode$1(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}

function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === 1) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}

function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    if (instance.nodeType === 1) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}

function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type, props);
  }
}

function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}

function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedElement(parentInstance, type, props);
  }
}

function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}

// Exports ReactDOM.createRoot
var enableUserTimingAPI = true;

// Experimental error-boundary API that can recover from errors within a single
// render phase
var enableGetDerivedStateFromCatch = false;
// Suspense
var enableSuspense = false;
// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects = false;

// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:
var debugRenderPhaseSideEffectsForStrictMode = true;

// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.
var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;

// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
var warnAboutDeprecatedLifecycles = false;

// Warn about legacy context API
var warnAboutLegacyContextAPI = false;

// Gather advanced timing metrics for Profiler subtrees.
var enableProfilerTimer = true;

// Only used in www builds.

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = '\u269B';
var warningEmoji = '\u26D4';
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber = null;
// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase = null;
var currentPhaseFiber = null;
// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
var isWaitingForCallback = false;
// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + ' ' + markName;
};

var formatLabel = function (label, warning$$1) {
  var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';
  var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';
  return '' + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning$$1) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning$$1);
  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {}
  // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.

  // Clear marks immediately to avoid growing buffer.
  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + ' (#' + debugID + ')';
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
  } else {
    // Composite component methods.
    return componentName + '.' + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }
  labelsInCurrentCommit.add(label);

  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning$$1) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning$$1);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;
    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }
  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;
  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }
    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }
  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}

function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }
    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}

function startRequestCallbackTimer() {
  if (enableUserTimingAPI) {
    if (supportsUserTiming && !isWaitingForCallback) {
      isWaitingForCallback = true;
      beginMark('(Waiting for async callback...)');
    }
  }
}

function stopRequestCallbackTimer(didExpire, expirationTime) {
  if (enableUserTimingAPI) {
    if (supportsUserTiming) {
      isWaitingForCallback = false;
      var warning$$1 = didExpire ? 'React was blocked by main thread' : null;
      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning$$1);
    }
  }
}

function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, this is the fiber to unwind from.
    currentFiber = fiber;
    if (!beginFiberMark(fiber, null)) {
      return;
    }
    fiber._debugIsCurrentlyTiming = true;
  }
}

function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.
    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}

function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}

function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    var warning$$1 = 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning$$1);
  }
}

function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    clearPendingPhaseMeasurement();
    if (!beginFiberMark(fiber, phase)) {
      return;
    }
    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}

function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
    }
    currentPhase = null;
    currentPhaseFiber = null;
  }
}

function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;
    if (!supportsUserTiming) {
      return;
    }
    commitCountInCurrentWorkLoop = 0;
    // This is top level call.
    // Any other measurements are performed within.
    beginMark('(React Tree Reconciliation)');
    // Resume any measurements that were in progress during the last loop.
    resumeTimers();
  }
}

function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var warning$$1 = null;
    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning$$1 = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy) || 'Unknown';
        warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning$$1 = 'There were cascading updates';
    }
    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
    // Pause any measurements until the next loop.
    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning$$1);
  }
}

function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}

function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning$$1 = null;
    if (hasScheduledUpdateInCurrentCommit) {
      warning$$1 = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning$$1 = 'Caused by a cascading update in earlier commit';
    }
    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();

    endMark('(Committing Changes)', '(Committing Changes)', warning$$1);
  }
}

function startCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}

function stopCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
  }
}

function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}

function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
  }
}

function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}

function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];

var fiberStack = void 0;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      warning(false, 'Unexpected pop.');
    }
    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warning(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];

  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;

  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

function checkThatStackIsEmpty() {
  {
    if (index !== -1) {
      warning(false, 'Expected an empty stack. Something was not reset properly.');
    }
  }
}

function resetStackAfterFatalErrorInDev() {
  {
    index = -1;
    valueStack.length = 0;
    fiberStack.length = 0;
  }
}

var warnedAboutMissingGetChildContext = void 0;

{
  warnedAboutMissingGetChildContext = {};
}

// A cursor to the current merged context object on the stack.
var contextStackCursor = createCursor(emptyObject);
// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor = createCursor(false);
// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext = emptyObject;

function getUnmaskedContext(workInProgress) {
  var hasOwnContext = isContextProvider(workInProgress);
  if (hasOwnContext) {
    // If the fiber is a context provider itself, when we read its context
    // we have already pushed its own child context on the stack. A context
    // provider should not "see" its own child context. Therefore we read the
    // previous (parent) context instead for a context provider.
    return previousContext;
  }
  return contextStackCursor.current;
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  var instance = workInProgress.stateNode;
  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

function getMaskedContext(workInProgress, unmaskedContext) {
  var type = workInProgress.type;
  var contextTypes = type.contextTypes;
  if (!contextTypes) {
    return emptyObject;
  }

  // Avoid recreating masked context unless unmasked context has changed.
  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
  // This may trigger infinite loops if componentWillReceiveProps calls setState.
  var instance = workInProgress.stateNode;
  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
    return instance.__reactInternalMemoizedMaskedChildContext;
  }

  var context = {};
  for (var key in contextTypes) {
    context[key] = unmaskedContext[key];
  }

  {
    var name = getComponentName(workInProgress) || 'Unknown';
    checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // Context is created before the class component is instantiated so check for instance.
  if (instance) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return context;
}

function hasContextChanged() {
  return didPerformWorkStackCursor.current;
}

function isContextConsumer(fiber) {
  return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
}

function isContextProvider(fiber) {
  return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
}

function popContextProvider(fiber) {
  if (!isContextProvider(fiber)) {
    return;
  }

  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function popTopLevelContextObject(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function pushTopLevelContextObject(fiber, context, didChange) {
  !(contextStackCursor.current === emptyObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  push(contextStackCursor, context, fiber);
  push(didPerformWorkStackCursor, didChange, fiber);
}

function processChildContext(fiber, parentContext) {
  var instance = fiber.stateNode;
  var childContextTypes = fiber.type.childContextTypes;

  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
  if (typeof instance.getChildContext !== 'function') {
    {
      var componentName = getComponentName(fiber) || 'Unknown';

      if (!warnedAboutMissingGetChildContext[componentName]) {
        warnedAboutMissingGetChildContext[componentName] = true;
        warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
      }
    }
    return parentContext;
  }

  var childContext = void 0;
  {
    ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
  }
  startPhaseTimer(fiber, 'getChildContext');
  childContext = instance.getChildContext();
  stopPhaseTimer();
  {
    ReactDebugCurrentFiber.setCurrentPhase(null);
  }
  for (var contextKey in childContext) {
    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
  }
  {
    var name = getComponentName(fiber) || 'Unknown';
    checkPropTypes(childContextTypes, childContext, 'child context', name,
    // In practice, there is one case in which we won't get a stack. It's when
    // somebody calls unstable_renderSubtreeIntoContainer() and we process
    // context from the parent component instance. The stack will be missing
    // because it's outside of the reconciliation, and so the pointer has not
    // been set. This is rare and doesn't matter. We'll also remove that API.
    ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  return _assign({}, parentContext, childContext);
}

function pushContextProvider(workInProgress) {
  if (!isContextProvider(workInProgress)) {
    return false;
  }

  var instance = workInProgress.stateNode;
  // We push the context as early as possible to ensure stack integrity.
  // If the instance does not exist yet, we will push null at first,
  // and replace it on the stack later when invalidating the context.
  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;

  // Remember the parent context so we can merge with it later.
  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
  previousContext = contextStackCursor.current;
  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

  return true;
}

function invalidateContextProvider(workInProgress, didChange) {
  var instance = workInProgress.stateNode;
  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  if (didChange) {
    // Merge parent and own context.
    // Skip this if we're not updating due to sCU.
    // This avoids unnecessarily recomputing memoized values.
    var mergedContext = processChildContext(workInProgress, previousContext);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

    // Replace the old (or empty) context with the new one.
    // It is important to unwind the context in the reverse order.
    pop(didPerformWorkStackCursor, workInProgress);
    pop(contextStackCursor, workInProgress);
    // Now push the new context and mark that it has changed.
    push(contextStackCursor, mergedContext, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  } else {
    pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }
}

function findCurrentUnmaskedContext(fiber) {
  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
  // makes sense elsewhere
  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var node = fiber;
  while (node.tag !== HostRoot) {
    if (isContextProvider(node)) {
      return node.stateNode.__reactInternalMemoizedMergedChildContext;
    }
    var parent = node.return;
    !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    node = parent;
  }
  return node.stateNode.context;
}

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

// TODO: Use an opaque type once ESLint et al support the syntax


var NoWork = 0;
var Sync = 1;
var Never = MAX_SIGNED_31_BIT_INT;

var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = 2;

// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
}

function expirationTimeToMs(expirationTime) {
  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET + ceiling(currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
}

var NoContext = 0;
var AsyncMode = 1;
var StrictMode = 2;
var ProfileMode = 4;

var hasBadMapPolyfill = void 0;

{
  hasBadMapPolyfill = false;
  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]);
    // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.
    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.


var debugCounter = void 0;

{
  debugCounter = 1;
}

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.type = null;
  this.stateNode = null;

  // Fiber
  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;

  this.mode = mode;

  // Effects
  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  this.expirationTime = NoWork;

  this.alternate = null;

  if (enableProfilerTimer) {
    this.actualDuration = 0;
    this.actualStartTime = 0;
    this.selfBaseTime = 0;
    this.treeBaseTime = 0;
  }

  {
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugIsCurrentlyTiming = false;
    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
}

// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;
  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps;

    // We already have an alternate.
    // Reset the effect tag.
    workInProgress.effectTag = NoEffect;

    // The effect list is no longer valid.
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    if (enableProfilerTimer) {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = 0;
    }
  }

  workInProgress.expirationTime = expirationTime;

  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;

  // These will be overridden during the parent's reconciliation
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  if (enableProfilerTimer) {
    workInProgress.selfBaseTime = current.selfBaseTime;
    workInProgress.treeBaseTime = current.treeBaseTime;
  }

  return workInProgress;
}

function createHostRootFiber(isAsync) {
  var mode = isAsync ? AsyncMode | StrictMode : NoContext;
  return createFiber(HostRoot, null, null, mode);
}

function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;
  {
    owner = element._owner;
  }

  var fiber = void 0;
  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;

  var fiberTag = void 0;
  if (typeof type === 'function') {
    fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
      case REACT_ASYNC_MODE_TYPE:
        fiberTag = Mode;
        mode |= AsyncMode | StrictMode;
        break;
      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;
      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
      case REACT_TIMEOUT_TYPE:
        fiberTag = TimeoutComponent;
        // Suspense does not require async, but its children should be strict
        // mode compatible.
        mode |= StrictMode;
        break;
      default:
        fiberTag = getFiberTagFromObjectType(type, owner);
        break;
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.type = type;
  fiber.expirationTime = expirationTime;

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}

function getFiberTagFromObjectType(type, owner) {
  var $$typeof = typeof type === 'object' && type !== null ? type.$$typeof : null;

  switch ($$typeof) {
    case REACT_PROVIDER_TYPE:
      return ContextProvider;
    case REACT_CONTEXT_TYPE:
      // This is a consumer
      return ContextConsumer;
    case REACT_FORWARD_REF_TYPE:
      return ForwardRef;
    default:
      {
        var info = '';
        {
          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
          }
          var ownerName = owner ? getComponentName(owner) : null;
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }
        }
        invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
      }
  }
}

function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      invariant(false, 'Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoContext);
  fiber.type = 'DELETED';
  return fiber;
}

function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null, // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
}

// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoContext);
  }

  // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.

  target.tag = source.tag;
  target.key = source.key;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.alternate = source.alternate;
  if (enableProfilerTimer) {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseTime = source.selfBaseTime;
    target.treeBaseTime = source.treeBaseTime;
  }
  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  return target;
}

// TODO: This should be lifted into the renderer.


function createFiberRoot(containerInfo, isAsync, hydrate) {
  // Cyclic construction. This cheats the type system right now because
  // stateNode is any.
  var uninitializedFiber = createHostRootFiber(isAsync);
  var root = {
    current: uninitializedFiber,
    containerInfo: containerInfo,
    pendingChildren: null,

    earliestPendingTime: NoWork,
    latestPendingTime: NoWork,
    earliestSuspendedTime: NoWork,
    latestSuspendedTime: NoWork,
    latestPingedTime: NoWork,

    pendingCommitExpirationTime: NoWork,
    finishedWork: null,
    context: null,
    pendingContext: null,
    hydrate: hydrate,
    remainingExpirationTime: NoWork,
    firstBatch: null,
    nextScheduledRoot: null
  };
  uninitializedFiber.stateNode = root;
  return root;
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;

function catchErrors(fn) {
  return function (arg) {
    try {
      return fn(arg);
    } catch (err) {
      if (true && !hasLoggedError) {
        hasLoggedError = true;
        warning(false, 'React DevTools encountered an error: %s', err);
      }
    }
  };
}

function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }
  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }
  if (!hook.supportsFiber) {
    {
      warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    }
    // DevTools exists, even though it doesn't support Fiber.
    return true;
  }
  try {
    var rendererID = hook.inject(internals);
    // We have successfully injected, so now it is safe to set up hooks.
    onCommitFiberRoot = catchErrors(function (root) {
      return hook.onCommitFiberRoot(rendererID, root);
    });
    onCommitFiberUnmount = catchErrors(function (fiber) {
      return hook.onCommitFiberUnmount(rendererID, fiber);
    });
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warning(false, 'React DevTools encountered an error: %s.', err);
    }
  }
  // DevTools exists
  return true;
}

function onCommitRoot(root) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root);
  }
}

function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

var ReactStrictModeWarnings = {
  discardPendingWarnings: function () {},
  flushPendingDeprecationWarnings: function () {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordDeprecationWarnings: function (fiber, instance) {},
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {}
};

{
  var LIFECYCLE_SUGGESTIONS = {
    UNSAFE_componentWillMount: 'componentDidMount',
    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
    UNSAFE_componentWillUpdate: 'componentDidUpdate'
  };

  var pendingComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUnsafeLifecycleWarnings = new Map();
  var pendingLegacyContextWarning = new Map();

  // Tracks components we have already warned about.
  var didWarnAboutDeprecatedLifecycles = new Set();
  var didWarnAboutUnsafeLifecycles = new Set();
  var didWarnAboutLegacyContext = new Set();

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUnsafeLifecycleWarnings = new Map();
    pendingLegacyContextWarning = new Map();
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
      var lifecyclesWarningMesages = [];

      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
        if (lifecycleWarnings.length > 0) {
          var componentNames = new Set();
          lifecycleWarnings.forEach(function (fiber) {
            componentNames.add(getComponentName(fiber) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });

          var formatted = lifecycle.replace('UNSAFE_', '');
          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
          var sortedComponentNames = setToSortedString(componentNames);

          lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
        }
      });

      if (lifecyclesWarningMesages.length > 0) {
        var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(strictRoot);

        warning(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
      }
    });

    pendingUnsafeLifecycleWarnings = new Map();
  };

  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;

    var node = fiber;
    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }
      node = node.return;
    }

    return maybeStrictRoot;
  };

  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
    if (pendingComponentWillMountWarnings.length > 0) {
      var uniqueNames = new Set();
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);

      lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

      pendingComponentWillMountWarnings = [];
    }

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      var _uniqueNames = new Set();
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        _uniqueNames.add(getComponentName(fiber) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames = setToSortedString(_uniqueNames);

      lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

      pendingComponentWillReceivePropsWarnings = [];
    }

    if (pendingComponentWillUpdateWarnings.length > 0) {
      var _uniqueNames2 = new Set();
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        _uniqueNames2.add(getComponentName(fiber) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames2 = setToSortedString(_uniqueNames2);

      lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

      pendingComponentWillUpdateWarnings = [];
    }
  };

  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
      return;
    }

    // Don't warn about react-lifecycles-compat polyfilled components.
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warning(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    // This is difficult to track any other way since component names
    // are often vague and are likely to collide between 3rd party libraries.
    // An expand property is probably okay to use here since it's DEV-only,
    // and will only be set in the event of serious warnings.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    var warningsForRoot = void 0;
    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
      warningsForRoot = {
        UNSAFE_componentWillMount: [],
        UNSAFE_componentWillReceiveProps: [],
        UNSAFE_componentWillUpdate: []
      };

      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
    } else {
      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
    }

    var unsafeLifecycles = [];
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillMount');
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillUpdate');
    }

    if (unsafeLifecycles.length > 0) {
      unsafeLifecycles.forEach(function (lifecycle) {
        warningsForRoot[lifecycle].push(fiber);
      });
    }
  };

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warning(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }
      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);
      var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(strictRoot);

      warning(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
    });
  };
}

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};

var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

// TODO: Offscreen updates

function markPendingPriorityLevel(root, expirationTime) {
  if (enableSuspense) {
    // Update the latest and earliest pending times
    var earliestPendingTime = root.earliestPendingTime;
    if (earliestPendingTime === NoWork) {
      // No other pending updates.
      root.earliestPendingTime = root.latestPendingTime = expirationTime;
    } else {
      if (earliestPendingTime > expirationTime) {
        // This is the earliest pending update.
        root.earliestPendingTime = expirationTime;
      } else {
        var latestPendingTime = root.latestPendingTime;
        if (latestPendingTime < expirationTime) {
          // This is the latest pending update
          root.latestPendingTime = expirationTime;
        }
      }
    }
  }
}

function markCommittedPriorityLevels(root, currentTime, earliestRemainingTime) {
  if (enableSuspense) {
    if (earliestRemainingTime === NoWork) {
      // Fast path. There's no remaining work. Clear everything.
      root.earliestPendingTime = NoWork;
      root.latestPendingTime = NoWork;
      root.earliestSuspendedTime = NoWork;
      root.latestSuspendedTime = NoWork;
      root.latestPingedTime = NoWork;
      return;
    }

    // Let's see if the previous latest known pending level was just flushed.
    var latestPendingTime = root.latestPendingTime;
    if (latestPendingTime !== NoWork) {
      if (latestPendingTime < earliestRemainingTime) {
        // We've flushed all the known pending levels.
        root.earliestPendingTime = root.latestPendingTime = NoWork;
      } else {
        var earliestPendingTime = root.earliestPendingTime;
        if (earliestPendingTime < earliestRemainingTime) {
          // We've flushed the earliest known pending level. Set this to the
          // latest pending time.
          root.earliestPendingTime = root.latestPendingTime;
        }
      }
    }

    // Now let's handle the earliest remaining level in the whole tree. We need to
    // decide whether to treat it as a pending level or as suspended. Check
    // it falls within the range of known suspended levels.

    var earliestSuspendedTime = root.earliestSuspendedTime;
    if (earliestSuspendedTime === NoWork) {
      // There's no suspended work. Treat the earliest remaining level as a
      // pending level.
      markPendingPriorityLevel(root, earliestRemainingTime);
      return;
    }

    var latestSuspendedTime = root.latestSuspendedTime;
    if (earliestRemainingTime > latestSuspendedTime) {
      // The earliest remaining level is later than all the suspended work. That
      // means we've flushed all the suspended work.
      root.earliestSuspendedTime = NoWork;
      root.latestSuspendedTime = NoWork;
      root.latestPingedTime = NoWork;

      // There's no suspended work. Treat the earliest remaining level as a
      // pending level.
      markPendingPriorityLevel(root, earliestRemainingTime);
      return;
    }

    if (earliestRemainingTime < earliestSuspendedTime) {
      // The earliest remaining time is earlier than all the suspended work.
      // Treat it as a pending update.
      markPendingPriorityLevel(root, earliestRemainingTime);
      return;
    }

    // The earliest remaining time falls within the range of known suspended
    // levels. We should treat this as suspended work.
  }
}

function markSuspendedPriorityLevel(root, suspendedTime) {
  if (enableSuspense) {
    // First, check the known pending levels and update them if needed.
    var earliestPendingTime = root.earliestPendingTime;
    var latestPendingTime = root.latestPendingTime;
    if (earliestPendingTime === suspendedTime) {
      if (latestPendingTime === suspendedTime) {
        // Both known pending levels were suspended. Clear them.
        root.earliestPendingTime = root.latestPendingTime = NoWork;
      } else {
        // The earliest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root.earliestPendingTime = latestPendingTime;
      }
    } else if (latestPendingTime === suspendedTime) {
      // The latest pending level was suspended. Clear by setting it to the
      // latest pending level.
      root.latestPendingTime = earliestPendingTime;
    }

    // Next, if we're working on the lowest known suspended level, clear the ping.
    // TODO: What if a promise suspends and pings before the root completes?
    var latestSuspendedTime = root.latestSuspendedTime;
    if (latestSuspendedTime === suspendedTime) {
      root.latestPingedTime = NoWork;
    }

    // Finally, update the known suspended levels.
    var earliestSuspendedTime = root.earliestSuspendedTime;
    if (earliestSuspendedTime === NoWork) {
      // No other suspended levels.
      root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
    } else {
      if (earliestSuspendedTime > suspendedTime) {
        // This is the earliest suspended level.
        root.earliestSuspendedTime = suspendedTime;
      } else if (latestSuspendedTime < suspendedTime) {
        // This is the latest suspended level
        root.latestSuspendedTime = suspendedTime;
      }
    }
  }
}

function markPingedPriorityLevel(root, pingedTime) {
  if (enableSuspense) {
    var latestSuspendedTime = root.latestSuspendedTime;
    if (latestSuspendedTime !== NoWork && latestSuspendedTime <= pingedTime) {
      var latestPingedTime = root.latestPingedTime;
      if (latestPingedTime === NoWork || latestPingedTime < pingedTime) {
        root.latestPingedTime = pingedTime;
      }
    }
  }
}

function findNextPendingPriorityLevel(root) {
  if (enableSuspense) {
    var earliestSuspendedTime = root.earliestSuspendedTime;
    var earliestPendingTime = root.earliestPendingTime;
    if (earliestSuspendedTime === NoWork) {
      // Fast path. There's no suspended work.
      return earliestPendingTime;
    }

    // First, check if there's known pending work.
    if (earliestPendingTime !== NoWork) {
      return earliestPendingTime;
    }

    // Finally, if a suspended level was pinged, work on that. Otherwise there's
    // nothing to work on.
    return root.latestPingedTime;
  } else {
    return root.current.expirationTime;
  }
}

// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which is
// can be mutated and processed asynchronously before it is committed — a form
// of double buffering. If a work-in-progress render is discarded before
// finishing, we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3;

// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate = false;

var didWarnUpdateInsideUpdate = void 0;
var currentlyProcessingQueue = void 0;
var resetCurrentlyProcessingQueue = void 0;
{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
  resetCurrentlyProcessingQueue = function () {
    currentlyProcessingQueue = null;
  };
}

function createUpdateQueue(baseState) {
  var queue = {
    expirationTime: NoWork,
    baseState: baseState,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function cloneUpdateQueue(currentQueue) {
  var queue = {
    expirationTime: currentQueue.expirationTime,
    baseState: currentQueue.baseState,
    firstUpdate: currentQueue.firstUpdate,
    lastUpdate: currentQueue.lastUpdate,

    // TODO: With resuming, if we bail out and resuse the child tree, we should
    // keep these effects.
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,

    firstEffect: null,
    lastEffect: null,

    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function createUpdate(expirationTime) {
  return {
    expirationTime: expirationTime,

    tag: UpdateState,
    payload: null,
    callback: null,

    next: null,
    nextEffect: null
  };
}

function appendUpdateToQueue(queue, update, expirationTime) {
  // Append the update to the end of the list.
  if (queue.lastUpdate === null) {
    // Queue is empty
    queue.firstUpdate = queue.lastUpdate = update;
  } else {
    queue.lastUpdate.next = update;
    queue.lastUpdate = update;
  }
  if (queue.expirationTime === NoWork || queue.expirationTime > expirationTime) {
    // The incoming update has the earliest expiration of any update in the
    // queue. Update the queue's expiration time.
    queue.expirationTime = expirationTime;
  }
}

function enqueueUpdate(fiber, update, expirationTime) {
  // Update queues are created lazily.
  var alternate = fiber.alternate;
  var queue1 = void 0;
  var queue2 = void 0;
  if (alternate === null) {
    // There's only one fiber.
    queue1 = fiber.updateQueue;
    queue2 = null;
    if (queue1 === null) {
      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
    }
  } else {
    // There are two owners.
    queue1 = fiber.updateQueue;
    queue2 = alternate.updateQueue;
    if (queue1 === null) {
      if (queue2 === null) {
        // Neither fiber has an update queue. Create new ones.
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
      } else {
        // Only one fiber has an update queue. Clone to create a new one.
        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
      }
    } else {
      if (queue2 === null) {
        // Only one fiber has an update queue. Clone to create a new one.
        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
      } else {
        // Both owners have an update queue.
      }
    }
  }
  if (queue2 === null || queue1 === queue2) {
    // There's only a single queue.
    appendUpdateToQueue(queue1, update, expirationTime);
  } else {
    // There are two queues. We need to append the update to both queues,
    // while accounting for the persistent structure of the list — we don't
    // want the same update to be added multiple times.
    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
      // One of the queues is not empty. We must add the update to both queues.
      appendUpdateToQueue(queue1, update, expirationTime);
      appendUpdateToQueue(queue2, update, expirationTime);
    } else {
      // Both queues are non-empty. The last update is the same in both lists,
      // because of structural sharing. So, only append to one of the lists.
      appendUpdateToQueue(queue1, update, expirationTime);
      // But we still need to update the `lastUpdate` pointer of queue2.
      queue2.lastUpdate = update;
    }
  }

  {
    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
      warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }
}

function enqueueCapturedUpdate(workInProgress, update, renderExpirationTime) {
  // Captured updates go into a separate list, and only on the work-in-
  // progress queue.
  var workInProgressQueue = workInProgress.updateQueue;
  if (workInProgressQueue === null) {
    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
  } else {
    // TODO: I put this here rather than createWorkInProgress so that we don't
    // clone the queue unnecessarily. There's probably a better way to
    // structure this.
    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
  }

  // Append the update to the end of the list.
  if (workInProgressQueue.lastCapturedUpdate === null) {
    // This is the first render phase update
    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
  } else {
    workInProgressQueue.lastCapturedUpdate.next = update;
    workInProgressQueue.lastCapturedUpdate = update;
  }
  if (workInProgressQueue.expirationTime === NoWork || workInProgressQueue.expirationTime > renderExpirationTime) {
    // The incoming update has the earliest expiration of any update in the
    // queue. Update the queue's expiration time.
    workInProgressQueue.expirationTime = renderExpirationTime;
  }
}

function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
  var current = workInProgress.alternate;
  if (current !== null) {
    // If the work-in-progress queue is equal to the current queue,
    // we need to clone it first.
    if (queue === current.updateQueue) {
      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
    }
  }
  return queue;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var _payload = update.payload;
        if (typeof _payload === 'function') {
          // Updater function
          {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }
          return _payload.call(instance, prevState, nextProps);
        }
        // State object
        return _payload;
      }
    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough
    case UpdateState:
      {
        var _payload2 = update.payload;
        var partialState = void 0;
        if (typeof _payload2 === 'function') {
          // Updater function
          {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload2.call(instance, prevState, nextProps);
            }
          }
          partialState = _payload2.call(instance, prevState, nextProps);
        } else {
          // Partial state object
          partialState = _payload2;
        }
        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        }
        // Merge the partial state and the previous state.
        return _assign({}, prevState, partialState);
      }
    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }
  return prevState;
}

function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
  hasForceUpdate = false;

  if (queue.expirationTime === NoWork || queue.expirationTime > renderExpirationTime) {
    // Insufficient priority. Bailout.
    return;
  }

  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

  {
    currentlyProcessingQueue = queue;
  }

  // These values may change as we process the queue.
  var newBaseState = queue.baseState;
  var newFirstUpdate = null;
  var newExpirationTime = NoWork;

  // Iterate through the list of updates to compute the result.
  var update = queue.firstUpdate;
  var resultState = newBaseState;
  while (update !== null) {
    var updateExpirationTime = update.expirationTime;
    if (updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstUpdate === null) {
        // This is the first skipped update. It will be the first update in
        // the new list.
        newFirstUpdate = update;
        // Since this is the first update that was skipped, the current result
        // is the new base state.
        newBaseState = resultState;
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime === NoWork || newExpirationTime > updateExpirationTime) {
        newExpirationTime = updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback = update.callback;
      if (_callback !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastEffect === null) {
          queue.firstEffect = queue.lastEffect = update;
        } else {
          queue.lastEffect.nextEffect = update;
          queue.lastEffect = update;
        }
      }
    }
    // Continue to the next update.
    update = update.next;
  }

  // Separately, iterate though the list of captured updates.
  var newFirstCapturedUpdate = null;
  update = queue.firstCapturedUpdate;
  while (update !== null) {
    var _updateExpirationTime = update.expirationTime;
    if (_updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstCapturedUpdate === null) {
        // This is the first skipped captured update. It will be the first
        // update in the new list.
        newFirstCapturedUpdate = update;
        // If this is the first update that was skipped, the current result is
        // the new base state.
        if (newFirstUpdate === null) {
          newBaseState = resultState;
        }
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime === NoWork || newExpirationTime > _updateExpirationTime) {
        newExpirationTime = _updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback2 = update.callback;
      if (_callback2 !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastCapturedEffect === null) {
          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
        } else {
          queue.lastCapturedEffect.nextEffect = update;
          queue.lastCapturedEffect = update;
        }
      }
    }
    update = update.next;
  }

  if (newFirstUpdate === null) {
    queue.lastUpdate = null;
  }
  if (newFirstCapturedUpdate === null) {
    queue.lastCapturedUpdate = null;
  } else {
    workInProgress.effectTag |= Callback;
  }
  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
    // We processed every update, without skipping. That means the new base
    // state is the same as the result state.
    newBaseState = resultState;
  }

  queue.baseState = newBaseState;
  queue.firstUpdate = newFirstUpdate;
  queue.firstCapturedUpdate = newFirstCapturedUpdate;
  queue.expirationTime = newExpirationTime;

  workInProgress.memoizedState = resultState;

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}

function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}

function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
  // If the finished render included captured updates, and there are still
  // lower priority updates left over, we need to keep the captured updates
  // in the queue so that they are rebased and not dropped once we process the
  // queue again at the lower priority.
  if (finishedQueue.firstCapturedUpdate !== null) {
    // Join the captured update list to the end of the normal list.
    if (finishedQueue.lastUpdate !== null) {
      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
    }
    // Clear the list of captured updates.
    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
  }

  // Commit the effects
  var effect = finishedQueue.firstEffect;
  finishedQueue.firstEffect = finishedQueue.lastEffect = null;
  while (effect !== null) {
    var _callback3 = effect.callback;
    if (_callback3 !== null) {
      effect.callback = null;
      callCallback(_callback3, instance);
    }
    effect = effect.nextEffect;
  }

  effect = finishedQueue.firstCapturedEffect;
  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  while (effect !== null) {
    var _callback4 = effect.callback;
    if (_callback4 !== null) {
      effect.callback = null;
      callCallback(_callback4, instance);
    }
    effect = effect.nextEffect;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackAddendumByWorkInProgressFiber(source)
  };
}

var providerCursor = createCursor(null);
var valueCursor = createCursor(null);
var changedBitsCursor = createCursor(0);

var rendererSigil = void 0;
{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

function pushProvider(providerFiber) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(changedBitsCursor, context._changedBits, providerFiber);
    push(valueCursor, context._currentValue, providerFiber);
    push(providerCursor, providerFiber, providerFiber);

    context._currentValue = providerFiber.pendingProps.value;
    context._changedBits = providerFiber.stateNode;
    {
      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warning(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer = rendererSigil;
    }
  } else {
    push(changedBitsCursor, context._changedBits2, providerFiber);
    push(valueCursor, context._currentValue2, providerFiber);
    push(providerCursor, providerFiber, providerFiber);

    context._currentValue2 = providerFiber.pendingProps.value;
    context._changedBits2 = providerFiber.stateNode;
    {
      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warning(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer2 = rendererSigil;
    }
  }
}

function popProvider(providerFiber) {
  var changedBits = changedBitsCursor.current;
  var currentValue = valueCursor.current;

  pop(providerCursor, providerFiber);
  pop(valueCursor, providerFiber);
  pop(changedBitsCursor, providerFiber);

  var context = providerFiber.type._context;
  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
    context._changedBits = changedBits;
  } else {
    context._currentValue2 = currentValue;
    context._changedBits2 = changedBits;
  }
}

function getContextCurrentValue(context) {
  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

function getContextChangedBits(context) {
  return isPrimaryRenderer ? context._changedBits : context._changedBits2;
}

var NO_CONTEXT = {};

var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber);
  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);

  // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.
  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance);
  // Now that we know this function doesn't throw, replace it.
  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance);

  // Don't push this Fiber's context unless it's unique.
  if (context === nextContext) {
    return;
  }

  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var commitTime = 0;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {
  if (!enableProfilerTimer) {
    return;
  }
  commitTime = now();
}

/**
 * The "actual" render time is total time required to render the descendants of a Profiler component.
 * This time is stored as a stack, since Profilers can be nested.
 * This time is started during the "begin" phase and stopped during the "complete" phase.
 * It is paused (and accumulated) in the event of an interruption or an aborted render.
 */

var fiberStack$1 = void 0;

{
  fiberStack$1 = [];
}

var timerPausedAt = 0;
var totalElapsedPauseTime = 0;

function checkActualRenderTimeStackEmpty() {
  if (!enableProfilerTimer) {
    return;
  }
  {
    !(fiberStack$1.length === 0) ? warning(false, 'Expected an empty stack. Something was not reset properly.') : void 0;
  }
}

function markActualRenderTimeStarted(fiber) {
  if (!enableProfilerTimer) {
    return;
  }
  {
    fiberStack$1.push(fiber);
  }

  fiber.actualDuration = now() - fiber.actualDuration - totalElapsedPauseTime;
  fiber.actualStartTime = now();
}

function pauseActualRenderTimerIfRunning() {
  if (!enableProfilerTimer) {
    return;
  }
  if (timerPausedAt === 0) {
    timerPausedAt = now();
  }
}

function recordElapsedActualRenderTime(fiber) {
  if (!enableProfilerTimer) {
    return;
  }
  {
    !(fiber === fiberStack$1.pop()) ? warning(false, 'Unexpected Fiber (%s) popped.', getComponentName(fiber)) : void 0;
  }

  fiber.actualDuration = now() - totalElapsedPauseTime - fiber.actualDuration;
}

function resetActualRenderTimer() {
  if (!enableProfilerTimer) {
    return;
  }
  totalElapsedPauseTime = 0;
}

function resumeActualRenderTimerIfPaused() {
  if (!enableProfilerTimer) {
    return;
  }
  if (timerPausedAt > 0) {
    totalElapsedPauseTime += now() - timerPausedAt;
    timerPausedAt = 0;
  }
}

/**
 * The "base" render time is the duration of the “begin” phase of work for a particular fiber.
 * This time is measured and stored on each fiber.
 * The time for all sibling fibers are accumulated and stored on their parent during the "complete" phase.
 * If a fiber bails out (sCU false) then its "base" timer is cancelled and the fiber is not updated.
 */

var baseStartTime = -1;

function recordElapsedBaseRenderTimeIfRunning(fiber) {
  if (!enableProfilerTimer) {
    return;
  }
  if (baseStartTime !== -1) {
    fiber.selfBaseTime = now() - baseStartTime;
  }
}

function startBaseRenderTimer() {
  if (!enableProfilerTimer) {
    return;
  }
  {
    if (baseStartTime !== -1) {
      warning(false, 'Cannot start base timer that is already running. ' + 'This error is likely caused by a bug in React. ' + 'Please file an issue.');
    }
  }
  baseStartTime = now();
}

function stopBaseRenderTimerIfRunning() {
  if (!enableProfilerTimer) {
    return;
  }
  baseStartTime = -1;
}

var fakeInternalInstance = {};
var isArray = Array.isArray;

var didWarnAboutStateAssignmentForComponent = void 0;
var didWarnAboutUninitializedState = void 0;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
var didWarnAboutUndefinedDerivedState = void 0;
var warnOnUndefinedDerivedState = void 0;
var warnOnInvalidCallback$1 = void 0;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();

  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback$1 = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }
    var key = callerName + '_' + callback;
    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);
      warning(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (workInProgress, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(workInProgress) || 'Component';
      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);
        warning(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  };

  // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.
  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(workInProgress, partialState);
  }
  // Merge the partial state and the previous state.
  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState;

  // Once the update queue is empty, persist the derived state onto the
  // base state.
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null && updateQueue.expirationTime === NoWork) {
    updateQueue.baseState = memoizedState;
  }
}

var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = recalculateCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.payload = payload;
    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'setState');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update, expirationTime);
    scheduleWork$1(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = recalculateCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'replaceState');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update, expirationTime);
    scheduleWork$1(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = recalculateCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'forceUpdate');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update, expirationTime);
    scheduleWork$1(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
  var instance = workInProgress.stateNode;
  var ctor = workInProgress.type;
  if (typeof instance.shouldComponentUpdate === 'function') {
    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
    stopPhaseTimer();

    {
      !(shouldUpdate !== undefined) ? warning(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Component') : void 0;
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress) {
  var instance = workInProgress.stateNode;
  var type = workInProgress.type;
  {
    var name = getComponentName(workInProgress) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (type.prototype && typeof type.prototype.render === 'function') {
        warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
    !noGetInitialStateOnES6 ? warning(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
    !noGetDefaultPropsOnES6 ? warning(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
    var noInstancePropTypes = !instance.propTypes;
    !noInstancePropTypes ? warning(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
    var noInstanceContextTypes = !instance.contextTypes;
    !noInstanceContextTypes ? warning(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;
    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
    !noComponentShouldUpdate ? warning(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
    if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
    }
    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
    !noComponentDidUnmount ? warning(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
    !noComponentDidReceiveProps ? warning(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
    !noComponentWillRecieveProps ? warning(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
    !noUnsafeComponentWillRecieveProps ? warning(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
    var hasMutatedProps = instance.props !== workInProgress.pendingProps;
    !(instance.props === undefined || !hasMutatedProps) ? warning(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
    var noInstanceDefaultProps = !instance.defaultProps;
    !noInstanceDefaultProps ? warning(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(type)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(type);
      warning(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(workInProgress));
    }

    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
    !noInstanceGetDerivedStateFromProps ? warning(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromCatch !== 'function';
    !noInstanceGetDerivedStateFromCatch ? warning(false, '%s: getDerivedStateFromCatch() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noStaticGetSnapshotBeforeUpdate = typeof type.getSnapshotBeforeUpdate !== 'function';
    !noStaticGetSnapshotBeforeUpdate ? warning(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
    var _state = instance.state;
    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      warning(false, '%s.state: must be set to an object or null', name);
    }
    if (typeof instance.getChildContext === 'function') {
      !(typeof type.childContextTypes === 'object') ? warning(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance;
  // The instance needs access to the fiber so that it can schedule updates
  set(instance, workInProgress);
  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, props, renderExpirationTime) {
  var ctor = workInProgress.type;
  var unmaskedContext = getUnmaskedContext(workInProgress);
  var needsContext = isContextConsumer(workInProgress);
  var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;

  // Instantiate twice to help detect side-effects.
  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(workInProgress) || 'Component';
      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);
        warning(false, '%s: Did not properly initialize state during construction. ' + 'Expected state to be an object, but it was %s.', componentName, instance.state === null ? 'null' : 'undefined');
      }
    }

    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.
    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;
      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }
      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }
      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }
      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(workInProgress) || 'Component';
        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
          warning(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
        }
      }
    }
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.
  if (needsContext) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }
  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress) || 'Component');
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');
  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, newContext);
  }
  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
  }
  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress) || 'Component';
      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);
        warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress, renderExpirationTime) {
  var ctor = workInProgress.type;

  {
    checkClassInstance(workInProgress);
  }

  var instance = workInProgress.stateNode;
  var props = workInProgress.pendingProps;
  var unmaskedContext = getUnmaskedContext(workInProgress);

  instance.props = props;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyObject;
  instance.context = getMaskedContext(workInProgress, unmaskedContext);

  {
    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
    }
  }

  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, props, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  var getDerivedStateFromProps = workInProgress.type.getDerivedStateFromProps;
  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, props);
    instance.state = workInProgress.memoizedState;
  }

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance);
    // If we had additional state updates during this life-cycle, let's
    // process them now.
    updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, props, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, renderExpirationTime) {
  var ctor = workInProgress.type;
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  var newProps = workInProgress.pendingProps;
  instance.props = oldProps;

  var oldContext = instance.context;
  var newUnmaskedContext = getUnmaskedContext(workInProgress);
  var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== newContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }
  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = newContext;

  return shouldUpdate;
}

// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current, workInProgress, renderExpirationTime) {
  var ctor = workInProgress.type;
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  var newProps = workInProgress.pendingProps;
  instance.props = oldProps;

  var oldContext = instance.context;
  var newUnmaskedContext = getUnmaskedContext(workInProgress);
  var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== newContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, newContext);
      }
      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = newContext;

  return shouldUpdate;
}

var getCurrentFiberStackAddendum$7 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


var didWarnAboutMaps = void 0;
var didWarnAboutStringRefInStrictMode = void 0;
var ownerHasKeyUseWarning = void 0;
var ownerHasFunctionTypeWarning = void 0;
var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutStringRefInStrictMode = {};

  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }
    if (!child._store || child._store.validated || child.key != null) {
      return;
    }
    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    child._store.validated = true;

    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$7() || '');
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    warning(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$7());
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;
  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      if (returnFiber.mode & StrictMode) {
        var componentName = getComponentName(returnFiber) || 'Component';
        if (!didWarnAboutStringRefInStrictMode[componentName]) {
          warning(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackAddendumByWorkInProgressFiber(returnFiber));
          didWarnAboutStringRefInStrictMode[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst = void 0;
      if (owner) {
        var ownerFiber = owner;
        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
        inst = ownerFiber.stateNode;
      }
      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
      var stringRef = '' + mixedRef;
      // Check if previous string ref matches new string ref
      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }
      var ref = function (value) {
        var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };
      ref._stringRef = stringRef;
      return ref;
    } else {
      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
    }
  }
  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';
    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$7() || '');
    }
    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$7() || '');

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

  warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$7() || '');
}

// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }
    // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    }

    // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.
    var childToDelete = currentFirstChild;
    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }
    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    var existingChildren = new Map();

    var existingChild = currentFirstChild;
    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }
      existingChild = existingChild.sibling;
    }
    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }
    var current = newFiber.alternate;
    if (current !== null) {
      var oldIndex = current.index;
      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }
    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null && current.type === element.type) {
      // Move based on index
      var existing = useFiber(current, element.props, expirationTime);
      existing.ref = coerceRef(returnFiber, current, element);
      existing.return = returnFiber;
      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }
      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current, element);
      created.return = returnFiber;
      return created;
    }
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || [], expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }
        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.

    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }
      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }
              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }
            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }
        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;
        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  /**
   * Warns if there is a duplicate or missing key
   */
  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }
      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;
          if (typeof key !== 'string') {
            break;
          }
          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }
          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }
          warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$7());
          break;
        default:
          break;
      }
    }
    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from boths ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.

    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.

    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.

    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.

    {
      // First, validate keys.
      var knownKeys = null;
      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
        if (!_newFiber) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }
        previousNewFiber = _newFiber;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
      if (_newFiber2) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }
        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.

    var iteratorFn = getIteratorFn(newChildrenIterable);
    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    {
      // Warn about using Maps as children
      if (newChildrenIterable.entries === iteratorFn) {
        !didWarnAboutMaps ? warning(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$7()) : void 0;
        didWarnAboutMaps = true;
      }

      // First, validate keys.
      // We'll get a different iterator later for the main pass.
      var _newChildren = iteratorFn.call(newChildrenIterable);
      if (_newChildren) {
        var knownKeys = null;
        var _step = _newChildren.next();
        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);
    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    var step = newChildren.next();
    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (!oldFiber) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
        if (_newFiber3 === null) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }
        previousNewFiber = _newFiber3;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }
        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
    // The existing first child is not a text node so we need to create one
    // and delete the existing ones.
    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, child, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.
  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.

    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    }

    // Handle object types
    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }
    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;
              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough
        case FunctionalComponent:
          {
            var Component = returnFiber.type;
            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
          }
      }
    }

    // Remaining cases are all treated as empty.
    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);

function cloneChildFibers(current, workInProgress) {
  !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;

  newChild.return = workInProgress;
  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild.return = workInProgress;
  }
  newChild.sibling = null;
}

// The deepest Fiber on the stack involved in a hydration context.
// This may have been an insertion or a hydration.
var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;
      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion;

  // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.
  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag |= Placement;
  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;
          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;
            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }
          break;
        }
      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;
          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;
            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;
          }
          break;
        }
      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);
        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }
        return false;
      }
    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);
        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }
        return false;
      }
    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }
  var nextInstance = nextHydratableInstance;
  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }
  var firstAttemptedInstance = nextInstance;
  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.
    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }
  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
  // TODO: Type this specific to this type of component.
  fiber.updateQueue = updatePayload;
  // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.
  if (updatePayload !== null) {
    return true;
  }
  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;
      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }
          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }
  return shouldUpdate;
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;
  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
    parent = parent.return;
  }
  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }
  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }
  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type;

  // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.
  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;
    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);
  nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


var didWarnAboutBadClass = void 0;
var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
var didWarnAboutStatelessRefs = void 0;

{
  didWarnAboutBadClass = {};
  didWarnAboutGetDerivedStateOnFunctionalComponent = {};
  didWarnAboutStatelessRefs = {};
}

// TODO: Remove this and use reconcileChildrenAtExpirationTime directly.
function reconcileChildren(current, workInProgress, nextChildren) {
  reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
}

function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.

    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }
}

function updateForwardRef(current, workInProgress) {
  var render = workInProgress.type.render;
  var nextProps = workInProgress.pendingProps;
  var ref = workInProgress.ref;
  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (workInProgress.memoizedProps === nextProps) {
    var currentRef = current !== null ? current.ref : null;
    if (ref === currentRef) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
  }

  var nextChildren = void 0;
  {
    ReactCurrentOwner.current = workInProgress;
    ReactDebugCurrentFiber.setCurrentPhase('render');
    nextChildren = render(nextProps, ref);
    ReactDebugCurrentFiber.setCurrentPhase(null);
  }

  reconcileChildren(current, workInProgress, nextChildren);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateFragment(current, workInProgress) {
  var nextChildren = workInProgress.pendingProps;
  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (workInProgress.memoizedProps === nextChildren) {
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }
  reconcileChildren(current, workInProgress, nextChildren);
  memoizeProps(workInProgress, nextChildren);
  return workInProgress.child;
}

function updateMode(current, workInProgress) {
  var nextChildren = workInProgress.pendingProps.children;
  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }
  reconcileChildren(current, workInProgress, nextChildren);
  memoizeProps(workInProgress, nextChildren);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress) {
  var nextProps = workInProgress.pendingProps;
  if (enableProfilerTimer) {
    workInProgress.effectTag |= Update;
  }
  if (workInProgress.memoizedProps === nextProps) {
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;
  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionalComponent(current, workInProgress) {
  var fn = workInProgress.type;
  var nextProps = workInProgress.pendingProps;

  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else {
    if (workInProgress.memoizedProps === nextProps) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    // TODO: consider bringing fn.shouldComponentUpdate() back.
    // It used to be here.
  }

  var unmaskedContext = getUnmaskedContext(workInProgress);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  var nextChildren = void 0;

  {
    ReactCurrentOwner.current = workInProgress;
    ReactDebugCurrentFiber.setCurrentPhase('render');
    nextChildren = fn(nextProps, context);
    ReactDebugCurrentFiber.setCurrentPhase(null);
  }
  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, renderExpirationTime) {
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.
  var hasContext = pushContextProvider(workInProgress);
  var shouldUpdate = void 0;
  if (current === null) {
    if (workInProgress.stateNode === null) {
      // In the initial pass we might need to construct the instance.
      constructClassInstance(workInProgress, workInProgress.pendingProps, renderExpirationTime);
      mountClassInstance(workInProgress, renderExpirationTime);

      shouldUpdate = true;
    } else {
      // In a resume, we'll already have an instance we can reuse.
      shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
    }
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
  }
  return finishClassComponent(current, workInProgress, shouldUpdate, hasContext, renderExpirationTime);
}

function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);

  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }

  var ctor = workInProgress.type;
  var instance = workInProgress.stateNode;

  // Rerender
  ReactCurrentOwner.current = workInProgress;
  var nextChildren = void 0;
  if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof ctor.getDerivedStateFromCatch !== 'function')) {
    // If we captured an error, but getDerivedStateFrom catch is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    if (enableProfilerTimer) {
      stopBaseRenderTimerIfRunning();
    }
  } else {
    {
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = instance.render();
      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        instance.render();
      }
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  if (didCaptureError) {
    // If we're recovering from an error, reconcile twice: first to delete
    // all the existing children.
    reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime);
    workInProgress.child = null;
    // Now we can continue reconciling like normal. This has the effect of
    // remounting all children regardless of whether their their
    // identity matches.
  }
  reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);
  // Memoize props and state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.
  memoizeState(workInProgress, instance.state);
  memoizeProps(workInProgress, instance.props);

  // The context might have changed so we need to recalculate it.
  if (hasContext) {
    invalidateContextProvider(workInProgress, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;
  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }
  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    var nextProps = workInProgress.pendingProps;
    var prevState = workInProgress.memoizedState;
    var prevChildren = prevState !== null ? prevState.element : null;
    processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
    var nextState = workInProgress.memoizedState;
    // Caution: React DevTools currently depends on this property
    // being called "element".
    var nextChildren = nextState.element;

    if (nextChildren === prevChildren) {
      // If the state is the same as before, that's a bailout because we had
      // no work that expires at this time.
      resetHydrationState();
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    var root = workInProgress.stateNode;
    if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
      // If we don't have any current children this might be the first pass.
      // We always try to hydrate. If this isn't a hydration pass there won't
      // be any children to hydrate which is effectively the same thing as
      // not hydrating.

      // This is a bit of a hack. We track the host root as a placement to
      // know that we're currently in a mounting state. That way isMounted
      // works as expected. We must reset this before committing.
      // TODO: Delete this when we delete isMounted and findDOMNode.
      workInProgress.effectTag |= Placement;

      // Ensure that children mount into this root without tracking
      // side-effects. This ensures that we don't store Placement effects on
      // nodes that will be hydrated.
      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    } else {
      // Otherwise reset hydration state in case we aborted and resumed another
      // root.
      resetHydrationState();
      reconcileChildren(current, workInProgress, nextChildren);
    }
    return workInProgress.child;
  }
  resetHydrationState();
  // If there is no update queue, that's a bailout because the root has no props.
  return bailoutOnAlreadyFinishedWork(current, workInProgress);
}

function updateHostComponent(current, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var memoizedProps = workInProgress.memoizedProps;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;

  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (memoizedProps === nextProps) {
    var isHidden = workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps);
    if (isHidden) {
      // Before bailing out, make sure we've deprioritized a hidden component.
      workInProgress.expirationTime = Never;
    }
    if (!isHidden || renderExpirationTime !== Never) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    // If we're rendering a hidden node at hidden priority, don't bailout. The
    // parent is complete, but the children may not be.
  }

  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also have access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current, workInProgress);

  // Check the host config to see if the children are offscreen/hidden.
  if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
    // Down-prioritize the children.
    workInProgress.expirationTime = Never;
    // Bailout and come back to this fiber later.
    workInProgress.memoizedProps = nextProps;
    return null;
  }

  reconcileChildren(current, workInProgress, nextChildren);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }
  var nextProps = workInProgress.pendingProps;
  memoizeProps(workInProgress, nextProps);
  // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.
  return null;
}

function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
  !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var fn = workInProgress.type;
  var props = workInProgress.pendingProps;
  var unmaskedContext = getUnmaskedContext(workInProgress);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  var value = void 0;

  {
    if (fn.prototype && typeof fn.prototype.render === 'function') {
      var componentName = getComponentName(workInProgress) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    ReactCurrentOwner.current = workInProgress;
    value = fn(props, context);
  }
  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    var Component = workInProgress.type;

    // Proceed under the assumption that this is a class instance
    workInProgress.tag = ClassComponent;

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, props);
    }

    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = pushContextProvider(workInProgress);
    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, renderExpirationTime);
    return finishClassComponent(current, workInProgress, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a functional component
    workInProgress.tag = FunctionalComponent;
    {
      var _Component = workInProgress.type;

      if (_Component) {
        !!_Component.childContextTypes ? warning(false, '%s(...): childContextTypes cannot be defined on a functional component.', _Component.displayName || _Component.name || 'Component') : void 0;
      }
      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();
        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }

        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;
        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }
        if (!didWarnAboutStatelessRefs[warningKey]) {
          didWarnAboutStatelessRefs[warningKey] = true;
          warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
        }
      }

      if (typeof fn.getDerivedStateFromProps === 'function') {
        var _componentName = getComponentName(workInProgress) || 'Unknown';

        if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
          warning(false, '%s: Stateless functional components do not support getDerivedStateFromProps.', _componentName);
          didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
        }
      }
    }
    reconcileChildren(current, workInProgress, value);
    memoizeProps(workInProgress, props);
    return workInProgress.child;
  }
}

function updateTimeoutComponent(current, workInProgress, renderExpirationTime) {
  if (enableSuspense) {
    var nextProps = workInProgress.pendingProps;
    var prevProps = workInProgress.memoizedProps;

    var prevDidTimeout = workInProgress.memoizedState;

    // Check if we already attempted to render the normal state. If we did,
    // and we timed out, render the placeholder state.
    var alreadyCaptured = (workInProgress.effectTag & DidCapture) === NoEffect;
    var nextDidTimeout = !alreadyCaptured;

    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (nextProps === prevProps && nextDidTimeout === prevDidTimeout) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var render = nextProps.children;
    var nextChildren = render(nextDidTimeout);
    workInProgress.memoizedProps = nextProps;
    workInProgress.memoizedState = nextDidTimeout;
    reconcileChildren(current, workInProgress, nextChildren);
    return workInProgress.child;
  } else {
    return null;
  }
}

function updatePortalComponent(current, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;
  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (workInProgress.memoizedProps === nextChildren) {
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    memoizeProps(workInProgress, nextChildren);
  } else {
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextChildren);
  }
  return workInProgress.child;
}

function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;
  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }
  while (fiber !== null) {
    var nextFiber = void 0;
    // Visit this fiber.
    switch (fiber.tag) {
      case ContextConsumer:
        // Check if the context matches.
        var observedBits = fiber.stateNode | 0;
        if (fiber.type === context && (observedBits & changedBits) !== 0) {
          // Update the expiration time of all the ancestors, including
          // the alternates.
          var node = fiber;
          while (node !== null) {
            var alternate = node.alternate;
            if (node.expirationTime === NoWork || node.expirationTime > renderExpirationTime) {
              node.expirationTime = renderExpirationTime;
              if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                alternate.expirationTime = renderExpirationTime;
              }
            } else if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
              alternate.expirationTime = renderExpirationTime;
            } else {
              // Neither alternate was updated, which means the rest of the
              // ancestor path already has sufficient priority.
              break;
            }
            node = node.return;
          }
          // Don't scan deeper than a matching consumer. When we render the
          // consumer, we'll continue scanning from that point. This way the
          // scanning work is time-sliced.
          nextFiber = null;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }
        break;
      case ContextProvider:
        // Don't scan deeper if this is a matching provider
        nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        break;
      default:
        // Traverse down.
        nextFiber = fiber.child;
        break;
    }
    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;
      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }
        var sibling = nextFiber.sibling;
        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        }
        // No more siblings. Traverse up.
        nextFiber = nextFiber.return;
      }
    }
    fiber = nextFiber;
  }
}

function updateContextProvider(current, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;

  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var canBailOnProps = true;

  if (hasContextChanged()) {
    canBailOnProps = false;
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (oldProps === newProps) {
    workInProgress.stateNode = 0;
    pushProvider(workInProgress);
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }

  var newValue = newProps.value;
  workInProgress.memoizedProps = newProps;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackAddendum$6);
    }
  }

  var changedBits = void 0;
  if (oldProps === null) {
    // Initial render
    changedBits = MAX_SIGNED_31_BIT_INT;
  } else {
    if (oldProps.value === newProps.value) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && canBailOnProps) {
        workInProgress.stateNode = 0;
        pushProvider(workInProgress);
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      changedBits = 0;
    } else {
      var oldValue = oldProps.value;
      // Use Object.is to compare the new context value to the old value.
      // Inlined Object.is polyfill.
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
      if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
      ) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && canBailOnProps) {
            workInProgress.stateNode = 0;
            pushProvider(workInProgress);
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }
          changedBits = 0;
        } else {
        changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
        {
          !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
        }
        changedBits |= 0;

        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && canBailOnProps) {
            workInProgress.stateNode = 0;
            pushProvider(workInProgress);
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }
        } else {
          propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
        }
      }
    }
  }

  workInProgress.stateNode = changedBits;
  pushProvider(workInProgress);

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren);
  return workInProgress.child;
}

function updateContextConsumer(current, workInProgress, renderExpirationTime) {
  var context = workInProgress.type;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;

  var newValue = getContextCurrentValue(context);
  var changedBits = getContextChangedBits(context);

  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (changedBits === 0 && oldProps === newProps) {
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }
  workInProgress.memoizedProps = newProps;

  var observedBits = newProps.unstable_observedBits;
  if (observedBits === undefined || observedBits === null) {
    // Subscribe to all changes by default
    observedBits = MAX_SIGNED_31_BIT_INT;
  }
  // Store the observedBits on the fiber's stateNode for quick access.
  workInProgress.stateNode = observedBits;

  if ((changedBits & observedBits) !== 0) {
    // Context change propagation stops at matching consumers, for time-
    // slicing. Continue the propagation here.
    propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
  } else if (oldProps === newProps) {
    // Skip over a memoized parent with a bitmask bailout even
    // if we began working on it because of a deeper matching child.
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }
  // There is no bailout on `children` equality because we expect people
  // to often pass a bound method as a child, but it may reference
  // `this.state` or `this.props` (and thus needs to re-render on `setState`).

  var render = newProps.children;

  {
    !(typeof render === 'function') ? warning(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
  }

  var newChildren = void 0;
  {
    ReactCurrentOwner.current = workInProgress;
    ReactDebugCurrentFiber.setCurrentPhase('render');
    newChildren = render(newValue);
    ReactDebugCurrentFiber.setCurrentPhase(null);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren);
  return workInProgress.child;
}

/*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

function bailoutOnAlreadyFinishedWork(current, workInProgress) {
  cancelWorkTimer(workInProgress);

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopBaseRenderTimerIfRunning();
  }

  // TODO: We should ideally be able to bail out early if the children have no
  // more work to do. However, since we don't have a separation of this
  // Fiber's priority and its children yet - we don't know without doing lots
  // of the same work we do anyway. Once we have that separation we can just
  // bail out here if the children has no more work at this priority level.
  // if (workInProgress.priorityOfChildren <= priorityLevel) {
  //   // If there are side-effects in these children that have not yet been
  //   // committed we need to ensure that they get properly transferred up.
  //   if (current && current.child !== workInProgress.child) {
  //     reuseChildrenEffects(workInProgress, child);
  //   }
  //   return null;
  // }

  cloneChildFibers(current, workInProgress);
  return workInProgress.child;
}

function bailoutOnLowPriority(current, workInProgress) {
  cancelWorkTimer(workInProgress);

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopBaseRenderTimerIfRunning();
  }

  // TODO: Handle HostComponent tags here as well and call pushHostContext()?
  // See PR 8590 discussion for context
  switch (workInProgress.tag) {
    case HostRoot:
      pushHostRootContext(workInProgress);
      break;
    case ClassComponent:
      pushContextProvider(workInProgress);
      break;
    case HostPortal:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      break;
    case ContextProvider:
      pushProvider(workInProgress);
      break;
  }
  // TODO: What if this is currently in progress?
  // How can that happen? How is this not being cloned?
  return null;
}

// TODO: Delete memoizeProps/State and move to reconcile/bailout instead
function memoizeProps(workInProgress, nextProps) {
  workInProgress.memoizedProps = nextProps;
}

function memoizeState(workInProgress, nextState) {
  workInProgress.memoizedState = nextState;
  // Don't reset the updateQueue, in case there are pending updates. Resetting
  // is handled by processUpdateQueue.
}

function beginWork(current, workInProgress, renderExpirationTime) {
  if (enableProfilerTimer) {
    if (workInProgress.mode & ProfileMode) {
      markActualRenderTimeStarted(workInProgress);
    }
  }

  if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
    return bailoutOnLowPriority(current, workInProgress);
  }

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);
    case FunctionalComponent:
      return updateFunctionalComponent(current, workInProgress);
    case ClassComponent:
      return updateClassComponent(current, workInProgress, renderExpirationTime);
    case HostRoot:
      return updateHostRoot(current, workInProgress, renderExpirationTime);
    case HostComponent:
      return updateHostComponent(current, workInProgress, renderExpirationTime);
    case HostText:
      return updateHostText(current, workInProgress);
    case TimeoutComponent:
      return updateTimeoutComponent(current, workInProgress, renderExpirationTime);
    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderExpirationTime);
    case ForwardRef:
      return updateForwardRef(current, workInProgress);
    case Fragment:
      return updateFragment(current, workInProgress);
    case Mode:
      return updateMode(current, workInProgress);
    case Profiler:
      return updateProfiler(current, workInProgress);
    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderExpirationTime);
    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderExpirationTime);
    default:
      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

function appendAllChildren(parent, workInProgress) {
  // We only have the top Fiber that was created but we need recurse down its
  // children to find all the terminal nodes.
  var node = workInProgress.child;
  while (node !== null) {
    if (node.tag === HostComponent || node.tag === HostText) {
      appendInitialChild(parent, node.stateNode);
    } else if (node.tag === HostPortal) {
      // If we have a portal child, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === workInProgress) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

var updateHostContainer = void 0;
var updateHostComponent$1 = void 0;
var updateHostText$1 = void 0;
if (supportsMutation) {
  // Mutation mode

  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
    // TODO: Type this specific to this type of component.
    workInProgress.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.
    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode

  // An unfortunate fork of appendAllChildren because we have two different parent types.
  var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendChildToContainerChildSet(containerChildSet, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;
    if (childrenUnchanged) {
      // No changes, just reuse the existing instance.
    } else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container);
      // If children might have changed, we have to add them all to the set.
      appendAllChildrenToContainer(newChildSet, workInProgress);
      portalOrRoot.pendingChildren = newChildSet;
      // Schedule an update on the container to swap out the container.
      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };
  updateHostComponent$1 = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
    // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.
    var childrenUnchanged = workInProgress.firstEffect === null;
    var currentInstance = current.stateNode;
    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
    } else {
      var recyclableInstance = workInProgress.stateNode;
      var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
      if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
        markUpdate(workInProgress);
      }
      workInProgress.stateNode = newInstance;
      if (childrenUnchanged) {
        // If there are no other effects in this tree, we need to flag this node as having one.
        // Even though we're not going to use it for anything.
        // Otherwise parents won't know that there are new children to propagate upwards.
        markUpdate(workInProgress);
      } else {
        // If children might have changed, we have to add them all to the set.
        appendAllChildren(newInstance, workInProgress);
      }
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
      // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.
      markUpdate(workInProgress);
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
    // Noop
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // Noop
  };
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  if (enableProfilerTimer) {
    if (workInProgress.mode & ProfileMode) {
      recordElapsedActualRenderTime(workInProgress);
    }
  }

  switch (workInProgress.tag) {
    case FunctionalComponent:
      return null;
    case ClassComponent:
      {
        // We are leaving this subtree, so pop context if any.
        popContextProvider(workInProgress);
        return null;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;
        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }
        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          popHydrationState(workInProgress);
          // This resets the hacky state to fix isMounted before committing.
          // TODO: Delete this when we delete isMounted and findDOMNode.
          workInProgress.effectTag &= ~Placement;
        }
        updateHostContainer(workInProgress);
        return null;
      }
    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;
        if (current !== null && workInProgress.stateNode != null) {
          // If we have an alternate, that means this is an update and we need to
          // schedule a side-effect to do the updates.
          var oldProps = current.memoizedProps;
          // If we get updated because one of our children updated, we don't
          // have newProps so we'll have to reuse them.
          // TODO: Split the update API as separate for the props vs. children.
          // Even better would be if children weren't special cased at all tho.
          var instance = workInProgress.stateNode;
          var currentHostContext = getHostContext();
          // TODO: Experiencing an error where oldProps is null. Suggests a host
          // component is hitting the resume path. Figure out why. Possibly
          // related to `hidden`.
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);

          updateHostComponent$1(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
            return null;
          }

          var _currentHostContext = getHostContext();
          // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on we want to add then top->down or
          // bottom->up. Top->down is faster in IE11.
          var wasHydrated = popHydrationState(workInProgress);
          if (wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
              // If changes to the hydrated node needs to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

            appendAllChildren(_instance, workInProgress);

            // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.
            if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance, _currentHostContext)) {
              markUpdate(workInProgress);
            }
            workInProgress.stateNode = _instance;
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }
        return null;
      }
    case HostText:
      {
        var newText = newProps;
        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps;
          // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.
          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
            return null;
          }
          var _rootContainerInstance = getRootHostContainer();
          var _currentHostContext2 = getHostContext();
          var _wasHydrated = popHydrationState(workInProgress);
          if (_wasHydrated) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
          }
        }
        return null;
      }
    case ForwardRef:
      return null;
    case TimeoutComponent:
      return null;
    case Fragment:
      return null;
    case Mode:
      return null;
    case Profiler:
      return null;
    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      return null;
    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;
    case ContextConsumer:
      return null;
    // Error cases
    case IndeterminateComponent:
      invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
    // eslint-disable-next-line no-fallthrough
    default:
      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
  }
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError) {
  return true;
}

function logCapturedError(capturedError) {
  var logError = showErrorDialog(capturedError);

  // Allow injected showErrorDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.
  if (logError === false) {
    return;
  }

  var error = capturedError.error;
  var suppressLogging = error && error.suppressReactErrorLogging;
  if (suppressLogging) {
    return;
  }

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry;


    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

    var errorBoundaryMessage = void 0;
    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
      } else {
        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }
    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

    // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
    console.error(combinedMessage);
  }
}

var invokeGuardedCallback$3 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;


var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;
  if (stack === null && source !== null) {
    stack = getStackAddendumByWorkInProgressFiber(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // Prevent cycle if logCapturedError() throws.
    // A cycle may still occur if logCapturedError renders a component that throws.
    var suppressLogging = e && e.suppressReactErrorLogging;
    if (!suppressLogging) {
      console.error(e);
    }
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  startPhaseTimer(current, 'componentWillUnmount');
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
};

// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback$3(null, callComponentWillUnmountWithTimer, null, current, instance);
    if (hasCaughtError$1()) {
      var unmountError = clearCaughtError$1();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;
  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback$3(null, ref, null, null);
        if (hasCaughtError$1()) {
          var refError = clearCaughtError$1();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode;
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            var snapshot = instance.getSnapshotBeforeUpdate(prevProps, prevState);
            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);
                warning(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork));
              }
            }
            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }
        return;
      }
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
      // Nothing to do for these component types
      return;
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, currentTime, committedExpirationTime) {
  switch (finishedWork.tag) {
    case ClassComponent:
      {
        var instance = finishedWork.stateNode;
        if (finishedWork.effectTag & Update) {
          if (current === null) {
            startPhaseTimer(finishedWork, 'componentDidMount');
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate');
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }
        var updateQueue = finishedWork.updateQueue;
        if (updateQueue !== null) {
          instance.props = finishedWork.memoizedProps;
          instance.state = finishedWork.memoizedState;
          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
        }
        return;
      }
    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;
        if (_updateQueue !== null) {
          var _instance = null;
          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;
              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }
          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
        }
        return;
      }
    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode;

        // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.
        if (current === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }
    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }
    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }
    case Profiler:
      {
        // We have no life-cycles associated with Profiler.
        return;
      }
    case TimeoutComponent:
      {
        // We have no life-cycles associated with Timeouts.
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;
  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse = void 0;
    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;
      default:
        instanceToUse = instance;
    }
    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          warning(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork), getStackAddendumByWorkInProgressFiber(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;
  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
}

// User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay
function commitUnmount(current) {
  if (typeof onCommitUnmount === 'function') {
    onCommitUnmount(current);
  }

  switch (current.tag) {
    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;
        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }
        return;
      }
    case HostComponent:
      {
        safelyDetachRef(current);
        return;
      }
    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(current);
        } else if (supportsPersistence) {
          emptyPortalContainer(current);
        }
        return;
      }
  }
}

function commitNestedUnmounts(root) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  var node = root;
  while (true) {
    commitUnmount(node);
    // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.
    if (node.child !== null && (
    // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === root) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current) {
  // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.
  current.return = null;
  current.child = null;
  if (current.alternate) {
    current.alternate.child = null;
    current.alternate.return = null;
  }
}

function emptyPortalContainer(current) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current.stateNode;
  var containerInfo = portal.containerInfo;

  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
      {
        return;
      }
    case HostComponent:
      {
        return;
      }
    case HostText:
      {
        return;
      }
    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            _pendingChildren = portalOrRoot.pendingChildren;

        replaceContainerChildren(containerInfo, _pendingChildren);
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;
  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }
    parent = parent.return;
  }
  invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  var node = fiber;
  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
    while (node.tag !== HostComponent && node.tag !== HostText) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      }
      // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.
      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    }
    // Check if this host node is stable or about to be placed.
    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  }

  // Recursively insert all host nodes into the parent.
  var parentFiber = getHostParentFiber(finishedWork);
  var parent = void 0;
  var isContainer = void 0;
  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentFiber.stateNode;
      isContainer = false;
      break;
    case HostRoot:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    case HostPortal:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    default:
      invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
  }
  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent);
    // Clear ContentReset from the effect tag
    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork);
  // We only have the top Fiber that was inserted but we need recurse down its
  // children to find all the terminal nodes.
  var node = finishedWork;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      if (before) {
        if (isContainer) {
          insertInContainerBefore(parent, node.stateNode, before);
        } else {
          insertBefore(parent, node.stateNode, before);
        }
      } else {
        if (isContainer) {
          appendChildToContainer(parent, node.stateNode);
        } else {
          appendChild(parent, node.stateNode);
        }
      }
    } else if (node.tag === HostPortal) {
      // If the insertion itself is a portal, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === finishedWork) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function unmountHostComponents(current) {
  // We only have the top Fiber that was inserted but we need recurse down its
  var node = current;

  // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.
  var currentParentIsValid = false;
  var currentParent = void 0;
  var currentParentIsContainer = void 0;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;
      findParent: while (true) {
        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        switch (parent.tag) {
          case HostComponent:
            currentParent = parent.stateNode;
            currentParentIsContainer = false;
            break findParent;
          case HostRoot:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
          case HostPortal:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
        }
        parent = parent.return;
      }
      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(node);
      // After all the children have unmounted, it is now safe to remove the
      // node from the tree.
      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      }
      // Don't visit children because we already visited them.
    } else if (node.tag === HostPortal) {
      // When we go into a portal, it becomes the parent to remove from.
      // We will reassign it back when we pop the portal on the way up.
      currentParent = node.stateNode.containerInfo;
      // Visit children because portals might contain host components.
      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(node);
      // Visit children because we may find more host components below.
      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }
    if (node === current) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }
      node = node.return;
      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(current) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(current);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(current);
  }
  detachFiber(current);
}

function commitWork(current, finishedWork) {
  if (!supportsMutation) {
    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
      {
        return;
      }
    case HostComponent:
      {
        var instance = finishedWork.stateNode;
        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type;
          // TODO: Type the updateQueue to be specific to host components.
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }
        }
        return;
      }
    case HostText:
      {
        !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps;
        // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.
        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }
    case HostRoot:
      {
        return;
      }
    case Profiler:
      {
        if (enableProfilerTimer) {
          var onRender = finishedWork.memoizedProps.onRender;
          onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseTime, finishedWork.actualStartTime, getCommitTime());
        }
        return;
      }
    case TimeoutComponent:
      {
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitResetTextContent(current) {
  if (!supportsMutation) {
    return;
  }
  resetTextContent(current.stateNode);
}

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  // Unmount the root by rendering null.
  update.tag = CaptureUpdate;
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: null };
  var error = errorInfo.value;
  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };
  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  update.tag = CaptureUpdate;
  var getDerivedStateFromCatch = fiber.type.getDerivedStateFromCatch;
  if (enableGetDerivedStateFromCatch && typeof getDerivedStateFromCatch === 'function') {
    var error = errorInfo.value;
    update.payload = function () {
      return getDerivedStateFromCatch(error);
    };
  }

  var inst = fiber.stateNode;
  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      if (!enableGetDerivedStateFromCatch || getDerivedStateFromCatch !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromCatch is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this);
      }
      var error = errorInfo.value;
      var stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: stack !== null ? stack : ''
      });
    };
  }
  return update;
}

function schedulePing(finishedWork) {
  // Once the promise resolves, we should try rendering the non-
  // placeholder state again.
  var currentTime = recalculateCurrentTime();
  var expirationTime = computeExpirationForFiber(currentTime, finishedWork);
  var recoveryUpdate = createUpdate(expirationTime);
  enqueueUpdate(finishedWork, recoveryUpdate, expirationTime);
  scheduleWork$1(finishedWork, expirationTime);
}

function throwException(root, returnFiber, sourceFiber, value, renderIsExpired, renderExpirationTime, currentTimeMs) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete;
  // Its effect list is no longer valid.
  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (enableSuspense && value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    var expirationTimeMs = expirationTimeToMs(renderExpirationTime);
    var startTimeMs = expirationTimeMs - 5000;
    var elapsedMs = currentTimeMs - startTimeMs;
    if (elapsedMs < 0) {
      elapsedMs = 0;
    }
    var remainingTimeMs = expirationTimeMs - currentTimeMs;

    // Find the earliest timeout of all the timeouts in the ancestor path.
    // TODO: Alternatively, we could store the earliest timeout on the context
    // stack, rather than searching on every suspend.
    var _workInProgress = returnFiber;
    var earliestTimeoutMs = -1;
    searchForEarliestTimeout: do {
      if (_workInProgress.tag === TimeoutComponent) {
        var current = _workInProgress.alternate;
        if (current !== null && current.memoizedState === true) {
          // A parent Timeout already committed in a placeholder state. We
          // need to handle this promise immediately. In other words, we
          // should never suspend inside a tree that already expired.
          earliestTimeoutMs = 0;
          break searchForEarliestTimeout;
        }
        var timeoutPropMs = _workInProgress.pendingProps.ms;
        if (typeof timeoutPropMs === 'number') {
          if (timeoutPropMs <= 0) {
            earliestTimeoutMs = 0;
            break searchForEarliestTimeout;
          } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
            earliestTimeoutMs = timeoutPropMs;
          }
        } else if (earliestTimeoutMs === -1) {
          earliestTimeoutMs = remainingTimeMs;
        }
      }
      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null);

    // Compute the remaining time until the timeout.
    var msUntilTimeout = earliestTimeoutMs - elapsedMs;

    if (renderExpirationTime === Never || msUntilTimeout > 0) {
      // There's still time remaining.
      suspendRoot(root, thenable, msUntilTimeout, renderExpirationTime);
      var onResolveOrReject = function () {
        retrySuspendedRoot(root, renderExpirationTime);
      };
      thenable.then(onResolveOrReject, onResolveOrReject);
      return;
    } else {
      // No time remaining. Need to fallback to placeholder.
      // Find the nearest timeout that can be retried.
      _workInProgress = returnFiber;
      do {
        switch (_workInProgress.tag) {
          case HostRoot:
            {
              // The root expired, but no fallback was provided. Throw a
              // helpful error.
              var message = renderExpirationTime === Sync ? 'A synchronous update was suspended, but no fallback UI ' + 'was provided.' : 'An update was suspended for longer than the timeout, ' + 'but no fallback UI was provided.';
              value = new Error(message);
              break;
            }
          case TimeoutComponent:
            {
              if ((_workInProgress.effectTag & DidCapture) === NoEffect) {
                _workInProgress.effectTag |= ShouldCapture;
                var _onResolveOrReject = schedulePing.bind(null, _workInProgress);
                thenable.then(_onResolveOrReject, _onResolveOrReject);
                return;
              }
              // Already captured during this render. Continue to the next
              // Timeout ancestor.
              break;
            }
        }
        _workInProgress = _workInProgress.return;
      } while (_workInProgress !== null);
    }
  }

  // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;
  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, update, renderExpirationTime);
          return;
        }
      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;
        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === 'function' && enableGetDerivedStateFromCatch || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          // Schedule the error boundary to re-render using updated state
          var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, _update, renderExpirationTime);
          return;
        }
        break;
      default:
        break;
    }
    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

function unwindWork(workInProgress, renderIsExpired, renderExpirationTime) {
  if (enableProfilerTimer) {
    if (workInProgress.mode & ProfileMode) {
      recordElapsedActualRenderTime(workInProgress);
    }
  }

  switch (workInProgress.tag) {
    case ClassComponent:
      {
        popContextProvider(workInProgress);
        var effectTag = workInProgress.effectTag;
        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;
        if (_effectTag & ShouldCapture) {
          workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostComponent:
      {
        popHostContext(workInProgress);
        return null;
      }
    case TimeoutComponent:
      {
        var _effectTag2 = workInProgress.effectTag;
        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostPortal:
      popHostContainer(workInProgress);
      return null;
    case ContextProvider:
      popProvider(workInProgress);
      return null;
    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  if (enableProfilerTimer) {
    if (interruptedWork.mode & ProfileMode) {
      // Resume in case we're picking up on work that was paused.
      resumeActualRenderTimerIfPaused();
      recordElapsedActualRenderTime(interruptedWork);
    }
  }

  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        popContextProvider(interruptedWork);
        break;
      }
    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }
    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }
    case HostPortal:
      popHostContainer(interruptedWork);
      break;
    case ContextProvider:
      popProvider(interruptedWork);
      break;
    default:
      break;
  }
}

var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError = ReactErrorUtils.hasCaughtError;
var clearCaughtError = ReactErrorUtils.clearCaughtError;


var didWarnAboutStateTransition = void 0;
var didWarnSetStateChildContext = void 0;
var warnAboutUpdateOnUnmounted = void 0;
var warnAboutInvalidUpdates = void 0;

{
  didWarnAboutStateTransition = false;
  didWarnSetStateChildContext = false;
  var didWarnStateUpdateForUnmountedComponent = {};

  warnAboutUpdateOnUnmounted = function (fiber) {
    // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.
    var componentName = getComponentName(fiber) || 'ReactClass';
    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
      return;
    }
    warning(false, "Can't call setState (or forceUpdate) on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in the ' + 'componentWillUnmount method.%s', getStackAddendumByWorkInProgressFiber(fiber));
    didWarnStateUpdateForUnmountedComponent[componentName] = true;
  };

  warnAboutInvalidUpdates = function (instance) {
    switch (ReactDebugCurrentFiber.phase) {
      case 'getChildContext':
        if (didWarnSetStateChildContext) {
          return;
        }
        warning(false, 'setState(...): Cannot call setState() inside getChildContext()');
        didWarnSetStateChildContext = true;
        break;
      case 'render':
        if (didWarnAboutStateTransition) {
          return;
        }
        warning(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
        didWarnAboutStateTransition = true;
        break;
    }
  };
}

// Represents the current time in ms.
var originalStartTimeMs = now();
var mostRecentCurrentTime = msToExpirationTime(0);
var mostRecentCurrentTimeMs = originalStartTimeMs;

// Used to ensure computeUniqueAsyncExpiration is monotonically increases.
var lastUniqueAsyncExpiration = 0;

// Represents the expiration time that incoming updates should use. (If this
// is NoWork, use the default strategy: async updates in async mode, sync
// updates in sync mode.)
var expirationContext = NoWork;

var isWorking = false;

// The next work in progress fiber that we're currently working on.
var nextUnitOfWork = null;
var nextRoot = null;
// The time at which we're currently rendering work.
var nextRenderExpirationTime = NoWork;
var nextLatestTimeoutMs = -1;
var nextRenderIsExpired = false;

// The next fiber with an effect that we're currently committing.
var nextEffect = null;

var isCommitting$1 = false;

var isRootReadyForCommit = false;

var legacyErrorBoundariesThatAlreadyFailed = null;

// Used for performance tracking.
var interruptedBy = null;

var stashedWorkInProgressProperties = void 0;
var replayUnitOfWork = void 0;
var isReplayingFailedUnitOfWork = void 0;
var originalReplayError = void 0;
var rethrowOriginalError = void 0;
if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
  stashedWorkInProgressProperties = null;
  isReplayingFailedUnitOfWork = false;
  originalReplayError = null;
  replayUnitOfWork = function (failedUnitOfWork, thrownValue, isAsync) {
    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
      // Don't replay promises. Treat everything else like an error.
      // TODO: Need to figure out a different strategy if/when we add
      // support for catching other types.
      return;
    }

    // Restore the original state of the work-in-progress
    if (stashedWorkInProgressProperties === null) {
      // This should never happen. Don't throw because this code is DEV-only.
      warning(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
      return;
    }
    assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

    switch (failedUnitOfWork.tag) {
      case HostRoot:
        popHostContainer(failedUnitOfWork);
        popTopLevelContextObject(failedUnitOfWork);
        break;
      case HostComponent:
        popHostContext(failedUnitOfWork);
        break;
      case ClassComponent:
        popContextProvider(failedUnitOfWork);
        break;
      case HostPortal:
        popHostContainer(failedUnitOfWork);
        break;
      case ContextProvider:
        popProvider(failedUnitOfWork);
        break;
    }
    // Replay the begin phase.
    isReplayingFailedUnitOfWork = true;
    originalReplayError = thrownValue;
    invokeGuardedCallback$2(null, workLoop, null, isAsync);
    isReplayingFailedUnitOfWork = false;
    originalReplayError = null;
    if (hasCaughtError()) {
      clearCaughtError();

      if (enableProfilerTimer) {
        if (failedUnitOfWork.mode & ProfileMode) {
          recordElapsedActualRenderTime(failedUnitOfWork);
        }

        // Stop "base" render timer again (after the re-thrown error).
        stopBaseRenderTimerIfRunning();
      }
    } else {
      // If the begin phase did not fail the second time, set this pointer
      // back to the original value.
      nextUnitOfWork = failedUnitOfWork;
    }
  };
  rethrowOriginalError = function () {
    throw originalReplayError;
  };
}

function resetStack() {
  if (nextUnitOfWork !== null) {
    var interruptedWork = nextUnitOfWork.return;
    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
    checkThatStackIsEmpty();
  }

  nextRoot = null;
  nextRenderExpirationTime = NoWork;
  nextLatestTimeoutMs = -1;
  nextRenderIsExpired = false;
  nextUnitOfWork = null;

  isRootReadyForCommit = false;
}

function commitAllHostEffects() {
  while (nextEffect !== null) {
    {
      ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
    }
    recordEffect();

    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current = nextEffect.alternate;
      if (current !== null) {
        commitDetachRef(current);
      }
    }

    // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every
    // possible bitmap value, we remove the secondary effects from the
    // effect tag and switch on that value.
    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted
          // does and isMounted is deprecated anyway so we should be able
          // to kill this.
          nextEffect.effectTag &= ~Placement;
          break;
        }
      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          nextEffect.effectTag &= ~Placement;

          // Update
          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }
      case Update:
        {
          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }
      case Deletion:
        {
          commitDeletion(nextEffect);
          break;
        }
    }
    nextEffect = nextEffect.nextEffect;
  }

  {
    ReactDebugCurrentFiber.resetCurrentFiber();
  }
}

function commitBeforeMutationLifecycles() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if (effectTag & Snapshot) {
      recordEffect();
      var current = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current, nextEffect);
    }

    // Don't cleanup effects yet;
    // This will be done by commitAllLifeCycles()
    nextEffect = nextEffect.nextEffect;
  }
}

function commitAllLifeCycles(finishedRoot, currentTime, committedExpirationTime) {
  {
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.flushPendingDeprecationWarnings();
    }

    if (warnAboutLegacyContextAPI) {
      ReactStrictModeWarnings.flushLegacyContextWarning();
    }
  }
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current = nextEffect.alternate;
      commitLifeCycles(finishedRoot, current, nextEffect, currentTime, committedExpirationTime);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    var next = nextEffect.nextEffect;
    // Ensure that we clean these up so that we don't accidentally keep them.
    // I'm not actually sure this matters because we can't reset firstEffect
    // and lastEffect since they're on every node, not just the effectful
    // ones. So we have to clean everything as we reuse nodes anyway.
    nextEffect.nextEffect = null;
    // Ensure that we reset the effectTag here so that we can rely on effect
    // tags to reason about the current life-cycle.
    nextEffect = next;
  }
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}

function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function commitRoot(finishedWork) {
  isWorking = true;
  isCommitting$1 = true;
  startCommitTimer();

  var root = finishedWork.stateNode;
  !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var committedExpirationTime = root.pendingCommitExpirationTime;
  !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  root.pendingCommitExpirationTime = NoWork;

  var currentTime = recalculateCurrentTime();

  // Reset this to null before calling lifecycles
  ReactCurrentOwner.current = null;

  var firstEffect = void 0;
  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if
    // it had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  prepareForCommit(root.containerInfo);

  // Invoke instances of getSnapshotBeforeUpdate before mutation.
  nextEffect = firstEffect;
  startCommitSnapshotEffectsTimer();
  while (nextEffect !== null) {
    var didError = false;
    var error = void 0;
    {
      invokeGuardedCallback$2(null, commitBeforeMutationLifecycles, null);
      if (hasCaughtError()) {
        didError = true;
        error = clearCaughtError();
      }
    }
    if (didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitSnapshotEffectsTimer();

  if (enableProfilerTimer) {
    // Mark the current commit time to be shared by all Profilers in this batch.
    // This enables them to be grouped later.
    recordCommitTime();
  }

  // Commit all the side-effects within a tree. We'll do this in two passes.
  // The first pass performs all the host insertions, updates, deletions and
  // ref unmounts.
  nextEffect = firstEffect;
  startCommitHostEffectsTimer();
  while (nextEffect !== null) {
    var _didError = false;
    var _error = void 0;
    {
      invokeGuardedCallback$2(null, commitAllHostEffects, null);
      if (hasCaughtError()) {
        _didError = true;
        _error = clearCaughtError();
      }
    }
    if (_didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitHostEffectsTimer();

  resetAfterCommit(root.containerInfo);

  // The work-in-progress tree is now the current tree. This must come after
  // the first pass of the commit phase, so that the previous tree is still
  // current during componentWillUnmount, but before the second pass, so that
  // the finished work is current during componentDidMount/Update.
  root.current = finishedWork;

  // In the second pass we'll perform all life-cycles and ref callbacks.
  // Life-cycles happen as a separate pass so that all placements, updates,
  // and deletions in the entire tree have already been invoked.
  // This pass also triggers any renderer-specific initial effects.
  nextEffect = firstEffect;
  startCommitLifeCyclesTimer();
  while (nextEffect !== null) {
    var _didError2 = false;
    var _error2 = void 0;
    {
      invokeGuardedCallback$2(null, commitAllLifeCycles, null, root, currentTime, committedExpirationTime);
      if (hasCaughtError()) {
        _didError2 = true;
        _error2 = clearCaughtError();
      }
    }
    if (_didError2) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error2);
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }

  if (enableProfilerTimer) {
    {
      checkActualRenderTimeStackEmpty();
    }
    resetActualRenderTimer();
  }

  isCommitting$1 = false;
  isWorking = false;
  stopCommitLifeCyclesTimer();
  stopCommitTimer();
  if (typeof onCommitRoot === 'function') {
    onCommitRoot(finishedWork.stateNode);
  }
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
  }

  markCommittedPriorityLevels(root, currentTime, root.current.expirationTime);
  var remainingTime = findNextPendingPriorityLevel(root);
  if (remainingTime === NoWork) {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }
  return remainingTime;
}

function resetExpirationTime(workInProgress, renderTime) {
  if (renderTime !== Never && workInProgress.expirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  // Check for pending updates.
  var newExpirationTime = NoWork;
  switch (workInProgress.tag) {
    case HostRoot:
    case ClassComponent:
      {
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
          newExpirationTime = updateQueue.expirationTime;
        }
      }
  }

  // TODO: Calls need to visit stateNode

  // Bubble up the earliest expiration time.
  // (And "base" render timers if that feature flag is enabled)
  if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
    var treeBaseTime = workInProgress.selfBaseTime;
    var child = workInProgress.child;
    while (child !== null) {
      treeBaseTime += child.treeBaseTime;
      if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
        newExpirationTime = child.expirationTime;
      }
      child = child.sibling;
    }
    workInProgress.treeBaseTime = treeBaseTime;
  } else {
    var _child = workInProgress.child;
    while (_child !== null) {
      if (_child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > _child.expirationTime)) {
        newExpirationTime = _child.expirationTime;
      }
      _child = _child.sibling;
    }
  }

  workInProgress.expirationTime = newExpirationTime;
}

function completeUnitOfWork(workInProgress) {
  // Attempt to complete the current unit of work, then move to the
  // next sibling. If there are no more siblings, return to the
  // parent fiber.
  while (true) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }

    var returnFiber = workInProgress.return;
    var siblingFiber = workInProgress.sibling;

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      // This fiber completed.
      var next = completeWork(current, workInProgress, nextRenderExpirationTime);
      stopWorkTimer(workInProgress);
      resetExpirationTime(workInProgress, nextRenderExpirationTime);
      {
        ReactDebugCurrentFiber.resetCurrentFiber();
      }

      if (next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        return next;
      }

      if (returnFiber !== null &&
      // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }
        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }
          returnFiber.lastEffect = workInProgress.lastEffect;
        }

        // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if
        // needed, by doing multiple passes over the effect list. We don't want
        // to schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.
        var effectTag = workInProgress.effectTag;
        // Skip both NoWork and PerformedWork tags when creating the effect list.
        // PerformedWork effect is read by React DevTools but shouldn't be committed.
        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }
          returnFiber.lastEffect = workInProgress;
        }
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        // We've reached the root.
        isRootReadyForCommit = true;
        return null;
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress, nextRenderIsExpired, nextRenderExpirationTime);
      // Because this fiber did not complete, don't reset its expiration time.
      if (workInProgress.effectTag & DidCapture) {
        // Restarting an error boundary
        stopFailedWorkTimer(workInProgress);
      } else {
        stopWorkTimer(workInProgress);
      }

      {
        ReactDebugCurrentFiber.resetCurrentFiber();
      }

      if (_next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        return null;
      }
    }
  }

  // Without this explicit null return Flow complains of invalid return type
  // TODO Remove the above while(true) loop
  // eslint-disable-next-line no-unreachable
  return null;
}

function performUnitOfWork(workInProgress) {
  // The current, flushed, state of this fiber is the alternate.
  // Ideally nothing should rely on this, but relying on it here
  // means that we don't need an additional field on the work in
  // progress.
  var current = workInProgress.alternate;

  // See if beginning this work spawns more work.
  startWorkTimer(workInProgress);
  {
    ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
  }

  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
    stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
  }

  var next = void 0;
  if (enableProfilerTimer) {
    if (workInProgress.mode & ProfileMode) {
      startBaseRenderTimer();
    }

    next = beginWork(current, workInProgress, nextRenderExpirationTime);

    if (workInProgress.mode & ProfileMode) {
      // Update "base" time if the render wasn't bailed out on.
      recordElapsedBaseRenderTimeIfRunning(workInProgress);
      stopBaseRenderTimerIfRunning();
    }
  } else {
    next = beginWork(current, workInProgress, nextRenderExpirationTime);
  }

  {
    ReactDebugCurrentFiber.resetCurrentFiber();
    if (isReplayingFailedUnitOfWork) {
      // Currently replaying a failed unit of work. This should be unreachable,
      // because the render phase is meant to be idempotent, and it should
      // have thrown again. Since it didn't, rethrow the original error, so
      // React's internal stack is not misaligned.
      rethrowOriginalError();
    }
  }
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
  }

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(workInProgress);
  }

  ReactCurrentOwner.current = null;

  return next;
}

function workLoop(isAsync) {
  if (!isAsync) {
    // Flush all expired work.
    while (nextUnitOfWork !== null) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
  } else {
    // Flush asynchronous work until the deadline runs out of time.
    while (nextUnitOfWork !== null && !shouldYield()) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }

    if (enableProfilerTimer) {
      // If we didn't finish, pause the "actual" render timer.
      // We'll restart it when we resume work.
      pauseActualRenderTimerIfRunning();
    }
  }
}

function renderRoot(root, expirationTime, isAsync) {
  !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  isWorking = true;

  // Check if we're starting from a fresh stack, or if we're resuming from
  // previously yielded work.
  if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
    // Reset the stack and start working from the root.
    resetStack();
    nextRoot = root;
    nextRenderExpirationTime = expirationTime;
    nextLatestTimeoutMs = -1;
    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
    root.pendingCommitExpirationTime = NoWork;
  }

  var didFatal = false;

  nextRenderIsExpired = !isAsync || nextRenderExpirationTime <= mostRecentCurrentTime;

  startWorkLoopTimer(nextUnitOfWork);

  do {
    try {
      workLoop(isAsync);
    } catch (thrownValue) {
      if (enableProfilerTimer) {
        // Stop "base" render timer in the event of an error.
        stopBaseRenderTimerIfRunning();
      }

      if (nextUnitOfWork === null) {
        // This is a fatal error.
        didFatal = true;
        onUncaughtError(thrownValue);
      } else {
        {
          // Reset global debug state
          // We assume this is defined in DEV
          resetCurrentlyProcessingQueue();
        }

        var failedUnitOfWork = nextUnitOfWork;
        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          replayUnitOfWork(failedUnitOfWork, thrownValue, isAsync);
        }

        // TODO: we already know this isn't true in some cases.
        // At least this shows a nicer error message until we figure out the cause.
        // https://github.com/facebook/react/issues/12449#issuecomment-386727431
        !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

        var sourceFiber = nextUnitOfWork;
        var returnFiber = sourceFiber.return;
        if (returnFiber === null) {
          // This is the root. The root could capture its own errors. However,
          // we don't know if it errors before or after we pushed the host
          // context. This information is needed to avoid a stack mismatch.
          // Because we're not sure, treat this as a fatal error. We could track
          // which phase it fails in, but doesn't seem worth it. At least
          // for now.
          didFatal = true;
          onUncaughtError(thrownValue);
          break;
        }
        throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderIsExpired, nextRenderExpirationTime, mostRecentCurrentTimeMs);
        nextUnitOfWork = completeUnitOfWork(sourceFiber);
      }
    }
    break;
  } while (true);

  // We're done performing work. Time to clean up.
  var didCompleteRoot = false;
  isWorking = false;

  // Yield back to main thread.
  if (didFatal) {
    stopWorkLoopTimer(interruptedBy, didCompleteRoot);
    interruptedBy = null;
    // There was a fatal error.
    {
      resetStackAfterFatalErrorInDev();
    }
    return null;
  } else if (nextUnitOfWork === null) {
    // We reached the root.
    if (isRootReadyForCommit) {
      didCompleteRoot = true;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      interruptedBy = null;
      // The root successfully completed. It's ready for commit.
      root.pendingCommitExpirationTime = expirationTime;
      var finishedWork = root.current.alternate;
      return finishedWork;
    } else {
      // The root did not complete.
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      interruptedBy = null;
      !!nextRenderIsExpired ? invariant(false, 'Expired work should have completed. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      markSuspendedPriorityLevel(root, expirationTime);
      if (nextLatestTimeoutMs >= 0) {
        setTimeout(function () {
          retrySuspendedRoot(root, expirationTime);
        }, nextLatestTimeoutMs);
      }
      var firstUnblockedExpirationTime = findNextPendingPriorityLevel(root);
      onBlock(firstUnblockedExpirationTime);
      return null;
    }
  } else {
    stopWorkLoopTimer(interruptedBy, didCompleteRoot);
    interruptedBy = null;
    // There's more work to do, but we ran out of time. Yield back to
    // the renderer.
    return null;
  }
}

function dispatch(sourceFiber, value, expirationTime) {
  !(!isWorking || isCommitting$1) ? invariant(false, 'dispatch: Cannot dispatch during the render phase.') : void 0;

  var fiber = sourceFiber.return;
  while (fiber !== null) {
    switch (fiber.tag) {
      case ClassComponent:
        var ctor = fiber.type;
        var instance = fiber.stateNode;
        if (typeof ctor.getDerivedStateFromCatch === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
          var errorInfo = createCapturedValue(value, sourceFiber);
          var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
          enqueueUpdate(fiber, update, expirationTime);
          scheduleWork$1(fiber, expirationTime);
          return;
        }
        break;
      case HostRoot:
        {
          var _errorInfo = createCapturedValue(value, sourceFiber);
          var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
          enqueueUpdate(fiber, _update, expirationTime);
          scheduleWork$1(fiber, expirationTime);
          return;
        }
    }
    fiber = fiber.return;
  }

  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    var rootFiber = sourceFiber;
    var _errorInfo2 = createCapturedValue(value, rootFiber);
    var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
    enqueueUpdate(rootFiber, _update2, expirationTime);
    scheduleWork$1(rootFiber, expirationTime);
  }
}

function captureCommitPhaseError(fiber, error) {
  return dispatch(fiber, error, Sync);
}

function computeAsyncExpiration(currentTime) {
  // Given the current clock time, returns an expiration time. We use rounding
  // to batch like updates together.
  // Should complete within ~5000ms. 5250ms max.
  var expirationMs = 5000;
  var bucketSizeMs = 250;
  return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
}

function computeInteractiveExpiration(currentTime) {
  var expirationMs = void 0;
  // We intentionally set a higher expiration time for interactive updates in
  // dev than in production.
  // If the main thread is being blocked so long that you hit the expiration,
  // it's a problem that could be solved with better scheduling.
  // People will be more likely to notice this and fix it with the long
  // expiration time in development.
  // In production we opt for better UX at the risk of masking scheduling
  // problems, by expiring fast.
  {
    // Should complete within ~500ms. 600ms max.
    expirationMs = 500;
  }
  var bucketSizeMs = 100;
  return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
}

// Creates a unique async expiration time.
function computeUniqueAsyncExpiration() {
  var currentTime = recalculateCurrentTime();
  var result = computeAsyncExpiration(currentTime);
  if (result <= lastUniqueAsyncExpiration) {
    // Since we assume the current time monotonically increases, we only hit
    // this branch when computeUniqueAsyncExpiration is fired multiple times
    // within a 200ms window (or whatever the async bucket size is).
    result = lastUniqueAsyncExpiration + 1;
  }
  lastUniqueAsyncExpiration = result;
  return lastUniqueAsyncExpiration;
}

function computeExpirationForFiber(currentTime, fiber) {
  var expirationTime = void 0;
  if (expirationContext !== NoWork) {
    // An explicit expiration context was set;
    expirationTime = expirationContext;
  } else if (isWorking) {
    if (isCommitting$1) {
      // Updates that occur during the commit phase should have sync priority
      // by default.
      expirationTime = Sync;
    } else {
      // Updates during the render phase should expire at the same time as
      // the work that is being rendered.
      expirationTime = nextRenderExpirationTime;
    }
  } else {
    // No explicit expiration context was set, and we're not currently
    // performing work. Calculate a new expiration time.
    if (fiber.mode & AsyncMode) {
      if (isBatchingInteractiveUpdates) {
        // This is an interactive update
        expirationTime = computeInteractiveExpiration(currentTime);
      } else {
        // This is an async update
        expirationTime = computeAsyncExpiration(currentTime);
      }
    } else {
      // This is a sync update
      expirationTime = Sync;
    }
  }
  if (isBatchingInteractiveUpdates) {
    // This is an interactive update. Keep track of the lowest pending
    // interactive expiration time. This allows us to synchronously flush
    // all interactive updates when needed.
    if (lowestPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPendingInteractiveExpirationTime) {
      lowestPendingInteractiveExpirationTime = expirationTime;
    }
  }
  return expirationTime;
}

// TODO: Rename this to scheduleTimeout or something
function suspendRoot(root, thenable, timeoutMs, suspendedTime) {
  // Schedule the timeout.
  if (timeoutMs >= 0 && nextLatestTimeoutMs < timeoutMs) {
    nextLatestTimeoutMs = timeoutMs;
  }
}

function retrySuspendedRoot(root, suspendedTime) {
  markPingedPriorityLevel(root, suspendedTime);
  var retryTime = findNextPendingPriorityLevel(root);
  if (retryTime !== NoWork) {
    requestRetry(root, retryTime);
  }
}

function scheduleWork$1(fiber, expirationTime) {
  recordScheduleUpdate();

  {
    if (fiber.tag === ClassComponent) {
      var instance = fiber.stateNode;
      warnAboutInvalidUpdates(instance);
    }
  }

  var node = fiber;
  while (node !== null) {
    // Walk the parent path to the root and update each node's
    // expiration time.
    if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
      node.expirationTime = expirationTime;
    }
    if (node.alternate !== null) {
      if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
        node.alternate.expirationTime = expirationTime;
      }
    }
    if (node.return === null) {
      if (node.tag === HostRoot) {
        var root = node.stateNode;
        if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
          // This is an interruption. (Used for performance tracking.)
          interruptedBy = fiber;
          resetStack();
        }
        markPendingPriorityLevel(root, expirationTime);
        var nextExpirationTimeToWorkOn = findNextPendingPriorityLevel(root);
        if (
        // If we're in the render phase, we don't need to schedule this root
        // for an update, because we'll do it before we exit...
        !isWorking || isCommitting$1 ||
        // ...unless this is a different root than the one we're rendering.
        nextRoot !== root) {
          requestWork(root, nextExpirationTimeToWorkOn);
        }
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
        }
      } else {
        {
          if (fiber.tag === ClassComponent) {
            warnAboutUpdateOnUnmounted(fiber);
          }
        }
        return;
      }
    }
    node = node.return;
  }
}

function recalculateCurrentTime() {
  // Subtract initial time so it fits inside 32bits
  mostRecentCurrentTimeMs = now() - originalStartTimeMs;
  mostRecentCurrentTime = msToExpirationTime(mostRecentCurrentTimeMs);
  return mostRecentCurrentTime;
}

function deferredUpdates(fn) {
  var previousExpirationContext = expirationContext;
  var currentTime = recalculateCurrentTime();
  expirationContext = computeAsyncExpiration(currentTime);
  try {
    return fn();
  } finally {
    expirationContext = previousExpirationContext;
  }
}
function syncUpdates(fn, a, b, c, d) {
  var previousExpirationContext = expirationContext;
  expirationContext = Sync;
  try {
    return fn(a, b, c, d);
  } finally {
    expirationContext = previousExpirationContext;
  }
}

// TODO: Everything below this is written as if it has been lifted to the
// renderers. I'll do this in a follow-up.

// Linked-list of roots
var firstScheduledRoot = null;
var lastScheduledRoot = null;

var callbackExpirationTime = NoWork;
var callbackID = void 0;
var isRendering = false;
var nextFlushedRoot = null;
var nextFlushedExpirationTime = NoWork;
var lowestPendingInteractiveExpirationTime = NoWork;
var deadlineDidExpire = false;
var hasUnhandledError = false;
var unhandledError = null;
var deadline = null;

var isBatchingUpdates = false;
var isUnbatchingUpdates = false;
var isBatchingInteractiveUpdates = false;

var completedBatches = null;

// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT = 1000;
var nestedUpdateCount = 0;

var timeHeuristicForUnitOfWork = 1;

function scheduleCallbackWithExpiration(expirationTime) {
  if (callbackExpirationTime !== NoWork) {
    // A callback is already scheduled. Check its expiration time (timeout).
    if (expirationTime > callbackExpirationTime) {
      // Existing callback has sufficient timeout. Exit.
      return;
    } else {
      if (callbackID !== null) {
        // Existing callback has insufficient timeout. Cancel and schedule a
        // new one.
        cancelDeferredCallback(callbackID);
      }
    }
    // The request callback timer is already running. Don't start a new one.
  } else {
    startRequestCallbackTimer();
  }

  // Compute a timeout for the given expiration time.
  var currentMs = now() - originalStartTimeMs;
  var expirationMs = expirationTimeToMs(expirationTime);
  var timeout = expirationMs - currentMs;

  callbackExpirationTime = expirationTime;
  callbackID = scheduleDeferredCallback(performAsyncWork, { timeout: timeout });
}

function requestRetry(root, expirationTime) {
  if (root.remainingExpirationTime === NoWork || root.remainingExpirationTime < expirationTime) {
    // For a retry, only update the remaining expiration time if it has a
    // *lower priority* than the existing value. This is because, on a retry,
    // we should attempt to coalesce as much as possible.
    requestWork(root, expirationTime);
  }
}

// requestWork is called by the scheduler whenever a root receives an update.
// It's up to the renderer to call renderRoot at some point in the future.
function requestWork(root, expirationTime) {
  addRootToSchedule(root, expirationTime);

  if (isRendering) {
    // Prevent reentrancy. Remaining work will be scheduled at the end of
    // the currently rendering batch.
    return;
  }

  if (isBatchingUpdates) {
    // Flush work at the end of the batch.
    if (isUnbatchingUpdates) {
      // ...unless we're inside unbatchedUpdates, in which case we should
      // flush it now.
      nextFlushedRoot = root;
      nextFlushedExpirationTime = Sync;
      performWorkOnRoot(root, Sync, false);
    }
    return;
  }

  // TODO: Get rid of Sync and use current time?
  if (expirationTime === Sync) {
    performSyncWork();
  } else {
    scheduleCallbackWithExpiration(expirationTime);
  }
}

function addRootToSchedule(root, expirationTime) {
  // Add the root to the schedule.
  // Check if this root is already part of the schedule.
  if (root.nextScheduledRoot === null) {
    // This root is not already scheduled. Add it.
    root.remainingExpirationTime = expirationTime;
    if (lastScheduledRoot === null) {
      firstScheduledRoot = lastScheduledRoot = root;
      root.nextScheduledRoot = root;
    } else {
      lastScheduledRoot.nextScheduledRoot = root;
      lastScheduledRoot = root;
      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
    }
  } else {
    // This root is already scheduled, but its priority may have increased.
    var remainingExpirationTime = root.remainingExpirationTime;
    if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
      // Update the priority.
      root.remainingExpirationTime = expirationTime;
    }
  }
}

function findHighestPriorityRoot() {
  var highestPriorityWork = NoWork;
  var highestPriorityRoot = null;
  if (lastScheduledRoot !== null) {
    var previousScheduledRoot = lastScheduledRoot;
    var root = firstScheduledRoot;
    while (root !== null) {
      var remainingExpirationTime = root.remainingExpirationTime;
      if (remainingExpirationTime === NoWork) {
        // This root no longer has work. Remove it from the scheduler.

        // TODO: This check is redudant, but Flow is confused by the branch
        // below where we set lastScheduledRoot to null, even though we break
        // from the loop right after.
        !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        if (root === root.nextScheduledRoot) {
          // This is the only root in the list.
          root.nextScheduledRoot = null;
          firstScheduledRoot = lastScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) {
          // This is the first root in the list.
          var next = root.nextScheduledRoot;
          firstScheduledRoot = next;
          lastScheduledRoot.nextScheduledRoot = next;
          root.nextScheduledRoot = null;
        } else if (root === lastScheduledRoot) {
          // This is the last root in the list.
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else {
          previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
          root.nextScheduledRoot = null;
        }
        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
          // Update the priority, if it's higher
          highestPriorityWork = remainingExpirationTime;
          highestPriorityRoot = root;
        }
        if (root === lastScheduledRoot) {
          break;
        }
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
  }

  // If the next root is the same as the previous root, this is a nested
  // update. To prevent an infinite loop, increment the nested update count.
  var previousFlushedRoot = nextFlushedRoot;
  if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot && highestPriorityWork === Sync) {
    nestedUpdateCount++;
  } else {
    // Reset whenever we switch roots.
    nestedUpdateCount = 0;
  }
  nextFlushedRoot = highestPriorityRoot;
  nextFlushedExpirationTime = highestPriorityWork;
}

function performAsyncWork(dl) {
  performWork(NoWork, true, dl);
}

function performSyncWork() {
  performWork(Sync, false, null);
}

function performWork(minExpirationTime, isAsync, dl) {
  deadline = dl;

  // Keep working on roots until there's no more work, or until the we reach
  // the deadline.
  findHighestPriorityRoot();

  if (enableProfilerTimer) {
    resumeActualRenderTimerIfPaused();
  }

  if (enableUserTimingAPI && deadline !== null) {
    var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
    var timeout = expirationTimeToMs(nextFlushedExpirationTime);
    stopRequestCallbackTimer(didExpire, timeout);
  }

  if (isAsync) {
    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime)) {
      recalculateCurrentTime();
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire);
      findHighestPriorityRoot();
    }
  } else {
    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
      findHighestPriorityRoot();
    }
  }

  // We're done flushing work. Either we ran out of time in this callback,
  // or there's no more work left with sufficient priority.

  // If we're inside a callback, set this to false since we just completed it.
  if (deadline !== null) {
    callbackExpirationTime = NoWork;
    callbackID = null;
  }
  // If there's work left over, schedule a new callback.
  if (nextFlushedExpirationTime !== NoWork) {
    scheduleCallbackWithExpiration(nextFlushedExpirationTime);
  }

  // Clean-up.
  deadline = null;
  deadlineDidExpire = false;

  finishRendering();
}

function flushRoot(root, expirationTime) {
  !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
  // Perform work on root as if the given expiration time is the current time.
  // This has the effect of synchronously flushing all work up to and
  // including the given time.
  nextFlushedRoot = root;
  nextFlushedExpirationTime = expirationTime;
  performWorkOnRoot(root, expirationTime, false);
  // Flush any sync work that was scheduled by lifecycles
  performSyncWork();
  finishRendering();
}

function finishRendering() {
  nestedUpdateCount = 0;

  if (completedBatches !== null) {
    var batches = completedBatches;
    completedBatches = null;
    for (var i = 0; i < batches.length; i++) {
      var batch = batches[i];
      try {
        batch._onComplete();
      } catch (error) {
        if (!hasUnhandledError) {
          hasUnhandledError = true;
          unhandledError = error;
        }
      }
    }
  }

  if (hasUnhandledError) {
    var error = unhandledError;
    unhandledError = null;
    hasUnhandledError = false;
    throw error;
  }
}

function performWorkOnRoot(root, expirationTime, isAsync) {
  !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  isRendering = true;

  // Check if this is async work or sync/expired work.
  if (!isAsync) {
    // Flush sync work.
    var finishedWork = root.finishedWork;
    if (finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, finishedWork, expirationTime);
    } else {
      finishedWork = renderRoot(root, expirationTime, false);
      if (finishedWork !== null) {
        // We've completed the root. Commit it.
        completeRoot(root, finishedWork, expirationTime);
      }
    }
  } else {
    // Flush async work.
    var _finishedWork = root.finishedWork;
    if (_finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, _finishedWork, expirationTime);
    } else {
      _finishedWork = renderRoot(root, expirationTime, true);
      if (_finishedWork !== null) {
        // We've completed the root. Check the deadline one more time
        // before committing.
        if (!shouldYield()) {
          // Still time left. Commit the root.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          // There's no time left. Mark this root as complete. We'll come
          // back and commit it later.
          root.finishedWork = _finishedWork;

          if (enableProfilerTimer) {
            // If we didn't finish, pause the "actual" render timer.
            // We'll restart it when we resume work.
            pauseActualRenderTimerIfRunning();
          }
        }
      }
    }
  }

  isRendering = false;
}

function completeRoot(root, finishedWork, expirationTime) {
  // Check if there's a batch that matches this expiration time.
  var firstBatch = root.firstBatch;
  if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
    if (completedBatches === null) {
      completedBatches = [firstBatch];
    } else {
      completedBatches.push(firstBatch);
    }
    if (firstBatch._defer) {
      // This root is blocked from committing by a batch. Unschedule it until
      // we receive another update.
      root.finishedWork = finishedWork;
      root.remainingExpirationTime = NoWork;
      return;
    }
  }

  // Commit the root.
  root.finishedWork = null;
  root.remainingExpirationTime = commitRoot(finishedWork);
}

// When working on async work, the reconciler asks the renderer if it should
// yield execution. For DOM, we implement this with requestIdleCallback.
function shouldYield() {
  if (deadline === null) {
    return false;
  }
  if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
    // Disregard deadline.didTimeout. Only expired work should be flushed
    // during a timeout. This path is only hit for non-expired work.
    return false;
  }
  deadlineDidExpire = true;
  return true;
}

function onUncaughtError(error) {
  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  // Unschedule this root so we don't work on it again until there's
  // another update.
  nextFlushedRoot.remainingExpirationTime = NoWork;
  if (!hasUnhandledError) {
    hasUnhandledError = true;
    unhandledError = error;
  }
}

function onBlock(remainingExpirationTime) {
  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  // This root was blocked. Unschedule it until there's another update.
  nextFlushedRoot.remainingExpirationTime = remainingExpirationTime;
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function batchedUpdates$1(fn, a) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return fn(a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function unbatchedUpdates(fn, a) {
  if (isBatchingUpdates && !isUnbatchingUpdates) {
    isUnbatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isUnbatchingUpdates = false;
    }
  }
  return fn(a);
}

// TODO: Batching should be implemented at the renderer level, not within
// the reconciler.
function flushSync(fn, a) {
  !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return syncUpdates(fn, a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    performSyncWork();
  }
}

function interactiveUpdates$1(fn, a, b) {
  if (isBatchingInteractiveUpdates) {
    return fn(a, b);
  }
  // If there are any pending interactive updates, synchronously flush them.
  // This needs to happen before we read any handlers, because the effect of
  // the previous event may influence which handlers are called during
  // this event.
  if (!isBatchingUpdates && !isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPendingInteractiveExpirationTime, false, null);
    lowestPendingInteractiveExpirationTime = NoWork;
  }
  var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingInteractiveUpdates = true;
  isBatchingUpdates = true;
  try {
    return fn(a, b);
  } finally {
    isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

function flushInteractiveUpdates$1() {
  if (!isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPendingInteractiveExpirationTime, false, null);
    lowestPendingInteractiveExpirationTime = NoWork;
  }
}

function flushControlled(fn) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    syncUpdates(fn);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performWork(Sync, false, null);
    }
  }
}

// 0 is PROD, 1 is DEV.
// Might add PROFILE later.


var didWarnAboutNestedUpdates = void 0;

{
  didWarnAboutNestedUpdates = false;
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);
  return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
}

function scheduleRootUpdate(current, element, expirationTime, callback) {
  {
    if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;
      warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime);
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: element };

  callback = callback === undefined ? null : callback;
  if (callback !== null) {
    !(typeof callback === 'function') ? warning(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
    update.callback = callback;
  }
  enqueueUpdate(current, update, expirationTime);

  scheduleWork$1(current, expirationTime);
  return expirationTime;
}

function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
  // TODO: If this is a nested container, this won't be the root.
  var current = container.current;

  {
    if (ReactFiberInstrumentation_1.debugTool) {
      if (current.alternate === null) {
        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
      } else if (element === null) {
        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
      } else {
        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
      }
    }
  }

  var context = getContextForSubtree(parentComponent);
  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  return scheduleRootUpdate(current, element, expirationTime, callback);
}

function findHostInstance(component) {
  var fiber = get(component);
  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      invariant(false, 'Unable to find node on an unmounted component.');
    } else {
      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
    }
  }
  var hostFiber = findCurrentHostFiber(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

function createContainer(containerInfo, isAsync, hydrate) {
  return createFiberRoot(containerInfo, isAsync, hydrate);
}

function updateContainer(element, container, parentComponent, callback) {
  var current = container.current;
  var currentTime = recalculateCurrentTime();
  var expirationTime = computeExpirationForFiber(currentTime, current);
  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
}

function getPublicRootInstance(container) {
  var containerFiber = container.current;
  if (!containerFiber.child) {
    return null;
  }
  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);
    default:
      return containerFiber.child.stateNode;
  }
}

function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

  return injectInternals(_assign({}, devToolsConfig, {
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }
      return findFiberByHostInstance(instance);
    }
  }));
}

// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.



var DOMRenderer = Object.freeze({
	updateContainerAtExpirationTime: updateContainerAtExpirationTime,
	createContainer: createContainer,
	updateContainer: updateContainer,
	flushRoot: flushRoot,
	requestWork: requestWork,
	computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
	batchedUpdates: batchedUpdates$1,
	unbatchedUpdates: unbatchedUpdates,
	deferredUpdates: deferredUpdates,
	syncUpdates: syncUpdates,
	interactiveUpdates: interactiveUpdates$1,
	flushInteractiveUpdates: flushInteractiveUpdates$1,
	flushControlled: flushControlled,
	flushSync: flushSync,
	getPublicRootInstance: getPublicRootInstance,
	findHostInstance: findHostInstance,
	findHostInstanceWithNoPortals: findHostInstanceWithNoPortals,
	injectIntoDevTools: injectIntoDevTools
});

function createPortal$1(children, containerInfo,
// TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.4.2';

// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
var topLevelUpdateWarnings = void 0;
var warnOnInvalidCallback = void 0;
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }

  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
      if (hostInstance) {
        !(hostInstance.parentNode === container) ? warning(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warning(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warning(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
  };

  warnOnInvalidCallback = function (callback, callerName) {
    !(callback === null || typeof callback === 'function') ? warning(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
  };
}

injection$2.injectFiberControlledHostComponent(ReactDOMFiberComponent);

function ReactBatch(root) {
  var expirationTime = computeUniqueAsyncExpiration();
  this._expirationTime = expirationTime;
  this._root = root;
  this._next = null;
  this._callbacks = null;
  this._didComplete = false;
  this._hasChildren = false;
  this._children = null;
  this._defer = true;
}
ReactBatch.prototype.render = function (children) {
  !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
  this._hasChildren = true;
  this._children = children;
  var internalRoot = this._root._internalRoot;
  var expirationTime = this._expirationTime;
  var work = new ReactWork();
  updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
  return work;
};
ReactBatch.prototype.then = function (onComplete) {
  if (this._didComplete) {
    onComplete();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onComplete);
};
ReactBatch.prototype.commit = function () {
  var internalRoot = this._root._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

  if (!this._hasChildren) {
    // This batch is empty. Return.
    this._next = null;
    this._defer = false;
    return;
  }

  var expirationTime = this._expirationTime;

  // Ensure this is the first batch in the list.
  if (firstBatch !== this) {
    // This batch is not the earliest batch. We need to move it to the front.
    // Update its expiration time to be the expiration time of the earliest
    // batch, so that we can flush it without flushing the other batches.
    if (this._hasChildren) {
      expirationTime = this._expirationTime = firstBatch._expirationTime;
      // Rendering this batch again ensures its children will be the final state
      // when we flush (updates are processed in insertion order: last
      // update wins).
      // TODO: This forces a restart. Should we print a warning?
      this.render(this._children);
    }

    // Remove the batch from the list.
    var previous = null;
    var batch = firstBatch;
    while (batch !== this) {
      previous = batch;
      batch = batch._next;
    }
    !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
    previous._next = batch._next;

    // Add it to the front.
    this._next = firstBatch;
    firstBatch = internalRoot.firstBatch = this;
  }

  // Synchronously flush all the work up to this batch's expiration time.
  this._defer = false;
  flushRoot(internalRoot, expirationTime);

  // Pop the batch from the list.
  var next = this._next;
  this._next = null;
  firstBatch = internalRoot.firstBatch = next;

  // Append the next earliest batch's children to the update queue.
  if (firstBatch !== null && firstBatch._hasChildren) {
    firstBatch.render(firstBatch._children);
  }
};
ReactBatch.prototype._onComplete = function () {
  if (this._didComplete) {
    return;
  }
  this._didComplete = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback = callbacks[i];
    _callback();
  }
};

function ReactWork() {
  this._callbacks = null;
  this._didCommit = false;
  // TODO: Avoid need to bind by replacing callbacks in the update queue with
  // list of Work objects.
  this._onCommit = this._onCommit.bind(this);
}
ReactWork.prototype.then = function (onCommit) {
  if (this._didCommit) {
    onCommit();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onCommit);
};
ReactWork.prototype._onCommit = function () {
  if (this._didCommit) {
    return;
  }
  this._didCommit = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback2 = callbacks[i];
    !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
    _callback2();
  }
};

function ReactRoot(container, isAsync, hydrate) {
  var root = createContainer(container, isAsync, hydrate);
  this._internalRoot = root;
}
ReactRoot.prototype.render = function (children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.unmount = function (callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(null, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, parentComponent, work._onCommit);
  return work;
};
ReactRoot.prototype.createBatch = function () {
  var batch = new ReactBatch(this);
  var expirationTime = batch._expirationTime;

  var internalRoot = this._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  if (firstBatch === null) {
    internalRoot.firstBatch = batch;
    batch._next = null;
  } else {
    // Insert sorted by expiration time then insertion order
    var insertAfter = null;
    var insertBefore = firstBatch;
    while (insertBefore !== null && insertBefore._expirationTime <= expirationTime) {
      insertAfter = insertBefore;
      insertBefore = insertBefore._next;
    }
    batch._next = insertBefore;
    if (insertAfter !== null) {
      insertAfter._next = batch;
    }
  }

  return batch;
};

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

injection$3.injectRenderer(DOMRenderer);

var warnedAboutHydrateAPI = false;

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
  // First clear any existing content.
  if (!shouldHydrate) {
    var warned = false;
    var rootSibling = void 0;
    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;
          warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }
      container.removeChild(rootSibling);
    }
  }
  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;
      lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }
  // Legacy roots are not async by default.
  var isAsync = false;
  return new ReactRoot(container, isAsync, shouldHydrate);
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  // TODO: Ensure all entry points contain this check
  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

  {
    topLevelUpdateWarnings(container);
  }

  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.
  var root = container._reactRootContainer;
  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    if (typeof callback === 'function') {
      var originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        originalCallback.call(instance);
      };
    }
    // Initial mount should not be batched.
    unbatchedUpdates(function () {
      if (parentComponent != null) {
        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
      } else {
        root.render(children, callback);
      }
    });
  } else {
    if (typeof callback === 'function') {
      var _originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        _originalCallback.call(instance);
      };
    }
    // Update
    if (parentComponent != null) {
      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
    } else {
      root.render(children, callback);
    }
  }
  return getPublicRootInstance(root._internalRoot);
}

function createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
  // TODO: pass ReactDOM portal implementation as third argument
  return createPortal$1(children, container, null, key);
}

var ReactDOM = {
  createPortal: createPortal,

  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null && owner.stateNode !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        !warnedAboutRefsInRender ? warning(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component') : void 0;
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    return findHostInstance(componentOrElement);
  },
  hydrate: function (element, container, callback) {
    // TODO: throw or warn if we couldn't hydrate?
    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        !!renderedByDifferentReact ? warning(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
      }

      // Unmount should not be batched.
      unbatchedUpdates(function () {
        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      });
      // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        !!hasNonRootReactChild ? warning(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
  },


  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: function () {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;
      lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
    return createPortal.apply(undefined, arguments);
  },


  unstable_batchedUpdates: batchedUpdates$1,

  unstable_deferredUpdates: deferredUpdates,

  unstable_interactiveUpdates: interactiveUpdates$1,

  flushSync: flushSync,

  unstable_flushControlled: flushControlled,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // For TapEventPlugin which is popular in open source
    EventPluginHub: EventPluginHub,
    // Used by test-utils
    EventPluginRegistry: EventPluginRegistry,
    EventPropagators: EventPropagators,
    ReactControlledComponent: ReactControlledComponent,
    ReactDOMComponentTree: ReactDOMComponentTree,
    ReactDOMEventListener: ReactDOMEventListener
  }
};

ReactDOM.unstable_createRoot = function createRoot(container, options) {
  var hydrate = options != null && options.hydrate === true;
  return new ReactRoot(container, true, hydrate);
};

var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol;
      // Don't warn in exotic cases like chrome-extension://.
      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom = ReactDOM$3.default ? ReactDOM$3.default : ReactDOM$3;

module.exports = reactDom;
  })();
}

}).call(this,require('_process'))
},{"_process":41,"fbjs/lib/ExecutionEnvironment":13,"fbjs/lib/camelizeStyleName":15,"fbjs/lib/containsNode":16,"fbjs/lib/emptyFunction":17,"fbjs/lib/emptyObject":18,"fbjs/lib/getActiveElement":19,"fbjs/lib/hyphenateStyleName":21,"fbjs/lib/invariant":22,"fbjs/lib/shallowEqual":25,"fbjs/lib/warning":26,"object-assign":40,"prop-types/checkPropTypes":42,"react":386}],367:[function(require,module,exports){
/** @license React v16.4.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
'use strict';var aa=require("fbjs/lib/invariant"),ba=require("react"),m=require("fbjs/lib/ExecutionEnvironment"),p=require("object-assign"),v=require("fbjs/lib/emptyFunction"),da=require("fbjs/lib/getActiveElement"),ea=require("fbjs/lib/shallowEqual"),fa=require("fbjs/lib/containsNode"),ha=require("fbjs/lib/emptyObject");
function A(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);aa(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c)}ba?void 0:A("227");
function ia(a,b,c,d,e,f,g,h,k){this._hasCaughtError=!1;this._caughtError=null;var n=Array.prototype.slice.call(arguments,3);try{b.apply(c,n)}catch(r){this._caughtError=r,this._hasCaughtError=!0}}
var B={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(a,b,c,d,e,f,g,h,k){ia.apply(B,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,g,h,k){B.invokeGuardedCallback.apply(this,arguments);if(B.hasCaughtError()){var n=B.clearCaughtError();B._hasRethrowError||(B._hasRethrowError=!0,B._rethrowError=n)}},rethrowCaughtError:function(){return ka.apply(B,arguments)},hasCaughtError:function(){return B._hasCaughtError},clearCaughtError:function(){if(B._hasCaughtError){var a=
B._caughtError;B._caughtError=null;B._hasCaughtError=!1;return a}A("198")}};function ka(){if(B._hasRethrowError){var a=B._rethrowError;B._rethrowError=null;B._hasRethrowError=!1;throw a;}}var la=null,ma={};
function na(){if(la)for(var a in ma){var b=ma[a],c=la.indexOf(a);-1<c?void 0:A("96",a);if(!oa[c]){b.extractEvents?void 0:A("97",a);oa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;pa.hasOwnProperty(h)?A("99",h):void 0;pa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&qa(k[e],g,h);e=!0}else f.registrationName?(qa(f.registrationName,g,h),e=!0):e=!1;e?void 0:A("98",d,a)}}}}
function qa(a,b,c){ra[a]?A("100",a):void 0;ra[a]=b;sa[a]=b.eventTypes[c].dependencies}var oa=[],pa={},ra={},sa={};function ta(a){la?A("101"):void 0;la=Array.prototype.slice.call(a);na()}function ua(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];ma.hasOwnProperty(c)&&ma[c]===d||(ma[c]?A("102",c):void 0,ma[c]=d,b=!0)}b&&na()}
var va={plugins:oa,eventNameDispatchConfigs:pa,registrationNameModules:ra,registrationNameDependencies:sa,possibleRegistrationNames:null,injectEventPluginOrder:ta,injectEventPluginsByName:ua},wa=null,xa=null,ya=null;function za(a,b,c,d){b=a.type||"unknown-event";a.currentTarget=ya(d);B.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}
function Aa(a,b){null==b?A("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function Ba(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var Ca=null;
function Da(a,b){if(a){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)za(a,b,c[e],d[e]);else c&&za(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function Ea(a){return Da(a,!0)}function Fa(a){return Da(a,!1)}var Ga={injectEventPluginOrder:ta,injectEventPluginsByName:ua};
function Ha(a,b){var c=a.stateNode;if(!c)return null;var d=wa(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?A("231",b,typeof c):void 0;
return c}function Ia(a,b){null!==a&&(Ca=Aa(Ca,a));a=Ca;Ca=null;a&&(b?Ba(a,Ea):Ba(a,Fa),Ca?A("95"):void 0,B.rethrowCaughtError())}function Ja(a,b,c,d){for(var e=null,f=0;f<oa.length;f++){var g=oa[f];g&&(g=g.extractEvents(a,b,c,d))&&(e=Aa(e,g))}Ia(e,!1)}var Ka={injection:Ga,getListener:Ha,runEventsInBatch:Ia,runExtractedEventsInBatch:Ja},La=Math.random().toString(36).slice(2),C="__reactInternalInstance$"+La,Ma="__reactEventHandlers$"+La;
function Na(a){if(a[C])return a[C];for(;!a[C];)if(a.parentNode)a=a.parentNode;else return null;a=a[C];return 5===a.tag||6===a.tag?a:null}function Oa(a){if(5===a.tag||6===a.tag)return a.stateNode;A("33")}function Pa(a){return a[Ma]||null}var Qa={precacheFiberNode:function(a,b){b[C]=a},getClosestInstanceFromNode:Na,getInstanceFromNode:function(a){a=a[C];return!a||5!==a.tag&&6!==a.tag?null:a},getNodeFromInstance:Oa,getFiberCurrentPropsFromNode:Pa,updateFiberProps:function(a,b){a[Ma]=b}};
function F(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Ra(a,b,c){for(var d=[];a;)d.push(a),a=F(a);for(a=d.length;0<a--;)b(d[a],"captured",c);for(a=0;a<d.length;a++)b(d[a],"bubbled",c)}function Sa(a,b,c){if(b=Ha(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=Aa(c._dispatchListeners,b),c._dispatchInstances=Aa(c._dispatchInstances,a)}function Ta(a){a&&a.dispatchConfig.phasedRegistrationNames&&Ra(a._targetInst,Sa,a)}
function Ua(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?F(b):null;Ra(b,Sa,a)}}function Va(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Ha(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=Aa(c._dispatchListeners,b),c._dispatchInstances=Aa(c._dispatchInstances,a))}function Xa(a){a&&a.dispatchConfig.registrationName&&Va(a._targetInst,null,a)}function Ya(a){Ba(a,Ta)}
function Za(a,b,c,d){if(c&&d)a:{var e=c;for(var f=d,g=0,h=e;h;h=F(h))g++;h=0;for(var k=f;k;k=F(k))h++;for(;0<g-h;)e=F(e),g--;for(;0<h-g;)f=F(f),h--;for(;g--;){if(e===f||e===f.alternate)break a;e=F(e);f=F(f)}e=null}else e=null;f=e;for(e=[];c&&c!==f;){g=c.alternate;if(null!==g&&g===f)break;e.push(c);c=F(c)}for(c=[];d&&d!==f;){g=d.alternate;if(null!==g&&g===f)break;c.push(d);d=F(d)}for(d=0;d<e.length;d++)Va(e[d],"bubbled",a);for(a=c.length;0<a--;)Va(c[a],"captured",b)}
var $a={accumulateTwoPhaseDispatches:Ya,accumulateTwoPhaseDispatchesSkipTarget:function(a){Ba(a,Ua)},accumulateEnterLeaveDispatches:Za,accumulateDirectDispatches:function(a){Ba(a,Xa)}};function ab(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;c["ms"+a]="MS"+b;c["O"+a]="o"+b.toLowerCase();return c}
var bb={animationend:ab("Animation","AnimationEnd"),animationiteration:ab("Animation","AnimationIteration"),animationstart:ab("Animation","AnimationStart"),transitionend:ab("Transition","TransitionEnd")},cb={},db={};m.canUseDOM&&(db=document.createElement("div").style,"AnimationEvent"in window||(delete bb.animationend.animation,delete bb.animationiteration.animation,delete bb.animationstart.animation),"TransitionEvent"in window||delete bb.transitionend.transition);
function eb(a){if(cb[a])return cb[a];if(!bb[a])return a;var b=bb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in db)return cb[a]=b[c];return a}var fb=eb("animationend"),gb=eb("animationiteration"),hb=eb("animationstart"),ib=eb("transitionend"),jb="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kb=null;
function lb(){!kb&&m.canUseDOM&&(kb="textContent"in document.documentElement?"textContent":"innerText");return kb}var G={_root:null,_startText:null,_fallbackText:null};function mb(){if(G._fallbackText)return G._fallbackText;var a,b=G._startText,c=b.length,d,e=nb(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);G._fallbackText=e.slice(a,1<d?1-d:void 0);return G._fallbackText}function nb(){return"value"in G._root?G._root.value:G._root[lb()]}
var ob="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),pb={type:null,target:null,currentTarget:v.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
function H(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?v.thatReturnsTrue:v.thatReturnsFalse;this.isPropagationStopped=v.thatReturnsFalse;return this}
p(H.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=v.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=v.thatReturnsTrue)},persist:function(){this.isPersistent=v.thatReturnsTrue},isPersistent:v.thatReturnsFalse,
destructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<ob.length;a++)this[ob[a]]=null}});H.Interface=pb;H.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;p(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=p({},d.Interface,a);c.extend=d.extend;qb(c);return c};qb(H);
function rb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function sb(a){a instanceof this?void 0:A("223");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function qb(a){a.eventPool=[];a.getPooled=rb;a.release=sb}var tb=H.extend({data:null}),ub=H.extend({data:null}),vb=[9,13,27,32],wb=m.canUseDOM&&"CompositionEvent"in window,xb=null;m.canUseDOM&&"documentMode"in document&&(xb=document.documentMode);
var yb=m.canUseDOM&&"TextEvent"in window&&!xb,zb=m.canUseDOM&&(!wb||xb&&8<xb&&11>=xb),Ab=String.fromCharCode(32),Bb={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Cb=!1;
function Db(a,b){switch(a){case "keyup":return-1!==vb.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function Eb(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var Fb=!1;function Gb(a,b){switch(a){case "compositionend":return Eb(b);case "keypress":if(32!==b.which)return null;Cb=!0;return Ab;case "textInput":return a=b.data,a===Ab&&Cb?null:a;default:return null}}
function Hb(a,b){if(Fb)return"compositionend"===a||!wb&&Db(a,b)?(a=mb(),G._root=null,G._startText=null,G._fallbackText=null,Fb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return zb?null:b.data;default:return null}}
var Ib={eventTypes:Bb,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(wb)b:{switch(a){case "compositionstart":e=Bb.compositionStart;break b;case "compositionend":e=Bb.compositionEnd;break b;case "compositionupdate":e=Bb.compositionUpdate;break b}e=void 0}else Fb?Db(a,c)&&(e=Bb.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=Bb.compositionStart);e?(zb&&(Fb||e!==Bb.compositionStart?e===Bb.compositionEnd&&Fb&&(f=mb()):(G._root=d,G._startText=nb(),Fb=!0)),e=tb.getPooled(e,b,c,d),f?e.data=
f:(f=Eb(c),null!==f&&(e.data=f)),Ya(e),f=e):f=null;(a=yb?Gb(a,c):Hb(a,c))?(b=ub.getPooled(Bb.beforeInput,b,c,d),b.data=a,Ya(b)):b=null;return null===f?b:null===b?f:[f,b]}},Jb=null,Kb={injectFiberControlledHostComponent:function(a){Jb=a}},Lb=null,Mb=null;function Nb(a){if(a=xa(a)){Jb&&"function"===typeof Jb.restoreControlledState?void 0:A("194");var b=wa(a.stateNode);Jb.restoreControlledState(a.stateNode,a.type,b)}}function Ob(a){Lb?Mb?Mb.push(a):Mb=[a]:Lb=a}
function Pb(){return null!==Lb||null!==Mb}function Qb(){if(Lb){var a=Lb,b=Mb;Mb=Lb=null;Nb(a);if(b)for(a=0;a<b.length;a++)Nb(b[a])}}var Rb={injection:Kb,enqueueStateRestore:Ob,needsStateRestore:Pb,restoreStateIfNeeded:Qb};function Sb(a,b){return a(b)}function Tb(a,b,c){return a(b,c)}function Ub(){}var Vb=!1;function Wb(a,b){if(Vb)return a(b);Vb=!0;try{return Sb(a,b)}finally{Vb=!1,Pb()&&(Ub(),Qb())}}
var Xb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!Xb[a.type]:"textarea"===b?!0:!1}function Zb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}
function $b(a,b){if(!m.canUseDOM||b&&!("addEventListener"in document))return!1;a="on"+a;b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function ac(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function bc(a){var b=ac(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function cc(a){a._valueTracker||(a._valueTracker=bc(a))}function dc(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=ac(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}
var ec=ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,fc="function"===typeof Symbol&&Symbol.for,gc=fc?Symbol.for("react.element"):60103,hc=fc?Symbol.for("react.portal"):60106,ic=fc?Symbol.for("react.fragment"):60107,jc=fc?Symbol.for("react.strict_mode"):60108,kc=fc?Symbol.for("react.profiler"):60114,lc=fc?Symbol.for("react.provider"):60109,mc=fc?Symbol.for("react.context"):60110,pc=fc?Symbol.for("react.async_mode"):60111,qc=fc?Symbol.for("react.forward_ref"):60112,rc=fc?Symbol.for("react.timeout"):
60113,sc="function"===typeof Symbol&&Symbol.iterator;function tc(a){if(null===a||"undefined"===typeof a)return null;a=sc&&a[sc]||a["@@iterator"];return"function"===typeof a?a:null}
function uc(a){var b=a.type;if("function"===typeof b)return b.displayName||b.name;if("string"===typeof b)return b;switch(b){case pc:return"AsyncMode";case mc:return"Context.Consumer";case ic:return"ReactFragment";case hc:return"ReactPortal";case kc:return"Profiler("+a.pendingProps.id+")";case lc:return"Context.Provider";case jc:return"StrictMode";case rc:return"Timeout"}if("object"===typeof b&&null!==b)switch(b.$$typeof){case qc:return a=b.render.displayName||b.render.name||"",""!==a?"ForwardRef("+
a+")":"ForwardRef"}return null}function vc(a){var b="";do{a:switch(a.tag){case 0:case 1:case 2:case 5:var c=a._debugOwner,d=a._debugSource;var e=uc(a);var f=null;c&&(f=uc(c));c=d;e="\n    in "+(e||"Unknown")+(c?" (at "+c.fileName.replace(/^.*[\\\/]/,"")+":"+c.lineNumber+")":f?" (created by "+f+")":"");break a;default:e=""}b+=e;a=a.return}while(a);return b}
var wc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,xc=Object.prototype.hasOwnProperty,zc={},Ac={};
function Bc(a){if(xc.call(Ac,a))return!0;if(xc.call(zc,a))return!1;if(wc.test(a))return Ac[a]=!0;zc[a]=!0;return!1}function Cc(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function Dc(a,b,c,d){if(null===b||"undefined"===typeof b||Cc(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function I(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b}var J={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){J[a]=new I(a,0,!1,a,null)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];J[b]=new I(b,1,!1,a[1],null)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){J[a]=new I(a,2,!1,a.toLowerCase(),null)});
["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(a){J[a]=new I(a,2,!1,a,null)});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){J[a]=new I(a,3,!1,a.toLowerCase(),null)});["checked","multiple","muted","selected"].forEach(function(a){J[a]=new I(a,3,!0,a.toLowerCase(),null)});
["capture","download"].forEach(function(a){J[a]=new I(a,4,!1,a.toLowerCase(),null)});["cols","rows","size","span"].forEach(function(a){J[a]=new I(a,6,!1,a.toLowerCase(),null)});["rowSpan","start"].forEach(function(a){J[a]=new I(a,5,!1,a.toLowerCase(),null)});var Ec=/[\-:]([a-z])/g;function Fc(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ec,
Fc);J[b]=new I(b,1,!1,a,null)});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ec,Fc);J[b]=new I(b,1,!1,a,"http://www.w3.org/1999/xlink")});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ec,Fc);J[b]=new I(b,1,!1,a,"http://www.w3.org/XML/1998/namespace")});J.tabIndex=new I("tabIndex",1,!1,"tabindex",null);
function Gc(a,b,c,d){var e=J.hasOwnProperty(b)?J[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Dc(b,c,e,d)&&(c=null),d||null===e?Bc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
function Hc(a,b){var c=b.checked;return p({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Ic(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Jc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Kc(a,b){b=b.checked;null!=b&&Gc(a,"checked",b,!1)}
function Lc(a,b){Kc(a,b);var c=Jc(b.value);if(null!=c)if("number"===b.type){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);b.hasOwnProperty("value")?Mc(a,b.type,c):b.hasOwnProperty("defaultValue")&&Mc(a,b.type,Jc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Nc(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){b=""+a._wrapperState.initialValue;var d=a.value;c||b===d||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;""!==c&&(a.name=c)}function Mc(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}
function Jc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}var Oc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Pc(a,b,c){a=H.getPooled(Oc.change,a,b,c);a.type="change";Ob(c);Ya(a);return a}var Qc=null,Rc=null;function Sc(a){Ia(a,!1)}function Tc(a){var b=Oa(a);if(dc(b))return a}
function Uc(a,b){if("change"===a)return b}var Vc=!1;m.canUseDOM&&(Vc=$b("input")&&(!document.documentMode||9<document.documentMode));function Wc(){Qc&&(Qc.detachEvent("onpropertychange",Xc),Rc=Qc=null)}function Xc(a){"value"===a.propertyName&&Tc(Rc)&&(a=Pc(Rc,a,Zb(a)),Wb(Sc,a))}function Yc(a,b,c){"focus"===a?(Wc(),Qc=b,Rc=c,Qc.attachEvent("onpropertychange",Xc)):"blur"===a&&Wc()}function Zc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Tc(Rc)}
function $c(a,b){if("click"===a)return Tc(b)}function ad(a,b){if("input"===a||"change"===a)return Tc(b)}
var bd={eventTypes:Oc,_isInputEventSupported:Vc,extractEvents:function(a,b,c,d){var e=b?Oa(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Uc:Yb(e)?Vc?f=ad:(f=Zc,g=Yc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=$c);if(f&&(f=f(a,b)))return Pc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Mc(e,"number",e.value)}},cd=H.extend({view:null,detail:null}),dd={Alt:"altKey",
Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function ed(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=dd[a])?!!b[a]:!1}function fd(){return ed}
var gd=cd.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:fd,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}}),hd=gd.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),id={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},
mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},jd={eventTypes:id,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||
e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Na(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,k=void 0,n=void 0;if("mouseout"===a||"mouseover"===a)g=gd,h=id.mouseLeave,k=id.mouseEnter,n="mouse";else if("pointerout"===a||"pointerover"===a)g=hd,h=id.pointerLeave,k=id.pointerEnter,n="pointer";a=null==f?e:Oa(f);e=null==b?e:Oa(b);h=g.getPooled(h,f,c,d);h.type=n+"leave";h.target=a;h.relatedTarget=e;c=g.getPooled(k,b,c,d);c.type=n+"enter";c.target=e;c.relatedTarget=a;Za(h,
c,f,b);return[h,c]}};function kd(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){2!==kd(a)?A("188"):void 0}
function md(a){var b=a.alternate;if(!b)return b=kd(a),3===b?A("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return ld(e),a;if(g===d)return ld(e),b;g=g.sibling}A("188")}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?
void 0:A("189")}}c.alternate!==d?A("190"):void 0}3!==c.tag?A("188"):void 0;return c.stateNode.current===c?a:b}function nd(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
function od(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child&&4!==b.tag)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}var pd=H.extend({animationName:null,elapsedTime:null,pseudoElement:null}),qd=H.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),rd=cd.extend({relatedTarget:null});
function sd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var td={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ud={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vd=cd.extend({key:function(a){if(a.key){var b=td[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=sd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?ud[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:fd,charCode:function(a){return"keypress"===
a.type?sd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?sd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),wd=gd.extend({dataTransfer:null}),xd=cd.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:fd}),yd=H.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),zd=gd.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),Ad=[["abort","abort"],[fb,"animationEnd"],[gb,"animationIteration"],[hb,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ib,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Bd={},Cd={};function Dd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};Bd[a]=b;Cd[c]=b}
[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],
["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){Dd(a,!0)});Ad.forEach(function(a){Dd(a,!1)});
var Ed={eventTypes:Bd,isInteractiveTopLevelEventType:function(a){a=Cd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Cd[a];if(!e)return null;switch(a){case "keypress":if(0===sd(c))return null;case "keydown":case "keyup":a=vd;break;case "blur":case "focus":a=rd;break;case "click":if(2===c.button)return null;case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=gd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
wd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=xd;break;case fb:case gb:case hb:a=pd;break;case ib:a=yd;break;case "scroll":a=cd;break;case "wheel":a=zd;break;case "copy":case "cut":case "paste":a=qd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=hd;break;default:a=H}b=a.getPooled(e,b,c,d);Ya(b);return b}},Fd=Ed.isInteractiveTopLevelEventType,
Gd=[];function Hd(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c;for(c=b;c.return;)c=c.return;c=3!==c.tag?null:c.stateNode.containerInfo;if(!c)break;a.ancestors.push(b);b=Na(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],Ja(a.topLevelType,b,a.nativeEvent,Zb(a.nativeEvent))}var Id=!0;function Kd(a){Id=!!a}function K(a,b){if(!b)return null;var c=(Fd(a)?Ld:Md).bind(null,a);b.addEventListener(a,c,!1)}
function Nd(a,b){if(!b)return null;var c=(Fd(a)?Ld:Md).bind(null,a);b.addEventListener(a,c,!0)}function Ld(a,b){Tb(Md,a,b)}function Md(a,b){if(Id){var c=Zb(b);c=Na(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(Gd.length){var d=Gd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Wb(Hd,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Gd.length&&Gd.push(a)}}}
var Od={get _enabled(){return Id},setEnabled:Kd,isEnabled:function(){return Id},trapBubbledEvent:K,trapCapturedEvent:Nd,dispatchEvent:Md},Pd={},Qd=0,Rd="_reactListenersID"+(""+Math.random()).slice(2);function Sd(a){Object.prototype.hasOwnProperty.call(a,Rd)||(a[Rd]=Qd++,Pd[a[Rd]]={});return Pd[a[Rd]]}function Td(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
function Ud(a,b){var c=Td(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Td(c)}}function Vd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
var Wd=m.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Xd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Yd=null,Zd=null,$d=null,ae=!1;
function be(a,b){if(ae||null==Yd||Yd!==da())return null;var c=Yd;"selectionStart"in c&&Vd(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return $d&&ea($d,c)?null:($d=c,a=H.getPooled(Xd.select,Zd,a,b),a.type="select",a.target=Yd,Ya(a),a)}
var ce={eventTypes:Xd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Sd(e);f=sa.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?Oa(b):window;switch(a){case "focus":if(Yb(e)||"true"===e.contentEditable)Yd=e,Zd=b,$d=null;break;case "blur":$d=Zd=Yd=null;break;case "mousedown":ae=!0;break;case "contextmenu":case "mouseup":return ae=!1,be(c,d);case "selectionchange":if(Wd)break;
case "keydown":case "keyup":return be(c,d)}return null}};Ga.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));wa=Qa.getFiberCurrentPropsFromNode;xa=Qa.getInstanceFromNode;ya=Qa.getNodeFromInstance;Ga.injectEventPluginsByName({SimpleEventPlugin:Ed,EnterLeaveEventPlugin:jd,ChangeEventPlugin:bd,SelectEventPlugin:ce,BeforeInputEventPlugin:Ib});
var de="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,ee=Date,fe=setTimeout,ge=clearTimeout,he=void 0;if("object"===typeof performance&&"function"===typeof performance.now){var ie=performance;he=function(){return ie.now()}}else he=function(){return ee.now()};var je=void 0,ke=void 0;
if(m.canUseDOM){var le="function"===typeof de?de:function(){A("276")},L=null,me=null,ne=-1,oe=!1,pe=!1,qe=0,re=33,se=33,te={didTimeout:!1,timeRemaining:function(){var a=qe-he();return 0<a?a:0}},ve=function(a,b){var c=a.scheduledCallback,d=!1;try{c(b),d=!0}finally{ke(a),d||(oe=!0,window.postMessage(ue,"*"))}},ue="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(a){if(a.source===window&&a.data===ue&&(oe=!1,null!==L)){if(null!==L){var b=he();if(!(-1===
ne||ne>b)){a=-1;for(var c=[],d=L;null!==d;){var e=d.timeoutTime;-1!==e&&e<=b?c.push(d):-1!==e&&(-1===a||e<a)&&(a=e);d=d.next}if(0<c.length)for(te.didTimeout=!0,b=0,d=c.length;b<d;b++)ve(c[b],te);ne=a}}for(a=he();0<qe-a&&null!==L;)a=L,te.didTimeout=!1,ve(a,te),a=he();null===L||pe||(pe=!0,le(we))}},!1);var we=function(a){pe=!1;var b=a-qe+se;b<se&&re<se?(8>b&&(b=8),se=b<re?re:b):re=b;qe=a+se;oe||(oe=!0,window.postMessage(ue,"*"))};je=function(a,b){var c=-1;null!=b&&"number"===typeof b.timeout&&(c=he()+
b.timeout);if(-1===ne||-1!==c&&c<ne)ne=c;a={scheduledCallback:a,timeoutTime:c,prev:null,next:null};null===L?L=a:(b=a.prev=me,null!==b&&(b.next=a));me=a;pe||(pe=!0,le(we));return a};ke=function(a){if(null!==a.prev||L===a){var b=a.next,c=a.prev;a.next=null;a.prev=null;null!==b?null!==c?(c.next=b,b.prev=c):(b.prev=null,L=b):null!==c?(c.next=null,me=c):me=L=null}}}else{var xe=new Map;je=function(a){var b={scheduledCallback:a,timeoutTime:0,next:null,prev:null},c=fe(function(){a({timeRemaining:function(){return Infinity},
didTimeout:!1})});xe.set(a,c);return b};ke=function(a){var b=xe.get(a.scheduledCallback);xe.delete(a);ge(b)}}function ye(a){var b="";ba.Children.forEach(a,function(a){null==a||"string"!==typeof a&&"number"!==typeof a||(b+=a)});return b}function ze(a,b){a=p({children:void 0},b);if(b=ye(b.children))a.children=b;return a}
function Ae(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+c;b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Be(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}}function Ce(a,b){null!=b.dangerouslySetInnerHTML?A("91"):void 0;return p({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function De(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?A("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:A("93"),b=b[0]),c=""+b),null==c&&(c=""));a._wrapperState={initialValue:""+c}}
function Ee(a,b){var c=b.value;null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)}function Fe(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var Ge={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function He(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ie(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?He(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Je=void 0,Ke=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Ge.svg||"innerHTML"in a)a.innerHTML=b;else{Je=Je||document.createElement("div");Je.innerHTML="<svg>"+b+"</svg>";for(b=Je.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Le(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
var Me={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,
stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ne=["Webkit","ms","Moz","O"];Object.keys(Me).forEach(function(a){Ne.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Me[b]=Me[a]})});
function Oe(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--");var e=c;var f=b[c];e=null==f||"boolean"===typeof f||""===f?"":d||"number"!==typeof f||0===f||Me.hasOwnProperty(e)&&Me[e]?(""+f).trim():f+"px";"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var Pe=p({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function Qe(a,b,c){b&&(Pe[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?A("137",a,c()):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?A("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:A("61")),null!=b.style&&"object"!==typeof b.style?A("62",c()):void 0)}
function Re(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var Se=v.thatReturns("");
function Te(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Sd(a);b=sa[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Nd("scroll",a);break;case "focus":case "blur":Nd("focus",a);Nd("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":$b(e,!0)&&Nd(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===jb.indexOf(e)&&K(e,a)}c[e]=!0}}}
function Ue(a,b,c,d){c=9===c.nodeType?c:c.ownerDocument;d===Ge.html&&(d=He(a));d===Ge.html?"script"===a?(a=c.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):a="string"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a}function Ve(a,b){return(9===b.nodeType?b:b.ownerDocument).createTextNode(a)}
function We(a,b,c,d){var e=Re(b,c);switch(b){case "iframe":case "object":K("load",a);var f=c;break;case "video":case "audio":for(f=0;f<jb.length;f++)K(jb[f],a);f=c;break;case "source":K("error",a);f=c;break;case "img":case "image":case "link":K("error",a);K("load",a);f=c;break;case "form":K("reset",a);K("submit",a);f=c;break;case "details":K("toggle",a);f=c;break;case "input":Ic(a,c);f=Hc(a,c);K("invalid",a);Te(d,"onChange");break;case "option":f=ze(a,c);break;case "select":Be(a,c);f=p({},c,{value:void 0});
K("invalid",a);Te(d,"onChange");break;case "textarea":De(a,c);f=Ce(a,c);K("invalid",a);Te(d,"onChange");break;default:f=c}Qe(b,f,Se);var g=f,h;for(h in g)if(g.hasOwnProperty(h)){var k=g[h];"style"===h?Oe(a,k,Se):"dangerouslySetInnerHTML"===h?(k=k?k.__html:void 0,null!=k&&Ke(a,k)):"children"===h?"string"===typeof k?("textarea"!==b||""!==k)&&Le(a,k):"number"===typeof k&&Le(a,""+k):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(ra.hasOwnProperty(h)?null!=k&&Te(d,
h):null!=k&&Gc(a,h,k,e))}switch(b){case "input":cc(a);Nc(a,c,!1);break;case "textarea":cc(a);Fe(a,c);break;case "option":null!=c.value&&a.setAttribute("value",c.value);break;case "select":a.multiple=!!c.multiple;b=c.value;null!=b?Ae(a,!!c.multiple,b,!1):null!=c.defaultValue&&Ae(a,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof f.onClick&&(a.onclick=v)}}
function Xe(a,b,c,d,e){var f=null;switch(b){case "input":c=Hc(a,c);d=Hc(a,d);f=[];break;case "option":c=ze(a,c);d=ze(a,d);f=[];break;case "select":c=p({},c,{value:void 0});d=p({},d,{value:void 0});f=[];break;case "textarea":c=Ce(a,c);d=Ce(a,d);f=[];break;default:"function"!==typeof c.onClick&&"function"===typeof d.onClick&&(a.onclick=v)}Qe(b,d,Se);b=a=void 0;var g=null;for(a in c)if(!d.hasOwnProperty(a)&&c.hasOwnProperty(a)&&null!=c[a])if("style"===a){var h=c[a];for(b in h)h.hasOwnProperty(b)&&(g||
(g={}),g[b]="")}else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(ra.hasOwnProperty(a)?f||(f=[]):(f=f||[]).push(a,null));for(a in d){var k=d[a];h=null!=c?c[a]:void 0;if(d.hasOwnProperty(a)&&k!==h&&(null!=k||null!=h))if("style"===a)if(h){for(b in h)!h.hasOwnProperty(b)||k&&k.hasOwnProperty(b)||(g||(g={}),g[b]="");for(b in k)k.hasOwnProperty(b)&&h[b]!==k[b]&&(g||(g={}),g[b]=k[b])}else g||(f||(f=[]),f.push(a,g)),
g=k;else"dangerouslySetInnerHTML"===a?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(a,""+k)):"children"===a?h===k||"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(a,""+k):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&(ra.hasOwnProperty(a)?(null!=k&&Te(e,a),f||h===k||(f=[])):(f=f||[]).push(a,k))}g&&(f=f||[]).push("style",g);return f}
function Ye(a,b,c,d,e){"input"===c&&"radio"===e.type&&null!=e.name&&Kc(a,e);Re(c,d);d=Re(c,e);for(var f=0;f<b.length;f+=2){var g=b[f],h=b[f+1];"style"===g?Oe(a,h,Se):"dangerouslySetInnerHTML"===g?Ke(a,h):"children"===g?Le(a,h):Gc(a,g,h,d)}switch(c){case "input":Lc(a,e);break;case "textarea":Ee(a,e);break;case "select":a._wrapperState.initialValue=void 0,b=a._wrapperState.wasMultiple,a._wrapperState.wasMultiple=!!e.multiple,c=e.value,null!=c?Ae(a,!!e.multiple,c,!1):b!==!!e.multiple&&(null!=e.defaultValue?
Ae(a,!!e.multiple,e.defaultValue,!0):Ae(a,!!e.multiple,e.multiple?[]:"",!1))}}
function Ze(a,b,c,d,e){switch(b){case "iframe":case "object":K("load",a);break;case "video":case "audio":for(d=0;d<jb.length;d++)K(jb[d],a);break;case "source":K("error",a);break;case "img":case "image":case "link":K("error",a);K("load",a);break;case "form":K("reset",a);K("submit",a);break;case "details":K("toggle",a);break;case "input":Ic(a,c);K("invalid",a);Te(e,"onChange");break;case "select":Be(a,c);K("invalid",a);Te(e,"onChange");break;case "textarea":De(a,c),K("invalid",a),Te(e,"onChange")}Qe(b,
c,Se);d=null;for(var f in c)if(c.hasOwnProperty(f)){var g=c[f];"children"===f?"string"===typeof g?a.textContent!==g&&(d=["children",g]):"number"===typeof g&&a.textContent!==""+g&&(d=["children",""+g]):ra.hasOwnProperty(f)&&null!=g&&Te(e,f)}switch(b){case "input":cc(a);Nc(a,c,!0);break;case "textarea":cc(a);Fe(a,c);break;case "select":case "option":break;default:"function"===typeof c.onClick&&(a.onclick=v)}return d}function $e(a,b){return a.nodeValue!==b}
var af={createElement:Ue,createTextNode:Ve,setInitialProperties:We,diffProperties:Xe,updateProperties:Ye,diffHydratedProperties:Ze,diffHydratedText:$e,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,b,c){switch(b){case "input":Lc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;
c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Pa(d);e?void 0:A("90");dc(d);Lc(d,e)}}}break;case "textarea":Ee(a,c);break;case "select":b=c.value,null!=b&&Ae(a,!!c.multiple,b,!1)}}},bf=null,cf=null;function df(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function ef(a,b){return"textarea"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&"string"===typeof b.dangerouslySetInnerHTML.__html}var ff=he,gf=je,hf=ke;function jf(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}function kf(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}new Set;var lf=[],mf=-1;function nf(a){return{current:a}}
function M(a){0>mf||(a.current=lf[mf],lf[mf]=null,mf--)}function N(a,b){mf++;lf[mf]=a.current;a.current=b}var of=nf(ha),O=nf(!1),pf=ha;function qf(a){return rf(a)?pf:of.current}
function sf(a,b){var c=a.type.contextTypes;if(!c)return ha;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function rf(a){return 2===a.tag&&null!=a.type.childContextTypes}function tf(a){rf(a)&&(M(O,a),M(of,a))}function uf(a){M(O,a);M(of,a)}
function vf(a,b,c){of.current!==ha?A("168"):void 0;N(of,b,a);N(O,c,a)}function wf(a,b){var c=a.stateNode,d=a.type.childContextTypes;if("function"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:A("108",uc(a)||"Unknown",e);return p({},b,c)}function xf(a){if(!rf(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||ha;pf=of.current;N(of,b,a);N(O,O.current,a);return!0}
function yf(a,b){var c=a.stateNode;c?void 0:A("169");if(b){var d=wf(a,pf);c.__reactInternalMemoizedMergedChildContext=d;M(O,a);M(of,a);N(of,d,a)}else M(O,a);N(O,b,a)}
function zf(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=null;this.index=0;this.ref=null;this.pendingProps=b;this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.expirationTime=0;this.alternate=null}
function Af(a,b,c){var d=a.alternate;null===d?(d=new zf(a.tag,b,a.key,a.mode),d.type=a.type,d.stateNode=a.stateNode,d.alternate=a,a.alternate=d):(d.pendingProps=b,d.effectTag=0,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null);d.expirationTime=c;d.child=a.child;d.memoizedProps=a.memoizedProps;d.memoizedState=a.memoizedState;d.updateQueue=a.updateQueue;d.sibling=a.sibling;d.index=a.index;d.ref=a.ref;return d}
function Bf(a,b,c){var d=a.type,e=a.key;a=a.props;if("function"===typeof d)var f=d.prototype&&d.prototype.isReactComponent?2:0;else if("string"===typeof d)f=5;else switch(d){case ic:return Cf(a.children,b,c,e);case pc:f=11;b|=3;break;case jc:f=11;b|=2;break;case kc:return d=new zf(15,a,e,b|4),d.type=kc,d.expirationTime=c,d;case rc:f=16;b|=2;break;default:a:{switch("object"===typeof d&&null!==d?d.$$typeof:null){case lc:f=13;break a;case mc:f=12;break a;case qc:f=14;break a;default:A("130",null==d?
d:typeof d,"")}f=void 0}}b=new zf(f,a,e,b);b.type=d;b.expirationTime=c;return b}function Cf(a,b,c,d){a=new zf(10,a,d,b);a.expirationTime=c;return a}function Df(a,b,c){a=new zf(6,a,null,b);a.expirationTime=c;return a}function Ef(a,b,c){b=new zf(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function Ff(a,b,c){b=new zf(3,null,null,b?3:0);a={current:b,containerInfo:a,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:c,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null};return b.stateNode=a}var Gf=null,Hf=null;function If(a){return function(b){try{return a(b)}catch(c){}}}
function Jf(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Gf=If(function(a){return b.onCommitFiberRoot(c,a)});Hf=If(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}function Kf(a){"function"===typeof Gf&&Gf(a)}function Lf(a){"function"===typeof Hf&&Hf(a)}var Mf=!1;
function Nf(a){return{expirationTime:0,baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Of(a){return{expirationTime:a.expirationTime,baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
function Pf(a){return{expirationTime:a,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Qf(a,b,c){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b);if(0===a.expirationTime||a.expirationTime>c)a.expirationTime=c}
function Rf(a,b,c){var d=a.alternate;if(null===d){var e=a.updateQueue;var f=null;null===e&&(e=a.updateQueue=Nf(a.memoizedState))}else e=a.updateQueue,f=d.updateQueue,null===e?null===f?(e=a.updateQueue=Nf(a.memoizedState),f=d.updateQueue=Nf(d.memoizedState)):e=a.updateQueue=Of(f):null===f&&(f=d.updateQueue=Of(e));null===f||e===f?Qf(e,b,c):null===e.lastUpdate||null===f.lastUpdate?(Qf(e,b,c),Qf(f,b,c)):(Qf(e,b,c),f.lastUpdate=b)}
function Sf(a,b,c){var d=a.updateQueue;d=null===d?a.updateQueue=Nf(a.memoizedState):Tf(a,d);null===d.lastCapturedUpdate?d.firstCapturedUpdate=d.lastCapturedUpdate=b:(d.lastCapturedUpdate.next=b,d.lastCapturedUpdate=b);if(0===d.expirationTime||d.expirationTime>c)d.expirationTime=c}function Tf(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=Of(b));return b}
function Uf(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-1025|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return p({},d,e);case 2:Mf=!0}return d}
function Vf(a,b,c,d,e){Mf=!1;if(!(0===b.expirationTime||b.expirationTime>e)){b=Tf(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,n=f;null!==k;){var r=k.expirationTime;if(r>e){if(null===g&&(g=k,f=n),0===h||h>r)h=r}else n=Uf(a,b,k,n,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k));k=k.next}r=null;for(k=b.firstCapturedUpdate;null!==k;){var w=k.expirationTime;if(w>e){if(null===r&&(r=k,null===
g&&(f=n)),0===h||h>w)h=w}else n=Uf(a,b,k,n,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k));k=k.next}null===g&&(b.lastUpdate=null);null===r?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===r&&(f=n);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=r;b.expirationTime=h;a.memoizedState=n}}
function Wf(a,b){"function"!==typeof a?A("191",a):void 0;a.call(b)}
function Xf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);a=b.firstEffect;for(b.firstEffect=b.lastEffect=null;null!==a;){var d=a.callback;null!==d&&(a.callback=null,Wf(d,c));a=a.nextEffect}a=b.firstCapturedEffect;for(b.firstCapturedEffect=b.lastCapturedEffect=null;null!==a;)b=a.callback,null!==b&&(a.callback=null,Wf(b,c)),a=a.nextEffect}
function Yf(a,b){return{value:a,source:b,stack:vc(b)}}var Zf=nf(null),$f=nf(null),ag=nf(0);function bg(a){var b=a.type._context;N(ag,b._changedBits,a);N($f,b._currentValue,a);N(Zf,a,a);b._currentValue=a.pendingProps.value;b._changedBits=a.stateNode}function cg(a){var b=ag.current,c=$f.current;M(Zf,a);M($f,a);M(ag,a);a=a.type._context;a._currentValue=c;a._changedBits=b}var dg={},eg=nf(dg),fg=nf(dg),gg=nf(dg);function hg(a){a===dg?A("174"):void 0;return a}
function jg(a,b){N(gg,b,a);N(fg,a,a);N(eg,dg,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ie(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=Ie(b,c)}M(eg,a);N(eg,b,a)}function kg(a){M(eg,a);M(fg,a);M(gg,a)}function lg(a){fg.current===a&&(M(eg,a),M(fg,a))}function mg(a,b,c){var d=a.memoizedState;b=b(c,d);d=null===b||void 0===b?d:p({},d,b);a.memoizedState=d;a=a.updateQueue;null!==a&&0===a.expirationTime&&(a.baseState=d)}
var qg={isMounted:function(a){return(a=a._reactInternalFiber)?2===kd(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=ng();d=og(d,a);var e=Pf(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Rf(a,e,d);pg(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=ng();d=og(d,a);var e=Pf(d);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Rf(a,e,d);pg(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=ng();c=og(c,a);var d=Pf(c);d.tag=2;void 0!==
b&&null!==b&&(d.callback=b);Rf(a,d,c);pg(a,c)}};function rg(a,b,c,d,e,f){var g=a.stateNode;a=a.type;return"function"===typeof g.shouldComponentUpdate?g.shouldComponentUpdate(c,e,f):a.prototype&&a.prototype.isPureReactComponent?!ea(b,c)||!ea(d,e):!0}
function sg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&qg.enqueueReplaceState(b,b.state,null)}
function tg(a,b){var c=a.type,d=a.stateNode,e=a.pendingProps,f=qf(a);d.props=e;d.state=a.memoizedState;d.refs=ha;d.context=sf(a,f);f=a.updateQueue;null!==f&&(Vf(a,f,e,d,b),d.state=a.memoizedState);f=a.type.getDerivedStateFromProps;"function"===typeof f&&(mg(a,f,e),d.state=a.memoizedState);"function"===typeof c.getDerivedStateFromProps||"function"===typeof d.getSnapshotBeforeUpdate||"function"!==typeof d.UNSAFE_componentWillMount&&"function"!==typeof d.componentWillMount||(c=d.state,"function"===typeof d.componentWillMount&&
d.componentWillMount(),"function"===typeof d.UNSAFE_componentWillMount&&d.UNSAFE_componentWillMount(),c!==d.state&&qg.enqueueReplaceState(d,d.state,null),f=a.updateQueue,null!==f&&(Vf(a,f,e,d,b),d.state=a.memoizedState));"function"===typeof d.componentDidMount&&(a.effectTag|=4)}var ug=Array.isArray;
function vg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(2!==c.tag?A("110"):void 0,d=c.stateNode);d?void 0:A("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs===ha?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}"string"!==typeof a?A("148"):void 0;c._owner?void 0:A("254",a)}return a}
function wg(a,b){"textarea"!==a.type&&A("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}
function xg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Af(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Df(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.type===c.type)return d=e(b,c.props,d),d.ref=vg(a,b,c),d.return=a,d;d=Bf(c,a.mode,d);d.ref=vg(a,b,c);d.return=a;return d}function n(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=
Ef(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function r(a,b,c,d,f){if(null===b||10!==b.tag)return b=Cf(c,a.mode,d,f),b.return=a,b;b=e(b,c,d);b.return=a;return b}function w(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Df(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case gc:return c=Bf(b,a.mode,c),c.ref=vg(a,null,b),c.return=a,c;case hc:return b=Ef(b,a.mode,c),b.return=a,b}if(ug(b)||tc(b))return b=Cf(b,a.mode,c,null),b.return=
a,b;wg(a,b)}return null}function P(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case gc:return c.key===e?c.type===ic?r(a,b,c.props.children,d,e):k(a,b,c,d):null;case hc:return c.key===e?n(a,b,c,d):null}if(ug(c)||tc(c))return null!==e?null:r(a,b,c,d,null);wg(a,c)}return null}function nc(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);
if("object"===typeof d&&null!==d){switch(d.$$typeof){case gc:return a=a.get(null===d.key?c:d.key)||null,d.type===ic?r(b,a,d.props.children,e,d.key):k(b,a,d,e);case hc:return a=a.get(null===d.key?c:d.key)||null,n(b,a,d,e)}if(ug(d)||tc(d))return a=a.get(c)||null,r(b,a,d,e,null);wg(b,d)}return null}function Jd(e,g,h,k){for(var u=null,x=null,t=g,q=g=0,n=null;null!==t&&q<h.length;q++){t.index>q?(n=t,t=null):n=t.sibling;var l=P(e,t,h[q],k);if(null===l){null===t&&(t=n);break}a&&t&&null===l.alternate&&b(e,
t);g=f(l,g,q);null===x?u=l:x.sibling=l;x=l;t=n}if(q===h.length)return c(e,t),u;if(null===t){for(;q<h.length;q++)if(t=w(e,h[q],k))g=f(t,g,q),null===x?u=t:x.sibling=t,x=t;return u}for(t=d(e,t);q<h.length;q++)if(n=nc(t,e,q,h[q],k))a&&null!==n.alternate&&t.delete(null===n.key?q:n.key),g=f(n,g,q),null===x?u=n:x.sibling=n,x=n;a&&t.forEach(function(a){return b(e,a)});return u}function E(e,g,h,k){var u=tc(h);"function"!==typeof u?A("150"):void 0;h=u.call(h);null==h?A("151"):void 0;for(var t=u=null,n=g,x=
g=0,y=null,l=h.next();null!==n&&!l.done;x++,l=h.next()){n.index>x?(y=n,n=null):y=n.sibling;var r=P(e,n,l.value,k);if(null===r){n||(n=y);break}a&&n&&null===r.alternate&&b(e,n);g=f(r,g,x);null===t?u=r:t.sibling=r;t=r;n=y}if(l.done)return c(e,n),u;if(null===n){for(;!l.done;x++,l=h.next())l=w(e,l.value,k),null!==l&&(g=f(l,g,x),null===t?u=l:t.sibling=l,t=l);return u}for(n=d(e,n);!l.done;x++,l=h.next())l=nc(n,e,x,l.value,k),null!==l&&(a&&null!==l.alternate&&n.delete(null===l.key?x:l.key),g=f(l,g,x),null===
t?u=l:t.sibling=l,t=l);a&&n.forEach(function(a){return b(e,a)});return u}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ic&&null===f.key;k&&(f=f.props.children);var n="object"===typeof f&&null!==f;if(n)switch(f.$$typeof){case gc:a:{n=f.key;for(k=d;null!==k;){if(k.key===n)if(10===k.tag?f.type===ic:k.type===f.type){c(a,k.sibling);d=e(k,f.type===ic?f.props.children:f.props,h);d.ref=vg(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=k.sibling}f.type===ic?(d=Cf(f.props.children,
a.mode,h,f.key),d.return=a,a=d):(h=Bf(f,a.mode,h),h.ref=vg(a,d,f),h.return=a,a=h)}return g(a);case hc:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=Ef(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=
a,a=d):(c(a,d),d=Df(f,a.mode,h),d.return=a,a=d),g(a);if(ug(f))return Jd(a,d,f,h);if(tc(f))return E(a,d,f,h);n&&wg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 2:case 1:h=a.type,A("152",h.displayName||h.name||"Component")}return c(a,d)}}var yg=xg(!0),zg=xg(!1),Ag=null,Bg=null,Cg=!1;function Dg(a,b){var c=new zf(5,null,null,0);c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Eg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;default:return!1}}function Fg(a){if(Cg){var b=Bg;if(b){var c=b;if(!Eg(a,b)){b=jf(c);if(!b||!Eg(a,b)){a.effectTag|=2;Cg=!1;Ag=a;return}Dg(Ag,c)}Ag=a;Bg=kf(b)}else a.effectTag|=2,Cg=!1,Ag=a}}
function Gg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag;)a=a.return;Ag=a}function Hg(a){if(a!==Ag)return!1;if(!Cg)return Gg(a),Cg=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!ef(b,a.memoizedProps))for(b=Bg;b;)Dg(a,b),b=jf(b);Gg(a);Bg=Ag?jf(a.stateNode):null;return!0}function Ig(){Bg=Ag=null;Cg=!1}function Q(a,b,c){Jg(a,b,c,b.expirationTime)}function Jg(a,b,c,d){b.child=null===a?zg(b,null,c,d):yg(b,a.child,c,d)}
function Kg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function Lg(a,b,c,d,e){Kg(a,b);var f=0!==(b.effectTag&64);if(!c&&!f)return d&&yf(b,!1),R(a,b);c=b.stateNode;ec.current=b;var g=f?null:c.render();b.effectTag|=1;f&&(Jg(a,b,null,e),b.child=null);Jg(a,b,g,e);b.memoizedState=c.state;b.memoizedProps=c.props;d&&yf(b,!0);return b.child}
function Mg(a){var b=a.stateNode;b.pendingContext?vf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&vf(a,b.context,!1);jg(a,b.containerInfo)}
function Ng(a,b,c,d){var e=a.child;null!==e&&(e.return=a);for(;null!==e;){switch(e.tag){case 12:var f=e.stateNode|0;if(e.type===b&&0!==(f&c)){for(f=e;null!==f;){var g=f.alternate;if(0===f.expirationTime||f.expirationTime>d)f.expirationTime=d,null!==g&&(0===g.expirationTime||g.expirationTime>d)&&(g.expirationTime=d);else if(null!==g&&(0===g.expirationTime||g.expirationTime>d))g.expirationTime=d;else break;f=f.return}f=null}else f=e.child;break;case 13:f=e.type===a.type?null:e.child;break;default:f=
e.child}if(null!==f)f.return=e;else for(f=e;null!==f;){if(f===a){f=null;break}e=f.sibling;if(null!==e){e.return=f.return;f=e;break}f=f.return}e=f}}
function Rg(a,b,c){var d=b.type._context,e=b.pendingProps,f=b.memoizedProps,g=!0;if(O.current)g=!1;else if(f===e)return b.stateNode=0,bg(b),R(a,b);var h=e.value;b.memoizedProps=e;if(null===f)h=1073741823;else if(f.value===e.value){if(f.children===e.children&&g)return b.stateNode=0,bg(b),R(a,b);h=0}else{var k=f.value;if(k===h&&(0!==k||1/k===1/h)||k!==k&&h!==h){if(f.children===e.children&&g)return b.stateNode=0,bg(b),R(a,b);h=0}else if(h="function"===typeof d._calculateChangedBits?d._calculateChangedBits(k,
h):1073741823,h|=0,0===h){if(f.children===e.children&&g)return b.stateNode=0,bg(b),R(a,b)}else Ng(b,d,h,c)}b.stateNode=h;bg(b);Q(a,b,e.children);return b.child}function R(a,b){null!==a&&b.child!==a.child?A("153"):void 0;if(null!==b.child){a=b.child;var c=Af(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Af(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null}return b.child}
function Sg(a,b,c){if(0===b.expirationTime||b.expirationTime>c){switch(b.tag){case 3:Mg(b);break;case 2:xf(b);break;case 4:jg(b,b.stateNode.containerInfo);break;case 13:bg(b)}return null}switch(b.tag){case 0:null!==a?A("155"):void 0;var d=b.type,e=b.pendingProps,f=qf(b);f=sf(b,f);d=d(e,f);b.effectTag|=1;"object"===typeof d&&null!==d&&"function"===typeof d.render&&void 0===d.$$typeof?(f=b.type,b.tag=2,b.memoizedState=null!==d.state&&void 0!==d.state?d.state:null,f=f.getDerivedStateFromProps,"function"===
typeof f&&mg(b,f,e),e=xf(b),d.updater=qg,b.stateNode=d,d._reactInternalFiber=b,tg(b,c),a=Lg(a,b,!0,e,c)):(b.tag=1,Q(a,b,d),b.memoizedProps=e,a=b.child);return a;case 1:return e=b.type,c=b.pendingProps,O.current||b.memoizedProps!==c?(d=qf(b),d=sf(b,d),e=e(c,d),b.effectTag|=1,Q(a,b,e),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 2:e=xf(b);if(null===a)if(null===b.stateNode){var g=b.pendingProps,h=b.type;d=qf(b);var k=2===b.tag&&null!=b.type.contextTypes;f=k?sf(b,d):ha;g=new h(g,f);b.memoizedState=null!==
g.state&&void 0!==g.state?g.state:null;g.updater=qg;b.stateNode=g;g._reactInternalFiber=b;k&&(k=b.stateNode,k.__reactInternalMemoizedUnmaskedChildContext=d,k.__reactInternalMemoizedMaskedChildContext=f);tg(b,c);d=!0}else{h=b.type;d=b.stateNode;k=b.memoizedProps;f=b.pendingProps;d.props=k;var n=d.context;g=qf(b);g=sf(b,g);var r=h.getDerivedStateFromProps;(h="function"===typeof r||"function"===typeof d.getSnapshotBeforeUpdate)||"function"!==typeof d.UNSAFE_componentWillReceiveProps&&"function"!==typeof d.componentWillReceiveProps||
(k!==f||n!==g)&&sg(b,d,f,g);Mf=!1;var w=b.memoizedState;n=d.state=w;var P=b.updateQueue;null!==P&&(Vf(b,P,f,d,c),n=b.memoizedState);k!==f||w!==n||O.current||Mf?("function"===typeof r&&(mg(b,r,f),n=b.memoizedState),(k=Mf||rg(b,k,f,w,n,g))?(h||"function"!==typeof d.UNSAFE_componentWillMount&&"function"!==typeof d.componentWillMount||("function"===typeof d.componentWillMount&&d.componentWillMount(),"function"===typeof d.UNSAFE_componentWillMount&&d.UNSAFE_componentWillMount()),"function"===typeof d.componentDidMount&&
(b.effectTag|=4)):("function"===typeof d.componentDidMount&&(b.effectTag|=4),b.memoizedProps=f,b.memoizedState=n),d.props=f,d.state=n,d.context=g,d=k):("function"===typeof d.componentDidMount&&(b.effectTag|=4),d=!1)}else h=b.type,d=b.stateNode,f=b.memoizedProps,k=b.pendingProps,d.props=f,n=d.context,g=qf(b),g=sf(b,g),r=h.getDerivedStateFromProps,(h="function"===typeof r||"function"===typeof d.getSnapshotBeforeUpdate)||"function"!==typeof d.UNSAFE_componentWillReceiveProps&&"function"!==typeof d.componentWillReceiveProps||
(f!==k||n!==g)&&sg(b,d,k,g),Mf=!1,n=b.memoizedState,w=d.state=n,P=b.updateQueue,null!==P&&(Vf(b,P,k,d,c),w=b.memoizedState),f!==k||n!==w||O.current||Mf?("function"===typeof r&&(mg(b,r,k),w=b.memoizedState),(r=Mf||rg(b,f,k,n,w,g))?(h||"function"!==typeof d.UNSAFE_componentWillUpdate&&"function"!==typeof d.componentWillUpdate||("function"===typeof d.componentWillUpdate&&d.componentWillUpdate(k,w,g),"function"===typeof d.UNSAFE_componentWillUpdate&&d.UNSAFE_componentWillUpdate(k,w,g)),"function"===typeof d.componentDidUpdate&&
(b.effectTag|=4),"function"===typeof d.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof d.componentDidUpdate||f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=4),"function"!==typeof d.getSnapshotBeforeUpdate||f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=256),b.memoizedProps=k,b.memoizedState=w),d.props=k,d.state=w,d.context=g,d=r):("function"!==typeof d.componentDidUpdate||f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=4),"function"!==typeof d.getSnapshotBeforeUpdate||
f===a.memoizedProps&&n===a.memoizedState||(b.effectTag|=256),d=!1);return Lg(a,b,d,e,c);case 3:Mg(b);e=b.updateQueue;if(null!==e)if(d=b.memoizedState,d=null!==d?d.element:null,Vf(b,e,b.pendingProps,null,c),e=b.memoizedState.element,e===d)Ig(),a=R(a,b);else{d=b.stateNode;if(d=(null===a||null===a.child)&&d.hydrate)Bg=kf(b.stateNode.containerInfo),Ag=b,d=Cg=!0;d?(b.effectTag|=2,b.child=zg(b,null,e,c)):(Ig(),Q(a,b,e));a=b.child}else Ig(),a=R(a,b);return a;case 5:a:{hg(gg.current);e=hg(eg.current);d=Ie(e,
b.type);e!==d&&(N(fg,b,b),N(eg,d,b));null===a&&Fg(b);e=b.type;k=b.memoizedProps;d=b.pendingProps;f=null!==a?a.memoizedProps:null;if(!O.current&&k===d){if(k=b.mode&1&&!!d.hidden)b.expirationTime=1073741823;if(!k||1073741823!==c){a=R(a,b);break a}}k=d.children;ef(e,d)?k=null:f&&ef(e,f)&&(b.effectTag|=16);Kg(a,b);1073741823!==c&&b.mode&1&&d.hidden?(b.expirationTime=1073741823,b.memoizedProps=d,a=null):(Q(a,b,k),b.memoizedProps=d,a=b.child)}return a;case 6:return null===a&&Fg(b),b.memoizedProps=b.pendingProps,
null;case 16:return null;case 4:return jg(b,b.stateNode.containerInfo),e=b.pendingProps,O.current||b.memoizedProps!==e?(null===a?b.child=yg(b,null,e,c):Q(a,b,e),b.memoizedProps=e,a=b.child):a=R(a,b),a;case 14:return e=b.type.render,c=b.pendingProps,d=b.ref,O.current||b.memoizedProps!==c||d!==(null!==a?a.ref:null)?(e=e(c,d),Q(a,b,e),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 10:return c=b.pendingProps,O.current||b.memoizedProps!==c?(Q(a,b,c),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 11:return c=
b.pendingProps.children,O.current||null!==c&&b.memoizedProps!==c?(Q(a,b,c),b.memoizedProps=c,a=b.child):a=R(a,b),a;case 15:return c=b.pendingProps,b.memoizedProps===c?a=R(a,b):(Q(a,b,c.children),b.memoizedProps=c,a=b.child),a;case 13:return Rg(a,b,c);case 12:a:if(d=b.type,f=b.pendingProps,k=b.memoizedProps,e=d._currentValue,g=d._changedBits,O.current||0!==g||k!==f){b.memoizedProps=f;h=f.unstable_observedBits;if(void 0===h||null===h)h=1073741823;b.stateNode=h;if(0!==(g&h))Ng(b,d,g,c);else if(k===f){a=
R(a,b);break a}c=f.children;c=c(e);b.effectTag|=1;Q(a,b,c);a=b.child}else a=R(a,b);return a;default:A("156")}}function Tg(a){a.effectTag|=4}var Ug=void 0,Vg=void 0,Wg=void 0;Ug=function(){};Vg=function(a,b,c){(b.updateQueue=c)&&Tg(b)};Wg=function(a,b,c,d){c!==d&&Tg(b)};
function Xg(a,b){var c=b.pendingProps;switch(b.tag){case 1:return null;case 2:return tf(b),null;case 3:kg(b);uf(b);var d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Hg(b),b.effectTag&=-3;Ug(b);return null;case 5:lg(b);d=hg(gg.current);var e=b.type;if(null!==a&&null!=b.stateNode){var f=a.memoizedProps,g=b.stateNode,h=hg(eg.current);g=Xe(g,e,f,c,d);Vg(a,b,g,e,f,c,d,h);a.ref!==b.ref&&(b.effectTag|=128)}else{if(!c)return null===b.stateNode?
A("166"):void 0,null;a=hg(eg.current);if(Hg(b))c=b.stateNode,e=b.type,f=b.memoizedProps,c[C]=b,c[Ma]=f,d=Ze(c,e,f,a,d),b.updateQueue=d,null!==d&&Tg(b);else{a=Ue(e,c,d,a);a[C]=b;a[Ma]=c;a:for(f=b.child;null!==f;){if(5===f.tag||6===f.tag)a.appendChild(f.stateNode);else if(4!==f.tag&&null!==f.child){f.child.return=f;f=f.child;continue}if(f===b)break;for(;null===f.sibling;){if(null===f.return||f.return===b)break a;f=f.return}f.sibling.return=f.return;f=f.sibling}We(a,e,c,d);df(e,c)&&Tg(b);b.stateNode=
a}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)Wg(a,b,a.memoizedProps,c);else{if("string"!==typeof c)return null===b.stateNode?A("166"):void 0,null;d=hg(gg.current);hg(eg.current);Hg(b)?(d=b.stateNode,c=b.memoizedProps,d[C]=b,$e(d,c)&&Tg(b)):(d=Ve(c,d),d[C]=b,b.stateNode=d)}return null;case 14:return null;case 16:return null;case 10:return null;case 11:return null;case 15:return null;case 4:return kg(b),Ug(b),null;case 13:return cg(b),null;case 12:return null;case 0:A("167");
default:A("156")}}function Yg(a,b){var c=b.source;null===b.stack&&null!==c&&vc(c);null!==c&&uc(c);b=b.value;null!==a&&2===a.tag&&uc(a);try{b&&b.suppressReactErrorLogging||console.error(b)}catch(d){d&&d.suppressReactErrorLogging||console.error(d)}}function Zg(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){$g(a,c)}else b.current=null}
function ah(a){"function"===typeof Lf&&Lf(a);switch(a.tag){case 2:Zg(a);var b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){$g(a,c)}break;case 5:Zg(a);break;case 4:bh(a)}}function ch(a){return 5===a.tag||3===a.tag||4===a.tag}
function dh(a){a:{for(var b=a.return;null!==b;){if(ch(b)){var c=b;break a}b=b.return}A("160");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:A("161")}c.effectTag&16&&(Le(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ch(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h)}else b.insertBefore(e.stateNode,c);else d?(f=b,g=e.stateNode,8===f.nodeType?f.parentNode.insertBefore(g,f):f.appendChild(g)):b.appendChild(e.stateNode);else if(4!==e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===
e.sibling;){if(null===e.return||e.return===a)return;e=e.return}e.sibling.return=e.return;e=e.sibling}}
function bh(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?A("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c.return}c=!0}if(5===b.tag||6===b.tag){a:for(var f=b,g=f;;)if(ah(g),null!==g.child&&4!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return}g.sibling.return=g.return;g=g.sibling}e?
(f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode)}else if(4===b.tag?d=b.stateNode.containerInfo:ah(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;4===b.tag&&(c=!1)}b.sibling.return=b.return;b=b.sibling}}
function eh(a,b){switch(b.tag){case 2:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&(c[Ma]=d,Ye(c,f,e,a,d))}break;case 6:null===b.stateNode?A("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 3:break;case 15:break;case 16:break;default:A("163")}}function fh(a,b,c){c=Pf(c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){gh(d);Yg(a,b)};return c}
function hh(a,b,c){c=Pf(c);c.tag=3;var d=a.stateNode;null!==d&&"function"===typeof d.componentDidCatch&&(c.callback=function(){null===ih?ih=new Set([this]):ih.add(this);var c=b.value,d=b.stack;Yg(a,b);this.componentDidCatch(c,{componentStack:null!==d?d:""})});return c}
function jh(a,b,c,d,e,f){c.effectTag|=512;c.firstEffect=c.lastEffect=null;d=Yf(d,c);a=b;do{switch(a.tag){case 3:a.effectTag|=1024;d=fh(a,d,f);Sf(a,d,f);return;case 2:if(b=d,c=a.stateNode,0===(a.effectTag&64)&&null!==c&&"function"===typeof c.componentDidCatch&&(null===ih||!ih.has(c))){a.effectTag|=1024;d=hh(a,b,f);Sf(a,d,f);return}}a=a.return}while(null!==a)}
function kh(a){switch(a.tag){case 2:tf(a);var b=a.effectTag;return b&1024?(a.effectTag=b&-1025|64,a):null;case 3:return kg(a),uf(a),b=a.effectTag,b&1024?(a.effectTag=b&-1025|64,a):null;case 5:return lg(a),null;case 16:return b=a.effectTag,b&1024?(a.effectTag=b&-1025|64,a):null;case 4:return kg(a),null;case 13:return cg(a),null;default:return null}}var lh=ff(),mh=2,nh=lh,oh=0,ph=0,qh=!1,S=null,rh=null,T=0,sh=-1,th=!1,U=null,uh=!1,vh=!1,ih=null;
function wh(){if(null!==S)for(var a=S.return;null!==a;){var b=a;switch(b.tag){case 2:tf(b);break;case 3:kg(b);uf(b);break;case 5:lg(b);break;case 4:kg(b);break;case 13:cg(b)}a=a.return}rh=null;T=0;sh=-1;th=!1;S=null;vh=!1}
function xh(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&512)){b=Xg(b,a,T);var e=a;if(1073741823===T||1073741823!==e.expirationTime){var f=0;switch(e.tag){case 3:case 2:var g=e.updateQueue;null!==g&&(f=g.expirationTime)}for(g=e.child;null!==g;)0!==g.expirationTime&&(0===f||f>g.expirationTime)&&(f=g.expirationTime),g=g.sibling;e.expirationTime=f}if(null!==b)return b;null!==c&&0===(c.effectTag&512)&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&
(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;if(null!==c)a=c;else{vh=!0;break}}else{a=kh(a,th,T);if(null!==a)return a.effectTag&=511,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=512);if(null!==d)return d;if(null!==c)a=c;else break}}return null}
function yh(a){var b=Sg(a.alternate,a,T);null===b&&(b=xh(a));ec.current=null;return b}
function zh(a,b,c){qh?A("243"):void 0;qh=!0;if(b!==T||a!==rh||null===S)wh(),rh=a,T=b,sh=-1,S=Af(rh.current,null,T),a.pendingCommitExpirationTime=0;var d=!1;th=!c||T<=mh;do{try{if(c)for(;null!==S&&!Ah();)S=yh(S);else for(;null!==S;)S=yh(S)}catch(f){if(null===S)d=!0,gh(f);else{null===S?A("271"):void 0;c=S;var e=c.return;if(null===e){d=!0;gh(f);break}jh(a,e,c,f,th,T,nh);S=xh(c)}}break}while(1);qh=!1;if(d)return null;if(null===S){if(vh)return a.pendingCommitExpirationTime=b,a.current.alternate;th?A("262"):
void 0;0<=sh&&setTimeout(function(){var b=a.current.expirationTime;0!==b&&(0===a.remainingExpirationTime||a.remainingExpirationTime<b)&&Bh(a,b)},sh);Ch(a.current.expirationTime)}return null}
function $g(a,b){var c;a:{qh&&!uh?A("263"):void 0;for(c=a.return;null!==c;){switch(c.tag){case 2:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromCatch||"function"===typeof d.componentDidCatch&&(null===ih||!ih.has(d))){a=Yf(b,a);a=hh(c,a,1);Rf(c,a,1);pg(c,1);c=void 0;break a}break;case 3:a=Yf(b,a);a=fh(c,a,1);Rf(c,a,1);pg(c,1);c=void 0;break a}c=c.return}3===a.tag&&(c=Yf(b,a),c=fh(a,c,1),Rf(a,c,1),pg(a,1));c=void 0}return c}
function Dh(){var a=2+25*(((ng()-2+500)/25|0)+1);a<=oh&&(a=oh+1);return oh=a}function og(a,b){a=0!==ph?ph:qh?uh?1:T:b.mode&1?Eh?2+10*(((a-2+15)/10|0)+1):2+25*(((a-2+500)/25|0)+1):1;Eh&&(0===Fh||a>Fh)&&(Fh=a);return a}
function pg(a,b){for(;null!==a;){if(0===a.expirationTime||a.expirationTime>b)a.expirationTime=b;null!==a.alternate&&(0===a.alternate.expirationTime||a.alternate.expirationTime>b)&&(a.alternate.expirationTime=b);if(null===a.return)if(3===a.tag){var c=a.stateNode;!qh&&0!==T&&b<T&&wh();var d=c.current.expirationTime;qh&&!uh&&rh===c||Bh(c,d);Gh>Hh&&A("185")}else break;a=a.return}}function ng(){nh=ff()-lh;return mh=(nh/10|0)+2}
function Ih(a){var b=ph;ph=2+25*(((ng()-2+500)/25|0)+1);try{return a()}finally{ph=b}}function Jh(a,b,c,d,e){var f=ph;ph=1;try{return a(b,c,d,e)}finally{ph=f}}var Kh=null,V=null,Lh=0,Mh=void 0,W=!1,X=null,Y=0,Fh=0,Nh=!1,Oh=!1,Ph=null,Qh=null,Z=!1,Rh=!1,Eh=!1,Sh=null,Hh=1E3,Gh=0,Th=1;function Uh(a){if(0!==Lh){if(a>Lh)return;null!==Mh&&hf(Mh)}var b=ff()-lh;Lh=a;Mh=gf(Vh,{timeout:10*(a-2)-b})}
function Bh(a,b){if(null===a.nextScheduledRoot)a.remainingExpirationTime=b,null===V?(Kh=V=a,a.nextScheduledRoot=a):(V=V.nextScheduledRoot=a,V.nextScheduledRoot=Kh);else{var c=a.remainingExpirationTime;if(0===c||b<c)a.remainingExpirationTime=b}W||(Z?Rh&&(X=a,Y=1,Wh(a,1,!1)):1===b?Xh():Uh(b))}
function Yh(){var a=0,b=null;if(null!==V)for(var c=V,d=Kh;null!==d;){var e=d.remainingExpirationTime;if(0===e){null===c||null===V?A("244"):void 0;if(d===d.nextScheduledRoot){Kh=V=d.nextScheduledRoot=null;break}else if(d===Kh)Kh=e=d.nextScheduledRoot,V.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===V){V=c;V.nextScheduledRoot=Kh;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{if(0===a||e<a)a=e,b=d;if(d===V)break;
c=d;d=d.nextScheduledRoot}}c=X;null!==c&&c===b&&1===a?Gh++:Gh=0;X=b;Y=a}function Vh(a){Zh(0,!0,a)}function Xh(){Zh(1,!1,null)}function Zh(a,b,c){Qh=c;Yh();if(b)for(;null!==X&&0!==Y&&(0===a||a>=Y)&&(!Nh||ng()>=Y);)ng(),Wh(X,Y,!Nh),Yh();else for(;null!==X&&0!==Y&&(0===a||a>=Y);)Wh(X,Y,!1),Yh();null!==Qh&&(Lh=0,Mh=null);0!==Y&&Uh(Y);Qh=null;Nh=!1;$h()}function ai(a,b){W?A("253"):void 0;X=a;Y=b;Wh(a,b,!1);Xh();$h()}
function $h(){Gh=0;if(null!==Sh){var a=Sh;Sh=null;for(var b=0;b<a.length;b++){var c=a[b];try{c._onComplete()}catch(d){Oh||(Oh=!0,Ph=d)}}}if(Oh)throw a=Ph,Ph=null,Oh=!1,a;}function Wh(a,b,c){W?A("245"):void 0;W=!0;c?(c=a.finishedWork,null!==c?bi(a,c,b):(c=zh(a,b,!0),null!==c&&(Ah()?a.finishedWork=c:bi(a,c,b)))):(c=a.finishedWork,null!==c?bi(a,c,b):(c=zh(a,b,!1),null!==c&&bi(a,c,b)));W=!1}
function bi(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===Sh?Sh=[d]:Sh.push(d),d._defer)){a.finishedWork=b;a.remainingExpirationTime=0;return}a.finishedWork=null;uh=qh=!0;c=b.stateNode;c.current===b?A("177"):void 0;d=c.pendingCommitExpirationTime;0===d?A("261"):void 0;c.pendingCommitExpirationTime=0;ng();ec.current=null;if(1<b.effectTag)if(null!==b.lastEffect){b.lastEffect.nextEffect=b;var e=b.firstEffect}else e=b;else e=b.firstEffect;bf=Id;var f=da();if(Vd(f)){if("selectionStart"in
f)var g={start:f.selectionStart,end:f.selectionEnd};else a:{var h=window.getSelection&&window.getSelection();if(h&&0!==h.rangeCount){g=h.anchorNode;var k=h.anchorOffset,n=h.focusNode;h=h.focusOffset;try{g.nodeType,n.nodeType}catch(Wa){g=null;break a}var r=0,w=-1,P=-1,nc=0,Jd=0,E=f,t=null;b:for(;;){for(var x;;){E!==g||0!==k&&3!==E.nodeType||(w=r+k);E!==n||0!==h&&3!==E.nodeType||(P=r+h);3===E.nodeType&&(r+=E.nodeValue.length);if(null===(x=E.firstChild))break;t=E;E=x}for(;;){if(E===f)break b;t===g&&
++nc===k&&(w=r);t===n&&++Jd===h&&(P=r);if(null!==(x=E.nextSibling))break;E=t;t=E.parentNode}E=x}g=-1===w||-1===P?null:{start:w,end:P}}else g=null}g=g||{start:0,end:0}}else g=null;cf={focusedElem:f,selectionRange:g};Kd(!1);for(U=e;null!==U;){f=!1;g=void 0;try{for(;null!==U;){if(U.effectTag&256){var u=U.alternate;k=U;switch(k.tag){case 2:if(k.effectTag&256&&null!==u){var y=u.memoizedProps,D=u.memoizedState,ja=k.stateNode;ja.props=k.memoizedProps;ja.state=k.memoizedState;var ni=ja.getSnapshotBeforeUpdate(y,
D);ja.__reactInternalSnapshotBeforeUpdate=ni}break;case 3:case 5:case 6:case 4:break;default:A("163")}}U=U.nextEffect}}catch(Wa){f=!0,g=Wa}f&&(null===U?A("178"):void 0,$g(U,g),null!==U&&(U=U.nextEffect))}for(U=e;null!==U;){u=!1;y=void 0;try{for(;null!==U;){var q=U.effectTag;q&16&&Le(U.stateNode,"");if(q&128){var z=U.alternate;if(null!==z){var l=z.ref;null!==l&&("function"===typeof l?l(null):l.current=null)}}switch(q&14){case 2:dh(U);U.effectTag&=-3;break;case 6:dh(U);U.effectTag&=-3;eh(U.alternate,
U);break;case 4:eh(U.alternate,U);break;case 8:D=U,bh(D),D.return=null,D.child=null,D.alternate&&(D.alternate.child=null,D.alternate.return=null)}U=U.nextEffect}}catch(Wa){u=!0,y=Wa}u&&(null===U?A("178"):void 0,$g(U,y),null!==U&&(U=U.nextEffect))}l=cf;z=da();q=l.focusedElem;u=l.selectionRange;if(z!==q&&fa(document.documentElement,q)){null!==u&&Vd(q)&&(z=u.start,l=u.end,void 0===l&&(l=z),"selectionStart"in q?(q.selectionStart=z,q.selectionEnd=Math.min(l,q.value.length)):window.getSelection&&(z=window.getSelection(),
y=q[lb()].length,l=Math.min(u.start,y),u=void 0===u.end?l:Math.min(u.end,y),!z.extend&&l>u&&(y=u,u=l,l=y),y=Ud(q,l),D=Ud(q,u),y&&D&&(1!==z.rangeCount||z.anchorNode!==y.node||z.anchorOffset!==y.offset||z.focusNode!==D.node||z.focusOffset!==D.offset)&&(ja=document.createRange(),ja.setStart(y.node,y.offset),z.removeAllRanges(),l>u?(z.addRange(ja),z.extend(D.node,D.offset)):(ja.setEnd(D.node,D.offset),z.addRange(ja)))));z=[];for(l=q;l=l.parentNode;)1===l.nodeType&&z.push({element:l,left:l.scrollLeft,
top:l.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<z.length;q++)l=z[q],l.element.scrollLeft=l.left,l.element.scrollTop=l.top}cf=null;Kd(bf);bf=null;c.current=b;for(U=e;null!==U;){e=!1;q=void 0;try{for(z=d;null!==U;){var ig=U.effectTag;if(ig&36){var oc=U.alternate;l=U;u=z;switch(l.tag){case 2:var ca=l.stateNode;if(l.effectTag&4)if(null===oc)ca.props=l.memoizedProps,ca.state=l.memoizedState,ca.componentDidMount();else{var xi=oc.memoizedProps,yi=oc.memoizedState;ca.props=l.memoizedProps;
ca.state=l.memoizedState;ca.componentDidUpdate(xi,yi,ca.__reactInternalSnapshotBeforeUpdate)}var Og=l.updateQueue;null!==Og&&(ca.props=l.memoizedProps,ca.state=l.memoizedState,Xf(l,Og,ca,u));break;case 3:var Pg=l.updateQueue;if(null!==Pg){y=null;if(null!==l.child)switch(l.child.tag){case 5:y=l.child.stateNode;break;case 2:y=l.child.stateNode}Xf(l,Pg,y,u)}break;case 5:var zi=l.stateNode;null===oc&&l.effectTag&4&&df(l.type,l.memoizedProps)&&zi.focus();break;case 6:break;case 4:break;case 15:break;case 16:break;
default:A("163")}}if(ig&128){l=void 0;var yc=U.ref;if(null!==yc){var Qg=U.stateNode;switch(U.tag){case 5:l=Qg;break;default:l=Qg}"function"===typeof yc?yc(l):yc.current=l}}var Ai=U.nextEffect;U.nextEffect=null;U=Ai}}catch(Wa){e=!0,q=Wa}e&&(null===U?A("178"):void 0,$g(U,q),null!==U&&(U=U.nextEffect))}qh=uh=!1;"function"===typeof Kf&&Kf(b.stateNode);b=c.current.expirationTime;0===b&&(ih=null);a.remainingExpirationTime=b}function Ah(){return null===Qh||Qh.timeRemaining()>Th?!1:Nh=!0}
function gh(a){null===X?A("246"):void 0;X.remainingExpirationTime=0;Oh||(Oh=!0,Ph=a)}function Ch(a){null===X?A("246"):void 0;X.remainingExpirationTime=a}function ci(a,b){var c=Z;Z=!0;try{return a(b)}finally{(Z=c)||W||Xh()}}function di(a,b){if(Z&&!Rh){Rh=!0;try{return a(b)}finally{Rh=!1}}return a(b)}function ei(a,b){W?A("187"):void 0;var c=Z;Z=!0;try{return Jh(a,b)}finally{Z=c,Xh()}}
function fi(a,b,c){if(Eh)return a(b,c);Z||W||0===Fh||(Zh(Fh,!1,null),Fh=0);var d=Eh,e=Z;Z=Eh=!0;try{return a(b,c)}finally{Eh=d,(Z=e)||W||Xh()}}function gi(a){var b=Z;Z=!0;try{Jh(a)}finally{(Z=b)||W||Zh(1,!1,null)}}
function hi(a,b,c,d,e){var f=b.current;if(c){c=c._reactInternalFiber;var g;b:{2===kd(c)&&2===c.tag?void 0:A("170");for(g=c;3!==g.tag;){if(rf(g)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break b}(g=g.return)?void 0:A("171")}g=g.stateNode.context}c=rf(c)?wf(c,g):g}else c=ha;null===b.context?b.context=c:b.pendingContext=c;b=e;e=Pf(d);e.payload={element:a};b=void 0===b?null:b;null!==b&&(e.callback=b);Rf(f,e,d);pg(f,d);return d}
function ii(a){var b=a._reactInternalFiber;void 0===b&&("function"===typeof a.render?A("188"):A("268",Object.keys(a)));a=nd(b);return null===a?null:a.stateNode}function ji(a,b,c,d){var e=b.current,f=ng();e=og(f,e);return hi(a,b,c,e,d)}function ki(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}
function li(a){var b=a.findFiberByHostInstance;return Jf(p({},a,{findHostInstanceByFiber:function(a){a=nd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))}
var mi={updateContainerAtExpirationTime:hi,createContainer:function(a,b,c){return Ff(a,b,c)},updateContainer:ji,flushRoot:ai,requestWork:Bh,computeUniqueAsyncExpiration:Dh,batchedUpdates:ci,unbatchedUpdates:di,deferredUpdates:Ih,syncUpdates:Jh,interactiveUpdates:fi,flushInteractiveUpdates:function(){W||0===Fh||(Zh(Fh,!1,null),Fh=0)},flushControlled:gi,flushSync:ei,getPublicRootInstance:ki,findHostInstance:ii,findHostInstanceWithNoPortals:function(a){a=od(a);return null===a?null:a.stateNode},injectIntoDevTools:li};
function oi(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:hc,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}Kb.injectFiberControlledHostComponent(af);function pi(a){this._expirationTime=Dh();this._root=a;this._callbacks=this._next=null;this._hasChildren=this._didComplete=!1;this._children=null;this._defer=!0}
pi.prototype.render=function(a){this._defer?void 0:A("250");this._hasChildren=!0;this._children=a;var b=this._root._internalRoot,c=this._expirationTime,d=new qi;hi(a,b,null,c,d._onCommit);return d};pi.prototype.then=function(a){if(this._didComplete)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
pi.prototype.commit=function(){var a=this._root._internalRoot,b=a.firstBatch;this._defer&&null!==b?void 0:A("251");if(this._hasChildren){var c=this._expirationTime;if(b!==this){this._hasChildren&&(c=this._expirationTime=b._expirationTime,this.render(this._children));for(var d=null,e=b;e!==this;)d=e,e=e._next;null===d?A("251"):void 0;d._next=e._next;this._next=b;a.firstBatch=this}this._defer=!1;ai(a,c);b=this._next;this._next=null;b=a.firstBatch=b;null!==b&&b._hasChildren&&b.render(b._children)}else this._next=
null,this._defer=!1};pi.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++)(0,a[b])()}};function qi(){this._callbacks=null;this._didCommit=!1;this._onCommit=this._onCommit.bind(this)}qi.prototype.then=function(a){if(this._didCommit)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
qi.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++){var c=a[b];"function"!==typeof c?A("191",c):void 0;c()}}};function ri(a,b,c){this._internalRoot=Ff(a,b,c)}ri.prototype.render=function(a,b){var c=this._internalRoot,d=new qi;b=void 0===b?null:b;null!==b&&d.then(b);ji(a,c,null,d._onCommit);return d};
ri.prototype.unmount=function(a){var b=this._internalRoot,c=new qi;a=void 0===a?null:a;null!==a&&c.then(a);ji(null,b,null,c._onCommit);return c};ri.prototype.legacy_renderSubtreeIntoContainer=function(a,b,c){var d=this._internalRoot,e=new qi;c=void 0===c?null:c;null!==c&&e.then(c);ji(b,d,a,e._onCommit);return e};
ri.prototype.createBatch=function(){var a=new pi(this),b=a._expirationTime,c=this._internalRoot,d=c.firstBatch;if(null===d)c.firstBatch=a,a._next=null;else{for(c=null;null!==d&&d._expirationTime<=b;)c=d,d=d._next;a._next=d;null!==c&&(c._next=a)}return a};function si(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}Sb=mi.batchedUpdates;Tb=mi.interactiveUpdates;Ub=mi.flushInteractiveUpdates;
function ti(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new ri(a,!1,b)}
function ui(a,b,c,d,e){si(c)?void 0:A("200");var f=c._reactRootContainer;if(f){if("function"===typeof e){var g=e;e=function(){var a=ki(f._internalRoot);g.call(a)}}null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)}else{f=c._reactRootContainer=ti(c,d);if("function"===typeof e){var h=e;e=function(){var a=ki(f._internalRoot);h.call(a)}}di(function(){null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)})}return ki(f._internalRoot)}
function vi(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;si(b)?void 0:A("200");return oi(a,b,null,c)}
var wi={createPortal:vi,findDOMNode:function(a){return null==a?null:1===a.nodeType?a:ii(a)},hydrate:function(a,b,c){return ui(null,a,b,!0,c)},render:function(a,b,c){return ui(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?A("38"):void 0;return ui(a,b,c,!1,d)},unmountComponentAtNode:function(a){si(a)?void 0:A("40");return a._reactRootContainer?(di(function(){ui(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:function(){return vi.apply(void 0,
arguments)},unstable_batchedUpdates:ci,unstable_deferredUpdates:Ih,unstable_interactiveUpdates:fi,flushSync:ei,unstable_flushControlled:gi,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Ka,EventPluginRegistry:va,EventPropagators:$a,ReactControlledComponent:Rb,ReactDOMComponentTree:Qa,ReactDOMEventListener:Od},unstable_createRoot:function(a,b){return new ri(a,!0,null!=b&&!0===b.hydrate)}};li({findFiberByHostInstance:Na,bundleType:0,version:"16.4.2",rendererPackageName:"react-dom"});
var Bi={default:wi},Ci=Bi&&wi||Bi;module.exports=Ci.default?Ci.default:Ci;

},{"fbjs/lib/ExecutionEnvironment":13,"fbjs/lib/containsNode":16,"fbjs/lib/emptyFunction":17,"fbjs/lib/emptyObject":18,"fbjs/lib/getActiveElement":19,"fbjs/lib/invariant":22,"fbjs/lib/shallowEqual":25,"object-assign":40,"react":386}],368:[function(require,module,exports){
(function (process){
'use strict';

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react-dom.development.js":366,"./cjs/react-dom.production.min.js":367,"_process":41}],369:[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;
exports.createProvider = createProvider;

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _PropTypes = require('../utils/PropTypes');

var _warning = require('../utils/warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var didWarnAboutReceivingStore = false;
function warnAboutReceivingStore() {
  if (didWarnAboutReceivingStore) {
    return;
  }
  didWarnAboutReceivingStore = true;

  (0, _warning2.default)('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}

function createProvider() {
  var _Provider$childContex;

  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  var subKey = arguments[1];

  var subscriptionKey = subKey || storeKey + 'Subscription';

  var Provider = function (_Component) {
    _inherits(Provider, _Component);

    Provider.prototype.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
    };

    function Provider(props, context) {
      _classCallCheck(this, Provider);

      var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

      _this[storeKey] = props.store;
      return _this;
    }

    Provider.prototype.render = function render() {
      return _react.Children.only(this.props.children);
    };

    return Provider;
  }(_react.Component);

  if (process.env.NODE_ENV !== 'production') {
    Provider.prototype.componentWillReceiveProps = function (nextProps) {
      if (this[storeKey] !== nextProps.store) {
        warnAboutReceivingStore();
      }
    };
  }

  Provider.propTypes = {
    store: _PropTypes.storeShape.isRequired,
    children: _propTypes2.default.element.isRequired
  };
  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = _PropTypes.storeShape.isRequired, _Provider$childContex[subscriptionKey] = _PropTypes.subscriptionShape, _Provider$childContex);

  return Provider;
}

exports.default = createProvider();
}).call(this,require('_process'))
},{"../utils/PropTypes":379,"../utils/warning":383,"_process":41,"prop-types":45,"react":386}],370:[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = connectAdvanced;

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _Subscription = require('../utils/Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

var _PropTypes = require('../utils/PropTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var hotReloadingVersion = 0;
var dummyState = {};
function noop() {}
function makeSelectorStateful(sourceSelector, store) {
  // wrap the selector in an object that tracks its results between runs.
  var selector = {
    run: function runComponentSelector(props) {
      try {
        var nextProps = sourceSelector(store.getState(), props);
        if (nextProps !== selector.props || selector.error) {
          selector.shouldComponentUpdate = true;
          selector.props = nextProps;
          selector.error = null;
        }
      } catch (error) {
        selector.shouldComponentUpdate = true;
        selector.error = error;
      }
    }
  };

  return selector;
}

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory) {
  var _contextTypes, _childContextTypes;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$getDisplayName = _ref.getDisplayName,
      getDisplayName = _ref$getDisplayName === undefined ? function (name) {
    return 'ConnectAdvanced(' + name + ')';
  } : _ref$getDisplayName,
      _ref$methodName = _ref.methodName,
      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
      _ref$renderCountProp = _ref.renderCountProp,
      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
      _ref$storeKey = _ref.storeKey,
      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
      _ref$withRef = _ref.withRef,
      withRef = _ref$withRef === undefined ? false : _ref$withRef,
      connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

  var subscriptionKey = storeKey + 'Subscription';
  var version = hotReloadingVersion++;

  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = _PropTypes.storeShape, _contextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _childContextTypes);

  return function wrapWithConnect(WrappedComponent) {
    (0, _invariant2.default)(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + (methodName + '. Instead received ' + JSON.stringify(WrappedComponent)));

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      withRef: withRef,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });

    var Connect = function (_Component) {
      _inherits(Connect, _Component);

      function Connect(props, context) {
        _classCallCheck(this, Connect);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.version = version;
        _this.state = {};
        _this.renderCount = 0;
        _this.store = props[storeKey] || context[storeKey];
        _this.propsMode = Boolean(props[storeKey]);
        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);

        (0, _invariant2.default)(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

        _this.initSelector();
        _this.initSubscription();
        return _this;
      }

      Connect.prototype.getChildContext = function getChildContext() {
        var _ref2;

        // If this component received store from props, its subscription should be transparent
        // to any descendants receiving store+subscription from context; it passes along
        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
        // Connect to control ordering of notifications to flow top-down.
        var subscription = this.propsMode ? null : this.subscription;
        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
      };

      Connect.prototype.componentDidMount = function componentDidMount() {
        if (!shouldHandleStateChanges) return;

        // componentWillMount fires during server side rendering, but componentDidMount and
        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
        // To handle the case where a child component may have triggered a state change by
        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
        // re-render.
        this.subscription.trySubscribe();
        this.selector.run(this.props);
        if (this.selector.shouldComponentUpdate) this.forceUpdate();
      };

      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.selector.run(nextProps);
      };

      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
        return this.selector.shouldComponentUpdate;
      };

      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.subscription) this.subscription.tryUnsubscribe();
        this.subscription = null;
        this.notifyNestedSubs = noop;
        this.store = null;
        this.selector.run = noop;
        this.selector.shouldComponentUpdate = false;
      };

      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
        (0, _invariant2.default)(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
        return this.wrappedInstance;
      };

      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
        this.wrappedInstance = ref;
      };

      Connect.prototype.initSelector = function initSelector() {
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
        this.selector = makeSelectorStateful(sourceSelector, this.store);
        this.selector.run(this.props);
      };

      Connect.prototype.initSubscription = function initSubscription() {
        if (!shouldHandleStateChanges) return;

        // parentSub's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.
        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
        this.subscription = new _Subscription2.default(this.store, parentSub, this.onStateChange.bind(this));

        // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in
        // the middle of the notification loop, where `this.subscription` will then be null. An
        // extra null check every change can be avoided by copying the method onto `this` and then
        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
        // listeners logic is changed to not call listeners that have been unsubscribed in the
        // middle of the notification loop.
        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
      };

      Connect.prototype.onStateChange = function onStateChange() {
        this.selector.run(this.props);

        if (!this.selector.shouldComponentUpdate) {
          this.notifyNestedSubs();
        } else {
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
          this.setState(dummyState);
        }
      };

      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
        // needs to notify nested subs. Once called, it unimplements itself until further state
        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
        // a boolean check every time avoids an extra method call most of the time, resulting
        // in some perf boost.
        this.componentDidUpdate = undefined;
        this.notifyNestedSubs();
      };

      Connect.prototype.isSubscribed = function isSubscribed() {
        return Boolean(this.subscription) && this.subscription.isSubscribed();
      };

      Connect.prototype.addExtraProps = function addExtraProps(props) {
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;
        // make a shallow copy so that fields added don't leak to the original selector.
        // this is especially important for 'ref' since that's a reference back to the component
        // instance. a singleton memoized selector would then be holding a reference to the
        // instance, preventing the instance from being garbage collected, and that would be bad
        var withExtras = _extends({}, props);
        if (withRef) withExtras.ref = this.setWrappedInstance;
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
        return withExtras;
      };

      Connect.prototype.render = function render() {
        var selector = this.selector;
        selector.shouldComponentUpdate = false;

        if (selector.error) {
          throw selector.error;
        } else {
          return (0, _react.createElement)(WrappedComponent, this.addExtraProps(selector.props));
        }
      };

      return Connect;
    }(_react.Component);

    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    Connect.childContextTypes = childContextTypes;
    Connect.contextTypes = contextTypes;
    Connect.propTypes = contextTypes;

    if (process.env.NODE_ENV !== 'production') {
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
        var _this2 = this;

        // We are hot reloading!
        if (this.version !== version) {
          this.version = version;
          this.initSelector();

          // If any connected descendants don't hot reload (and resubscribe in the process), their
          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
          // listeners, this does mean that the old versions of connected descendants will still be
          // notified of state changes; however, their onStateChange function is a no-op so this
          // isn't a huge deal.
          var oldListeners = [];

          if (this.subscription) {
            oldListeners = this.subscription.listeners.get();
            this.subscription.tryUnsubscribe();
          }
          this.initSubscription();
          if (shouldHandleStateChanges) {
            this.subscription.trySubscribe();
            oldListeners.forEach(function (listener) {
              return _this2.subscription.listeners.subscribe(listener);
            });
          }
        }
      };
    }

    return (0, _hoistNonReactStatics2.default)(Connect, WrappedComponent);
  };
}
}).call(this,require('_process'))
},{"../utils/PropTypes":379,"../utils/Subscription":380,"_process":41,"hoist-non-react-statics":27,"invariant":28,"react":386}],371:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createConnect = createConnect;

var _connectAdvanced = require('../components/connectAdvanced');

var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

var _shallowEqual = require('../utils/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _mapDispatchToProps = require('./mapDispatchToProps');

var _mapDispatchToProps2 = _interopRequireDefault(_mapDispatchToProps);

var _mapStateToProps = require('./mapStateToProps');

var _mapStateToProps2 = _interopRequireDefault(_mapStateToProps);

var _mergeProps = require('./mergeProps');

var _mergeProps2 = _interopRequireDefault(_mergeProps);

var _selectorFactory = require('./selectorFactory');

var _selectorFactory2 = _interopRequireDefault(_selectorFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
  };
}

function strictEqual(a, b) {
  return a === b;
}

// createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios
function createConnect() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === undefined ? _connectAdvanced2.default : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? _mapStateToProps2.default : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? _mapDispatchToProps2.default : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === undefined ? _mergeProps2.default : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === undefined ? _selectorFactory2.default : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref2$pure = _ref2.pure,
        pure = _ref2$pure === undefined ? true : _ref2$pure,
        _ref2$areStatesEqual = _ref2.areStatesEqual,
        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? _shallowEqual2.default : _ref2$areOwnPropsEqua,
        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? _shallowEqual2.default : _ref2$areStatePropsEq,
        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? _shallowEqual2.default : _ref2$areMergedPropsE,
        extraOptions = _objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');

    return connectHOC(selectorFactory, _extends({
      // used in error messages
      methodName: 'connect',

      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return 'Connect(' + name + ')';
      },

      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),

      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual

    }, extraOptions));
  };
}

exports.default = createConnect();
},{"../components/connectAdvanced":370,"../utils/shallowEqual":381,"./mapDispatchToProps":372,"./mapStateToProps":373,"./mergeProps":374,"./selectorFactory":375}],372:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;

var _redux = require('redux');

var _wrapMapToProps = require('./wrapMapToProps');

function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}

function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
    return { dispatch: dispatch };
  }) : undefined;
}

function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
    return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
  }) : undefined;
}

exports.default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
},{"./wrapMapToProps":377,"redux":387}],373:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;

var _wrapMapToProps = require('./wrapMapToProps');

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
}

function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
    return {};
  }) : undefined;
}

exports.default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
},{"./wrapMapToProps":377}],374:[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.defaultMergeProps = defaultMergeProps;
exports.wrapMergePropsFunc = wrapMergePropsFunc;
exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;

var _verifyPlainObject = require('../utils/verifyPlainObject');

var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;

    var hasRunOnce = false;
    var mergedProps = void 0;

    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;

        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

exports.default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
}).call(this,require('_process'))
},{"../utils/verifyPlainObject":382,"_process":41}],375:[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;
exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
exports.default = finalPropsSelectorFactory;

var _verifySubselectors = require('./verifySubselectors');

var _verifySubselectors2 = _interopRequireDefault(_verifySubselectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}

function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;

  var hasRunAtLeastOnce = false;
  var state = void 0;
  var ownProps = void 0;
  var stateProps = void 0;
  var dispatchProps = void 0;
  var mergedProps = void 0;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;

    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);

    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;

    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = _objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (process.env.NODE_ENV !== 'production') {
    (0, _verifySubselectors2.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;

  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
}).call(this,require('_process'))
},{"./verifySubselectors":376,"_process":41}],376:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = verifySubselectors;

var _warning = require('../utils/warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      (0, _warning2.default)('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}
},{"../utils/warning":383}],377:[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;
exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
exports.getDependsOnOwnProps = getDependsOnOwnProps;
exports.wrapMapToPropsFunc = wrapMapToPropsFunc;

var _verifyPlainObject = require('../utils/verifyPlainObject');

var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
// 
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
// 
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//    
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//    
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//    
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };

    // allow detectFactoryAndVerify to get ownProps
    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(props, displayName, methodName);

      return props;
    };

    return proxy;
  };
}
}).call(this,require('_process'))
},{"../utils/verifyPlainObject":382,"_process":41}],378:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.connect = exports.connectAdvanced = exports.createProvider = exports.Provider = undefined;

var _Provider = require('./components/Provider');

var _Provider2 = _interopRequireDefault(_Provider);

var _connectAdvanced = require('./components/connectAdvanced');

var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

var _connect = require('./connect/connect');

var _connect2 = _interopRequireDefault(_connect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Provider = _Provider2.default;
exports.createProvider = _Provider.createProvider;
exports.connectAdvanced = _connectAdvanced2.default;
exports.connect = _connect2.default;
},{"./components/Provider":369,"./components/connectAdvanced":370,"./connect/connect":371}],379:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.storeShape = exports.subscriptionShape = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var subscriptionShape = exports.subscriptionShape = _propTypes2.default.shape({
  trySubscribe: _propTypes2.default.func.isRequired,
  tryUnsubscribe: _propTypes2.default.func.isRequired,
  notifyNestedSubs: _propTypes2.default.func.isRequired,
  isSubscribed: _propTypes2.default.func.isRequired
});

var storeShape = exports.storeShape = _propTypes2.default.shape({
  subscribe: _propTypes2.default.func.isRequired,
  dispatch: _propTypes2.default.func.isRequired,
  getState: _propTypes2.default.func.isRequired
});
},{"prop-types":45}],380:[function(require,module,exports){
"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants

var CLEARED = null;
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  // the current/next pattern is copied from redux's createStore code.
  // TODO: refactor+expose that code to be reusable here?
  var current = [];
  var next = [];

  return {
    clear: function clear() {
      next = CLEARED;
      current = CLEARED;
    },
    notify: function notify() {
      var listeners = current = next;
      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    },
    get: function get() {
      return next;
    },
    subscribe: function subscribe(listener) {
      var isSubscribed = true;
      if (next === current) next = current.slice();
      next.push(listener);

      return function unsubscribe() {
        if (!isSubscribed || current === CLEARED) return;
        isSubscribed = false;

        if (next === current) next = current.slice();
        next.splice(next.indexOf(listener), 1);
      };
    }
  };
}

var Subscription = function () {
  function Subscription(store, parentSub, onStateChange) {
    _classCallCheck(this, Subscription);

    this.store = store;
    this.parentSub = parentSub;
    this.onStateChange = onStateChange;
    this.unsubscribe = null;
    this.listeners = nullListeners;
  }

  Subscription.prototype.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  Subscription.prototype.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  Subscription.prototype.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);

      this.listeners = createListenerCollection();
    }
  };

  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();

exports.default = Subscription;
},{}],381:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = shallowEqual;
var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}
},{}],382:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = verifyPlainObject;

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _warning = require('./warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function verifyPlainObject(value, displayName, methodName) {
  if (!(0, _isPlainObject2.default)(value)) {
    (0, _warning2.default)(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
  }
}
},{"./warning":383,"lodash/isPlainObject":39}],383:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = warning;
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}
},{}],384:[function(require,module,exports){
(function (process){
/** @license React v16.4.2
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var _assign = require('object-assign');
var invariant = require('fbjs/lib/invariant');
var emptyObject = require('fbjs/lib/emptyObject');
var warning = require('fbjs/lib/warning');
var emptyFunction = require('fbjs/lib/emptyFunction');
var checkPropTypes = require('prop-types/checkPropTypes');

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.4.2';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_TIMEOUT_TYPE = hasSymbol ? Symbol.for('react.timeout') : 0xead1;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

// Relying on the `invariant()` implementation lets us
// have preserve the format and params in the www builds.

// Exports ReactDOM.createRoot


// Experimental error-boundary API that can recover from errors within a single
// render phase

// Suspense
var enableSuspense = false;
// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:


// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.


// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


// Warn about legacy context API


// Gather advanced timing metrics for Profiler subtrees.


// Only used in www builds.

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + '.' + callerName;
    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }
    warning(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

/**
 * Base class helpers for the updating state of a component.
 */
function Component(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
Component.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
        return undefined;
      }
    });
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}
ComponentDummy.prototype = Component.prototype;

/**
 * Convenience component with default shallow equality check for sCU.
 */
function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent;
// Avoid an extra prototype jump for these methods.
_assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };
  {
    Object.seal(refObject);
  }
  return refObject;
}

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown = void 0;
var specialPropRefWarningShown = void 0;

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    });
    // self and source are DEV only properties.
    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    });
    // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.
    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */
function createElement(type, config, children) {
  var propName = void 0;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}

/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */


function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
}

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */
function cloneElement(element, config, children) {
  !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

  var propName = void 0;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps = void 0;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var ReactDebugCurrentFrame = {};

{
  // Component that is being worked on
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var impl = ReactDebugCurrentFrame.getCurrentStack;
    if (impl) {
      return impl();
    }
    return null;
  };
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */
function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];
function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;
  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;
      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }
    }
  }

  if (invokeCallback) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child = void 0;
  var nextName = void 0;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (typeof iteratorFn === 'function') {
      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          !didWarnAboutMaps ? warning(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum()) : void 0;
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step = void 0;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }
      var childrenString = '' + children;
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children) {
  return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warning(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    _defaultValue: defaultValue,
    _currentValue: defaultValue,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue2: defaultValue,
    _changedBits: 0,
    _changedBits2: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };

  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  context.Consumer = context;

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function forwardRef(render) {
  {
    !(typeof render === 'function') ? warning(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render) : void 0;

    if (render != null) {
      !(render.defaultProps == null && render.propTypes == null) ? warning(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

var describeComponentFrame = function (name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' ||
  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_TIMEOUT_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
}

function getComponentName(fiber) {
  var type = fiber.type;

  if (typeof type === 'function') {
    return type.displayName || type.name;
  }
  if (typeof type === 'string') {
    return type;
  }
  switch (type) {
    case REACT_ASYNC_MODE_TYPE:
      return 'AsyncMode';
    case REACT_CONTEXT_TYPE:
      return 'Context.Consumer';
    case REACT_FRAGMENT_TYPE:
      return 'ReactFragment';
    case REACT_PORTAL_TYPE:
      return 'ReactPortal';
    case REACT_PROFILER_TYPE:
      return 'Profiler(' + fiber.pendingProps.id + ')';
    case REACT_PROVIDER_TYPE:
      return 'Context.Provider';
    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';
    case REACT_TIMEOUT_TYPE:
      return 'Timeout';
  }
  if (typeof type === 'object' && type !== null) {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        var functionName = type.render.displayName || type.render.name || '';
        return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
    }
  }
  return null;
}

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

var currentlyValidatingElement = void 0;
var propTypesMisspellWarningShown = void 0;

var getDisplayName = function () {};
var getStackAddendum = function () {};

{
  currentlyValidatingElement = null;

  propTypesMisspellWarningShown = false;

  getDisplayName = function (element) {
    if (element == null) {
      return '#empty';
    } else if (typeof element === 'string' || typeof element === 'number') {
      return '#text';
    } else if (typeof element.type === 'string') {
      return element.type;
    }

    var type = element.type;
    if (type === REACT_FRAGMENT_TYPE) {
      return 'React.Fragment';
    } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
      var functionName = type.render.displayName || type.render.name || '';
      return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
    } else {
      return type.displayName || type.name || 'Unknown';
    }
  };

  getStackAddendum = function () {
    var stack = '';
    if (currentlyValidatingElement) {
      var name = getDisplayName(currentlyValidatingElement);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
    }
    stack += ReactDebugCurrentFrame.getStackAddendum() || '';
    return stack;
  };
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current);
    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
  }

  currentlyValidatingElement = element;
  {
    warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
  }
  currentlyValidatingElement = null;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step = void 0;
        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var type = element.type;
  var name = void 0,
      propTypes = void 0;
  if (typeof type === 'function') {
    // Class or functional component
    name = type.displayName || type.name;
    propTypes = type.propTypes;
  } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
    // ForwardRef
    var functionName = type.render.displayName || type.render.name || '';
    name = functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
    propTypes = type.propTypes;
  } else {
    return;
  }
  if (propTypes) {
    currentlyValidatingElement = element;
    checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
    currentlyValidatingElement = null;
  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
    propTypesMisspellWarningShown = true;
    warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
  }
  if (typeof type.getDefaultProps === 'function') {
    !type.getDefaultProps.isReactClassApproved ? warning(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */
function validateFragmentProps(fragment) {
  currentlyValidatingElement = fragment;

  var keys = Object.keys(fragment.props);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (key !== 'children' && key !== 'key') {
      warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
      break;
    }
  }

  if (fragment.ref !== null) {
    warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
  }

  currentlyValidatingElement = null;
}

function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type);

  // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.
  if (!validType) {
    var info = '';
    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendum(props);
    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    info += getStackAddendum() || '';

    var typeString = void 0;
    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else {
      typeString = typeof type;
    }

    warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
  }

  var element = createElement.apply(this, arguments);

  // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.
  if (element == null) {
    return element;
  }

  // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)
  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}

function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;
  // Legacy hook: remove it
  {
    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}

function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);
  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }
  validatePropTypes(newElement);
  return newElement;
}

var React = {
  Children: {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  },

  createRef: createRef,
  Component: Component,
  PureComponent: PureComponent,

  createContext: createContext,
  forwardRef: forwardRef,

  Fragment: REACT_FRAGMENT_TYPE,
  StrictMode: REACT_STRICT_MODE_TYPE,
  unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
  unstable_Profiler: REACT_PROFILER_TYPE,

  createElement: createElementWithValidation,
  cloneElement: cloneElementWithValidation,
  createFactory: createFactoryWithValidation,
  isValidElement: isValidElement,

  version: ReactVersion,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: ReactCurrentOwner,
    // Used by renderers to avoid bundling object-assign twice in UMD bundles:
    assign: _assign
  }
};

if (enableSuspense) {
  React.Timeout = REACT_TIMEOUT_TYPE;
}

{
  _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}



var React$2 = Object.freeze({
	default: React
});

var React$3 = ( React$2 && React ) || React$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var react = React$3.default ? React$3.default : React$3;

module.exports = react;
  })();
}

}).call(this,require('_process'))
},{"_process":41,"fbjs/lib/emptyFunction":17,"fbjs/lib/emptyObject":18,"fbjs/lib/invariant":22,"fbjs/lib/warning":26,"object-assign":40,"prop-types/checkPropTypes":42}],385:[function(require,module,exports){
/** @license React v16.4.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';var k=require("object-assign"),n=require("fbjs/lib/invariant"),p=require("fbjs/lib/emptyObject"),q=require("fbjs/lib/emptyFunction"),r="function"===typeof Symbol&&Symbol.for,t=r?Symbol.for("react.element"):60103,u=r?Symbol.for("react.portal"):60106,v=r?Symbol.for("react.fragment"):60107,w=r?Symbol.for("react.strict_mode"):60108,x=r?Symbol.for("react.profiler"):60114,y=r?Symbol.for("react.provider"):60109,z=r?Symbol.for("react.context"):60110,A=r?Symbol.for("react.async_mode"):60111,B=
r?Symbol.for("react.forward_ref"):60112;r&&Symbol.for("react.timeout");var C="function"===typeof Symbol&&Symbol.iterator;function D(a){for(var b=arguments.length-1,e="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)e+="&args[]="+encodeURIComponent(arguments[c+1]);n(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e)}
var E={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function F(a,b,e){this.props=a;this.context=b;this.refs=p;this.updater=e||E}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?D("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function G(){}
G.prototype=F.prototype;function H(a,b,e){this.props=a;this.context=b;this.refs=p;this.updater=e||E}var I=H.prototype=new G;I.constructor=H;k(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,e){var c=void 0,d={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,c)&&!L.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];d.children=l}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:t,type:a,key:g,ref:h,props:d,_owner:J.current}}
function N(a){return"object"===typeof a&&null!==a&&a.$$typeof===t}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\/+/g,P=[];function Q(a,b,e,c){if(P.length){var d=P.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}
function S(a,b,e,c){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case t:case u:g=!0}}if(g)return e(c,a,""===b?"."+T(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var h=0;h<a.length;h++){d=a[h];var f=b+T(d,h);g+=S(d,f,e,c)}else if(null===a||"undefined"===typeof a?f=null:(f=C&&a[C]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),
h=0;!(d=a.next()).done;)d=d.value,f=b+T(d,h++),g+=S(d,f,e,c);else"object"===d&&(e=""+a,D("31","[object Object]"===e?"object with keys {"+Object.keys(a).join(", ")+"}":e,""));return g}function T(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function U(a,b){a.func.call(a.context,b,a.count++)}
function V(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,e,q.thatReturnsArgument):null!=a&&(N(a)&&(b=d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+e,a={$$typeof:t,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}),c.push(a))}function W(a,b,e,c,d){var g="";null!=e&&(g=(""+e).replace(O,"$&/")+"/");b=Q(b,g,c,d);null==a||S(a,"",V,b);R(b)}
var X={Children:{map:function(a,b,e){if(null==a)return a;var c=[];W(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=Q(null,null,b,e);null==a||S(a,"",U,b);R(b)},count:function(a){return null==a?0:S(a,"",q.thatReturnsNull,null)},toArray:function(a){var b=[];W(a,b,null,q.thatReturnsArgument);return b},only:function(a){N(a)?void 0:D("143");return a}},createRef:function(){return{current:null}},Component:F,PureComponent:H,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:z,
_calculateChangedBits:b,_defaultValue:a,_currentValue:a,_currentValue2:a,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null};a.Provider={$$typeof:y,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:B,render:a}},Fragment:v,StrictMode:w,unstable_AsyncMode:A,unstable_Profiler:x,createElement:M,cloneElement:function(a,b,e){null===a||void 0===a?D("267",a):void 0;var c=void 0,d=k({},a.props),g=a.key,h=a.ref,f=a._owner;if(null!=b){void 0!==b.ref&&(h=b.ref,f=J.current);void 0!==
b.key&&(g=""+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)K.call(b,c)&&!L.hasOwnProperty(c)&&(d[c]=void 0===b[c]&&void 0!==l?l[c]:b[c])}c=arguments.length-2;if(1===c)d.children=e;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];d.children=l}return{$$typeof:t,type:a.type,key:g,ref:h,props:d,_owner:f}},createFactory:function(a){var b=M.bind(null,a);b.type=a;return b},isValidElement:N,version:"16.4.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:J,
assign:k}},Y={default:X},Z=Y&&X||Y;module.exports=Z.default?Z.default:Z;

},{"fbjs/lib/emptyFunction":17,"fbjs/lib/emptyObject":18,"fbjs/lib/invariant":22,"object-assign":40}],386:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react.development.js":384,"./cjs/react.production.min.js":385,"_process":41}],387:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var $$observable = _interopDefault(require('symbol-observable'));

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var ActionTypes = {
  INIT: '@@redux/INIT' + Math.random().toString(36).substring(7).split('').join('.'),
  REPLACE: '@@redux/REPLACE' + Math.random().toString(36).substring(7).split('').join('.')
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) return false;

  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */
function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */
  function getState() {
    if (isDispatching) {
      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
    }

    return currentState;
  }

  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */
  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected the listener to be a function.');
    }

    if (isDispatching) {
      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }

  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.REPLACE });
  }

  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */
  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object' || observer === null) {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, _ref[$$observable] = function () {
      return this;
    }, _ref;
  }

  // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.
  dispatch({ type: ActionTypes.INIT });

  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty
}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionDescription = actionType && 'action "' + String(actionType) + '"' || 'an action';

  return 'Given ' + actionDescription + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });

  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });

  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: ActionTypes.INIT });

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
    }
  });
}

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */
function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        warning('No reducer provided for key "' + key + '"');
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);

  var unexpectedKeyCache = void 0;
  if (process.env.NODE_ENV !== 'production') {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError = void 0;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if ((typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) !== 'object' || actionCreators === null) {
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(undefined, arguments));
    };
  });
}

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var store = createStore.apply(undefined, args);
      var _dispatch = function dispatch() {
        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(undefined, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(undefined, chain)(store.dispatch);

      return _extends({}, store, {
        dispatch: _dispatch
      });
    };
  };
}

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */
function isCrushed() {}

if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning("You are currently using minified code outside of NODE_ENV === 'production'. " + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
}

exports.createStore = createStore;
exports.combineReducers = combineReducers;
exports.bindActionCreators = bindActionCreators;
exports.applyMiddleware = applyMiddleware;
exports.compose = compose;
exports.__DO_NOT_USE__ActionTypes = ActionTypes;

}).call(this,require('_process'))
},{"_process":41,"symbol-observable":388}],388:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = require('./ponyfill.js');

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./ponyfill.js":389}],389:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};
},{}],390:[function(require,module,exports){
"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var leven_1 = __importDefault(require("leven"));
var ramda_1 = __importDefault(require("ramda"));
var constants_1 = require("./constants");
exports.range = ramda_1.default.range(0);
var getCol = function (index) { return Math.floor(index / constants_1.BOARD_HEIGHT); };
var getRow = function (index) { return ramda_1.default.modulo(index, constants_1.BOARD_WIDTH); };
var removeEmpty = ramda_1.default.reject(ramda_1.default.isEmpty);
/**
 * A map of the valid moves from each node.  Basically a graph.
 * @example {
 *  0: [1, 4, 5]
 *  1: [0, 2, 4, 5, 6]
 *  ...
 * }
 */
var adjacencyMap = exports.range(constants_1.BOARD_WIDTH * constants_1.BOARD_HEIGHT)
    .reduce(function (acc, i) {
    acc[i] = exports.range(constants_1.BOARD_WIDTH * constants_1.BOARD_HEIGHT).filter(function (j) {
        var distSq = Math.pow((getRow(i) - getRow(j)), 2)
            + Math.pow((getCol(i) - getCol(j)), 2);
        return distSq > 0 && distSq <= 2;
    });
    return acc;
}, {});
function getAdjacent(index) {
    return adjacencyMap[index];
}
function getAvailableMoves(path, maxLength) {
    if (maxLength === void 0) { maxLength = constants_1.MAX_WORD_LENGTH; }
    if (ramda_1.default.isEmpty(path)) {
        return exports.range(constants_1.BOARD_WIDTH * constants_1.BOARD_HEIGHT);
    }
    return (path.length < maxLength) ?
        ramda_1.default.difference(getAdjacent(ramda_1.default.last(path)), path) : [];
}
exports.getAvailableMoves = getAvailableMoves;
function getLetterFromBoard(board, index) {
    return board[index];
}
exports.getLetterFromBoard = getLetterFromBoard;
function isMatch(test) {
    var numWildcards = ramda_1.default.filter(function (char) { return char === '*'; }, Array.from(test)).length;
    if (numWildcards === 0) {
        return ramda_1.default.equals(test);
    }
    return function (candidate) { return leven_1.default(test, candidate) <= numWildcards; };
}
function isWord(words, str) {
    return ramda_1.default.contains(ramda_1.default.toLower(str), words);
}
function getWords(words, str) {
    if (ramda_1.default.isEmpty(str)) {
        return [];
    }
    var candidate = ramda_1.default.toLower(str);
    if (!candidate.includes('*')) {
        return (isWord(words, candidate)) ? [candidate] : [];
    }
    var numWildcards = ramda_1.default.filter(function (char) { return char === '*'; }, Array.from(candidate)).length;
    return ramda_1.default.filter(function (word) { return leven_1.default(word, candidate) <= numWildcards; }, Array.from(words));
}
exports.getWords = getWords;
function getWordsMatchingPrefix(prefix, words) {
    var isMatchPrefix = isMatch(prefix);
    return words
        .map(function (word) { return ({ fragment: ramda_1.default.slice(0, prefix.length, word), word: word }); })
        .filter(function (_a) {
        var fragment = _a.fragment;
        return isMatchPrefix(fragment);
    })
        .map(ramda_1.default.prop('word'));
}
exports.getWordsMatchingPrefix = getWordsMatchingPrefix;
/**
 * Generate all the words from a board that start with the given path.
 * @yields {string}
 */
function BFS(board, words, currentPath, maxLength) {
    var e_1, _a, stringSoFar, candidateWords, nextNodes, nextPaths, nextPaths_1, nextPaths_1_1, path, e_1_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                stringSoFar = pathToString(board, currentPath);
                if (!(currentPath.length > 2)) return [3 /*break*/, 2];
                return [5 /*yield**/, __values(getWords(words, stringSoFar))];
            case 1:
                _b.sent();
                _b.label = 2;
            case 2:
                candidateWords = getWordsMatchingPrefix(stringSoFar, words);
                if (candidateWords.length === 0) {
                    return [2 /*return*/];
                }
                nextNodes = getAvailableMoves(currentPath, maxLength);
                nextPaths = nextNodes.map(function (index) { return __spread(currentPath, [index]); });
                _b.label = 3;
            case 3:
                _b.trys.push([3, 8, 9, 10]);
                nextPaths_1 = __values(nextPaths), nextPaths_1_1 = nextPaths_1.next();
                _b.label = 4;
            case 4:
                if (!!nextPaths_1_1.done) return [3 /*break*/, 7];
                path = nextPaths_1_1.value;
                return [5 /*yield**/, __values(BFS(board, candidateWords, path, maxLength))];
            case 5:
                _b.sent();
                _b.label = 6;
            case 6:
                nextPaths_1_1 = nextPaths_1.next();
                return [3 /*break*/, 4];
            case 7: return [3 /*break*/, 10];
            case 8:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 10];
            case 9:
                try {
                    if (nextPaths_1_1 && !nextPaths_1_1.done && (_a = nextPaths_1.return)) _a.call(nextPaths_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 10: return [2 /*return*/];
        }
    });
}
function pathToString(board, path) {
    return path.map(function (i) { return getLetterFromBoard(board, i); }).map(ramda_1.default.toLower).join('');
}
exports.pathToString = pathToString;
function solve(words, board) {
    var e_2, _a;
    var solution = [];
    try {
        for (var _b = __values(BFS(board, words, [], constants_1.MAX_WORD_LENGTH)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var word = _c.value;
            solution.push(word);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return removeEmpty(ramda_1.default.uniq(solution));
}
exports.solve = solve;

},{"./constants":11,"leven":29,"ramda":131}]},{},[10]);
